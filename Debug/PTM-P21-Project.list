
PTM-P21-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009914  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08009aa0  08009aa0  00019aa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d30  08009d30  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009d30  08009d30  00019d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d38  08009d38  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d38  08009d38  00019d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d3c  08009d3c  00019d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a8  200001e4  08009f24  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b8c  08009f24  00020b8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013be9  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002775  00000000  00000000  00033dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013f8  00000000  00000000  00036578  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012d0  00000000  00000000  00037970  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000222c7  00000000  00000000  00038c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010fc3  00000000  00000000  0005af07  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d36a5  00000000  00000000  0006beca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013f56f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d9c  00000000  00000000  0013f5ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e4 	.word	0x200001e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009a84 	.word	0x08009a84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e8 	.word	0x200001e8
 80001c4:	08009a84 	.word	0x08009a84

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b972 	b.w	8000e3c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9e08      	ldr	r6, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	4688      	mov	r8, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d14b      	bne.n	8000c16 <__udivmoddi4+0xa6>
 8000b7e:	428a      	cmp	r2, r1
 8000b80:	4615      	mov	r5, r2
 8000b82:	d967      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	b14a      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8a:	f1c2 0720 	rsb	r7, r2, #32
 8000b8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b92:	fa20 f707 	lsr.w	r7, r0, r7
 8000b96:	4095      	lsls	r5, r2
 8000b98:	ea47 0803 	orr.w	r8, r7, r3
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ba8:	fa1f fc85 	uxth.w	ip, r5
 8000bac:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bb0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb4:	fb07 f10c 	mul.w	r1, r7, ip
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18eb      	adds	r3, r5, r3
 8000bbe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bc2:	f080 811b 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8118 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bcc:	3f02      	subs	r7, #2
 8000bce:	442b      	add	r3, r5
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be4:	45a4      	cmp	ip, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	192c      	adds	r4, r5, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	f080 8107 	bcs.w	8000e00 <__udivmoddi4+0x290>
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	f240 8104 	bls.w	8000e00 <__udivmoddi4+0x290>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	442c      	add	r4, r5
 8000bfc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c00:	eba4 040c 	sub.w	r4, r4, ip
 8000c04:	2700      	movs	r7, #0
 8000c06:	b11e      	cbz	r6, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c10:	4639      	mov	r1, r7
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d909      	bls.n	8000c2e <__udivmoddi4+0xbe>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	f000 80eb 	beq.w	8000df6 <__udivmoddi4+0x286>
 8000c20:	2700      	movs	r7, #0
 8000c22:	e9c6 0100 	strd	r0, r1, [r6]
 8000c26:	4638      	mov	r0, r7
 8000c28:	4639      	mov	r1, r7
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	fab3 f783 	clz	r7, r3
 8000c32:	2f00      	cmp	r7, #0
 8000c34:	d147      	bne.n	8000cc6 <__udivmoddi4+0x156>
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d302      	bcc.n	8000c40 <__udivmoddi4+0xd0>
 8000c3a:	4282      	cmp	r2, r0
 8000c3c:	f200 80fa 	bhi.w	8000e34 <__udivmoddi4+0x2c4>
 8000c40:	1a84      	subs	r4, r0, r2
 8000c42:	eb61 0303 	sbc.w	r3, r1, r3
 8000c46:	2001      	movs	r0, #1
 8000c48:	4698      	mov	r8, r3
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	d0e0      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000c4e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c52:	e7dd      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000c54:	b902      	cbnz	r2, 8000c58 <__udivmoddi4+0xe8>
 8000c56:	deff      	udf	#255	; 0xff
 8000c58:	fab2 f282 	clz	r2, r2
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	f040 808f 	bne.w	8000d80 <__udivmoddi4+0x210>
 8000c62:	1b49      	subs	r1, r1, r5
 8000c64:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c68:	fa1f f885 	uxth.w	r8, r5
 8000c6c:	2701      	movs	r7, #1
 8000c6e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c72:	0c23      	lsrs	r3, r4, #16
 8000c74:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x124>
 8000c84:	18eb      	adds	r3, r5, r3
 8000c86:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x122>
 8000c8c:	4299      	cmp	r1, r3
 8000c8e:	f200 80cd 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c92:	4684      	mov	ip, r0
 8000c94:	1a59      	subs	r1, r3, r1
 8000c96:	b2a3      	uxth	r3, r4
 8000c98:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c9c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ca0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ca4:	fb08 f800 	mul.w	r8, r8, r0
 8000ca8:	45a0      	cmp	r8, r4
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0x14c>
 8000cac:	192c      	adds	r4, r5, r4
 8000cae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x14a>
 8000cb4:	45a0      	cmp	r8, r4
 8000cb6:	f200 80b6 	bhi.w	8000e26 <__udivmoddi4+0x2b6>
 8000cba:	4618      	mov	r0, r3
 8000cbc:	eba4 0408 	sub.w	r4, r4, r8
 8000cc0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc4:	e79f      	b.n	8000c06 <__udivmoddi4+0x96>
 8000cc6:	f1c7 0c20 	rsb	ip, r7, #32
 8000cca:	40bb      	lsls	r3, r7
 8000ccc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cd0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cd4:	fa01 f407 	lsl.w	r4, r1, r7
 8000cd8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cdc:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ce0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ce4:	4325      	orrs	r5, r4
 8000ce6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cea:	0c2c      	lsrs	r4, r5, #16
 8000cec:	fb08 3319 	mls	r3, r8, r9, r3
 8000cf0:	fa1f fa8e 	uxth.w	sl, lr
 8000cf4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cf8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cfc:	429c      	cmp	r4, r3
 8000cfe:	fa02 f207 	lsl.w	r2, r2, r7
 8000d02:	fa00 f107 	lsl.w	r1, r0, r7
 8000d06:	d90b      	bls.n	8000d20 <__udivmoddi4+0x1b0>
 8000d08:	eb1e 0303 	adds.w	r3, lr, r3
 8000d0c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d10:	f080 8087 	bcs.w	8000e22 <__udivmoddi4+0x2b2>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f240 8084 	bls.w	8000e22 <__udivmoddi4+0x2b2>
 8000d1a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d1e:	4473      	add	r3, lr
 8000d20:	1b1b      	subs	r3, r3, r4
 8000d22:	b2ad      	uxth	r5, r5
 8000d24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d28:	fb08 3310 	mls	r3, r8, r0, r3
 8000d2c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d30:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d34:	45a2      	cmp	sl, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x1da>
 8000d38:	eb1e 0404 	adds.w	r4, lr, r4
 8000d3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d40:	d26b      	bcs.n	8000e1a <__udivmoddi4+0x2aa>
 8000d42:	45a2      	cmp	sl, r4
 8000d44:	d969      	bls.n	8000e1a <__udivmoddi4+0x2aa>
 8000d46:	3802      	subs	r0, #2
 8000d48:	4474      	add	r4, lr
 8000d4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d52:	eba4 040a 	sub.w	r4, r4, sl
 8000d56:	454c      	cmp	r4, r9
 8000d58:	46c2      	mov	sl, r8
 8000d5a:	464b      	mov	r3, r9
 8000d5c:	d354      	bcc.n	8000e08 <__udivmoddi4+0x298>
 8000d5e:	d051      	beq.n	8000e04 <__udivmoddi4+0x294>
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d069      	beq.n	8000e38 <__udivmoddi4+0x2c8>
 8000d64:	ebb1 050a 	subs.w	r5, r1, sl
 8000d68:	eb64 0403 	sbc.w	r4, r4, r3
 8000d6c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d70:	40fd      	lsrs	r5, r7
 8000d72:	40fc      	lsrs	r4, r7
 8000d74:	ea4c 0505 	orr.w	r5, ip, r5
 8000d78:	e9c6 5400 	strd	r5, r4, [r6]
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	e747      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000d80:	f1c2 0320 	rsb	r3, r2, #32
 8000d84:	fa20 f703 	lsr.w	r7, r0, r3
 8000d88:	4095      	lsls	r5, r2
 8000d8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d92:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d96:	4338      	orrs	r0, r7
 8000d98:	0c01      	lsrs	r1, r0, #16
 8000d9a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d9e:	fa1f f885 	uxth.w	r8, r5
 8000da2:	fb0e 3317 	mls	r3, lr, r7, r3
 8000da6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000daa:	fb07 f308 	mul.w	r3, r7, r8
 8000dae:	428b      	cmp	r3, r1
 8000db0:	fa04 f402 	lsl.w	r4, r4, r2
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x256>
 8000db6:	1869      	adds	r1, r5, r1
 8000db8:	f107 3cff 	add.w	ip, r7, #4294967295
 8000dbc:	d22f      	bcs.n	8000e1e <__udivmoddi4+0x2ae>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d92d      	bls.n	8000e1e <__udivmoddi4+0x2ae>
 8000dc2:	3f02      	subs	r7, #2
 8000dc4:	4429      	add	r1, r5
 8000dc6:	1acb      	subs	r3, r1, r3
 8000dc8:	b281      	uxth	r1, r0
 8000dca:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dce:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd6:	fb00 f308 	mul.w	r3, r0, r8
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x27e>
 8000dde:	1869      	adds	r1, r5, r1
 8000de0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de4:	d217      	bcs.n	8000e16 <__udivmoddi4+0x2a6>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d915      	bls.n	8000e16 <__udivmoddi4+0x2a6>
 8000dea:	3802      	subs	r0, #2
 8000dec:	4429      	add	r1, r5
 8000dee:	1ac9      	subs	r1, r1, r3
 8000df0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000df4:	e73b      	b.n	8000c6e <__udivmoddi4+0xfe>
 8000df6:	4637      	mov	r7, r6
 8000df8:	4630      	mov	r0, r6
 8000dfa:	e709      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000dfc:	4607      	mov	r7, r0
 8000dfe:	e6e7      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000e00:	4618      	mov	r0, r3
 8000e02:	e6fb      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e04:	4541      	cmp	r1, r8
 8000e06:	d2ab      	bcs.n	8000d60 <__udivmoddi4+0x1f0>
 8000e08:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e0c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e10:	3801      	subs	r0, #1
 8000e12:	4613      	mov	r3, r2
 8000e14:	e7a4      	b.n	8000d60 <__udivmoddi4+0x1f0>
 8000e16:	4660      	mov	r0, ip
 8000e18:	e7e9      	b.n	8000dee <__udivmoddi4+0x27e>
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	e795      	b.n	8000d4a <__udivmoddi4+0x1da>
 8000e1e:	4667      	mov	r7, ip
 8000e20:	e7d1      	b.n	8000dc6 <__udivmoddi4+0x256>
 8000e22:	4681      	mov	r9, r0
 8000e24:	e77c      	b.n	8000d20 <__udivmoddi4+0x1b0>
 8000e26:	3802      	subs	r0, #2
 8000e28:	442c      	add	r4, r5
 8000e2a:	e747      	b.n	8000cbc <__udivmoddi4+0x14c>
 8000e2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e30:	442b      	add	r3, r5
 8000e32:	e72f      	b.n	8000c94 <__udivmoddi4+0x124>
 8000e34:	4638      	mov	r0, r7
 8000e36:	e708      	b.n	8000c4a <__udivmoddi4+0xda>
 8000e38:	4637      	mov	r7, r6
 8000e3a:	e6e9      	b.n	8000c10 <__udivmoddi4+0xa0>

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <DESELECT>:

static
inline void DESELECT(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <xmit_spi>:

extern SPI_HandleTypeDef hspi1;

static
void xmit_spi(BYTE Data)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000e66:	bf00      	nop
 8000e68:	4808      	ldr	r0, [pc, #32]	; (8000e8c <xmit_spi+0x30>)
 8000e6a:	f005 fd5f 	bl	800692c <HAL_SPI_GetState>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d1f9      	bne.n	8000e68 <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 5000);
 8000e74:	1df9      	adds	r1, r7, #7
 8000e76:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	4803      	ldr	r0, [pc, #12]	; (8000e8c <xmit_spi+0x30>)
 8000e7e:	f005 fa7f 	bl	8006380 <HAL_SPI_Transmit>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000ae8 	.word	0x20000ae8

08000e90 <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 8000e96:	23ff      	movs	r3, #255	; 0xff
 8000e98:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000e9e:	bf00      	nop
 8000ea0:	4809      	ldr	r0, [pc, #36]	; (8000ec8 <rcvr_spi+0x38>)
 8000ea2:	f005 fd43 	bl	800692c <HAL_SPI_GetState>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d1f9      	bne.n	8000ea0 <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi1, &Dummy, &Data, 1, 5000);
 8000eac:	1dba      	adds	r2, r7, #6
 8000eae:	1df9      	adds	r1, r7, #7
 8000eb0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <rcvr_spi+0x38>)
 8000eba:	f005 fb95 	bl	80065e8 <HAL_SPI_TransmitReceive>

	return Data;
 8000ebe:	79bb      	ldrb	r3, [r7, #6]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000ae8 	.word	0x20000ae8

08000ecc <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 8000ed4:	f7ff ffdc 	bl	8000e90 <rcvr_spi>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	461a      	mov	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	701a      	strb	r2, [r3, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <wait_ready+0x34>)
 8000ef0:	2232      	movs	r2, #50	; 0x32
 8000ef2:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 8000ef4:	f7ff ffcc 	bl	8000e90 <rcvr_spi>
	do
		res = rcvr_spi();
 8000ef8:	f7ff ffca 	bl	8000e90 <rcvr_spi>
 8000efc:	4603      	mov	r3, r0
 8000efe:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	2bff      	cmp	r3, #255	; 0xff
 8000f04:	d004      	beq.n	8000f10 <wait_ready+0x28>
 8000f06:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <wait_ready+0x34>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1f3      	bne.n	8000ef8 <wait_ready+0x10>

	return res;
 8000f10:	79fb      	ldrb	r3, [r7, #7]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000201 	.word	0x20000201

08000f20 <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 8000f26:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000f2a:	60bb      	str	r3, [r7, #8]

	DESELECT();
 8000f2c:	f7ff ff8f 	bl	8000e4e <DESELECT>

	for (i = 0; i < 10; i++)
 8000f30:	2300      	movs	r3, #0
 8000f32:	73fb      	strb	r3, [r7, #15]
 8000f34:	e005      	b.n	8000f42 <power_on+0x22>
		xmit_spi(0xFF);
 8000f36:	20ff      	movs	r0, #255	; 0xff
 8000f38:	f7ff ff90 	bl	8000e5c <xmit_spi>
	for (i = 0; i < 10; i++)
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	73fb      	strb	r3, [r7, #15]
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	2b09      	cmp	r3, #9
 8000f46:	d9f6      	bls.n	8000f36 <power_on+0x16>

	SELECT();
 8000f48:	f7ff ff7a 	bl	8000e40 <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 8000f4c:	2340      	movs	r3, #64	; 0x40
 8000f4e:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 8000f60:	2395      	movs	r3, #149	; 0x95
 8000f62:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 8000f64:	2300      	movs	r3, #0
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e00b      	b.n	8000f82 <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	f107 0210 	add.w	r2, r7, #16
 8000f70:	4413      	add	r3, r2
 8000f72:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ff70 	bl	8000e5c <xmit_spi>
	for (i = 0; i < 6; i++)
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	73fb      	strb	r3, [r7, #15]
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	2b05      	cmp	r3, #5
 8000f86:	d9f0      	bls.n	8000f6a <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 8000f88:	e002      	b.n	8000f90 <power_on+0x70>
		Count--;
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 8000f90:	f7ff ff7e 	bl	8000e90 <rcvr_spi>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d002      	beq.n	8000fa0 <power_on+0x80>
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1f4      	bne.n	8000f8a <power_on+0x6a>

	DESELECT();
 8000fa0:	f7ff ff55 	bl	8000e4e <DESELECT>
	xmit_spi(0XFF);
 8000fa4:	20ff      	movs	r0, #255	; 0xff
 8000fa6:	f7ff ff59 	bl	8000e5c <xmit_spi>

	PowerFlag = 1;
 8000faa:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <power_on+0x98>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	701a      	strb	r2, [r3, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000203 	.word	0x20000203

08000fbc <power_off>:

static
void power_off(void) {
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <power_off+0x14>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	20000203 	.word	0x20000203

08000fd4 <chk_power>:

static
int chk_power(void) /* Socket power state: 0=off, 1=on */
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000fd8:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <chk_power+0x14>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000203 	.word	0x20000203

08000fec <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 8000ff6:	4b17      	ldr	r3, [pc, #92]	; (8001054 <rcvr_datablock+0x68>)
 8000ff8:	220a      	movs	r2, #10
 8000ffa:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 8000ffc:	f7ff ff48 	bl	8000e90 <rcvr_spi>
 8001000:	4603      	mov	r3, r0
 8001002:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	2bff      	cmp	r3, #255	; 0xff
 8001008:	d104      	bne.n	8001014 <rcvr_datablock+0x28>
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <rcvr_datablock+0x68>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1f3      	bne.n	8000ffc <rcvr_datablock+0x10>
	if (token != 0xFE)
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	2bfe      	cmp	r3, #254	; 0xfe
 8001018:	d001      	beq.n	800101e <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 800101a:	2300      	movs	r3, #0
 800101c:	e016      	b.n	800104c <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	1c5a      	adds	r2, r3, #1
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff51 	bl	8000ecc <rcvr_spi_m>
		rcvr_spi_m(buff++);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	1c5a      	adds	r2, r3, #1
 800102e:	607a      	str	r2, [r7, #4]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff4b 	bl	8000ecc <rcvr_spi_m>
	} while (btr -= 2);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	3b02      	subs	r3, #2
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1ed      	bne.n	800101e <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 8001042:	f7ff ff25 	bl	8000e90 <rcvr_spi>
	rcvr_spi();
 8001046:	f7ff ff23 	bl	8000e90 <rcvr_spi>

	return TRUE; /* Return with success */
 800104a:	2301      	movs	r3, #1
}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000200 	.word	0x20000200

08001058 <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 8001068:	f7ff ff3e 	bl	8000ee8 <wait_ready>
 800106c:	4603      	mov	r3, r0
 800106e:	2bff      	cmp	r3, #255	; 0xff
 8001070:	d001      	beq.n	8001076 <xmit_datablock+0x1e>
		return FALSE;
 8001072:	2300      	movs	r3, #0
 8001074:	e040      	b.n	80010f8 <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 8001076:	78fb      	ldrb	r3, [r7, #3]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff feef 	bl	8000e5c <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 800107e:	78fb      	ldrb	r3, [r7, #3]
 8001080:	2bfd      	cmp	r3, #253	; 0xfd
 8001082:	d031      	beq.n	80010e8 <xmit_datablock+0x90>
		wc = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	1c5a      	adds	r2, r3, #1
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fee3 	bl	8000e5c <xmit_spi>
			xmit_spi(*buff++);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	1c5a      	adds	r2, r3, #1
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fedc 	bl	8000e5c <xmit_spi>
		} while (--wc);
 80010a4:	7bbb      	ldrb	r3, [r7, #14]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	73bb      	strb	r3, [r7, #14]
 80010aa:	7bbb      	ldrb	r3, [r7, #14]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1eb      	bne.n	8001088 <xmit_datablock+0x30>

		rcvr_spi();
 80010b0:	f7ff feee 	bl	8000e90 <rcvr_spi>
		rcvr_spi();
 80010b4:	f7ff feec 	bl	8000e90 <rcvr_spi>

		while (i <= 64) {
 80010b8:	e00b      	b.n	80010d2 <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 80010ba:	f7ff fee9 	bl	8000e90 <rcvr_spi>
 80010be:	4603      	mov	r3, r0
 80010c0:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	f003 031f 	and.w	r3, r3, #31
 80010c8:	2b05      	cmp	r3, #5
 80010ca:	d006      	beq.n	80010da <xmit_datablock+0x82>
				break;
			i++;
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	3301      	adds	r3, #1
 80010d0:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	2b40      	cmp	r3, #64	; 0x40
 80010d6:	d9f0      	bls.n	80010ba <xmit_datablock+0x62>
 80010d8:	e000      	b.n	80010dc <xmit_datablock+0x84>
				break;
 80010da:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 80010dc:	bf00      	nop
 80010de:	f7ff fed7 	bl	8000e90 <rcvr_spi>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0fa      	beq.n	80010de <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	f003 031f 	and.w	r3, r3, #31
 80010ee:	2b05      	cmp	r3, #5
 80010f0:	d101      	bne.n	80010f6 <xmit_datablock+0x9e>
		return TRUE;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e000      	b.n	80010f8 <xmit_datablock+0xa0>
	else
		return FALSE;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 800110c:	f7ff feec 	bl	8000ee8 <wait_ready>
 8001110:	4603      	mov	r3, r0
 8001112:	2bff      	cmp	r3, #255	; 0xff
 8001114:	d001      	beq.n	800111a <send_cmd+0x1a>
		return 0xFF;
 8001116:	23ff      	movs	r3, #255	; 0xff
 8001118:	e040      	b.n	800119c <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fe9d 	bl	8000e5c <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	0e1b      	lsrs	r3, r3, #24
 8001126:	b2db      	uxtb	r3, r3
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fe97 	bl	8000e5c <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	0c1b      	lsrs	r3, r3, #16
 8001132:	b2db      	uxtb	r3, r3
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fe91 	bl	8000e5c <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	b2db      	uxtb	r3, r3
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fe8b 	bl	8000e5c <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fe86 	bl	8000e5c <xmit_spi>
	n = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	2b40      	cmp	r3, #64	; 0x40
 8001158:	d101      	bne.n	800115e <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 800115a:	2395      	movs	r3, #149	; 0x95
 800115c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	2b48      	cmp	r3, #72	; 0x48
 8001162:	d101      	bne.n	8001168 <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 8001164:	2387      	movs	r3, #135	; 0x87
 8001166:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fe76 	bl	8000e5c <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2b4c      	cmp	r3, #76	; 0x4c
 8001174:	d101      	bne.n	800117a <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 8001176:	f7ff fe8b 	bl	8000e90 <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 800117a:	230a      	movs	r3, #10
 800117c:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 800117e:	f7ff fe87 	bl	8000e90 <rcvr_spi>
 8001182:	4603      	mov	r3, r0
 8001184:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 8001186:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800118a:	2b00      	cmp	r3, #0
 800118c:	da05      	bge.n	800119a <send_cmd+0x9a>
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	3b01      	subs	r3, #1
 8001192:	73fb      	strb	r3, [r7, #15]
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f1      	bne.n	800117e <send_cmd+0x7e>

	return res; /* Return with the response value */
 800119a:	7bbb      	ldrb	r3, [r7, #14]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 80011b4:	2301      	movs	r3, #1
 80011b6:	e0d5      	b.n	8001364 <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 80011b8:	4b6c      	ldr	r3, [pc, #432]	; (800136c <disk_initialize+0x1c8>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 80011c6:	4b69      	ldr	r3, [pc, #420]	; (800136c <disk_initialize+0x1c8>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	e0ca      	b.n	8001364 <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 80011ce:	f7ff fea7 	bl	8000f20 <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 80011d2:	f7ff fe35 	bl	8000e40 <SELECT>
	ty = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 80011da:	2100      	movs	r1, #0
 80011dc:	2040      	movs	r0, #64	; 0x40
 80011de:	f7ff ff8f 	bl	8001100 <send_cmd>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	f040 80a5 	bne.w	8001334 <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 80011ea:	4b61      	ldr	r3, [pc, #388]	; (8001370 <disk_initialize+0x1cc>)
 80011ec:	2264      	movs	r2, #100	; 0x64
 80011ee:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 80011f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80011f4:	2048      	movs	r0, #72	; 0x48
 80011f6:	f7ff ff83 	bl	8001100 <send_cmd>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d158      	bne.n	80012b2 <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 8001200:	2300      	movs	r3, #0
 8001202:	73fb      	strb	r3, [r7, #15]
 8001204:	e00c      	b.n	8001220 <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 8001206:	7bfc      	ldrb	r4, [r7, #15]
 8001208:	f7ff fe42 	bl	8000e90 <rcvr_spi>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	4423      	add	r3, r4
 8001216:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	3301      	adds	r3, #1
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	2b03      	cmp	r3, #3
 8001224:	d9ef      	bls.n	8001206 <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 8001226:	7abb      	ldrb	r3, [r7, #10]
 8001228:	2b01      	cmp	r3, #1
 800122a:	f040 8083 	bne.w	8001334 <disk_initialize+0x190>
 800122e:	7afb      	ldrb	r3, [r7, #11]
 8001230:	2baa      	cmp	r3, #170	; 0xaa
 8001232:	d17f      	bne.n	8001334 <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 8001234:	2100      	movs	r1, #0
 8001236:	2077      	movs	r0, #119	; 0x77
 8001238:	f7ff ff62 	bl	8001100 <send_cmd>
 800123c:	4603      	mov	r3, r0
 800123e:	2b01      	cmp	r3, #1
 8001240:	d807      	bhi.n	8001252 <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 8001242:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001246:	2069      	movs	r0, #105	; 0x69
 8001248:	f7ff ff5a 	bl	8001100 <send_cmd>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d005      	beq.n	800125e <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 8001252:	4b47      	ldr	r3, [pc, #284]	; (8001370 <disk_initialize+0x1cc>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1eb      	bne.n	8001234 <disk_initialize+0x90>
 800125c:	e000      	b.n	8001260 <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 800125e:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 8001260:	4b43      	ldr	r3, [pc, #268]	; (8001370 <disk_initialize+0x1cc>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d064      	beq.n	8001334 <disk_initialize+0x190>
 800126a:	2100      	movs	r1, #0
 800126c:	207a      	movs	r0, #122	; 0x7a
 800126e:	f7ff ff47 	bl	8001100 <send_cmd>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d15d      	bne.n	8001334 <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 8001278:	2300      	movs	r3, #0
 800127a:	73fb      	strb	r3, [r7, #15]
 800127c:	e00c      	b.n	8001298 <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 800127e:	7bfc      	ldrb	r4, [r7, #15]
 8001280:	f7ff fe06 	bl	8000e90 <rcvr_spi>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	4423      	add	r3, r4
 800128e:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	3301      	adds	r3, #1
 8001296:	73fb      	strb	r3, [r7, #15]
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	2b03      	cmp	r3, #3
 800129c:	d9ef      	bls.n	800127e <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 800129e:	7a3b      	ldrb	r3, [r7, #8]
 80012a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <disk_initialize+0x108>
 80012a8:	2306      	movs	r3, #6
 80012aa:	e000      	b.n	80012ae <disk_initialize+0x10a>
 80012ac:	2302      	movs	r3, #2
 80012ae:	73bb      	strb	r3, [r7, #14]
 80012b0:	e040      	b.n	8001334 <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80012b2:	2100      	movs	r1, #0
 80012b4:	2077      	movs	r0, #119	; 0x77
 80012b6:	f7ff ff23 	bl	8001100 <send_cmd>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d808      	bhi.n	80012d2 <disk_initialize+0x12e>
 80012c0:	2100      	movs	r1, #0
 80012c2:	2069      	movs	r0, #105	; 0x69
 80012c4:	f7ff ff1c 	bl	8001100 <send_cmd>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d801      	bhi.n	80012d2 <disk_initialize+0x12e>
 80012ce:	2302      	movs	r3, #2
 80012d0:	e000      	b.n	80012d4 <disk_initialize+0x130>
 80012d2:	2301      	movs	r3, #1
 80012d4:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 80012d6:	7bbb      	ldrb	r3, [r7, #14]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d10e      	bne.n	80012fa <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 80012dc:	2100      	movs	r1, #0
 80012de:	2077      	movs	r0, #119	; 0x77
 80012e0:	f7ff ff0e 	bl	8001100 <send_cmd>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d80e      	bhi.n	8001308 <disk_initialize+0x164>
 80012ea:	2100      	movs	r1, #0
 80012ec:	2069      	movs	r0, #105	; 0x69
 80012ee:	f7ff ff07 	bl	8001100 <send_cmd>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d107      	bne.n	8001308 <disk_initialize+0x164>
						break; /* ACMD41 */
 80012f8:	e00d      	b.n	8001316 <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 80012fa:	2100      	movs	r1, #0
 80012fc:	2041      	movs	r0, #65	; 0x41
 80012fe:	f7ff feff 	bl	8001100 <send_cmd>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d005      	beq.n	8001314 <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 8001308:	4b19      	ldr	r3, [pc, #100]	; (8001370 <disk_initialize+0x1cc>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1e1      	bne.n	80012d6 <disk_initialize+0x132>
 8001312:	e000      	b.n	8001316 <disk_initialize+0x172>
						break; /* CMD1 */
 8001314:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 8001316:	4b16      	ldr	r3, [pc, #88]	; (8001370 <disk_initialize+0x1cc>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d007      	beq.n	8001330 <disk_initialize+0x18c>
 8001320:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001324:	2050      	movs	r0, #80	; 0x50
 8001326:	f7ff feeb 	bl	8001100 <send_cmd>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <disk_initialize+0x190>
				ty = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 8001334:	4a0f      	ldr	r2, [pc, #60]	; (8001374 <disk_initialize+0x1d0>)
 8001336:	7bbb      	ldrb	r3, [r7, #14]
 8001338:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 800133a:	f7ff fd88 	bl	8000e4e <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 800133e:	f7ff fda7 	bl	8000e90 <rcvr_spi>

	if (ty) /* Initialization succeded */
 8001342:	7bbb      	ldrb	r3, [r7, #14]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d008      	beq.n	800135a <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <disk_initialize+0x1c8>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b2db      	uxtb	r3, r3
 800134e:	f023 0301 	bic.w	r3, r3, #1
 8001352:	b2da      	uxtb	r2, r3
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <disk_initialize+0x1c8>)
 8001356:	701a      	strb	r2, [r3, #0]
 8001358:	e001      	b.n	800135e <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 800135a:	f7ff fe2f 	bl	8000fbc <power_off>

	return Stat;
 800135e:	4b03      	ldr	r3, [pc, #12]	; (800136c <disk_initialize+0x1c8>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	b2db      	uxtb	r3, r3
}
 8001364:	4618      	mov	r0, r3
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	bd90      	pop	{r4, r7, pc}
 800136c:	20000000 	.word	0x20000000
 8001370:	20000200 	.word	0x20000200
 8001374:	20000202 	.word	0x20000202

08001378 <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
	if (drv)
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8001388:	2301      	movs	r3, #1
 800138a:	e002      	b.n	8001392 <disk_status+0x1a>
	return Stat;
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <disk_status+0x28>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b2db      	uxtb	r3, r3
}
 8001392:	4618      	mov	r0, r3
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	20000000 	.word	0x20000000

080013a4 <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	4603      	mov	r3, r0
 80013b2:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d102      	bne.n	80013c0 <disk_read+0x1c>
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <disk_read+0x20>
		return RES_PARERR;
 80013c0:	2304      	movs	r3, #4
 80013c2:	e051      	b.n	8001468 <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 80013c4:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <disk_read+0xcc>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <disk_read+0x32>
		return RES_NOTRDY;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e048      	b.n	8001468 <disk_read+0xc4>

	if (!(CardType & 4))
 80013d6:	4b27      	ldr	r3, [pc, #156]	; (8001474 <disk_read+0xd0>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d102      	bne.n	80013e8 <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	025b      	lsls	r3, r3, #9
 80013e6:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 80013e8:	f7ff fd2a 	bl	8000e40 <SELECT>

	if (count == 1) { /* Single block read */
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d111      	bne.n	8001416 <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	2051      	movs	r0, #81	; 0x51
 80013f6:	f7ff fe83 	bl	8001100 <send_cmd>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d129      	bne.n	8001454 <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 8001400:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001404:	68b8      	ldr	r0, [r7, #8]
 8001406:	f7ff fdf1 	bl	8000fec <rcvr_datablock>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d021      	beq.n	8001454 <disk_read+0xb0>
			count = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	e01e      	b.n	8001454 <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	2052      	movs	r0, #82	; 0x52
 800141a:	f7ff fe71 	bl	8001100 <send_cmd>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d117      	bne.n	8001454 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 8001424:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001428:	68b8      	ldr	r0, [r7, #8]
 800142a:	f7ff fddf 	bl	8000fec <rcvr_datablock>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d00a      	beq.n	800144a <disk_read+0xa6>
					break;
				buff += 512;
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800143a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	3b01      	subs	r3, #1
 8001440:	603b      	str	r3, [r7, #0]
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1ed      	bne.n	8001424 <disk_read+0x80>
 8001448:	e000      	b.n	800144c <disk_read+0xa8>
					break;
 800144a:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 800144c:	2100      	movs	r1, #0
 800144e:	204c      	movs	r0, #76	; 0x4c
 8001450:	f7ff fe56 	bl	8001100 <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 8001454:	f7ff fcfb 	bl	8000e4e <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8001458:	f7ff fd1a 	bl	8000e90 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	bf14      	ite	ne
 8001462:	2301      	movne	r3, #1
 8001464:	2300      	moveq	r3, #0
 8001466:	b2db      	uxtb	r3, r3
}
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000000 	.word	0x20000000
 8001474:	20000202 	.word	0x20000202

08001478 <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	4603      	mov	r3, r0
 8001486:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <disk_write+0x1c>
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <disk_write+0x20>
		return RES_PARERR;
 8001494:	2304      	movs	r3, #4
 8001496:	e06b      	b.n	8001570 <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 8001498:	4b37      	ldr	r3, [pc, #220]	; (8001578 <disk_write+0x100>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <disk_write+0x32>
		return RES_NOTRDY;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e062      	b.n	8001570 <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 80014aa:	4b33      	ldr	r3, [pc, #204]	; (8001578 <disk_write+0x100>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <disk_write+0x44>
		return RES_WRPRT;
 80014b8:	2302      	movs	r3, #2
 80014ba:	e059      	b.n	8001570 <disk_write+0xf8>

	if (!(CardType & 4))
 80014bc:	4b2f      	ldr	r3, [pc, #188]	; (800157c <disk_write+0x104>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d102      	bne.n	80014ce <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	025b      	lsls	r3, r3, #9
 80014cc:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 80014ce:	f7ff fcb7 	bl	8000e40 <SELECT>

	if (count == 1) { /* Single block write */
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d110      	bne.n	80014fa <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	2058      	movs	r0, #88	; 0x58
 80014dc:	f7ff fe10 	bl	8001100 <send_cmd>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d13a      	bne.n	800155c <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 80014e6:	21fe      	movs	r1, #254	; 0xfe
 80014e8:	68b8      	ldr	r0, [r7, #8]
 80014ea:	f7ff fdb5 	bl	8001058 <xmit_datablock>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d033      	beq.n	800155c <disk_write+0xe4>
			count = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	e030      	b.n	800155c <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 80014fa:	4b20      	ldr	r3, [pc, #128]	; (800157c <disk_write+0x104>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d007      	beq.n	8001516 <disk_write+0x9e>
			send_cmd(CMD55, 0);
 8001506:	2100      	movs	r1, #0
 8001508:	2077      	movs	r0, #119	; 0x77
 800150a:	f7ff fdf9 	bl	8001100 <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 800150e:	6839      	ldr	r1, [r7, #0]
 8001510:	2057      	movs	r0, #87	; 0x57
 8001512:	f7ff fdf5 	bl	8001100 <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	2059      	movs	r0, #89	; 0x59
 800151a:	f7ff fdf1 	bl	8001100 <send_cmd>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d11b      	bne.n	800155c <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8001524:	21fc      	movs	r1, #252	; 0xfc
 8001526:	68b8      	ldr	r0, [r7, #8]
 8001528:	f7ff fd96 	bl	8001058 <xmit_datablock>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d00a      	beq.n	8001548 <disk_write+0xd0>
					break;
				buff += 512;
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001538:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	3b01      	subs	r3, #1
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1ee      	bne.n	8001524 <disk_write+0xac>
 8001546:	e000      	b.n	800154a <disk_write+0xd2>
					break;
 8001548:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 800154a:	21fd      	movs	r1, #253	; 0xfd
 800154c:	2000      	movs	r0, #0
 800154e:	f7ff fd83 	bl	8001058 <xmit_datablock>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d101      	bne.n	800155c <disk_write+0xe4>
				count = 1;
 8001558:	2301      	movs	r3, #1
 800155a:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 800155c:	f7ff fc77 	bl	8000e4e <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8001560:	f7ff fc96 	bl	8000e90 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	bf14      	ite	ne
 800156a:	2301      	movne	r3, #1
 800156c:	2300      	moveq	r3, #0
 800156e:	b2db      	uxtb	r3, r3
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000000 	.word	0x20000000
 800157c:	20000202 	.word	0x20000202

08001580 <disk_ioctl>:
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE drv, /* Physical drive nmuber (0) */
BYTE ctrl, /* Control code */
void *buff /* Buffer to send/receive control data */
) {
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b08b      	sub	sp, #44	; 0x2c
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	603a      	str	r2, [r7, #0]
 800158a:	71fb      	strb	r3, [r7, #7]
 800158c:	460b      	mov	r3, r1
 800158e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (drv)
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <disk_ioctl+0x1e>
		return RES_PARERR;
 800159a:	2304      	movs	r3, #4
 800159c:	e16a      	b.n	8001874 <disk_ioctl+0x2f4>

	res = RES_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER_OFF) {
 80015a4:	79bb      	ldrb	r3, [r7, #6]
 80015a6:	2b07      	cmp	r3, #7
 80015a8:	d127      	bne.n	80015fa <disk_ioctl+0x7a>
		switch (*ptr) {
 80015aa:	6a3b      	ldr	r3, [r7, #32]
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d00e      	beq.n	80015d0 <disk_ioctl+0x50>
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d012      	beq.n	80015dc <disk_ioctl+0x5c>
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d11b      	bne.n	80015f2 <disk_ioctl+0x72>
		case 0: /* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
 80015ba:	f7ff fd0b 	bl	8000fd4 <chk_power>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <disk_ioctl+0x48>
				power_off(); /* Power off */
 80015c4:	f7ff fcfa 	bl	8000fbc <power_off>
			res = RES_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80015ce:	e14f      	b.n	8001870 <disk_ioctl+0x2f0>
		case 1: /* Sub control code == 1 (POWER_ON) */
			power_on(); /* Power on */
 80015d0:	f7ff fca6 	bl	8000f20 <power_on>
			res = RES_OK;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80015da:	e149      	b.n	8001870 <disk_ioctl+0x2f0>
		case 2: /* Sub control code == 2 (POWER_GET) */
			*(ptr + 1) = (BYTE) chk_power();
 80015dc:	f7ff fcfa 	bl	8000fd4 <chk_power>
 80015e0:	4602      	mov	r2, r0
 80015e2:	6a3b      	ldr	r3, [r7, #32]
 80015e4:	3301      	adds	r3, #1
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80015f0:	e13e      	b.n	8001870 <disk_ioctl+0x2f0>
		default:
			res = RES_PARERR;
 80015f2:	2304      	movs	r3, #4
 80015f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80015f8:	e13a      	b.n	8001870 <disk_ioctl+0x2f0>
		}
	} else {
		if (Stat & STA_NOINIT)
 80015fa:	4ba0      	ldr	r3, [pc, #640]	; (800187c <disk_ioctl+0x2fc>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <disk_ioctl+0x8c>
			return RES_NOTRDY;
 8001608:	2303      	movs	r3, #3
 800160a:	e133      	b.n	8001874 <disk_ioctl+0x2f4>

		SELECT(); /* CS = L */
 800160c:	f7ff fc18 	bl	8000e40 <SELECT>

		switch (ctrl) {
 8001610:	79bb      	ldrb	r3, [r7, #6]
 8001612:	2b35      	cmp	r3, #53	; 0x35
 8001614:	f200 811d 	bhi.w	8001852 <disk_ioctl+0x2d2>
 8001618:	a201      	add	r2, pc, #4	; (adr r2, 8001620 <disk_ioctl+0xa0>)
 800161a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161e:	bf00      	nop
 8001620:	080017bb 	.word	0x080017bb
 8001624:	080016f9 	.word	0x080016f9
 8001628:	080017ab 	.word	0x080017ab
 800162c:	08001853 	.word	0x08001853
 8001630:	08001853 	.word	0x08001853
 8001634:	08001853 	.word	0x08001853
 8001638:	08001853 	.word	0x08001853
 800163c:	08001853 	.word	0x08001853
 8001640:	08001853 	.word	0x08001853
 8001644:	08001853 	.word	0x08001853
 8001648:	08001853 	.word	0x08001853
 800164c:	08001853 	.word	0x08001853
 8001650:	08001853 	.word	0x08001853
 8001654:	08001853 	.word	0x08001853
 8001658:	08001853 	.word	0x08001853
 800165c:	08001853 	.word	0x08001853
 8001660:	08001853 	.word	0x08001853
 8001664:	08001853 	.word	0x08001853
 8001668:	08001853 	.word	0x08001853
 800166c:	08001853 	.word	0x08001853
 8001670:	08001853 	.word	0x08001853
 8001674:	08001853 	.word	0x08001853
 8001678:	08001853 	.word	0x08001853
 800167c:	08001853 	.word	0x08001853
 8001680:	08001853 	.word	0x08001853
 8001684:	08001853 	.word	0x08001853
 8001688:	08001853 	.word	0x08001853
 800168c:	08001853 	.word	0x08001853
 8001690:	08001853 	.word	0x08001853
 8001694:	08001853 	.word	0x08001853
 8001698:	08001853 	.word	0x08001853
 800169c:	08001853 	.word	0x08001853
 80016a0:	08001853 	.word	0x08001853
 80016a4:	08001853 	.word	0x08001853
 80016a8:	08001853 	.word	0x08001853
 80016ac:	08001853 	.word	0x08001853
 80016b0:	08001853 	.word	0x08001853
 80016b4:	08001853 	.word	0x08001853
 80016b8:	08001853 	.word	0x08001853
 80016bc:	08001853 	.word	0x08001853
 80016c0:	08001853 	.word	0x08001853
 80016c4:	08001853 	.word	0x08001853
 80016c8:	08001853 	.word	0x08001853
 80016cc:	08001853 	.word	0x08001853
 80016d0:	08001853 	.word	0x08001853
 80016d4:	08001853 	.word	0x08001853
 80016d8:	08001853 	.word	0x08001853
 80016dc:	08001853 	.word	0x08001853
 80016e0:	08001853 	.word	0x08001853
 80016e4:	08001853 	.word	0x08001853
 80016e8:	08001853 	.word	0x08001853
 80016ec:	080017cd 	.word	0x080017cd
 80016f0:	080017f1 	.word	0x080017f1
 80016f4:	08001815 	.word	0x08001815
		case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80016f8:	2100      	movs	r1, #0
 80016fa:	2049      	movs	r0, #73	; 0x49
 80016fc:	f7ff fd00 	bl	8001100 <send_cmd>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	f040 80a9 	bne.w	800185a <disk_ioctl+0x2da>
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	2110      	movs	r1, #16
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fc6c 	bl	8000fec <rcvr_datablock>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 809f 	beq.w	800185a <disk_ioctl+0x2da>
				if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 800171c:	7b3b      	ldrb	r3, [r7, #12]
 800171e:	099b      	lsrs	r3, r3, #6
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b01      	cmp	r3, #1
 8001724:	d10e      	bne.n	8001744 <disk_ioctl+0x1c4>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001726:	7d7b      	ldrb	r3, [r7, #21]
 8001728:	b29a      	uxth	r2, r3
 800172a:	7d3b      	ldrb	r3, [r7, #20]
 800172c:	b29b      	uxth	r3, r3
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	b29b      	uxth	r3, r3
 8001732:	4413      	add	r3, r2
 8001734:	b29b      	uxth	r3, r3
 8001736:	3301      	adds	r3, #1
 8001738:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800173a:	8bfb      	ldrh	r3, [r7, #30]
 800173c:	029a      	lsls	r2, r3, #10
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	e02e      	b.n	80017a2 <disk_ioctl+0x222>
				} else { /* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8001744:	7c7b      	ldrb	r3, [r7, #17]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	b2da      	uxtb	r2, r3
 800174c:	7dbb      	ldrb	r3, [r7, #22]
 800174e:	09db      	lsrs	r3, r3, #7
 8001750:	b2db      	uxtb	r3, r3
 8001752:	4413      	add	r3, r2
 8001754:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 8001756:	7d7b      	ldrb	r3, [r7, #21]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	b2db      	uxtb	r3, r3
 800175c:	f003 0306 	and.w	r3, r3, #6
 8001760:	b2db      	uxtb	r3, r3
 8001762:	4413      	add	r3, r2
 8001764:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8001766:	3302      	adds	r3, #2
 8001768:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 800176c:	7d3b      	ldrb	r3, [r7, #20]
 800176e:	099b      	lsrs	r3, r3, #6
 8001770:	b2db      	uxtb	r3, r3
 8001772:	b29a      	uxth	r2, r3
 8001774:	7cfb      	ldrb	r3, [r7, #19]
 8001776:	b29b      	uxth	r3, r3
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	b29b      	uxth	r3, r3
 800177c:	4413      	add	r3, r2
 800177e:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 8001780:	7cbb      	ldrb	r3, [r7, #18]
 8001782:	029b      	lsls	r3, r3, #10
 8001784:	b29b      	uxth	r3, r3
 8001786:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800178a:	b29b      	uxth	r3, r3
 800178c:	4413      	add	r3, r2
 800178e:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8001790:	3301      	adds	r3, #1
 8001792:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001794:	8bfa      	ldrh	r2, [r7, #30]
 8001796:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800179a:	3b09      	subs	r3, #9
 800179c:	409a      	lsls	r2, r3
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80017a8:	e057      	b.n	800185a <disk_ioctl+0x2da>

		case GET_SECTOR_SIZE: /* Get sectors on the disk (WORD) */
			*(WORD*) buff = 512;
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b0:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017b8:	e056      	b.n	8001868 <disk_ioctl+0x2e8>

		case CTRL_SYNC: /* Make sure that data has been written */
			if (wait_ready() == 0xFF)
 80017ba:	f7ff fb95 	bl	8000ee8 <wait_ready>
 80017be:	4603      	mov	r3, r0
 80017c0:	2bff      	cmp	r3, #255	; 0xff
 80017c2:	d14c      	bne.n	800185e <disk_ioctl+0x2de>
				res = RES_OK;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017ca:	e048      	b.n	800185e <disk_ioctl+0x2de>

		case MMC_GET_CSD: /* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0 /* READ_CSD */
 80017cc:	2100      	movs	r1, #0
 80017ce:	2049      	movs	r0, #73	; 0x49
 80017d0:	f7ff fc96 	bl	8001100 <send_cmd>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d143      	bne.n	8001862 <disk_ioctl+0x2e2>
			&& rcvr_datablock(ptr, 16))
 80017da:	2110      	movs	r1, #16
 80017dc:	6a38      	ldr	r0, [r7, #32]
 80017de:	f7ff fc05 	bl	8000fec <rcvr_datablock>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d03c      	beq.n	8001862 <disk_ioctl+0x2e2>
				res = RES_OK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017ee:	e038      	b.n	8001862 <disk_ioctl+0x2e2>

		case MMC_GET_CID: /* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0 /* READ_CID */
 80017f0:	2100      	movs	r1, #0
 80017f2:	204a      	movs	r0, #74	; 0x4a
 80017f4:	f7ff fc84 	bl	8001100 <send_cmd>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d133      	bne.n	8001866 <disk_ioctl+0x2e6>
			&& rcvr_datablock(ptr, 16))
 80017fe:	2110      	movs	r1, #16
 8001800:	6a38      	ldr	r0, [r7, #32]
 8001802:	f7ff fbf3 	bl	8000fec <rcvr_datablock>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d02c      	beq.n	8001866 <disk_ioctl+0x2e6>
				res = RES_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001812:	e028      	b.n	8001866 <disk_ioctl+0x2e6>

		case MMC_GET_OCR: /* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) { /* READ_OCR */
 8001814:	2100      	movs	r1, #0
 8001816:	207a      	movs	r0, #122	; 0x7a
 8001818:	f7ff fc72 	bl	8001100 <send_cmd>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d117      	bne.n	8001852 <disk_ioctl+0x2d2>
				for (n = 0; n < 4; n++)
 8001822:	2300      	movs	r3, #0
 8001824:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001828:	e00b      	b.n	8001842 <disk_ioctl+0x2c2>
					*ptr++ = rcvr_spi();
 800182a:	6a3c      	ldr	r4, [r7, #32]
 800182c:	1c63      	adds	r3, r4, #1
 800182e:	623b      	str	r3, [r7, #32]
 8001830:	f7ff fb2e 	bl	8000e90 <rcvr_spi>
 8001834:	4603      	mov	r3, r0
 8001836:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001838:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800183c:	3301      	adds	r3, #1
 800183e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001842:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001846:	2b03      	cmp	r3, #3
 8001848:	d9ef      	bls.n	800182a <disk_ioctl+0x2aa>
				res = RES_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8001850:	e00a      	b.n	8001868 <disk_ioctl+0x2e8>
//            *ptr = CardType;
//            res = RES_OK;
//            break;

		default:
			res = RES_PARERR;
 8001852:	2304      	movs	r3, #4
 8001854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001858:	e006      	b.n	8001868 <disk_ioctl+0x2e8>
			break;
 800185a:	bf00      	nop
 800185c:	e004      	b.n	8001868 <disk_ioctl+0x2e8>
			break;
 800185e:	bf00      	nop
 8001860:	e002      	b.n	8001868 <disk_ioctl+0x2e8>
			break;
 8001862:	bf00      	nop
 8001864:	e000      	b.n	8001868 <disk_ioctl+0x2e8>
			break;
 8001866:	bf00      	nop
		}

		DESELECT(); /* CS = H */
 8001868:	f7ff faf1 	bl	8000e4e <DESELECT>
		rcvr_spi(); /* Idle (Release DO) */
 800186c:	f7ff fb10 	bl	8000e90 <rcvr_spi>
	}

	return res;
 8001870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001874:	4618      	mov	r0, r3
 8001876:	372c      	adds	r7, #44	; 0x2c
 8001878:	46bd      	mov	sp, r7
 800187a:	bd90      	pop	{r4, r7, pc}
 800187c:	20000000 	.word	0x20000000

08001880 <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 8001886:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <disk_timerproc+0x44>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	71fb      	strb	r3, [r7, #7]
	if (n)
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d005      	beq.n	800189e <disk_timerproc+0x1e>
		Timer1 = --n;
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	3b01      	subs	r3, #1
 8001896:	71fb      	strb	r3, [r7, #7]
 8001898:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <disk_timerproc+0x44>)
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 800189e:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <disk_timerproc+0x48>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	71fb      	strb	r3, [r7, #7]
	if (n)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d005      	beq.n	80018b6 <disk_timerproc+0x36>
		Timer2 = --n;
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	3b01      	subs	r3, #1
 80018ae:	71fb      	strb	r3, [r7, #7]
 80018b0:	4a05      	ldr	r2, [pc, #20]	; (80018c8 <disk_timerproc+0x48>)
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	7013      	strb	r3, [r2, #0]

}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000200 	.word	0x20000200
 80018c8:	20000201 	.word	0x20000201

080018cc <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
	++sdcard_timer;
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <sdcard_systick_timerproc+0x2c>)
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	3301      	adds	r3, #1
 80018d8:	b29a      	uxth	r2, r3
 80018da:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <sdcard_systick_timerproc+0x2c>)
 80018dc:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <sdcard_systick_timerproc+0x2c>)
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	2b09      	cmp	r3, #9
 80018e6:	d904      	bls.n	80018f2 <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <sdcard_systick_timerproc+0x2c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 80018ee:	f7ff ffc7 	bl	8001880 <disk_timerproc>
	}
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000448 	.word	0x20000448

080018fc <get_fattime>:
/*---------------------------------------------------------*/
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime(void) {
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0

	return ((2007UL - 1980) << 25) // Year = 2007
 8001900:	4b02      	ldr	r3, [pc, #8]	; (800190c <get_fattime+0x10>)
			| (11U << 11) // Hour = 11
			| (38U << 5) // Min = 38
			| (0U >> 1) // Sec = 0
	;

}
 8001902:	4618      	mov	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	36c55cc0 	.word	0x36c55cc0

08001910 <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <DWT_Init+0x38>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10e      	bne.n	800193e <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <DWT_Init+0x38>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	4a08      	ldr	r2, [pc, #32]	; (8001948 <DWT_Init+0x38>)
 8001926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800192a:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 800192c:	4b07      	ldr	r3, [pc, #28]	; (800194c <DWT_Init+0x3c>)
 800192e:	2200      	movs	r2, #0
 8001930:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <DWT_Init+0x3c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a05      	ldr	r2, [pc, #20]	; (800194c <DWT_Init+0x3c>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6013      	str	r3, [r2, #0]
    }
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000edf0 	.word	0xe000edf0
 800194c:	e0001000 	.word	0xe0001000

08001950 <DWT_Delay>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8001958:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <DWT_Delay+0x40>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <DWT_Delay+0x44>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a0d      	ldr	r2, [pc, #52]	; (8001998 <DWT_Delay+0x48>)
 8001964:	fba2 2303 	umull	r2, r3, r2, r3
 8001968:	0c9a      	lsrs	r2, r3, #18
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	fb02 f303 	mul.w	r3, r2, r3
 8001970:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8001972:	bf00      	nop
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <DWT_Delay+0x40>)
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	68ba      	ldr	r2, [r7, #8]
 800197e:	429a      	cmp	r2, r3
 8001980:	d8f8      	bhi.n	8001974 <DWT_Delay+0x24>
}
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e0001000 	.word	0xe0001000
 8001994:	20000008 	.word	0x20000008
 8001998:	431bde83 	.word	0x431bde83

0800199c <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3301      	adds	r3, #1
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80019ac:	89fb      	ldrh	r3, [r7, #14]
 80019ae:	021b      	lsls	r3, r3, #8
 80019b0:	b21a      	sxth	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	b21b      	sxth	r3, r3
 80019b8:	4313      	orrs	r3, r2
 80019ba:	b21b      	sxth	r3, r3
 80019bc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80019be:	89fb      	ldrh	r3, [r7, #14]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3303      	adds	r3, #3
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	021b      	lsls	r3, r3, #8
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	3202      	adds	r2, #2
 80019e4:	7812      	ldrb	r2, [r2, #0]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	021b      	lsls	r3, r3, #8
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	3201      	adds	r2, #1
 80019f2:	7812      	ldrb	r2, [r2, #0]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	7812      	ldrb	r2, [r2, #0]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]
	return rv;
 8001a04:	68fb      	ldr	r3, [r7, #12]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	607a      	str	r2, [r7, #4]
 8001a24:	887a      	ldrh	r2, [r7, #2]
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	701a      	strb	r2, [r3, #0]
 8001a2a:	887b      	ldrh	r3, [r7, #2]
 8001a2c:	0a1b      	lsrs	r3, r3, #8
 8001a2e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	887a      	ldrh	r2, [r7, #2]
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	701a      	strb	r2, [r3, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	607a      	str	r2, [r7, #4]
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	701a      	strb	r2, [r3, #0]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	0a1b      	lsrs	r3, r3, #8
 8001a62:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	701a      	strb	r2, [r3, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	0a1b      	lsrs	r3, r3, #8
 8001a74:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	1c5a      	adds	r2, r3, #1
 8001a7a:	607a      	str	r2, [r7, #4]
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	0a1b      	lsrs	r3, r3, #8
 8001a86:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	607a      	str	r2, [r7, #4]
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	701a      	strb	r2, [r3, #0]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	613b      	str	r3, [r7, #16]

	if (cnt != 0) {
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00d      	beq.n	8001ad6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	1c53      	adds	r3, r2, #1
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	1c59      	adds	r1, r3, #1
 8001ac4:	6179      	str	r1, [r7, #20]
 8001ac6:	7812      	ldrb	r2, [r2, #0]
 8001ac8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f1      	bne.n	8001aba <mem_cpy+0x1a>
	}
}
 8001ad6:	bf00      	nop
 8001ad8:	371c      	adds	r7, #28
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <mem_set>:


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b087      	sub	sp, #28
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	1c5a      	adds	r2, r3, #1
 8001af6:	617a      	str	r2, [r7, #20]
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3b01      	subs	r3, #1
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f3      	bne.n	8001af2 <mem_set+0x10>
}
 8001b0a:	bf00      	nop
 8001b0c:	371c      	adds	r7, #28
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 8001b16:	b480      	push	{r7}
 8001b18:	b089      	sub	sp, #36	; 0x24
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	61fb      	str	r3, [r7, #28]
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	61fa      	str	r2, [r7, #28]
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	4619      	mov	r1, r3
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	61ba      	str	r2, [r7, #24]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	1acb      	subs	r3, r1, r3
 8001b42:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d002      	beq.n	8001b56 <mem_cmp+0x40>
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0eb      	beq.n	8001b2e <mem_cmp+0x18>

	return r;
 8001b56:	697b      	ldr	r3, [r7, #20]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3724      	adds	r7, #36	; 0x24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8001b6e:	e002      	b.n	8001b76 <chk_chr+0x12>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3301      	adds	r3, #1
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d005      	beq.n	8001b8a <chk_chr+0x26>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d1f2      	bne.n	8001b70 <chk_chr+0xc>
	return *str;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	781b      	ldrb	r3, [r3, #0]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <dbc_1st>:


/* Test if the character is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	71fb      	strb	r3, [r7, #7]
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
 8001ba4:	2281      	movs	r2, #129	; 0x81
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d30f      	bcc.n	8001bcc <dbc_1st+0x32>
		if (c <= DbcTbl[1]) return 1;
 8001bac:	229f      	movs	r2, #159	; 0x9f
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d801      	bhi.n	8001bb8 <dbc_1st+0x1e>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e00a      	b.n	8001bce <dbc_1st+0x34>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 8001bb8:	22e0      	movs	r2, #224	; 0xe0
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d305      	bcc.n	8001bcc <dbc_1st+0x32>
 8001bc0:	22fc      	movs	r2, #252	; 0xfc
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d801      	bhi.n	8001bcc <dbc_1st+0x32>
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <dbc_1st+0x34>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <dbc_2nd>:


/* Test if the character is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	4603      	mov	r3, r0
 8001be2:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[4]) {
 8001be4:	2240      	movs	r2, #64	; 0x40
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d319      	bcc.n	8001c20 <dbc_2nd+0x46>
		if (c <= DbcTbl[5]) return 1;
 8001bec:	227e      	movs	r2, #126	; 0x7e
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d801      	bhi.n	8001bf8 <dbc_2nd+0x1e>
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e014      	b.n	8001c22 <dbc_2nd+0x48>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 8001bf8:	2280      	movs	r2, #128	; 0x80
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d305      	bcc.n	8001c0c <dbc_2nd+0x32>
 8001c00:	22fc      	movs	r2, #252	; 0xfc
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d801      	bhi.n	8001c0c <dbc_2nd+0x32>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e00a      	b.n	8001c22 <dbc_2nd+0x48>
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d305      	bcc.n	8001c20 <dbc_2nd+0x46>
 8001c14:	2200      	movs	r2, #0
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d801      	bhi.n	8001c20 <dbc_2nd+0x46>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e000      	b.n	8001c22 <dbc_2nd+0x48>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b084      	sub	sp, #16
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty */
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	78db      	ldrb	r3, [r3, #3]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d02c      	beq.n	8001c9c <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	7858      	ldrb	r0, [r3, #1]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c50:	2301      	movs	r3, #1
 8001c52:	f7ff fc11 	bl	8001478 <disk_write>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d11d      	bne.n	8001c98 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	70da      	strb	r2, [r3, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	1ad2      	subs	r2, r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d213      	bcs.n	8001c9c <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	789b      	ldrb	r3, [r3, #2]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d10f      	bne.n	8001c9c <sync_window+0x6e>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	7858      	ldrb	r0, [r3, #1]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	441a      	add	r2, r3
 8001c90:	2301      	movs	r3, #1
 8001c92:	f7ff fbf1 	bl	8001478 <disk_write>
 8001c96:	e001      	b.n	8001c9c <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,			/* Filesystem object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b084      	sub	sp, #16
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d01b      	beq.n	8001cf6 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff ffb5 	bl	8001c2e <sync_window>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d113      	bne.n	8001cf6 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	7858      	ldrb	r0, [r3, #1]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001cd8:	2301      	movs	r3, #1
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	f7ff fb62 	bl	80013a4 <disk_read>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d004      	beq.n	8001cf0 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 8001ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cea:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff ff90 	bl	8001c2e <sync_window>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d158      	bne.n	8001dca <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b03      	cmp	r3, #3
 8001d1e:	d148      	bne.n	8001db2 <sync_fs+0xb2>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	791b      	ldrb	r3, [r3, #4]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d144      	bne.n	8001db2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, sizeof fs->win);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3330      	adds	r3, #48	; 0x30
 8001d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d30:	2100      	movs	r1, #0
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fed5 	bl	8001ae2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3330      	adds	r3, #48	; 0x30
 8001d3c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8001d40:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fe64 	bl	8001a12 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	3330      	adds	r3, #48	; 0x30
 8001d4e:	4921      	ldr	r1, [pc, #132]	; (8001dd4 <sync_fs+0xd4>)
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fe79 	bl	8001a48 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3330      	adds	r3, #48	; 0x30
 8001d5a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8001d5e:	491e      	ldr	r1, [pc, #120]	; (8001dd8 <sync_fs+0xd8>)
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fe71 	bl	8001a48 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3330      	adds	r3, #48	; 0x30
 8001d6a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	4619      	mov	r1, r3
 8001d74:	4610      	mov	r0, r2
 8001d76:	f7ff fe67 	bl	8001a48 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3330      	adds	r3, #48	; 0x30
 8001d7e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	4619      	mov	r1, r3
 8001d88:	4610      	mov	r0, r2
 8001d8a:	f7ff fe5d 	bl	8001a48 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	7858      	ldrb	r0, [r3, #1]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001da6:	2301      	movs	r3, #1
 8001da8:	f7ff fb66 	bl	8001478 <disk_write>
			fs->fsi_flag = 0;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	785b      	ldrb	r3, [r3, #1]
 8001db6:	2200      	movs	r2, #0
 8001db8:	2100      	movs	r1, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fbe0 	bl	8001580 <disk_ioctl>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <sync_fs+0xca>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	41615252 	.word	0x41615252
 8001dd8:	61417272 	.word	0x61417272

08001ddc <clst2sect>:

static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	3b02      	subs	r3, #2
 8001dea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	3b02      	subs	r3, #2
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d301      	bcc.n	8001dfc <clst2sect+0x20>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	e008      	b.n	8001e0e <clst2sect+0x32>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	895b      	ldrh	r3, [r3, #10]
 8001e04:	4619      	mov	r1, r3
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	fb03 f301 	mul.w	r3, r3, r1
 8001e0c:	4413      	add	r3, r2
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d904      	bls.n	8001e3a <get_fat+0x20>
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d302      	bcc.n	8001e40 <get_fat+0x26>
		val = 1;	/* Internal error */
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	e08c      	b.n	8001f5a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8001e40:	f04f 33ff 	mov.w	r3, #4294967295
 8001e44:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d045      	beq.n	8001eda <get_fat+0xc0>
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	d05d      	beq.n	8001f0e <get_fat+0xf4>
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d177      	bne.n	8001f46 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	085b      	lsrs	r3, r3, #1
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	4413      	add	r3, r2
 8001e62:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	6a1a      	ldr	r2, [r3, #32]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	0a5b      	lsrs	r3, r3, #9
 8001e6c:	4413      	add	r3, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	6938      	ldr	r0, [r7, #16]
 8001e72:	f7ff ff18 	bl	8001ca6 <move_window>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d167      	bne.n	8001f4c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1c5a      	adds	r2, r3, #1
 8001e80:	60fa      	str	r2, [r7, #12]
 8001e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4413      	add	r3, r2
 8001e8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e8e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	6a1a      	ldr	r2, [r3, #32]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	0a5b      	lsrs	r3, r3, #9
 8001e98:	4413      	add	r3, r2
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	6938      	ldr	r0, [r7, #16]
 8001e9e:	f7ff ff02 	bl	8001ca6 <move_window>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d153      	bne.n	8001f50 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001eb6:	021b      	lsls	r3, r3, #8
 8001eb8:	461a      	mov	r2, r3
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <get_fat+0xb6>
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	091b      	lsrs	r3, r3, #4
 8001ece:	e002      	b.n	8001ed6 <get_fat+0xbc>
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed6:	617b      	str	r3, [r7, #20]
			break;
 8001ed8:	e03f      	b.n	8001f5a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	6a1a      	ldr	r2, [r3, #32]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	0a1b      	lsrs	r3, r3, #8
 8001ee2:	4413      	add	r3, r2
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	6938      	ldr	r0, [r7, #16]
 8001ee8:	f7ff fedd 	bl	8001ca6 <move_window>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d130      	bne.n	8001f54 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8001f00:	4413      	add	r3, r2
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fd4a 	bl	800199c <ld_word>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	617b      	str	r3, [r7, #20]
			break;
 8001f0c:	e025      	b.n	8001f5a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	6a1a      	ldr	r2, [r3, #32]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	09db      	lsrs	r3, r3, #7
 8001f16:	4413      	add	r3, r2
 8001f18:	4619      	mov	r1, r3
 8001f1a:	6938      	ldr	r0, [r7, #16]
 8001f1c:	f7ff fec3 	bl	8001ca6 <move_window>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d118      	bne.n	8001f58 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001f34:	4413      	add	r3, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff fd48 	bl	80019cc <ld_dword>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001f42:	617b      	str	r3, [r7, #20]
			break;
 8001f44:	e009      	b.n	8001f5a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8001f46:	2301      	movs	r3, #1
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	e006      	b.n	8001f5a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001f4c:	bf00      	nop
 8001f4e:	e004      	b.n	8001f5a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001f50:	bf00      	nop
 8001f52:	e002      	b.n	8001f5a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8001f54:	bf00      	nop
 8001f56:	e000      	b.n	8001f5a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8001f58:	bf00      	nop
		}
	}

	return val;
 8001f5a:	697b      	ldr	r3, [r7, #20]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8001f64:	b590      	push	{r4, r7, lr}
 8001f66:	b089      	sub	sp, #36	; 0x24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8001f70:	2302      	movs	r3, #2
 8001f72:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	f240 80d6 	bls.w	8002128 <put_fat+0x1c4>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	f080 80d0 	bcs.w	8002128 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d073      	beq.n	8002078 <put_fat+0x114>
 8001f90:	2b03      	cmp	r3, #3
 8001f92:	f000 8091 	beq.w	80020b8 <put_fat+0x154>
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	f040 80c6 	bne.w	8002128 <put_fat+0x1c4>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	61bb      	str	r3, [r7, #24]
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	085b      	lsrs	r3, r3, #1
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6a1a      	ldr	r2, [r3, #32]
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	0a5b      	lsrs	r3, r3, #9
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f7ff fe75 	bl	8001ca6 <move_window>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001fc0:	7ffb      	ldrb	r3, [r7, #31]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f040 80a9 	bne.w	800211a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	1c59      	adds	r1, r3, #1
 8001fd2:	61b9      	str	r1, [r7, #24]
 8001fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fd8:	4413      	add	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00d      	beq.n	8002002 <put_fat+0x9e>
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	b25b      	sxtb	r3, r3
 8001fec:	f003 030f 	and.w	r3, r3, #15
 8001ff0:	b25a      	sxtb	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	b25b      	sxtb	r3, r3
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	b25b      	sxtb	r3, r3
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	e001      	b.n	8002006 <put_fat+0xa2>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2201      	movs	r2, #1
 800200e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6a1a      	ldr	r2, [r3, #32]
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	0a5b      	lsrs	r3, r3, #9
 8002018:	4413      	add	r3, r2
 800201a:	4619      	mov	r1, r3
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f7ff fe42 	bl	8001ca6 <move_window>
 8002022:	4603      	mov	r3, r0
 8002024:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002026:	7ffb      	ldrb	r3, [r7, #31]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d178      	bne.n	800211e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002038:	4413      	add	r3, r2
 800203a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <put_fat+0xea>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	b2db      	uxtb	r3, r3
 800204c:	e00e      	b.n	800206c <put_fat+0x108>
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	b25b      	sxtb	r3, r3
 8002054:	f023 030f 	bic.w	r3, r3, #15
 8002058:	b25a      	sxtb	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	0a1b      	lsrs	r3, r3, #8
 800205e:	b25b      	sxtb	r3, r3
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	b25b      	sxtb	r3, r3
 8002066:	4313      	orrs	r3, r2
 8002068:	b25b      	sxtb	r3, r3
 800206a:	b2db      	uxtb	r3, r3
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2201      	movs	r2, #1
 8002074:	70da      	strb	r2, [r3, #3]
			break;
 8002076:	e057      	b.n	8002128 <put_fat+0x1c4>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6a1a      	ldr	r2, [r3, #32]
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	0a1b      	lsrs	r3, r3, #8
 8002080:	4413      	add	r3, r2
 8002082:	4619      	mov	r1, r3
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f7ff fe0e 	bl	8001ca6 <move_window>
 800208a:	4603      	mov	r3, r0
 800208c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800208e:	7ffb      	ldrb	r3, [r7, #31]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d146      	bne.n	8002122 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80020a2:	4413      	add	r3, r2
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	b292      	uxth	r2, r2
 80020a8:	4611      	mov	r1, r2
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fcb1 	bl	8001a12 <st_word>
			fs->wflag = 1;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2201      	movs	r2, #1
 80020b4:	70da      	strb	r2, [r3, #3]
			break;
 80020b6:	e037      	b.n	8002128 <put_fat+0x1c4>

		case FS_FAT32 :
#if FF_FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6a1a      	ldr	r2, [r3, #32]
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	09db      	lsrs	r3, r3, #7
 80020c0:	4413      	add	r3, r2
 80020c2:	4619      	mov	r1, r3
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f7ff fdee 	bl	8001ca6 <move_window>
 80020ca:	4603      	mov	r3, r0
 80020cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80020ce:	7ffb      	ldrb	r3, [r7, #31]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d128      	bne.n	8002126 <put_fat+0x1c2>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80020e8:	4413      	add	r3, r2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fc6e 	bl	80019cc <ld_dword>
 80020f0:	4603      	mov	r3, r0
 80020f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80020f6:	4323      	orrs	r3, r4
 80020f8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002108:	4413      	add	r3, r2
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff fc9b 	bl	8001a48 <st_dword>
			fs->wflag = 1;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2201      	movs	r2, #1
 8002116:	70da      	strb	r2, [r3, #3]
			break;
 8002118:	e006      	b.n	8002128 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800211a:	bf00      	nop
 800211c:	e004      	b.n	8002128 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800211e:	bf00      	nop
 8002120:	e002      	b.n	8002128 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8002122:	bf00      	nop
 8002124:	e000      	b.n	8002128 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8002126:	bf00      	nop
		}
	}
	return res;
 8002128:	7ffb      	ldrb	r3, [r7, #31]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3724      	adds	r7, #36	; 0x24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd90      	pop	{r4, r7, pc}

08002132 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b088      	sub	sp, #32
 8002136:	af00      	add	r7, sp, #0
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d904      	bls.n	8002158 <remove_chain+0x26>
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	429a      	cmp	r2, r3
 8002156:	d301      	bcc.n	800215c <remove_chain+0x2a>
 8002158:	2302      	movs	r3, #2
 800215a:	e04b      	b.n	80021f4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00c      	beq.n	800217c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8002162:	f04f 32ff 	mov.w	r2, #4294967295
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	69b8      	ldr	r0, [r7, #24]
 800216a:	f7ff fefb 	bl	8001f64 <put_fat>
 800216e:	4603      	mov	r3, r0
 8002170:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8002172:	7ffb      	ldrb	r3, [r7, #31]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <remove_chain+0x4a>
 8002178:	7ffb      	ldrb	r3, [r7, #31]
 800217a:	e03b      	b.n	80021f4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800217c:	68b9      	ldr	r1, [r7, #8]
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f7ff fe4b 	bl	8001e1a <get_fat>
 8002184:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d031      	beq.n	80021f0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <remove_chain+0x64>
 8002192:	2302      	movs	r3, #2
 8002194:	e02e      	b.n	80021f4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219c:	d101      	bne.n	80021a2 <remove_chain+0x70>
 800219e:	2301      	movs	r3, #1
 80021a0:	e028      	b.n	80021f4 <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80021a2:	2200      	movs	r2, #0
 80021a4:	68b9      	ldr	r1, [r7, #8]
 80021a6:	69b8      	ldr	r0, [r7, #24]
 80021a8:	f7ff fedc 	bl	8001f64 <put_fat>
 80021ac:	4603      	mov	r3, r0
 80021ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80021b0:	7ffb      	ldrb	r3, [r7, #31]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <remove_chain+0x88>
 80021b6:	7ffb      	ldrb	r3, [r7, #31]
 80021b8:	e01c      	b.n	80021f4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	691a      	ldr	r2, [r3, #16]
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	3b02      	subs	r3, #2
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d20b      	bcs.n	80021e0 <remove_chain+0xae>
			fs->free_clst++;
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	791b      	ldrb	r3, [r3, #4]
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform device the data in the block is no longer needed */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d3c6      	bcc.n	800217c <remove_chain+0x4a>
 80021ee:	e000      	b.n	80021f2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80021f0:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3720      	adds	r7, #32
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b088      	sub	sp, #32
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10d      	bne.n	800222e <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d004      	beq.n	8002228 <create_chain+0x2c>
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	429a      	cmp	r2, r3
 8002226:	d31b      	bcc.n	8002260 <create_chain+0x64>
 8002228:	2301      	movs	r3, #1
 800222a:	61bb      	str	r3, [r7, #24]
 800222c:	e018      	b.n	8002260 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800222e:	6839      	ldr	r1, [r7, #0]
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff fdf2 	bl	8001e1a <get_fat>
 8002236:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d801      	bhi.n	8002242 <create_chain+0x46>
 800223e:	2301      	movs	r3, #1
 8002240:	e0a9      	b.n	8002396 <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002248:	d101      	bne.n	800224e <create_chain+0x52>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	e0a3      	b.n	8002396 <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	429a      	cmp	r2, r3
 8002256:	d201      	bcs.n	800225c <create_chain+0x60>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	e09c      	b.n	8002396 <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <create_chain+0x70>
 8002268:	2300      	movs	r3, #0
 800226a:	e094      	b.n	8002396 <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d129      	bne.n	80022cc <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	3301      	adds	r3, #1
 800227c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	69fa      	ldr	r2, [r7, #28]
 8002284:	429a      	cmp	r2, r3
 8002286:	d301      	bcc.n	800228c <create_chain+0x90>
 8002288:	2302      	movs	r3, #2
 800228a:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 800228c:	69f9      	ldr	r1, [r7, #28]
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff fdc3 	bl	8001e1a <get_fat>
 8002294:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d003      	beq.n	80022a4 <create_chain+0xa8>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a2:	d101      	bne.n	80022a8 <create_chain+0xac>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	e076      	b.n	8002396 <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00e      	beq.n	80022cc <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d906      	bls.n	80022c8 <create_chain+0xcc>
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d201      	bcs.n	80022c8 <create_chain+0xcc>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d129      	bne.n	8002326 <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3301      	adds	r3, #1
 80022da:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	69fa      	ldr	r2, [r7, #28]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d307      	bcc.n	80022f6 <create_chain+0xfa>
					ncl = 2;
 80022e6:	2302      	movs	r3, #2
 80022e8:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 80022ea:	69fa      	ldr	r2, [r7, #28]
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d901      	bls.n	80022f6 <create_chain+0xfa>
 80022f2:	2300      	movs	r3, #0
 80022f4:	e04f      	b.n	8002396 <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 80022f6:	69f9      	ldr	r1, [r7, #28]
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff fd8e 	bl	8001e1a <get_fat>
 80022fe:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00e      	beq.n	8002324 <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d003      	beq.n	8002314 <create_chain+0x118>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002312:	d101      	bne.n	8002318 <create_chain+0x11c>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	e03e      	b.n	8002396 <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	429a      	cmp	r2, r3
 800231e:	d1da      	bne.n	80022d6 <create_chain+0xda>
 8002320:	2300      	movs	r3, #0
 8002322:	e038      	b.n	8002396 <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 8002324:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8002326:	f04f 32ff 	mov.w	r2, #4294967295
 800232a:	69f9      	ldr	r1, [r7, #28]
 800232c:	6938      	ldr	r0, [r7, #16]
 800232e:	f7ff fe19 	bl	8001f64 <put_fat>
 8002332:	4603      	mov	r3, r0
 8002334:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8002336:	7dfb      	ldrb	r3, [r7, #23]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d109      	bne.n	8002350 <create_chain+0x154>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d006      	beq.n	8002350 <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8002342:	69fa      	ldr	r2, [r7, #28]
 8002344:	6839      	ldr	r1, [r7, #0]
 8002346:	6938      	ldr	r0, [r7, #16]
 8002348:	f7ff fe0c 	bl	8001f64 <put_fat>
 800234c:	4603      	mov	r3, r0
 800234e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8002350:	7dfb      	ldrb	r3, [r7, #23]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d116      	bne.n	8002384 <create_chain+0x188>
		fs->last_clst = ncl;
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	69fa      	ldr	r2, [r7, #28]
 800235a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	691a      	ldr	r2, [r3, #16]
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	3b02      	subs	r3, #2
 8002366:	429a      	cmp	r2, r3
 8002368:	d804      	bhi.n	8002374 <create_chain+0x178>
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	1e5a      	subs	r2, r3, #1
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	791b      	ldrb	r3, [r3, #4]
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	b2da      	uxtb	r2, r3
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	711a      	strb	r2, [r3, #4]
 8002382:	e007      	b.n	8002394 <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8002384:	7dfb      	ldrb	r3, [r7, #23]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d102      	bne.n	8002390 <create_chain+0x194>
 800238a:	f04f 33ff 	mov.w	r3, #4294967295
 800238e:	e000      	b.n	8002392 <create_chain+0x196>
 8002390:	2301      	movs	r3, #1
 8002392:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8002394:	69fb      	ldr	r3, [r7, #28]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3720      	adds	r7, #32
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b086      	sub	sp, #24
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	6039      	str	r1, [r7, #0]
	DWORD sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff fc40 	bl	8001c2e <sync_window>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <dir_clear+0x1a>
 80023b4:	2301      	movs	r3, #1
 80023b6:	e036      	b.n	8002426 <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 80023b8:	6839      	ldr	r1, [r7, #0]
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff fd0e 	bl	8001ddc <clst2sect>
 80023c0:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	62da      	str	r2, [r3, #44]	; 0x2c
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3330      	adds	r3, #48	; 0x30
 80023cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023d0:	2100      	movs	r1, #0
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fb85 	bl	8001ae2 <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3330      	adds	r3, #48	; 0x30
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	2301      	movs	r3, #1
 80023e0:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
 80023e6:	e003      	b.n	80023f0 <dir_clear+0x52>
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	4413      	add	r3, r2
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	895b      	ldrh	r3, [r3, #10]
 80023f4:	461a      	mov	r2, r3
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d20b      	bcs.n	8002414 <dir_clear+0x76>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	7858      	ldrb	r0, [r3, #1]
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	441a      	add	r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	68f9      	ldr	r1, [r7, #12]
 800240a:	f7ff f835 	bl	8001478 <disk_write>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0e9      	beq.n	80023e8 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	895b      	ldrh	r3, [r3, #10]
 8002418:	461a      	mov	r2, r3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	4293      	cmp	r3, r2
 800241e:	bf14      	ite	ne
 8002420:	2301      	movne	r3, #1
 8002422:	2300      	moveq	r3, #0
 8002424:	b2db      	uxtb	r3, r3
}
 8002426:	4618      	mov	r0, r3
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b086      	sub	sp, #24
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002444:	d204      	bcs.n	8002450 <dir_sdi+0x22>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	f003 031f 	and.w	r3, r3, #31
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <dir_sdi+0x26>
		return FR_INT_ERR;
 8002450:	2302      	movs	r3, #2
 8002452:	e063      	b.n	800251c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <dir_sdi+0x46>
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d902      	bls.n	8002474 <dir_sdi+0x46>
		clst = fs->dirbase;
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10c      	bne.n	8002494 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	095b      	lsrs	r3, r3, #5
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	8912      	ldrh	r2, [r2, #8]
 8002482:	4293      	cmp	r3, r2
 8002484:	d301      	bcc.n	800248a <dir_sdi+0x5c>
 8002486:	2302      	movs	r3, #2
 8002488:	e048      	b.n	800251c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	619a      	str	r2, [r3, #24]
 8002492:	e029      	b.n	80024e8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	895b      	ldrh	r3, [r3, #10]
 8002498:	025b      	lsls	r3, r3, #9
 800249a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800249c:	e019      	b.n	80024d2 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6979      	ldr	r1, [r7, #20]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fcb9 	bl	8001e1a <get_fat>
 80024a8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b0:	d101      	bne.n	80024b6 <dir_sdi+0x88>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e032      	b.n	800251c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d904      	bls.n	80024c6 <dir_sdi+0x98>
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d301      	bcc.n	80024ca <dir_sdi+0x9c>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e028      	b.n	800251c <dir_sdi+0xee>
			ofs -= csz;
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d2e1      	bcs.n	800249e <dir_sdi+0x70>
		}
		dp->sect = clst2sect(fs, clst);
 80024da:	6979      	ldr	r1, [r7, #20]
 80024dc:	6938      	ldr	r0, [r7, #16]
 80024de:	f7ff fc7d 	bl	8001ddc <clst2sect>
 80024e2:	4602      	mov	r2, r0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <dir_sdi+0xcc>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e010      	b.n	800251c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699a      	ldr	r2, [r3, #24]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	0a5b      	lsrs	r3, r3, #9
 8002502:	441a      	add	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002514:	441a      	add	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	61da      	str	r2, [r3, #28]

	return FR_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	3320      	adds	r3, #32
 800253a:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002542:	d302      	bcc.n	800254a <dir_next+0x26>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <dir_next+0x32>
 8002552:	2304      	movs	r3, #4
 8002554:	e078      	b.n	8002648 <dir_next+0x124>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800255c:	2b00      	cmp	r3, #0
 800255e:	d166      	bne.n	800262e <dir_next+0x10a>
		dp->sect++;				/* Next sector */
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10a      	bne.n	8002588 <dir_next+0x64>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	095b      	lsrs	r3, r3, #5
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	8912      	ldrh	r2, [r2, #8]
 800257a:	4293      	cmp	r3, r2
 800257c:	d357      	bcc.n	800262e <dir_next+0x10a>
				dp->sect = 0; return FR_NO_FILE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	619a      	str	r2, [r3, #24]
 8002584:	2304      	movs	r3, #4
 8002586:	e05f      	b.n	8002648 <dir_next+0x124>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	0a5b      	lsrs	r3, r3, #9
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	8952      	ldrh	r2, [r2, #10]
 8002590:	3a01      	subs	r2, #1
 8002592:	4013      	ands	r3, r2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d14a      	bne.n	800262e <dir_next+0x10a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	4619      	mov	r1, r3
 80025a0:	4610      	mov	r0, r2
 80025a2:	f7ff fc3a 	bl	8001e1a <get_fat>
 80025a6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d801      	bhi.n	80025b2 <dir_next+0x8e>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e04a      	b.n	8002648 <dir_next+0x124>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b8:	d101      	bne.n	80025be <dir_next+0x9a>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e044      	b.n	8002648 <dir_next+0x124>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d328      	bcc.n	800261a <dir_next+0xf6>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d104      	bne.n	80025d8 <dir_next+0xb4>
						dp->sect = 0; return FR_NO_FILE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	619a      	str	r2, [r3, #24]
 80025d4:	2304      	movs	r3, #4
 80025d6:	e037      	b.n	8002648 <dir_next+0x124>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	4619      	mov	r1, r3
 80025e0:	4610      	mov	r0, r2
 80025e2:	f7ff fe0b 	bl	80021fc <create_chain>
 80025e6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <dir_next+0xce>
 80025ee:	2307      	movs	r3, #7
 80025f0:	e02a      	b.n	8002648 <dir_next+0x124>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <dir_next+0xd8>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e025      	b.n	8002648 <dir_next+0x124>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002602:	d101      	bne.n	8002608 <dir_next+0xe4>
 8002604:	2301      	movs	r3, #1
 8002606:	e01f      	b.n	8002648 <dir_next+0x124>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8002608:	6979      	ldr	r1, [r7, #20]
 800260a:	6938      	ldr	r0, [r7, #16]
 800260c:	f7ff fec7 	bl	800239e <dir_clear>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <dir_next+0xf6>
 8002616:	2301      	movs	r3, #1
 8002618:	e016      	b.n	8002648 <dir_next+0x124>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 8002620:	6979      	ldr	r1, [r7, #20]
 8002622:	6938      	ldr	r0, [r7, #16]
 8002624:	f7ff fbda 	bl	8001ddc <clst2sect>
 8002628:	4602      	mov	r2, r0
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002640:	441a      	add	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT nent				/* Number of contiguous entries to allocate */
)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8002660:	2100      	movs	r1, #0
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff fee3 	bl	800242e <dir_sdi>
 8002668:	4603      	mov	r3, r0
 800266a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800266c:	7dfb      	ldrb	r3, [r7, #23]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d12b      	bne.n	80026ca <dir_alloc+0x7a>
		n = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	4619      	mov	r1, r3
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f7ff fb12 	bl	8001ca6 <move_window>
 8002682:	4603      	mov	r3, r0
 8002684:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8002686:	7dfb      	ldrb	r3, [r7, #23]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d11d      	bne.n	80026c8 <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2be5      	cmp	r3, #229	; 0xe5
 8002694:	d004      	beq.n	80026a0 <dir_alloc+0x50>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d107      	bne.n	80026b0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	3301      	adds	r3, #1
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d102      	bne.n	80026b4 <dir_alloc+0x64>
 80026ae:	e00c      	b.n	80026ca <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80026b0:	2300      	movs	r3, #0
 80026b2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80026b4:	2101      	movs	r1, #1
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff ff34 	bl	8002524 <dir_next>
 80026bc:	4603      	mov	r3, r0
 80026be:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0d7      	beq.n	8002676 <dir_alloc+0x26>
 80026c6:	e000      	b.n	80026ca <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80026c8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80026ca:	7dfb      	ldrb	r3, [r7, #23]
 80026cc:	2b04      	cmp	r3, #4
 80026ce:	d101      	bne.n	80026d4 <dir_alloc+0x84>
 80026d0:	2307      	movs	r3, #7
 80026d2:	75fb      	strb	r3, [r7, #23]
	return res;
 80026d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b084      	sub	sp, #16
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	331a      	adds	r3, #26
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff f955 	bl	800199c <ld_word>
 80026f2:	4603      	mov	r3, r0
 80026f4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d109      	bne.n	8002712 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	3314      	adds	r3, #20
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff f94a 	bl	800199c <ld_word>
 8002708:	4603      	mov	r3, r0
 800270a:	041b      	lsls	r3, r3, #16
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8002712:	68fb      	ldr	r3, [r7, #12]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	331a      	adds	r3, #26
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	b292      	uxth	r2, r2
 8002730:	4611      	mov	r1, r2
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff f96d 	bl	8001a12 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b03      	cmp	r3, #3
 800273e:	d109      	bne.n	8002754 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f103 0214 	add.w	r2, r3, #20
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	0c1b      	lsrs	r3, r3, #16
 800274a:	b29b      	uxth	r3, r3
 800274c:	4619      	mov	r1, r3
 800274e:	4610      	mov	r0, r2
 8002750:	f7ff f95f 	bl	8001a12 <st_word>
	}
}
 8002754:	bf00      	nop
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800276a:	2100      	movs	r1, #0
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff fe5e 	bl	800242e <dir_sdi>
 8002772:	4603      	mov	r3, r0
 8002774:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8002776:	7dfb      	ldrb	r3, [r7, #23]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <dir_find+0x24>
 800277c:	7dfb      	ldrb	r3, [r7, #23]
 800277e:	e03e      	b.n	80027fe <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	4619      	mov	r1, r3
 8002786:	6938      	ldr	r0, [r7, #16]
 8002788:	f7ff fa8d 	bl	8001ca6 <move_window>
 800278c:	4603      	mov	r3, r0
 800278e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8002790:	7dfb      	ldrb	r3, [r7, #23]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d12f      	bne.n	80027f6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800279e:	7bfb      	ldrb	r3, [r7, #15]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d102      	bne.n	80027aa <dir_find+0x4e>
 80027a4:	2304      	movs	r3, #4
 80027a6:	75fb      	strb	r3, [r7, #23]
 80027a8:	e028      	b.n	80027fc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	330b      	adds	r3, #11
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	330b      	adds	r3, #11
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	f003 0308 	and.w	r3, r3, #8
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10a      	bne.n	80027e2 <dir_find+0x86>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69d8      	ldr	r0, [r3, #28]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3320      	adds	r3, #32
 80027d4:	220b      	movs	r2, #11
 80027d6:	4619      	mov	r1, r3
 80027d8:	f7ff f99d 	bl	8001b16 <mem_cmp>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00b      	beq.n	80027fa <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80027e2:	2100      	movs	r1, #0
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff fe9d 	bl	8002524 <dir_next>
 80027ea:	4603      	mov	r3, r0
 80027ec:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80027ee:	7dfb      	ldrb	r3, [r7, #23]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0c5      	beq.n	8002780 <dir_find+0x24>
 80027f4:	e002      	b.n	80027fc <dir_find+0xa0>
		if (res != FR_OK) break;
 80027f6:	bf00      	nop
 80027f8:	e000      	b.n	80027fc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80027fa:	bf00      	nop

	return res;
 80027fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b084      	sub	sp, #16
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8002814:	2101      	movs	r1, #1
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7ff ff1a 	bl	8002650 <dir_alloc>
 800281c:	4603      	mov	r3, r0
 800281e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d11c      	bne.n	8002860 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	4619      	mov	r1, r3
 800282c:	68b8      	ldr	r0, [r7, #8]
 800282e:	f7ff fa3a 	bl	8001ca6 <move_window>
 8002832:	4603      	mov	r3, r0
 8002834:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8002836:	7bfb      	ldrb	r3, [r7, #15]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d111      	bne.n	8002860 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	2220      	movs	r2, #32
 8002842:	2100      	movs	r1, #0
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff f94c 	bl	8001ae2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69d8      	ldr	r0, [r3, #28]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3320      	adds	r3, #32
 8002852:	220b      	movs	r2, #11
 8002854:	4619      	mov	r1, r3
 8002856:	f7ff f923 	bl	8001aa0 <mem_cpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2201      	movs	r2, #1
 800285e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8002860:	7bfb      	ldrb	r3, [r7, #15]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
	...

0800286c <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08a      	sub	sp, #40	; 0x28
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	617b      	str	r3, [r7, #20]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3320      	adds	r3, #32
 8002880:	613b      	str	r3, [r7, #16]
	mem_set(sfn, ' ', 11);
 8002882:	220b      	movs	r2, #11
 8002884:	2120      	movs	r1, #32
 8002886:	6938      	ldr	r0, [r7, #16]
 8002888:	f7ff f92b 	bl	8001ae2 <mem_set>
	si = i = 0; ni = 8;
 800288c:	2300      	movs	r3, #0
 800288e:	61bb      	str	r3, [r7, #24]
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	61fb      	str	r3, [r7, #28]
 8002894:	2308      	movs	r3, #8
 8002896:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	61fa      	str	r2, [r7, #28]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	4413      	add	r3, r2
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 80028a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028ac:	2b20      	cmp	r3, #32
 80028ae:	d97c      	bls.n	80029aa <create_name+0x13e>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80028b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028b4:	2b2f      	cmp	r3, #47	; 0x2f
 80028b6:	d007      	beq.n	80028c8 <create_name+0x5c>
 80028b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028bc:	2b5c      	cmp	r3, #92	; 0x5c
 80028be:	d110      	bne.n	80028e2 <create_name+0x76>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80028c0:	e002      	b.n	80028c8 <create_name+0x5c>
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3301      	adds	r3, #1
 80028c6:	61fb      	str	r3, [r7, #28]
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	4413      	add	r3, r2
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b2f      	cmp	r3, #47	; 0x2f
 80028d2:	d0f6      	beq.n	80028c2 <create_name+0x56>
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	4413      	add	r3, r2
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b5c      	cmp	r3, #92	; 0x5c
 80028de:	d0f0      	beq.n	80028c2 <create_name+0x56>
			break;
 80028e0:	e064      	b.n	80029ac <create_name+0x140>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 80028e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028e6:	2b2e      	cmp	r3, #46	; 0x2e
 80028e8:	d003      	beq.n	80028f2 <create_name+0x86>
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d30d      	bcc.n	800290e <create_name+0xa2>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	2b0b      	cmp	r3, #11
 80028f6:	d003      	beq.n	8002900 <create_name+0x94>
 80028f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028fc:	2b2e      	cmp	r3, #46	; 0x2e
 80028fe:	d001      	beq.n	8002904 <create_name+0x98>
 8002900:	2306      	movs	r3, #6
 8002902:	e06f      	b.n	80029e4 <create_name+0x178>
			i = 8; ni = 11;				/* Enter file extension field */
 8002904:	2308      	movs	r3, #8
 8002906:	61bb      	str	r3, [r7, #24]
 8002908:	230b      	movs	r3, #11
 800290a:	623b      	str	r3, [r7, #32]
			continue;
 800290c:	e04c      	b.n	80029a8 <create_name+0x13c>
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 800290e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff f941 	bl	8001b9a <dbc_1st>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d024      	beq.n	8002968 <create_name+0xfc>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	61fa      	str	r2, [r7, #28]
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	4413      	add	r3, r2
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 800292c:	7bfb      	ldrb	r3, [r7, #15]
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff f953 	bl	8001bda <dbc_2nd>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d004      	beq.n	8002944 <create_name+0xd8>
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	3b01      	subs	r3, #1
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	429a      	cmp	r2, r3
 8002942:	d301      	bcc.n	8002948 <create_name+0xdc>
 8002944:	2306      	movs	r3, #6
 8002946:	e04d      	b.n	80029e4 <create_name+0x178>
			sfn[i++] = c;
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	61ba      	str	r2, [r7, #24]
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4413      	add	r3, r2
 8002952:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002956:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	61ba      	str	r2, [r7, #24]
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4413      	add	r3, r2
 8002962:	7bfa      	ldrb	r2, [r7, #15]
 8002964:	701a      	strb	r2, [r3, #0]
 8002966:	e797      	b.n	8002898 <create_name+0x2c>
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8002968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800296c:	4619      	mov	r1, r3
 800296e:	481f      	ldr	r0, [pc, #124]	; (80029ec <create_name+0x180>)
 8002970:	f7ff f8f8 	bl	8001b64 <chk_chr>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <create_name+0x112>
 800297a:	2306      	movs	r3, #6
 800297c:	e032      	b.n	80029e4 <create_name+0x178>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800297e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002982:	2b60      	cmp	r3, #96	; 0x60
 8002984:	d908      	bls.n	8002998 <create_name+0x12c>
 8002986:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800298a:	2b7a      	cmp	r3, #122	; 0x7a
 800298c:	d804      	bhi.n	8002998 <create_name+0x12c>
 800298e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002992:	3b20      	subs	r3, #32
 8002994:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			sfn[i++] = c;
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	61ba      	str	r2, [r7, #24]
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4413      	add	r3, r2
 80029a2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80029a6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 80029a8:	e776      	b.n	8002898 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80029aa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	441a      	add	r2, r3
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <create_name+0x154>
 80029bc:	2306      	movs	r3, #6
 80029be:	e011      	b.n	80029e4 <create_name+0x178>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2be5      	cmp	r3, #229	; 0xe5
 80029c6:	d102      	bne.n	80029ce <create_name+0x162>
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	2205      	movs	r2, #5
 80029cc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80029ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029d2:	2b20      	cmp	r3, #32
 80029d4:	d801      	bhi.n	80029da <create_name+0x16e>
 80029d6:	2204      	movs	r2, #4
 80029d8:	e000      	b.n	80029dc <create_name+0x170>
 80029da:	2200      	movs	r2, #0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	330b      	adds	r3, #11
 80029e0:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80029e2:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3728      	adds	r7, #40	; 0x28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	08009aa0 	.word	0x08009aa0

080029f0 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	613b      	str	r3, [r7, #16]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8002a00:	e002      	b.n	8002a08 <follow_path+0x18>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	3301      	adds	r3, #1
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b2f      	cmp	r3, #47	; 0x2f
 8002a0e:	d0f8      	beq.n	8002a02 <follow_path+0x12>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b5c      	cmp	r3, #92	; 0x5c
 8002a16:	d0f4      	beq.n	8002a02 <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from root directory */
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b1f      	cmp	r3, #31
 8002a24:	d80a      	bhi.n	8002a3c <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2280      	movs	r2, #128	; 0x80
 8002a2a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 8002a2e:	2100      	movs	r1, #0
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7ff fcfc 	bl	800242e <dir_sdi>
 8002a36:	4603      	mov	r3, r0
 8002a38:	75fb      	strb	r3, [r7, #23]
 8002a3a:	e043      	b.n	8002ac4 <follow_path+0xd4>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8002a3c:	463b      	mov	r3, r7
 8002a3e:	4619      	mov	r1, r3
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ff13 	bl	800286c <create_name>
 8002a46:	4603      	mov	r3, r0
 8002a48:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8002a4a:	7dfb      	ldrb	r3, [r7, #23]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d134      	bne.n	8002aba <follow_path+0xca>
			res = dir_find(dp);				/* Find an object with the segment name */
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff fe83 	bl	800275c <dir_find>
 8002a56:	4603      	mov	r3, r0
 8002a58:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002a60:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 8002a62:	7dfb      	ldrb	r3, [r7, #23]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00a      	beq.n	8002a7e <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8002a68:	7dfb      	ldrb	r3, [r7, #23]
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d127      	bne.n	8002abe <follow_path+0xce>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d122      	bne.n	8002abe <follow_path+0xce>
 8002a78:	2305      	movs	r3, #5
 8002a7a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8002a7c:	e01f      	b.n	8002abe <follow_path+0xce>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d11c      	bne.n	8002ac2 <follow_path+0xd2>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	799b      	ldrb	r3, [r3, #6]
 8002a8c:	f003 0310 	and.w	r3, r3, #16
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d102      	bne.n	8002a9a <follow_path+0xaa>
				res = FR_NO_PATH; break;
 8002a94:	2305      	movs	r3, #5
 8002a96:	75fb      	strb	r3, [r7, #23]
 8002a98:	e014      	b.n	8002ac4 <follow_path+0xd4>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aa8:	4413      	add	r3, r2
 8002aaa:	4619      	mov	r1, r3
 8002aac:	6938      	ldr	r0, [r7, #16]
 8002aae:	f7ff fe16 	bl	80026de <ld_clust>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8002ab8:	e7c0      	b.n	8002a3c <follow_path+0x4c>
			if (res != FR_OK) break;
 8002aba:	bf00      	nop
 8002abc:	e002      	b.n	8002ac4 <follow_path+0xd4>
				break;
 8002abe:	bf00      	nop
 8002ac0:	e000      	b.n	8002ac4 <follow_path+0xd4>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8002ac2:	bf00      	nop
			}
		}
	}

	return res;
 8002ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b089      	sub	sp, #36	; 0x24
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	TCHAR tc;
	int i, vol = -1;
 8002ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ada:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <get_ldnumber+0x22>
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	e02d      	b.n	8002b4c <get_ldnumber+0x7e>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	1c5a      	adds	r2, r3, #1
 8002af4:	61fa      	str	r2, [r7, #28]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	73fb      	strb	r3, [r7, #15]
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	2b20      	cmp	r3, #32
 8002afe:	d902      	bls.n	8002b06 <get_ldnumber+0x38>
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
 8002b02:	2b3a      	cmp	r3, #58	; 0x3a
 8002b04:	d1f4      	bne.n	8002af0 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	2b3a      	cmp	r3, #58	; 0x3a
 8002b0a:	d11c      	bne.n	8002b46 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b2f      	cmp	r3, #47	; 0x2f
 8002b16:	d90c      	bls.n	8002b32 <get_ldnumber+0x64>
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b39      	cmp	r3, #57	; 0x39
 8002b1e:	d808      	bhi.n	8002b32 <get_ldnumber+0x64>
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	3302      	adds	r3, #2
 8002b24:	69fa      	ldr	r2, [r7, #28]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d103      	bne.n	8002b32 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	3b30      	subs	r3, #48	; 0x30
 8002b30:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	dc04      	bgt.n	8002b42 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69fa      	ldr	r2, [r7, #28]
 8002b40:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	e002      	b.n	8002b4c <get_ldnumber+0x7e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 8002b4a:	697b      	ldr	r3, [r7, #20]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3724      	adds	r7, #36	; 0x24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <check_fs>:

static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	70da      	strb	r2, [r3, #3]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b6e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002b70:	6839      	ldr	r1, [r7, #0]
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff f897 	bl	8001ca6 <move_window>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <check_fs+0x2a>
 8002b7e:	2304      	movs	r3, #4
 8002b80:	e038      	b.n	8002bf4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3330      	adds	r3, #48	; 0x30
 8002b86:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fe ff06 	bl	800199c <ld_word>
 8002b90:	4603      	mov	r3, r0
 8002b92:	461a      	mov	r2, r3
 8002b94:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <check_fs+0x48>
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e029      	b.n	8002bf4 <check_fs+0x9c>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ba6:	2be9      	cmp	r3, #233	; 0xe9
 8002ba8:	d009      	beq.n	8002bbe <check_fs+0x66>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bb0:	2beb      	cmp	r3, #235	; 0xeb
 8002bb2:	d004      	beq.n	8002bbe <check_fs+0x66>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bba:	2be8      	cmp	r3, #232	; 0xe8
 8002bbc:	d119      	bne.n	8002bf2 <check_fs+0x9a>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3330      	adds	r3, #48	; 0x30
 8002bc2:	3336      	adds	r3, #54	; 0x36
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	490d      	ldr	r1, [pc, #52]	; (8002bfc <check_fs+0xa4>)
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fe ffa4 	bl	8001b16 <mem_cmp>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <check_fs+0x80>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	e00d      	b.n	8002bf4 <check_fs+0x9c>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3330      	adds	r3, #48	; 0x30
 8002bdc:	3352      	adds	r3, #82	; 0x52
 8002bde:	2205      	movs	r2, #5
 8002be0:	4907      	ldr	r1, [pc, #28]	; (8002c00 <check_fs+0xa8>)
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe ff97 	bl	8001b16 <mem_cmp>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <check_fs+0x9a>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e000      	b.n	8002bf4 <check_fs+0x9c>
	}
	return 2;	/* Valid BS but not FAT */
 8002bf2:	2302      	movs	r3, #2
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	08009ab0 	.word	0x08009ab0
 8002c00:	08009ab4 	.word	0x08009ab4

08002c04 <find_volume>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b096      	sub	sp, #88	; 0x58
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f7ff ff58 	bl	8002ace <get_ldnumber>
 8002c1e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8002c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	da01      	bge.n	8002c2a <find_volume+0x26>
 8002c26:	230b      	movs	r3, #11
 8002c28:	e238      	b.n	800309c <find_volume+0x498>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8002c2a:	4aa8      	ldr	r2, [pc, #672]	; (8002ecc <find_volume+0x2c8>)
 8002c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c32:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8002c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <find_volume+0x3a>
 8002c3a:	230c      	movs	r3, #12
 8002c3c:	e22e      	b.n	800309c <find_volume+0x498>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c42:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8002c44:	79fb      	ldrb	r3, [r7, #7]
 8002c46:	f023 0301 	bic.w	r3, r3, #1
 8002c4a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8002c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d01a      	beq.n	8002c8a <find_volume+0x86>
		stat = disk_status(fs->pdrv);
 8002c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c56:	785b      	ldrb	r3, [r3, #1]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fe fb8d 	bl	8001378 <disk_status>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8002c64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10c      	bne.n	8002c8a <find_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8002c70:	79fb      	ldrb	r3, [r7, #7]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d007      	beq.n	8002c86 <find_volume+0x82>
 8002c76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8002c82:	230a      	movs	r3, #10
 8002c84:	e20a      	b.n	800309c <find_volume+0x498>
			}
			return FR_OK;				/* The filesystem object is valid */
 8002c86:	2300      	movs	r3, #0
 8002c88:	e208      	b.n	800309c <find_volume+0x498>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
 8002c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c96:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 8002c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9a:	785b      	ldrb	r3, [r3, #1]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fe fa81 	bl	80011a4 <disk_initialize>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8002ca8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e1f1      	b.n	800309c <find_volume+0x498>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d007      	beq.n	8002cce <find_volume+0xca>
 8002cbe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8002cca:	230a      	movs	r3, #10
 8002ccc:	e1e6      	b.n	800309c <find_volume+0x498>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK (MBR) and SFD (w/o partition). */
	bsect = 0;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8002cd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002cd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002cd6:	f7ff ff3f 	bl	8002b58 <check_fs>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8002ce0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d14b      	bne.n	8002d80 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002ce8:	2300      	movs	r3, #0
 8002cea:	643b      	str	r3, [r7, #64]	; 0x40
 8002cec:	e01f      	b.n	8002d2e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8002cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8002cfc:	4413      	add	r3, r2
 8002cfe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8002d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d02:	3304      	adds	r3, #4
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d006      	beq.n	8002d18 <find_volume+0x114>
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0c:	3308      	adds	r3, #8
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fe fe5c 	bl	80019cc <ld_dword>
 8002d14:	4602      	mov	r2, r0
 8002d16:	e000      	b.n	8002d1a <find_volume+0x116>
 8002d18:	2200      	movs	r2, #0
 8002d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002d22:	440b      	add	r3, r1
 8002d24:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	643b      	str	r3, [r7, #64]	; 0x40
 8002d2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	d9dc      	bls.n	8002cee <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8002d34:	2300      	movs	r3, #0
 8002d36:	643b      	str	r3, [r7, #64]	; 0x40
		if (i != 0) i--;
 8002d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <find_volume+0x140>
 8002d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d40:	3b01      	subs	r3, #1
 8002d42:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8002d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002d52:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8002d54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d005      	beq.n	8002d66 <find_volume+0x162>
 8002d5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002d5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d5e:	f7ff fefb 	bl	8002b58 <check_fs>
 8002d62:	4603      	mov	r3, r0
 8002d64:	e000      	b.n	8002d68 <find_volume+0x164>
 8002d66:	2303      	movs	r3, #3
 8002d68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8002d6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d905      	bls.n	8002d80 <find_volume+0x17c>
 8002d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d76:	3301      	adds	r3, #1
 8002d78:	643b      	str	r3, [r7, #64]	; 0x40
 8002d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d9e1      	bls.n	8002d44 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002d80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d101      	bne.n	8002d8c <find_volume+0x188>
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e187      	b.n	800309c <find_volume+0x498>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8002d8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d901      	bls.n	8002d98 <find_volume+0x194>
 8002d94:	230d      	movs	r3, #13
 8002d96:	e181      	b.n	800309c <find_volume+0x498>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9a:	3330      	adds	r3, #48	; 0x30
 8002d9c:	330b      	adds	r3, #11
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe fdfc 	bl	800199c <ld_word>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002daa:	d001      	beq.n	8002db0 <find_volume+0x1ac>
 8002dac:	230d      	movs	r3, #13
 8002dae:	e175      	b.n	800309c <find_volume+0x498>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8002db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db2:	3330      	adds	r3, #48	; 0x30
 8002db4:	3316      	adds	r3, #22
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fe fdf0 	bl	800199c <ld_word>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8002dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d106      	bne.n	8002dd4 <find_volume+0x1d0>
 8002dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc8:	3330      	adds	r3, #48	; 0x30
 8002dca:	3324      	adds	r3, #36	; 0x24
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fe fdfd 	bl	80019cc <ld_dword>
 8002dd2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8002dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dd8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8002dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ddc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8002de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de6:	789b      	ldrb	r3, [r3, #2]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d005      	beq.n	8002df8 <find_volume+0x1f4>
 8002dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dee:	789b      	ldrb	r3, [r3, #2]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d001      	beq.n	8002df8 <find_volume+0x1f4>
 8002df4:	230d      	movs	r3, #13
 8002df6:	e151      	b.n	800309c <find_volume+0x498>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8002df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfa:	789b      	ldrb	r3, [r3, #2]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e00:	fb02 f303 	mul.w	r3, r2, r3
 8002e04:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8002e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e10:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8002e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e14:	895b      	ldrh	r3, [r3, #10]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d008      	beq.n	8002e2c <find_volume+0x228>
 8002e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1c:	895b      	ldrh	r3, [r3, #10]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e22:	895b      	ldrh	r3, [r3, #10]
 8002e24:	3b01      	subs	r3, #1
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <find_volume+0x22c>
 8002e2c:	230d      	movs	r3, #13
 8002e2e:	e135      	b.n	800309c <find_volume+0x498>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8002e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e32:	3330      	adds	r3, #48	; 0x30
 8002e34:	3311      	adds	r3, #17
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fe fdb0 	bl	800199c <ld_word>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	461a      	mov	r2, r3
 8002e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e42:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8002e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e46:	891b      	ldrh	r3, [r3, #8]
 8002e48:	f003 030f 	and.w	r3, r3, #15
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <find_volume+0x252>
 8002e52:	230d      	movs	r3, #13
 8002e54:	e122      	b.n	800309c <find_volume+0x498>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8002e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e58:	3330      	adds	r3, #48	; 0x30
 8002e5a:	3313      	adds	r3, #19
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fe fd9d 	bl	800199c <ld_word>
 8002e62:	4603      	mov	r3, r0
 8002e64:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8002e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d106      	bne.n	8002e7a <find_volume+0x276>
 8002e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6e:	3330      	adds	r3, #48	; 0x30
 8002e70:	3320      	adds	r3, #32
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe fdaa 	bl	80019cc <ld_dword>
 8002e78:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8002e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7c:	3330      	adds	r3, #48	; 0x30
 8002e7e:	330e      	adds	r3, #14
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fe fd8b 	bl	800199c <ld_word>
 8002e86:	4603      	mov	r3, r0
 8002e88:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8002e8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <find_volume+0x290>
 8002e90:	230d      	movs	r3, #13
 8002e92:	e103      	b.n	800309c <find_volume+0x498>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8002e94:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e98:	4413      	add	r3, r2
 8002e9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e9c:	8912      	ldrh	r2, [r2, #8]
 8002e9e:	0912      	lsrs	r2, r2, #4
 8002ea0:	b292      	uxth	r2, r2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8002ea6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d201      	bcs.n	8002eb2 <find_volume+0x2ae>
 8002eae:	230d      	movs	r3, #13
 8002eb0:	e0f4      	b.n	800309c <find_volume+0x498>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8002eb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eba:	8952      	ldrh	r2, [r2, #10]
 8002ebc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d103      	bne.n	8002ed0 <find_volume+0x2cc>
 8002ec8:	230d      	movs	r3, #13
 8002eca:	e0e7      	b.n	800309c <find_volume+0x498>
 8002ecc:	20000204 	.word	0x20000204
		fmt = 0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	4a72      	ldr	r2, [pc, #456]	; (80030a4 <find_volume+0x4a0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d802      	bhi.n	8002ee4 <find_volume+0x2e0>
 8002ede:	2303      	movs	r3, #3
 8002ee0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d802      	bhi.n	8002ef4 <find_volume+0x2f0>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	f640 72f5 	movw	r2, #4085	; 0xff5
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d802      	bhi.n	8002f04 <find_volume+0x300>
 8002efe:	2301      	movs	r3, #1
 8002f00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8002f04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <find_volume+0x30c>
 8002f0c:	230d      	movs	r3, #13
 8002f0e:	e0c5      	b.n	800309c <find_volume+0x498>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	1c9a      	adds	r2, r3, #2
 8002f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f16:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8002f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f1c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8002f1e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f22:	441a      	add	r2, r3
 8002f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f26:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8002f28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2c:	441a      	add	r2, r3
 8002f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f30:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8002f32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f36:	2b03      	cmp	r3, #3
 8002f38:	d11e      	bne.n	8002f78 <find_volume+0x374>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8002f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3c:	3330      	adds	r3, #48	; 0x30
 8002f3e:	332a      	adds	r3, #42	; 0x2a
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fe fd2b 	bl	800199c <ld_word>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <find_volume+0x34c>
 8002f4c:	230d      	movs	r3, #13
 8002f4e:	e0a5      	b.n	800309c <find_volume+0x498>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8002f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f52:	891b      	ldrh	r3, [r3, #8]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <find_volume+0x358>
 8002f58:	230d      	movs	r3, #13
 8002f5a:	e09f      	b.n	800309c <find_volume+0x498>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8002f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f5e:	3330      	adds	r3, #48	; 0x30
 8002f60:	332c      	adds	r3, #44	; 0x2c
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fe fd32 	bl	80019cc <ld_dword>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8002f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	647b      	str	r3, [r7, #68]	; 0x44
 8002f76:	e01f      	b.n	8002fb8 <find_volume+0x3b4>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8002f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7a:	891b      	ldrh	r3, [r3, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <find_volume+0x380>
 8002f80:	230d      	movs	r3, #13
 8002f82:	e08b      	b.n	800309c <find_volume+0x498>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8002f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f86:	6a1a      	ldr	r2, [r3, #32]
 8002f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f8a:	441a      	add	r2, r3
 8002f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002f90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d103      	bne.n	8002fa0 <find_volume+0x39c>
 8002f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	e00a      	b.n	8002fb6 <find_volume+0x3b2>
 8002fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa2:	695a      	ldr	r2, [r3, #20]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	4413      	add	r3, r2
 8002faa:	085a      	lsrs	r2, r3, #1
 8002fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8002fb6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8002fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fba:	699a      	ldr	r2, [r3, #24]
 8002fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fbe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002fc2:	0a5b      	lsrs	r3, r3, #9
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d201      	bcs.n	8002fcc <find_volume+0x3c8>
 8002fc8:	230d      	movs	r3, #13
 8002fca:	e067      	b.n	800309c <find_volume+0x498>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8002fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fce:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd2:	611a      	str	r2, [r3, #16]
 8002fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fda:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8002fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fde:	2280      	movs	r2, #128	; 0x80
 8002fe0:	711a      	strb	r2, [r3, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8002fe2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	d149      	bne.n	800307e <find_volume+0x47a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8002fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fec:	3330      	adds	r3, #48	; 0x30
 8002fee:	3330      	adds	r3, #48	; 0x30
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7fe fcd3 	bl	800199c <ld_word>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d140      	bne.n	800307e <find_volume+0x47a>
			&& move_window(fs, bsect + 1) == FR_OK)
 8002ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ffe:	3301      	adds	r3, #1
 8003000:	4619      	mov	r1, r3
 8003002:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003004:	f7fe fe4f 	bl	8001ca6 <move_window>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d137      	bne.n	800307e <find_volume+0x47a>
		{
			fs->fsi_flag = 0;
 800300e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003010:	2200      	movs	r2, #0
 8003012:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8003014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003016:	3330      	adds	r3, #48	; 0x30
 8003018:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800301c:	4618      	mov	r0, r3
 800301e:	f7fe fcbd 	bl	800199c <ld_word>
 8003022:	4603      	mov	r3, r0
 8003024:	461a      	mov	r2, r3
 8003026:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800302a:	429a      	cmp	r2, r3
 800302c:	d127      	bne.n	800307e <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800302e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003030:	3330      	adds	r3, #48	; 0x30
 8003032:	4618      	mov	r0, r3
 8003034:	f7fe fcca 	bl	80019cc <ld_dword>
 8003038:	4602      	mov	r2, r0
 800303a:	4b1b      	ldr	r3, [pc, #108]	; (80030a8 <find_volume+0x4a4>)
 800303c:	429a      	cmp	r2, r3
 800303e:	d11e      	bne.n	800307e <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8003040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003042:	3330      	adds	r3, #48	; 0x30
 8003044:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003048:	4618      	mov	r0, r3
 800304a:	f7fe fcbf 	bl	80019cc <ld_dword>
 800304e:	4602      	mov	r2, r0
 8003050:	4b16      	ldr	r3, [pc, #88]	; (80030ac <find_volume+0x4a8>)
 8003052:	429a      	cmp	r2, r3
 8003054:	d113      	bne.n	800307e <find_volume+0x47a>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8003056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003058:	3330      	adds	r3, #48	; 0x30
 800305a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800305e:	4618      	mov	r0, r3
 8003060:	f7fe fcb4 	bl	80019cc <ld_dword>
 8003064:	4602      	mov	r2, r0
 8003066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003068:	611a      	str	r2, [r3, #16]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800306a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306c:	3330      	adds	r3, #48	; 0x30
 800306e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe fcaa 	bl	80019cc <ld_dword>
 8003078:	4602      	mov	r2, r0
 800307a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800307e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003080:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003084:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8003086:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <find_volume+0x4ac>)
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	3301      	adds	r3, #1
 800308c:	b29a      	uxth	r2, r3
 800308e:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <find_volume+0x4ac>)
 8003090:	801a      	strh	r2, [r3, #0]
 8003092:	4b07      	ldr	r3, [pc, #28]	; (80030b0 <find_volume+0x4ac>)
 8003094:	881a      	ldrh	r2, [r3, #0]
 8003096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003098:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3758      	adds	r7, #88	; 0x58
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	0ffffff5 	.word	0x0ffffff5
 80030a8:	41615252 	.word	0x41615252
 80030ac:	61417272 	.word	0x61417272
 80030b0:	20000208 	.word	0x20000208

080030b4 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80030be:	2309      	movs	r3, #9
 80030c0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d01c      	beq.n	8003102 <validate+0x4e>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d018      	beq.n	8003102 <validate+0x4e>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d013      	beq.n	8003102 <validate+0x4e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	889a      	ldrh	r2, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	88db      	ldrh	r3, [r3, #6]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d10c      	bne.n	8003102 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	785b      	ldrb	r3, [r3, #1]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe f942 	bl	8001378 <disk_status>
 80030f4:	4603      	mov	r3, r0
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <validate+0x4e>
			res = FR_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d102      	bne.n	800310e <validate+0x5a>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	e000      	b.n	8003110 <validate+0x5c>
 800310e:	2300      	movs	r3, #0
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	6013      	str	r3, [r2, #0]
	return res;
 8003114:	7bfb      	ldrb	r3, [r7, #15]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	4613      	mov	r3, r2
 800312c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8003132:	f107 0310 	add.w	r3, r7, #16
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff fcc9 	bl	8002ace <get_ldnumber>
 800313c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	2b00      	cmp	r3, #0
 8003142:	da01      	bge.n	8003148 <f_mount+0x28>
 8003144:	230b      	movs	r3, #11
 8003146:	e025      	b.n	8003194 <f_mount+0x74>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8003148:	4a14      	ldr	r2, [pc, #80]	; (800319c <f_mount+0x7c>)
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003150:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	2200      	movs	r2, #0
 800315c:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	490b      	ldr	r1, [pc, #44]	; (800319c <f_mount+0x7c>)
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 8003174:	79fb      	ldrb	r3, [r7, #7]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <f_mount+0x5e>
 800317a:	2300      	movs	r3, #0
 800317c:	e00a      	b.n	8003194 <f_mount+0x74>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800317e:	f107 010c 	add.w	r1, r7, #12
 8003182:	f107 0308 	add.w	r3, r7, #8
 8003186:	2200      	movs	r2, #0
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fd3b 	bl	8002c04 <find_volume>
 800318e:	4603      	mov	r3, r0
 8003190:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8003192:	7dfb      	ldrb	r3, [r7, #23]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3720      	adds	r7, #32
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	20000204 	.word	0x20000204

080031a0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80031a0:	b590      	push	{r4, r7, lr}
 80031a2:	b099      	sub	sp, #100	; 0x64
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	4613      	mov	r3, r2
 80031ac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <f_open+0x18>
 80031b4:	2309      	movs	r3, #9
 80031b6:	e172      	b.n	800349e <f_open+0x2fe>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 80031b8:	79fb      	ldrb	r3, [r7, #7]
 80031ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031be:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80031c0:	79fa      	ldrb	r2, [r7, #7]
 80031c2:	f107 0114 	add.w	r1, r7, #20
 80031c6:	f107 0308 	add.w	r3, r7, #8
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff fd1a 	bl	8002c04 <find_volume>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80031d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f040 8156 	bne.w	800348c <f_open+0x2ec>
		dj.obj.fs = fs;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	f107 0318 	add.w	r3, r7, #24
 80031ea:	4611      	mov	r1, r2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff fbff 	bl	80029f0 <follow_path>
 80031f2:	4603      	mov	r3, r0
 80031f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 80031f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d107      	bne.n	8003210 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8003200:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003204:	b25b      	sxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	da02      	bge.n	8003210 <f_open+0x70>
				res = FR_INVALID_NAME;
 800320a:	2306      	movs	r3, #6
 800320c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	f003 031c 	and.w	r3, r3, #28
 8003216:	2b00      	cmp	r3, #0
 8003218:	d073      	beq.n	8003302 <f_open+0x162>
			if (res != FR_OK) {					/* No file, create new */
 800321a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800321e:	2b00      	cmp	r3, #0
 8003220:	d010      	beq.n	8003244 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8003222:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003226:	2b04      	cmp	r3, #4
 8003228:	d107      	bne.n	800323a <f_open+0x9a>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 800322a:	f107 0318 	add.w	r3, r7, #24
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff fae9 	bl	8002806 <dir_register>
 8003234:	4603      	mov	r3, r0
 8003236:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	f043 0308 	orr.w	r3, r3, #8
 8003240:	71fb      	strb	r3, [r7, #7]
 8003242:	e010      	b.n	8003266 <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8003244:	7fbb      	ldrb	r3, [r7, #30]
 8003246:	f003 0311 	and.w	r3, r3, #17
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <f_open+0xb6>
					res = FR_DENIED;
 800324e:	2307      	movs	r3, #7
 8003250:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003254:	e007      	b.n	8003266 <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <f_open+0xc6>
 8003260:	2308      	movs	r3, #8
 8003262:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8003266:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800326a:	2b00      	cmp	r3, #0
 800326c:	d163      	bne.n	8003336 <f_open+0x196>
 800326e:	79fb      	ldrb	r3, [r7, #7]
 8003270:	f003 0308 	and.w	r3, r3, #8
 8003274:	2b00      	cmp	r3, #0
 8003276:	d05e      	beq.n	8003336 <f_open+0x196>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800327c:	4611      	mov	r1, r2
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff fa2d 	bl	80026de <ld_clust>
 8003284:	6538      	str	r0, [r7, #80]	; 0x50
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 8003286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003288:	f103 040e 	add.w	r4, r3, #14
 800328c:	f7fe fb36 	bl	80018fc <get_fattime>
 8003290:	4603      	mov	r3, r0
 8003292:	4619      	mov	r1, r3
 8003294:	4620      	mov	r0, r4
 8003296:	f7fe fbd7 	bl	8001a48 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800329a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329c:	330b      	adds	r3, #11
 800329e:	2220      	movs	r2, #32
 80032a0:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80032a6:	2200      	movs	r2, #0
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff fa37 	bl	800271c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80032ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b0:	331c      	adds	r3, #28
 80032b2:	2100      	movs	r1, #0
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fe fbc7 	bl	8001a48 <st_dword>
					fs->wflag = 1;
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2201      	movs	r2, #1
 80032be:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 80032c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d037      	beq.n	8003336 <f_open+0x196>
						dw = fs->winsect;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ca:	64fb      	str	r3, [r7, #76]	; 0x4c
						res = remove_chain(&dj.obj, cl, 0);
 80032cc:	f107 0318 	add.w	r3, r7, #24
 80032d0:	2200      	movs	r2, #0
 80032d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7fe ff2c 	bl	8002132 <remove_chain>
 80032da:	4603      	mov	r3, r0
 80032dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80032e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d126      	bne.n	8003336 <f_open+0x196>
							res = move_window(fs, dw);
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fe fcda 	bl	8001ca6 <move_window>
 80032f2:	4603      	mov	r3, r0
 80032f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80032fc:	3a01      	subs	r2, #1
 80032fe:	60da      	str	r2, [r3, #12]
 8003300:	e019      	b.n	8003336 <f_open+0x196>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 8003302:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003306:	2b00      	cmp	r3, #0
 8003308:	d115      	bne.n	8003336 <f_open+0x196>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 800330a:	7fbb      	ldrb	r3, [r7, #30]
 800330c:	f003 0310 	and.w	r3, r3, #16
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <f_open+0x17c>
					res = FR_NO_FILE;
 8003314:	2304      	movs	r3, #4
 8003316:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800331a:	e00c      	b.n	8003336 <f_open+0x196>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d007      	beq.n	8003336 <f_open+0x196>
 8003326:	7fbb      	ldrb	r3, [r7, #30]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <f_open+0x196>
						res = FR_DENIED;
 8003330:	2307      	movs	r3, #7
 8003332:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8003336:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10f      	bne.n	800335e <f_open+0x1be>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800333e:	79fb      	ldrb	r3, [r7, #7]
 8003340:	f003 0308 	and.w	r3, r3, #8
 8003344:	2b00      	cmp	r3, #0
 8003346:	d003      	beq.n	8003350 <f_open+0x1b0>
 8003348:	79fb      	ldrb	r3, [r7, #7]
 800334a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800334e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 8003358:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 800335e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003362:	2b00      	cmp	r3, #0
 8003364:	f040 8092 	bne.w	800348c <f_open+0x2ec>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800336c:	4611      	mov	r1, r2
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff f9b5 	bl	80026de <ld_clust>
 8003374:	4602      	mov	r2, r0
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800337a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800337c:	331c      	adds	r3, #28
 800337e:	4618      	mov	r0, r3
 8003380:	f7fe fb24 	bl	80019cc <ld_dword>
 8003384:	4602      	mov	r2, r0
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	88da      	ldrh	r2, [r3, #6]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	79fa      	ldrb	r2, [r7, #7]
 800339c:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	3328      	adds	r3, #40	; 0x28
 80033b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033b8:	2100      	movs	r1, #0
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fe fb91 	bl	8001ae2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80033c0:	79fb      	ldrb	r3, [r7, #7]
 80033c2:	f003 0320 	and.w	r3, r3, #32
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d060      	beq.n	800348c <f_open+0x2ec>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d05c      	beq.n	800348c <f_open+0x2ec>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	895b      	ldrh	r3, [r3, #10]
 80033de:	025b      	lsls	r3, r3, #9
 80033e0:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	657b      	str	r3, [r7, #84]	; 0x54
 80033ee:	e016      	b.n	800341e <f_open+0x27e>
					clst = get_fat(&fp->obj, clst);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fe fd10 	bl	8001e1a <get_fat>
 80033fa:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80033fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d802      	bhi.n	8003408 <f_open+0x268>
 8003402:	2302      	movs	r3, #2
 8003404:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8003408:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800340a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340e:	d102      	bne.n	8003416 <f_open+0x276>
 8003410:	2301      	movs	r3, #1
 8003412:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003416:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	657b      	str	r3, [r7, #84]	; 0x54
 800341e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003422:	2b00      	cmp	r3, #0
 8003424:	d103      	bne.n	800342e <f_open+0x28e>
 8003426:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800342a:	429a      	cmp	r2, r3
 800342c:	d8e0      	bhi.n	80033f0 <f_open+0x250>
				}
				fp->clust = clst;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003432:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8003434:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003438:	2b00      	cmp	r3, #0
 800343a:	d127      	bne.n	800348c <f_open+0x2ec>
 800343c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800343e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003442:	2b00      	cmp	r3, #0
 8003444:	d022      	beq.n	800348c <f_open+0x2ec>
					if ((sc = clst2sect(fs, clst)) == 0) {
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800344a:	4618      	mov	r0, r3
 800344c:	f7fe fcc6 	bl	8001ddc <clst2sect>
 8003450:	6478      	str	r0, [r7, #68]	; 0x44
 8003452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003454:	2b00      	cmp	r3, #0
 8003456:	d103      	bne.n	8003460 <f_open+0x2c0>
						res = FR_INT_ERR;
 8003458:	2302      	movs	r3, #2
 800345a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800345e:	e015      	b.n	800348c <f_open+0x2ec>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8003460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003462:	0a5a      	lsrs	r2, r3, #9
 8003464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003466:	441a      	add	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	7858      	ldrb	r0, [r3, #1]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	69da      	ldr	r2, [r3, #28]
 800347a:	2301      	movs	r3, #1
 800347c:	f7fd ff92 	bl	80013a4 <disk_read>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <f_open+0x2ec>
 8003486:	2301      	movs	r3, #1
 8003488:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800348c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <f_open+0x2fa>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800349a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3764      	adds	r7, #100	; 0x64
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd90      	pop	{r4, r7, pc}

080034a6 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b08e      	sub	sp, #56	; 0x38
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
 80034b2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f107 0214 	add.w	r2, r7, #20
 80034c4:	4611      	mov	r1, r2
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff fdf4 	bl	80030b4 <validate>
 80034cc:	4603      	mov	r3, r0
 80034ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80034d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d107      	bne.n	80034ea <f_read+0x44>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	7c5b      	ldrb	r3, [r3, #17]
 80034de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80034e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d002      	beq.n	80034f0 <f_read+0x4a>
 80034ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80034ee:	e109      	b.n	8003704 <f_read+0x25e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	7c1b      	ldrb	r3, [r3, #16]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <f_read+0x5a>
 80034fc:	2307      	movs	r3, #7
 80034fe:	e101      	b.n	8003704 <f_read+0x25e>
	remain = fp->obj.objsize - fp->fptr;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	68da      	ldr	r2, [r3, #12]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	429a      	cmp	r2, r3
 8003512:	f240 80f2 	bls.w	80036fa <f_read+0x254>
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until btr bytes read */
 800351a:	e0ee      	b.n	80036fa <f_read+0x254>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003524:	2b00      	cmp	r3, #0
 8003526:	f040 80ba 	bne.w	800369e <f_read+0x1f8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	0a5b      	lsrs	r3, r3, #9
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	8952      	ldrh	r2, [r2, #10]
 8003534:	3a01      	subs	r2, #1
 8003536:	4013      	ands	r3, r2
 8003538:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d123      	bne.n	8003588 <f_read+0xe2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d103      	bne.n	8003550 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	633b      	str	r3, [r7, #48]	; 0x30
 800354e:	e007      	b.n	8003560 <f_read+0xba>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	4619      	mov	r1, r3
 8003558:	4610      	mov	r0, r2
 800355a:	f7fe fc5e 	bl	8001e1a <get_fat>
 800355e:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8003560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003562:	2b01      	cmp	r3, #1
 8003564:	d804      	bhi.n	8003570 <f_read+0xca>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2202      	movs	r2, #2
 800356a:	745a      	strb	r2, [r3, #17]
 800356c:	2302      	movs	r3, #2
 800356e:	e0c9      	b.n	8003704 <f_read+0x25e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003576:	d104      	bne.n	8003582 <f_read+0xdc>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2201      	movs	r2, #1
 800357c:	745a      	strb	r2, [r3, #17]
 800357e:	2301      	movs	r3, #1
 8003580:	e0c0      	b.n	8003704 <f_read+0x25e>
				fp->clust = clst;				/* Update current cluster */
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003586:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	4619      	mov	r1, r3
 8003590:	4610      	mov	r0, r2
 8003592:	f7fe fc23 	bl	8001ddc <clst2sect>
 8003596:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d104      	bne.n	80035a8 <f_read+0x102>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2202      	movs	r2, #2
 80035a2:	745a      	strb	r2, [r3, #17]
 80035a4:	2302      	movs	r3, #2
 80035a6:	e0ad      	b.n	8003704 <f_read+0x25e>
			sect += csect;
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	4413      	add	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	0a5b      	lsrs	r3, r3, #9
 80035b4:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 80035b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d039      	beq.n	8003630 <f_read+0x18a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80035bc:	69fa      	ldr	r2, [r7, #28]
 80035be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c0:	4413      	add	r3, r2
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	8952      	ldrh	r2, [r2, #10]
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d905      	bls.n	80035d6 <f_read+0x130>
					cc = fs->csize - csect;
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	895b      	ldrh	r3, [r3, #10]
 80035ce:	461a      	mov	r2, r3
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	7858      	ldrb	r0, [r3, #1]
 80035da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035e0:	f7fd fee0 	bl	80013a4 <disk_read>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d004      	beq.n	80035f4 <f_read+0x14e>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	745a      	strb	r2, [r3, #17]
 80035f0:	2301      	movs	r3, #1
 80035f2:	e087      	b.n	8003704 <f_read+0x25e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	7c1b      	ldrb	r3, [r3, #16]
 80035f8:	b25b      	sxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	da14      	bge.n	8003628 <f_read+0x182>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	69da      	ldr	r2, [r3, #28]
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003608:	429a      	cmp	r2, r3
 800360a:	d90d      	bls.n	8003628 <f_read+0x182>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	69da      	ldr	r2, [r3, #28]
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	025b      	lsls	r3, r3, #9
 8003616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003618:	18d0      	adds	r0, r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	3328      	adds	r3, #40	; 0x28
 800361e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003622:	4619      	mov	r1, r3
 8003624:	f7fe fa3c 	bl	8001aa0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8003628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362a:	025b      	lsls	r3, r3, #9
 800362c:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800362e:	e050      	b.n	80036d2 <f_read+0x22c>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	429a      	cmp	r2, r3
 8003638:	d02e      	beq.n	8003698 <f_read+0x1f2>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	7c1b      	ldrb	r3, [r3, #16]
 800363e:	b25b      	sxtb	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	da18      	bge.n	8003676 <f_read+0x1d0>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	7858      	ldrb	r0, [r3, #1]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	69da      	ldr	r2, [r3, #28]
 8003652:	2301      	movs	r3, #1
 8003654:	f7fd ff10 	bl	8001478 <disk_write>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d004      	beq.n	8003668 <f_read+0x1c2>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	745a      	strb	r2, [r3, #17]
 8003664:	2301      	movs	r3, #1
 8003666:	e04d      	b.n	8003704 <f_read+0x25e>
					fp->flag &= (BYTE)~FA_DIRTY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	7c1b      	ldrb	r3, [r3, #16]
 800366c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003670:	b2da      	uxtb	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	7858      	ldrb	r0, [r3, #1]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003680:	2301      	movs	r3, #1
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	f7fd fe8e 	bl	80013a4 <disk_read>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d004      	beq.n	8003698 <f_read+0x1f2>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2201      	movs	r2, #1
 8003692:	745a      	strb	r2, [r3, #17]
 8003694:	2301      	movs	r3, #1
 8003696:	e035      	b.n	8003704 <f_read+0x25e>
			}
#endif
			fp->sect = sect;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036a6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80036aa:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80036ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d901      	bls.n	80036b8 <f_read+0x212>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036c6:	4413      	add	r3, r2
 80036c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ca:	4619      	mov	r1, r3
 80036cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036ce:	f7fe f9e7 	bl	8001aa0 <mem_cpy>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	607b      	str	r3, [r7, #4]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e0:	441a      	add	r2, r3
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ea:	4413      	add	r3, r2
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	695a      	ldr	r2, [r3, #20]
 80036f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f4:	441a      	add	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	615a      	str	r2, [r3, #20]
	for ( ;  btr;								/* Repeat until btr bytes read */
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f47f af0d 	bne.w	800351c <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3738      	adds	r7, #56	; 0x38
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08c      	sub	sp, #48	; 0x30
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f107 0210 	add.w	r2, r7, #16
 800372a:	4611      	mov	r1, r2
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff fcc1 	bl	80030b4 <validate>
 8003732:	4603      	mov	r3, r0
 8003734:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8003738:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800373c:	2b00      	cmp	r3, #0
 800373e:	d107      	bne.n	8003750 <f_write+0x44>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	7c5b      	ldrb	r3, [r3, #17]
 8003744:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003748:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <f_write+0x4a>
 8003750:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003754:	e13f      	b.n	80039d6 <f_write+0x2ca>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	7c1b      	ldrb	r3, [r3, #16]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <f_write+0x5a>
 8003762:	2307      	movs	r3, #7
 8003764:	e137      	b.n	80039d6 <f_write+0x2ca>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	695a      	ldr	r2, [r3, #20]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	441a      	add	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	429a      	cmp	r2, r3
 8003774:	f080 8121 	bcs.w	80039ba <f_write+0x2ae>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	43db      	mvns	r3, r3
 800377e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8003780:	e11b      	b.n	80039ba <f_write+0x2ae>
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800378a:	2b00      	cmp	r3, #0
 800378c:	f040 80d7 	bne.w	800393e <f_write+0x232>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	0a5b      	lsrs	r3, r3, #9
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	8952      	ldrh	r2, [r2, #10]
 800379a:	3a01      	subs	r2, #1
 800379c:	4013      	ands	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d137      	bne.n	8003816 <f_write+0x10a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10c      	bne.n	80037c8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80037b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10e      	bne.n	80037d8 <f_write+0xcc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2100      	movs	r1, #0
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fe fd1c 	bl	80021fc <create_chain>
 80037c4:	62b8      	str	r0, [r7, #40]	; 0x28
 80037c6:	e007      	b.n	80037d8 <f_write+0xcc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	4619      	mov	r1, r3
 80037d0:	4610      	mov	r0, r2
 80037d2:	f7fe fd13 	bl	80021fc <create_chain>
 80037d6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80037d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 80f2 	beq.w	80039c4 <f_write+0x2b8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80037e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d104      	bne.n	80037f0 <f_write+0xe4>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2202      	movs	r2, #2
 80037ea:	745a      	strb	r2, [r3, #17]
 80037ec:	2302      	movs	r3, #2
 80037ee:	e0f2      	b.n	80039d6 <f_write+0x2ca>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80037f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f6:	d104      	bne.n	8003802 <f_write+0xf6>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2201      	movs	r2, #1
 80037fc:	745a      	strb	r2, [r3, #17]
 80037fe:	2301      	movs	r3, #1
 8003800:	e0e9      	b.n	80039d6 <f_write+0x2ca>
				fp->clust = clst;			/* Update current cluster */
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003806:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d102      	bne.n	8003816 <f_write+0x10a>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003814:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	7c1b      	ldrb	r3, [r3, #16]
 800381a:	b25b      	sxtb	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	da18      	bge.n	8003852 <f_write+0x146>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	7858      	ldrb	r0, [r3, #1]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	69da      	ldr	r2, [r3, #28]
 800382e:	2301      	movs	r3, #1
 8003830:	f7fd fe22 	bl	8001478 <disk_write>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d004      	beq.n	8003844 <f_write+0x138>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	745a      	strb	r2, [r3, #17]
 8003840:	2301      	movs	r3, #1
 8003842:	e0c8      	b.n	80039d6 <f_write+0x2ca>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	7c1b      	ldrb	r3, [r3, #16]
 8003848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800384c:	b2da      	uxtb	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	4619      	mov	r1, r3
 800385a:	4610      	mov	r0, r2
 800385c:	f7fe fabe 	bl	8001ddc <clst2sect>
 8003860:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d104      	bne.n	8003872 <f_write+0x166>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2202      	movs	r2, #2
 800386c:	745a      	strb	r2, [r3, #17]
 800386e:	2302      	movs	r3, #2
 8003870:	e0b1      	b.n	80039d6 <f_write+0x2ca>
			sect += csect;
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	4413      	add	r3, r2
 8003878:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	0a5b      	lsrs	r3, r3, #9
 800387e:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d03c      	beq.n	8003900 <f_write+0x1f4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	4413      	add	r3, r2
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	8952      	ldrh	r2, [r2, #10]
 8003890:	4293      	cmp	r3, r2
 8003892:	d905      	bls.n	80038a0 <f_write+0x194>
					cc = fs->csize - csect;
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	895b      	ldrh	r3, [r3, #10]
 8003898:	461a      	mov	r2, r3
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	7858      	ldrb	r0, [r3, #1]
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	69f9      	ldr	r1, [r7, #28]
 80038aa:	f7fd fde5 	bl	8001478 <disk_write>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d004      	beq.n	80038be <f_write+0x1b2>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2201      	movs	r2, #1
 80038b8:	745a      	strb	r2, [r3, #17]
 80038ba:	2301      	movs	r3, #1
 80038bc:	e08b      	b.n	80039d6 <f_write+0x2ca>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	69da      	ldr	r2, [r3, #28]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	6a3a      	ldr	r2, [r7, #32]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d915      	bls.n	80038f8 <f_write+0x1ec>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	69da      	ldr	r2, [r3, #28]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	025b      	lsls	r3, r3, #9
 80038dc:	69fa      	ldr	r2, [r7, #28]
 80038de:	4413      	add	r3, r2
 80038e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038e4:	4619      	mov	r1, r3
 80038e6:	f7fe f8db 	bl	8001aa0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	7c1b      	ldrb	r3, [r3, #16]
 80038ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	025b      	lsls	r3, r3, #9
 80038fc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80038fe:	e03f      	b.n	8003980 <f_write+0x274>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	69db      	ldr	r3, [r3, #28]
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	429a      	cmp	r2, r3
 8003908:	d016      	beq.n	8003938 <f_write+0x22c>
				fp->fptr < fp->obj.objsize &&
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	695a      	ldr	r2, [r3, #20]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8003912:	429a      	cmp	r2, r3
 8003914:	d210      	bcs.n	8003938 <f_write+0x22c>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	7858      	ldrb	r0, [r3, #1]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003920:	2301      	movs	r3, #1
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	f7fd fd3e 	bl	80013a4 <disk_read>
 8003928:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800392a:	2b00      	cmp	r3, #0
 800392c:	d004      	beq.n	8003938 <f_write+0x22c>
					ABORT(fs, FR_DISK_ERR);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2201      	movs	r2, #1
 8003932:	745a      	strb	r2, [r3, #17]
 8003934:	2301      	movs	r3, #1
 8003936:	e04e      	b.n	80039d6 <f_write+0x2ca>
			}
#endif
			fp->sect = sect;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003946:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800394c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	429a      	cmp	r2, r3
 8003952:	d901      	bls.n	8003958 <f_write+0x24c>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	627b      	str	r3, [r7, #36]	; 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003966:	4413      	add	r3, r2
 8003968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800396a:	69f9      	ldr	r1, [r7, #28]
 800396c:	4618      	mov	r0, r3
 800396e:	f7fe f897 	bl	8001aa0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	7c1b      	ldrb	r3, [r3, #16]
 8003976:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800397a:	b2da      	uxtb	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	741a      	strb	r2, [r3, #16]
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	607b      	str	r3, [r7, #4]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	441a      	add	r2, r3
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	69fa      	ldr	r2, [r7, #28]
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	4413      	add	r3, r2
 800399a:	61fb      	str	r3, [r7, #28]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	695a      	ldr	r2, [r3, #20]
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	441a      	add	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	615a      	str	r2, [r3, #20]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	68da      	ldr	r2, [r3, #12]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	bf38      	it	cc
 80039b4:	461a      	movcc	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	60da      	str	r2, [r3, #12]
	for ( ;  btw;							/* Repeat until all data written */
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f47f aee0 	bne.w	8003782 <f_write+0x76>
 80039c2:	e000      	b.n	80039c6 <f_write+0x2ba>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80039c4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	7c1b      	ldrb	r3, [r3, #16]
 80039ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3730      	adds	r7, #48	; 0x30
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b086      	sub	sp, #24
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f107 0208 	add.w	r2, r7, #8
 80039ec:	4611      	mov	r1, r2
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff fb60 	bl	80030b4 <validate>
 80039f4:	4603      	mov	r3, r0
 80039f6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80039f8:	7dfb      	ldrb	r3, [r7, #23]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d168      	bne.n	8003ad0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	7c1b      	ldrb	r3, [r3, #16]
 8003a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d062      	beq.n	8003ad0 <f_sync+0xf2>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	7c1b      	ldrb	r3, [r3, #16]
 8003a0e:	b25b      	sxtb	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	da15      	bge.n	8003a40 <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	7858      	ldrb	r0, [r3, #1]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69da      	ldr	r2, [r3, #28]
 8003a22:	2301      	movs	r3, #1
 8003a24:	f7fd fd28 	bl	8001478 <disk_write>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <f_sync+0x54>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e04f      	b.n	8003ad2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	7c1b      	ldrb	r3, [r3, #16]
 8003a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8003a40:	f7fd ff5c 	bl	80018fc <get_fattime>
 8003a44:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4610      	mov	r0, r2
 8003a50:	f7fe f929 	bl	8001ca6 <move_window>
 8003a54:	4603      	mov	r3, r0
 8003a56:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8003a58:	7dfb      	ldrb	r3, [r7, #23]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d138      	bne.n	8003ad0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	330b      	adds	r3, #11
 8003a68:	781a      	ldrb	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	330b      	adds	r3, #11
 8003a6e:	f042 0220 	orr.w	r2, r2, #32
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6818      	ldr	r0, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	68f9      	ldr	r1, [r7, #12]
 8003a82:	f7fe fe4b 	bl	800271c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f103 021c 	add.w	r2, r3, #28
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	4619      	mov	r1, r3
 8003a92:	4610      	mov	r0, r2
 8003a94:	f7fd ffd8 	bl	8001a48 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	3316      	adds	r3, #22
 8003a9c:	6939      	ldr	r1, [r7, #16]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fd ffd2 	bl	8001a48 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	3312      	adds	r3, #18
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fd ffb1 	bl	8001a12 <st_word>
					fs->wflag = 1;
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fe f921 	bl	8001d00 <sync_fs>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	7c1b      	ldrb	r3, [r3, #16]
 8003ac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8003ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3718      	adds	r7, #24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b084      	sub	sp, #16
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7ff ff7b 	bl	80039de <f_sync>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10e      	bne.n	8003b10 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f107 0208 	add.w	r2, r7, #8
 8003af8:	4611      	mov	r1, r2
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff fada 	bl	80030b4 <validate>
 8003b00:	4603      	mov	r3, r0
 8003b02:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d102      	bne.n	8003b10 <f_close+0x36>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
	...

08003b1c <HAL_UART_RxCpltCallback>:
static void MX_USART2_UART_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a12      	ldr	r2, [pc, #72]	; (8003b74 <HAL_UART_RxCpltCallback+0x58>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d11e      	bne.n	8003b6c <HAL_UART_RxCpltCallback+0x50>
		{// tutaj umieszczamy kod wykonywany po otrzymaniu bajtu
			HAL_UART_Receive_IT(&huart2, receiveUART, sizeReceiveUART);
 8003b2e:	4b12      	ldr	r3, [pc, #72]	; (8003b78 <HAL_UART_RxCpltCallback+0x5c>)
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	4911      	ldr	r1, [pc, #68]	; (8003b7c <HAL_UART_RxCpltCallback+0x60>)
 8003b36:	4812      	ldr	r0, [pc, #72]	; (8003b80 <HAL_UART_RxCpltCallback+0x64>)
 8003b38:	f003 fc44 	bl	80073c4 <HAL_UART_Receive_IT>
			if (receiveUART[0] == 100){
 8003b3c:	4b0f      	ldr	r3, [pc, #60]	; (8003b7c <HAL_UART_RxCpltCallback+0x60>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	2b64      	cmp	r3, #100	; 0x64
 8003b42:	d106      	bne.n	8003b52 <HAL_UART_RxCpltCallback+0x36>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 8003b44:	2201      	movs	r2, #1
 8003b46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b4a:	480e      	ldr	r0, [pc, #56]	; (8003b84 <HAL_UART_RxCpltCallback+0x68>)
 8003b4c:	f001 fd98 	bl	8005680 <HAL_GPIO_WritePin>
 8003b50:	e005      	b.n	8003b5e <HAL_UART_RxCpltCallback+0x42>
			}
			else{
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8003b52:	2200      	movs	r2, #0
 8003b54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b58:	480a      	ldr	r0, [pc, #40]	; (8003b84 <HAL_UART_RxCpltCallback+0x68>)
 8003b5a:	f001 fd91 	bl	8005680 <HAL_GPIO_WritePin>
			}
			HAL_UART_Transmit_IT(&huart2, receiveUART, sizeSendUARTz2);
 8003b5e:	4b0a      	ldr	r3, [pc, #40]	; (8003b88 <HAL_UART_RxCpltCallback+0x6c>)
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	4905      	ldr	r1, [pc, #20]	; (8003b7c <HAL_UART_RxCpltCallback+0x60>)
 8003b66:	4806      	ldr	r0, [pc, #24]	; (8003b80 <HAL_UART_RxCpltCallback+0x64>)
 8003b68:	f003 fbe7 	bl	800733a <HAL_UART_Transmit_IT>
		}
}
 8003b6c:	bf00      	nop
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40004400 	.word	0x40004400
 8003b78:	20000004 	.word	0x20000004
 8003b7c:	20000ae4 	.word	0x20000ae4
 8003b80:	20000b40 	.word	0x20000b40
 8003b84:	40020c00 	.word	0x40020c00
 8003b88:	20000002 	.word	0x20000002

08003b8c <hcsr04_read>:


uint32_t hcsr04_read (void)
{		// 6 echo_pin	 0 pin_trigger
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
	signal_time=0;			//BIBLIOTEKA DWT_DELAY DLA DELAYU W US A NIE MS
 8003b90:	4b19      	ldr	r3, [pc, #100]	; (8003bf8 <hcsr04_read+0x6c>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // reset pinu
 8003b96:	2200      	movs	r2, #0
 8003b98:	2101      	movs	r1, #1
 8003b9a:	4818      	ldr	r0, [pc, #96]	; (8003bfc <hcsr04_read+0x70>)
 8003b9c:	f001 fd70 	bl	8005680 <HAL_GPIO_WritePin>
	DWT_Delay(2);
 8003ba0:	2002      	movs	r0, #2
 8003ba2:	f7fd fed5 	bl	8001950 <DWT_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // stan wysoki na pin
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	2101      	movs	r1, #1
 8003baa:	4814      	ldr	r0, [pc, #80]	; (8003bfc <hcsr04_read+0x70>)
 8003bac:	f001 fd68 	bl	8005680 <HAL_GPIO_WritePin>
	DWT_Delay(10);
 8003bb0:	200a      	movs	r0, #10
 8003bb2:	f7fd fecd 	bl	8001950 <DWT_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // stan wysoki na pin
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2101      	movs	r1, #1
 8003bba:	4810      	ldr	r0, [pc, #64]	; (8003bfc <hcsr04_read+0x70>)
 8003bbc:	f001 fd60 	bl	8005680 <HAL_GPIO_WritePin>

	while (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)));  // petla az pin nie wejdzie w stan wysoki
 8003bc0:	bf00      	nop
 8003bc2:	2180      	movs	r1, #128	; 0x80
 8003bc4:	480e      	ldr	r0, [pc, #56]	; (8003c00 <hcsr04_read+0x74>)
 8003bc6:	f001 fd43 	bl	8005650 <HAL_GPIO_ReadPin>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0f8      	beq.n	8003bc2 <hcsr04_read+0x36>
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))    // while jest wysoki mierz czas
 8003bd0:	e007      	b.n	8003be2 <hcsr04_read+0x56>
	{
		signal_time++;
 8003bd2:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <hcsr04_read+0x6c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	4a07      	ldr	r2, [pc, #28]	; (8003bf8 <hcsr04_read+0x6c>)
 8003bda:	6013      	str	r3, [r2, #0]
		DWT_Delay(1);
 8003bdc:	2001      	movs	r0, #1
 8003bde:	f7fd feb7 	bl	8001950 <DWT_Delay>
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))    // while jest wysoki mierz czas
 8003be2:	2180      	movs	r1, #128	; 0x80
 8003be4:	4806      	ldr	r0, [pc, #24]	; (8003c00 <hcsr04_read+0x74>)
 8003be6:	f001 fd33 	bl	8005650 <HAL_GPIO_ReadPin>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1f0      	bne.n	8003bd2 <hcsr04_read+0x46>
	}

	return signal_time;
 8003bf0:	4b01      	ldr	r3, [pc, #4]	; (8003bf8 <hcsr04_read+0x6c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	200006cc 	.word	0x200006cc
 8003bfc:	40020400 	.word	0x40020400
 8003c00:	40020000 	.word	0x40020000

08003c04 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
	if(htim->Instance== TIM3)
	{
		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
	}
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c18:	b5b0      	push	{r4, r5, r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c1e:	f000 fda9 	bl	8004774 <HAL_Init>

  /* USER CODE BEGIN Init */
  DWT_Init();
 8003c22:	f7fd fe75 	bl	8001910 <DWT_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c26:	f000 f8ad 	bl	8003d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c2a:	f000 fa3f 	bl	80040ac <MX_GPIO_Init>
  MX_TIM3_Init();
 8003c2e:	f000 f9a5 	bl	8003f7c <MX_TIM3_Init>
  MX_DCMI_Init();
 8003c32:	f000 f917 	bl	8003e64 <MX_DCMI_Init>
  MX_I2C2_Init();
 8003c36:	f000 f93d 	bl	8003eb4 <MX_I2C2_Init>
  MX_DMA_Init();
 8003c3a:	f000 fa17 	bl	800406c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003c3e:	f000 f9eb 	bl	8004018 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8003c42:	f000 f965 	bl	8003f10 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);
 8003c46:	483e      	ldr	r0, [pc, #248]	; (8003d40 <main+0x128>)
 8003c48:	f002 ff55 	bl	8006af6 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, receiveUART, sizeReceiveUART);
 8003c4c:	4b3d      	ldr	r3, [pc, #244]	; (8003d44 <main+0x12c>)
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	461a      	mov	r2, r3
 8003c52:	493d      	ldr	r1, [pc, #244]	; (8003d48 <main+0x130>)
 8003c54:	483d      	ldr	r0, [pc, #244]	; (8003d4c <main+0x134>)
 8003c56:	f003 fbb5 	bl	80073c4 <HAL_UART_Receive_IT>
  //HAL_UART_Receive_IT(&huart3, &znak, 1);

  fresult = f_mount(&FatFs, "", 0);
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	493c      	ldr	r1, [pc, #240]	; (8003d50 <main+0x138>)
 8003c5e:	483d      	ldr	r0, [pc, #244]	; (8003d54 <main+0x13c>)
 8003c60:	f7ff fa5e 	bl	8003120 <f_mount>
 8003c64:	4603      	mov	r3, r0
 8003c66:	461a      	mov	r2, r3
 8003c68:	4b3b      	ldr	r3, [pc, #236]	; (8003d58 <main+0x140>)
 8003c6a:	701a      	strb	r2, [r3, #0]
  fresult = f_open(&file, "write.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8003c6c:	2212      	movs	r2, #18
 8003c6e:	493b      	ldr	r1, [pc, #236]	; (8003d5c <main+0x144>)
 8003c70:	483b      	ldr	r0, [pc, #236]	; (8003d60 <main+0x148>)
 8003c72:	f7ff fa95 	bl	80031a0 <f_open>
 8003c76:	4603      	mov	r3, r0
 8003c78:	461a      	mov	r2, r3
 8003c7a:	4b37      	ldr	r3, [pc, #220]	; (8003d58 <main+0x140>)
 8003c7c:	701a      	strb	r2, [r3, #0]
  int len = sprintf( buffer, "Testing fatfs\r\n");
 8003c7e:	4a39      	ldr	r2, [pc, #228]	; (8003d64 <main+0x14c>)
 8003c80:	4b39      	ldr	r3, [pc, #228]	; (8003d68 <main+0x150>)
 8003c82:	4614      	mov	r4, r2
 8003c84:	461d      	mov	r5, r3
 8003c86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c88:	6020      	str	r0, [r4, #0]
 8003c8a:	6061      	str	r1, [r4, #4]
 8003c8c:	60a2      	str	r2, [r4, #8]
 8003c8e:	60e3      	str	r3, [r4, #12]
 8003c90:	230f      	movs	r3, #15
 8003c92:	607b      	str	r3, [r7, #4]
  fresult = f_write(&file, buffer, len, &bytes_written);
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	4b35      	ldr	r3, [pc, #212]	; (8003d6c <main+0x154>)
 8003c98:	4932      	ldr	r1, [pc, #200]	; (8003d64 <main+0x14c>)
 8003c9a:	4831      	ldr	r0, [pc, #196]	; (8003d60 <main+0x148>)
 8003c9c:	f7ff fd36 	bl	800370c <f_write>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	4b2c      	ldr	r3, [pc, #176]	; (8003d58 <main+0x140>)
 8003ca6:	701a      	strb	r2, [r3, #0]
  fresult = f_close(&file);
 8003ca8:	482d      	ldr	r0, [pc, #180]	; (8003d60 <main+0x148>)
 8003caa:	f7ff ff16 	bl	8003ada <f_close>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	4b29      	ldr	r3, [pc, #164]	; (8003d58 <main+0x140>)
 8003cb4:	701a      	strb	r2, [r3, #0]


  fresult = f_open(&file2, "read.txt", FA_READ);
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	492d      	ldr	r1, [pc, #180]	; (8003d70 <main+0x158>)
 8003cba:	482e      	ldr	r0, [pc, #184]	; (8003d74 <main+0x15c>)
 8003cbc:	f7ff fa70 	bl	80031a0 <f_open>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	4b24      	ldr	r3, [pc, #144]	; (8003d58 <main+0x140>)
 8003cc6:	701a      	strb	r2, [r3, #0]
  fresult = f_read(&file2, buffer, 16, &bytes_read);
 8003cc8:	4b2b      	ldr	r3, [pc, #172]	; (8003d78 <main+0x160>)
 8003cca:	2210      	movs	r2, #16
 8003ccc:	4925      	ldr	r1, [pc, #148]	; (8003d64 <main+0x14c>)
 8003cce:	4829      	ldr	r0, [pc, #164]	; (8003d74 <main+0x15c>)
 8003cd0:	f7ff fbe9 	bl	80034a6 <f_read>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	4b1f      	ldr	r3, [pc, #124]	; (8003d58 <main+0x140>)
 8003cda:	701a      	strb	r2, [r3, #0]
  fresult = f_close(&file2);
 8003cdc:	4825      	ldr	r0, [pc, #148]	; (8003d74 <main+0x15c>)
 8003cde:	f7ff fefc 	bl	8003ada <f_close>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	4b1c      	ldr	r3, [pc, #112]	; (8003d58 <main+0x140>)
 8003ce8:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sensor_time = hcsr04_read();
 8003cea:	f7ff ff4f 	bl	8003b8c <hcsr04_read>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	4b22      	ldr	r3, [pc, #136]	; (8003d7c <main+0x164>)
 8003cf2:	601a      	str	r2, [r3, #0]
	  distance  = sensor_time * .034/2;
 8003cf4:	4b21      	ldr	r3, [pc, #132]	; (8003d7c <main+0x164>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fc fbaf 	bl	800045c <__aeabi_ui2d>
 8003cfe:	a30e      	add	r3, pc, #56	; (adr r3, 8003d38 <main+0x120>)
 8003d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d04:	f7fc fc24 	bl	8000550 <__aeabi_dmul>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	460c      	mov	r4, r1
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	4621      	mov	r1, r4
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d18:	f7fc fd44 	bl	80007a4 <__aeabi_ddiv>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	460c      	mov	r4, r1
 8003d20:	4618      	mov	r0, r3
 8003d22:	4621      	mov	r1, r4
 8003d24:	f7fc feec 	bl	8000b00 <__aeabi_d2uiz>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	4b15      	ldr	r3, [pc, #84]	; (8003d80 <main+0x168>)
 8003d2c:	601a      	str	r2, [r3, #0]


	  HAL_Delay(200);
 8003d2e:	20c8      	movs	r0, #200	; 0xc8
 8003d30:	f000 fd92 	bl	8004858 <HAL_Delay>
	  sensor_time = hcsr04_read();
 8003d34:	e7d9      	b.n	8003cea <main+0xd2>
 8003d36:	bf00      	nop
 8003d38:	b020c49c 	.word	0xb020c49c
 8003d3c:	3fa16872 	.word	0x3fa16872
 8003d40:	20000734 	.word	0x20000734
 8003d44:	20000004 	.word	0x20000004
 8003d48:	20000ae4 	.word	0x20000ae4
 8003d4c:	20000b40 	.word	0x20000b40
 8003d50:	08009abc 	.word	0x08009abc
 8003d54:	2000020c 	.word	0x2000020c
 8003d58:	20000ae5 	.word	0x20000ae5
 8003d5c:	08009ac0 	.word	0x08009ac0
 8003d60:	20000774 	.word	0x20000774
 8003d64:	200009e0 	.word	0x200009e0
 8003d68:	08009acc 	.word	0x08009acc
 8003d6c:	20000b80 	.word	0x20000b80
 8003d70:	08009adc 	.word	0x08009adc
 8003d74:	2000044c 	.word	0x2000044c
 8003d78:	200009dc 	.word	0x200009dc
 8003d7c:	20000674 	.word	0x20000674
 8003d80:	20000730 	.word	0x20000730

08003d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b094      	sub	sp, #80	; 0x50
 8003d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d8a:	f107 0320 	add.w	r3, r7, #32
 8003d8e:	2230      	movs	r2, #48	; 0x30
 8003d90:	2100      	movs	r1, #0
 8003d92:	4618      	mov	r0, r3
 8003d94:	f004 f948 	bl	8008028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d98:	f107 030c 	add.w	r3, r7, #12
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	605a      	str	r2, [r3, #4]
 8003da2:	609a      	str	r2, [r3, #8]
 8003da4:	60da      	str	r2, [r3, #12]
 8003da6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003da8:	2300      	movs	r3, #0
 8003daa:	60bb      	str	r3, [r7, #8]
 8003dac:	4b2b      	ldr	r3, [pc, #172]	; (8003e5c <SystemClock_Config+0xd8>)
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	4a2a      	ldr	r2, [pc, #168]	; (8003e5c <SystemClock_Config+0xd8>)
 8003db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db6:	6413      	str	r3, [r2, #64]	; 0x40
 8003db8:	4b28      	ldr	r3, [pc, #160]	; (8003e5c <SystemClock_Config+0xd8>)
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc0:	60bb      	str	r3, [r7, #8]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	607b      	str	r3, [r7, #4]
 8003dc8:	4b25      	ldr	r3, [pc, #148]	; (8003e60 <SystemClock_Config+0xdc>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a24      	ldr	r2, [pc, #144]	; (8003e60 <SystemClock_Config+0xdc>)
 8003dce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dd2:	6013      	str	r3, [r2, #0]
 8003dd4:	4b22      	ldr	r3, [pc, #136]	; (8003e60 <SystemClock_Config+0xdc>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ddc:	607b      	str	r3, [r7, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003de0:	2301      	movs	r3, #1
 8003de2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003de4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003dea:	2302      	movs	r3, #2
 8003dec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003dee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003df2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003df4:	2304      	movs	r3, #4
 8003df6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003df8:	23a8      	movs	r3, #168	; 0xa8
 8003dfa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003e00:	2304      	movs	r3, #4
 8003e02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e04:	f107 0320 	add.w	r3, r7, #32
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f001 fd8b 	bl	8005924 <HAL_RCC_OscConfig>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003e14:	f000 f9ec 	bl	80041f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e18:	230f      	movs	r3, #15
 8003e1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e20:	2300      	movs	r3, #0
 8003e22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003e24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003e28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003e30:	f107 030c 	add.w	r3, r7, #12
 8003e34:	2105      	movs	r1, #5
 8003e36:	4618      	mov	r0, r3
 8003e38:	f001 ffe4 	bl	8005e04 <HAL_RCC_ClockConfig>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003e42:	f000 f9d5 	bl	80041f0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_4);
 8003e46:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003e4a:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 8003e4e:	2000      	movs	r0, #0
 8003e50:	f002 f8be 	bl	8005fd0 <HAL_RCC_MCOConfig>
}
 8003e54:	bf00      	nop
 8003e56:	3750      	adds	r7, #80	; 0x50
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	40007000 	.word	0x40007000

08003e64 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8003e68:	4b10      	ldr	r3, [pc, #64]	; (8003eac <MX_DCMI_Init+0x48>)
 8003e6a:	4a11      	ldr	r2, [pc, #68]	; (8003eb0 <MX_DCMI_Init+0x4c>)
 8003e6c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8003e6e:	4b0f      	ldr	r3, [pc, #60]	; (8003eac <MX_DCMI_Init+0x48>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8003e74:	4b0d      	ldr	r3, [pc, #52]	; (8003eac <MX_DCMI_Init+0x48>)
 8003e76:	2220      	movs	r2, #32
 8003e78:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8003e7a:	4b0c      	ldr	r3, [pc, #48]	; (8003eac <MX_DCMI_Init+0x48>)
 8003e7c:	2280      	movs	r2, #128	; 0x80
 8003e7e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8003e80:	4b0a      	ldr	r3, [pc, #40]	; (8003eac <MX_DCMI_Init+0x48>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8003e86:	4b09      	ldr	r3, [pc, #36]	; (8003eac <MX_DCMI_Init+0x48>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8003e8c:	4b07      	ldr	r3, [pc, #28]	; (8003eac <MX_DCMI_Init+0x48>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8003e92:	4b06      	ldr	r3, [pc, #24]	; (8003eac <MX_DCMI_Init+0x48>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8003e98:	4804      	ldr	r0, [pc, #16]	; (8003eac <MX_DCMI_Init+0x48>)
 8003e9a:	f000 fece 	bl	8004c3a <HAL_DCMI_Init>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 8003ea4:	f000 f9a4 	bl	80041f0 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8003ea8:	bf00      	nop
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	2000099c 	.word	0x2000099c
 8003eb0:	50050000 	.word	0x50050000

08003eb4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003eb8:	4b12      	ldr	r3, [pc, #72]	; (8003f04 <MX_I2C2_Init+0x50>)
 8003eba:	4a13      	ldr	r2, [pc, #76]	; (8003f08 <MX_I2C2_Init+0x54>)
 8003ebc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003ebe:	4b11      	ldr	r3, [pc, #68]	; (8003f04 <MX_I2C2_Init+0x50>)
 8003ec0:	4a12      	ldr	r2, [pc, #72]	; (8003f0c <MX_I2C2_Init+0x58>)
 8003ec2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ec4:	4b0f      	ldr	r3, [pc, #60]	; (8003f04 <MX_I2C2_Init+0x50>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003eca:	4b0e      	ldr	r3, [pc, #56]	; (8003f04 <MX_I2C2_Init+0x50>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ed0:	4b0c      	ldr	r3, [pc, #48]	; (8003f04 <MX_I2C2_Init+0x50>)
 8003ed2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ed6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ed8:	4b0a      	ldr	r3, [pc, #40]	; (8003f04 <MX_I2C2_Init+0x50>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003ede:	4b09      	ldr	r3, [pc, #36]	; (8003f04 <MX_I2C2_Init+0x50>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ee4:	4b07      	ldr	r3, [pc, #28]	; (8003f04 <MX_I2C2_Init+0x50>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003eea:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <MX_I2C2_Init+0x50>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003ef0:	4804      	ldr	r0, [pc, #16]	; (8003f04 <MX_I2C2_Init+0x50>)
 8003ef2:	f001 fbdf 	bl	80056b4 <HAL_I2C_Init>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003efc:	f000 f978 	bl	80041f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003f00:	bf00      	nop
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	20000678 	.word	0x20000678
 8003f08:	40005800 	.word	0x40005800
 8003f0c:	000186a0 	.word	0x000186a0

08003f10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003f14:	4b17      	ldr	r3, [pc, #92]	; (8003f74 <MX_SPI1_Init+0x64>)
 8003f16:	4a18      	ldr	r2, [pc, #96]	; (8003f78 <MX_SPI1_Init+0x68>)
 8003f18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003f1a:	4b16      	ldr	r3, [pc, #88]	; (8003f74 <MX_SPI1_Init+0x64>)
 8003f1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003f22:	4b14      	ldr	r3, [pc, #80]	; (8003f74 <MX_SPI1_Init+0x64>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f28:	4b12      	ldr	r3, [pc, #72]	; (8003f74 <MX_SPI1_Init+0x64>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f2e:	4b11      	ldr	r3, [pc, #68]	; (8003f74 <MX_SPI1_Init+0x64>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f34:	4b0f      	ldr	r3, [pc, #60]	; (8003f74 <MX_SPI1_Init+0x64>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003f3a:	4b0e      	ldr	r3, [pc, #56]	; (8003f74 <MX_SPI1_Init+0x64>)
 8003f3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f40:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003f42:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <MX_SPI1_Init+0x64>)
 8003f44:	2218      	movs	r2, #24
 8003f46:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f48:	4b0a      	ldr	r3, [pc, #40]	; (8003f74 <MX_SPI1_Init+0x64>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f4e:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <MX_SPI1_Init+0x64>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f54:	4b07      	ldr	r3, [pc, #28]	; (8003f74 <MX_SPI1_Init+0x64>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003f5a:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <MX_SPI1_Init+0x64>)
 8003f5c:	220a      	movs	r2, #10
 8003f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003f60:	4804      	ldr	r0, [pc, #16]	; (8003f74 <MX_SPI1_Init+0x64>)
 8003f62:	f002 f9a9 	bl	80062b8 <HAL_SPI_Init>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003f6c:	f000 f940 	bl	80041f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003f70:	bf00      	nop
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	20000ae8 	.word	0x20000ae8
 8003f78:	40013000 	.word	0x40013000

08003f7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f82:	f107 0308 	add.w	r3, r7, #8
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	605a      	str	r2, [r3, #4]
 8003f8c:	609a      	str	r2, [r3, #8]
 8003f8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f90:	463b      	mov	r3, r7
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f98:	4b1d      	ldr	r3, [pc, #116]	; (8004010 <MX_TIM3_Init+0x94>)
 8003f9a:	4a1e      	ldr	r2, [pc, #120]	; (8004014 <MX_TIM3_Init+0x98>)
 8003f9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 8003f9e:	4b1c      	ldr	r3, [pc, #112]	; (8004010 <MX_TIM3_Init+0x94>)
 8003fa0:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003fa4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fa6:	4b1a      	ldr	r3, [pc, #104]	; (8004010 <MX_TIM3_Init+0x94>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8003fac:	4b18      	ldr	r3, [pc, #96]	; (8004010 <MX_TIM3_Init+0x94>)
 8003fae:	f242 720f 	movw	r2, #9999	; 0x270f
 8003fb2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fb4:	4b16      	ldr	r3, [pc, #88]	; (8004010 <MX_TIM3_Init+0x94>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fba:	4b15      	ldr	r3, [pc, #84]	; (8004010 <MX_TIM3_Init+0x94>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003fc0:	4813      	ldr	r0, [pc, #76]	; (8004010 <MX_TIM3_Init+0x94>)
 8003fc2:	f002 fd6d 	bl	8006aa0 <HAL_TIM_Base_Init>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003fcc:	f000 f910 	bl	80041f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003fd6:	f107 0308 	add.w	r3, r7, #8
 8003fda:	4619      	mov	r1, r3
 8003fdc:	480c      	ldr	r0, [pc, #48]	; (8004010 <MX_TIM3_Init+0x94>)
 8003fde:	f002 feb6 	bl	8006d4e <HAL_TIM_ConfigClockSource>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003fe8:	f000 f902 	bl	80041f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fec:	2300      	movs	r3, #0
 8003fee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ff4:	463b      	mov	r3, r7
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	4805      	ldr	r0, [pc, #20]	; (8004010 <MX_TIM3_Init+0x94>)
 8003ffa:	f003 f8c1 	bl	8007180 <HAL_TIMEx_MasterConfigSynchronization>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004004:	f000 f8f4 	bl	80041f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004008:	bf00      	nop
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	20000734 	.word	0x20000734
 8004014:	40000400 	.word	0x40000400

08004018 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800401c:	4b11      	ldr	r3, [pc, #68]	; (8004064 <MX_USART2_UART_Init+0x4c>)
 800401e:	4a12      	ldr	r2, [pc, #72]	; (8004068 <MX_USART2_UART_Init+0x50>)
 8004020:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004022:	4b10      	ldr	r3, [pc, #64]	; (8004064 <MX_USART2_UART_Init+0x4c>)
 8004024:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004028:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800402a:	4b0e      	ldr	r3, [pc, #56]	; (8004064 <MX_USART2_UART_Init+0x4c>)
 800402c:	2200      	movs	r2, #0
 800402e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004030:	4b0c      	ldr	r3, [pc, #48]	; (8004064 <MX_USART2_UART_Init+0x4c>)
 8004032:	2200      	movs	r2, #0
 8004034:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004036:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <MX_USART2_UART_Init+0x4c>)
 8004038:	2200      	movs	r2, #0
 800403a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800403c:	4b09      	ldr	r3, [pc, #36]	; (8004064 <MX_USART2_UART_Init+0x4c>)
 800403e:	220c      	movs	r2, #12
 8004040:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004042:	4b08      	ldr	r3, [pc, #32]	; (8004064 <MX_USART2_UART_Init+0x4c>)
 8004044:	2200      	movs	r2, #0
 8004046:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004048:	4b06      	ldr	r3, [pc, #24]	; (8004064 <MX_USART2_UART_Init+0x4c>)
 800404a:	2200      	movs	r2, #0
 800404c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800404e:	4805      	ldr	r0, [pc, #20]	; (8004064 <MX_USART2_UART_Init+0x4c>)
 8004050:	f003 f926 	bl	80072a0 <HAL_UART_Init>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800405a:	f000 f8c9 	bl	80041f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800405e:	bf00      	nop
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	20000b40 	.word	0x20000b40
 8004068:	40004400 	.word	0x40004400

0800406c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004072:	2300      	movs	r3, #0
 8004074:	607b      	str	r3, [r7, #4]
 8004076:	4b0c      	ldr	r3, [pc, #48]	; (80040a8 <MX_DMA_Init+0x3c>)
 8004078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407a:	4a0b      	ldr	r2, [pc, #44]	; (80040a8 <MX_DMA_Init+0x3c>)
 800407c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004080:	6313      	str	r3, [r2, #48]	; 0x30
 8004082:	4b09      	ldr	r3, [pc, #36]	; (80040a8 <MX_DMA_Init+0x3c>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800408a:	607b      	str	r3, [r7, #4]
 800408c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800408e:	2200      	movs	r2, #0
 8004090:	2100      	movs	r1, #0
 8004092:	2039      	movs	r0, #57	; 0x39
 8004094:	f000 fcdd 	bl	8004a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8004098:	2039      	movs	r0, #57	; 0x39
 800409a:	f000 fcf6 	bl	8004a8a <HAL_NVIC_EnableIRQ>

}
 800409e:	bf00      	nop
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40023800 	.word	0x40023800

080040ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b08a      	sub	sp, #40	; 0x28
 80040b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040b2:	f107 0314 	add.w	r3, r7, #20
 80040b6:	2200      	movs	r2, #0
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	605a      	str	r2, [r3, #4]
 80040bc:	609a      	str	r2, [r3, #8]
 80040be:	60da      	str	r2, [r3, #12]
 80040c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80040c2:	2300      	movs	r3, #0
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	4b46      	ldr	r3, [pc, #280]	; (80041e0 <MX_GPIO_Init+0x134>)
 80040c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ca:	4a45      	ldr	r2, [pc, #276]	; (80041e0 <MX_GPIO_Init+0x134>)
 80040cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040d0:	6313      	str	r3, [r2, #48]	; 0x30
 80040d2:	4b43      	ldr	r3, [pc, #268]	; (80041e0 <MX_GPIO_Init+0x134>)
 80040d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040da:	613b      	str	r3, [r7, #16]
 80040dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040de:	2300      	movs	r3, #0
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	4b3f      	ldr	r3, [pc, #252]	; (80041e0 <MX_GPIO_Init+0x134>)
 80040e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e6:	4a3e      	ldr	r2, [pc, #248]	; (80041e0 <MX_GPIO_Init+0x134>)
 80040e8:	f043 0301 	orr.w	r3, r3, #1
 80040ec:	6313      	str	r3, [r2, #48]	; 0x30
 80040ee:	4b3c      	ldr	r3, [pc, #240]	; (80041e0 <MX_GPIO_Init+0x134>)
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040fa:	2300      	movs	r3, #0
 80040fc:	60bb      	str	r3, [r7, #8]
 80040fe:	4b38      	ldr	r3, [pc, #224]	; (80041e0 <MX_GPIO_Init+0x134>)
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	4a37      	ldr	r2, [pc, #220]	; (80041e0 <MX_GPIO_Init+0x134>)
 8004104:	f043 0302 	orr.w	r3, r3, #2
 8004108:	6313      	str	r3, [r2, #48]	; 0x30
 800410a:	4b35      	ldr	r3, [pc, #212]	; (80041e0 <MX_GPIO_Init+0x134>)
 800410c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	60bb      	str	r3, [r7, #8]
 8004114:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004116:	2300      	movs	r3, #0
 8004118:	607b      	str	r3, [r7, #4]
 800411a:	4b31      	ldr	r3, [pc, #196]	; (80041e0 <MX_GPIO_Init+0x134>)
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	4a30      	ldr	r2, [pc, #192]	; (80041e0 <MX_GPIO_Init+0x134>)
 8004120:	f043 0308 	orr.w	r3, r3, #8
 8004124:	6313      	str	r3, [r2, #48]	; 0x30
 8004126:	4b2e      	ldr	r3, [pc, #184]	; (80041e0 <MX_GPIO_Init+0x134>)
 8004128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	607b      	str	r3, [r7, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004132:	2300      	movs	r3, #0
 8004134:	603b      	str	r3, [r7, #0]
 8004136:	4b2a      	ldr	r3, [pc, #168]	; (80041e0 <MX_GPIO_Init+0x134>)
 8004138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413a:	4a29      	ldr	r2, [pc, #164]	; (80041e0 <MX_GPIO_Init+0x134>)
 800413c:	f043 0304 	orr.w	r3, r3, #4
 8004140:	6313      	str	r3, [r2, #48]	; 0x30
 8004142:	4b27      	ldr	r3, [pc, #156]	; (80041e0 <MX_GPIO_Init+0x134>)
 8004144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004146:	f003 0304 	and.w	r3, r3, #4
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800414e:	2200      	movs	r2, #0
 8004150:	2101      	movs	r1, #1
 8004152:	4824      	ldr	r0, [pc, #144]	; (80041e4 <MX_GPIO_Init+0x138>)
 8004154:	f001 fa94 	bl	8005680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8004158:	2200      	movs	r2, #0
 800415a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800415e:	4822      	ldr	r0, [pc, #136]	; (80041e8 <MX_GPIO_Init+0x13c>)
 8004160:	f001 fa8e 	bl	8005680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004164:	2380      	movs	r3, #128	; 0x80
 8004166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004168:	2300      	movs	r3, #0
 800416a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416c:	2300      	movs	r3, #0
 800416e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004170:	f107 0314 	add.w	r3, r7, #20
 8004174:	4619      	mov	r1, r3
 8004176:	481d      	ldr	r0, [pc, #116]	; (80041ec <MX_GPIO_Init+0x140>)
 8004178:	f001 f8d0 	bl	800531c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800417c:	2301      	movs	r3, #1
 800417e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004180:	2301      	movs	r3, #1
 8004182:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004184:	2300      	movs	r3, #0
 8004186:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004188:	2300      	movs	r3, #0
 800418a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800418c:	f107 0314 	add.w	r3, r7, #20
 8004190:	4619      	mov	r1, r3
 8004192:	4814      	ldr	r0, [pc, #80]	; (80041e4 <MX_GPIO_Init+0x138>)
 8004194:	f001 f8c2 	bl	800531c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004198:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800419c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800419e:	2301      	movs	r3, #1
 80041a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a2:	2300      	movs	r3, #0
 80041a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041a6:	2300      	movs	r3, #0
 80041a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041aa:	f107 0314 	add.w	r3, r7, #20
 80041ae:	4619      	mov	r1, r3
 80041b0:	480d      	ldr	r0, [pc, #52]	; (80041e8 <MX_GPIO_Init+0x13c>)
 80041b2:	f001 f8b3 	bl	800531c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80041b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041bc:	2302      	movs	r3, #2
 80041be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c0:	2300      	movs	r3, #0
 80041c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c4:	2300      	movs	r3, #0
 80041c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80041c8:	2300      	movs	r3, #0
 80041ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041cc:	f107 0314 	add.w	r3, r7, #20
 80041d0:	4619      	mov	r1, r3
 80041d2:	4806      	ldr	r0, [pc, #24]	; (80041ec <MX_GPIO_Init+0x140>)
 80041d4:	f001 f8a2 	bl	800531c <HAL_GPIO_Init>

}
 80041d8:	bf00      	nop
 80041da:	3728      	adds	r7, #40	; 0x28
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40023800 	.word	0x40023800
 80041e4:	40020400 	.word	0x40020400
 80041e8:	40020c00 	.word	0x40020c00
 80041ec:	40020000 	.word	0x40020000

080041f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80041f4:	bf00      	nop
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
	...

08004200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004206:	2300      	movs	r3, #0
 8004208:	607b      	str	r3, [r7, #4]
 800420a:	4b10      	ldr	r3, [pc, #64]	; (800424c <HAL_MspInit+0x4c>)
 800420c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420e:	4a0f      	ldr	r2, [pc, #60]	; (800424c <HAL_MspInit+0x4c>)
 8004210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004214:	6453      	str	r3, [r2, #68]	; 0x44
 8004216:	4b0d      	ldr	r3, [pc, #52]	; (800424c <HAL_MspInit+0x4c>)
 8004218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800421e:	607b      	str	r3, [r7, #4]
 8004220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004222:	2300      	movs	r3, #0
 8004224:	603b      	str	r3, [r7, #0]
 8004226:	4b09      	ldr	r3, [pc, #36]	; (800424c <HAL_MspInit+0x4c>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	4a08      	ldr	r2, [pc, #32]	; (800424c <HAL_MspInit+0x4c>)
 800422c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004230:	6413      	str	r3, [r2, #64]	; 0x40
 8004232:	4b06      	ldr	r3, [pc, #24]	; (800424c <HAL_MspInit+0x4c>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423a:	603b      	str	r3, [r7, #0]
 800423c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40023800 	.word	0x40023800

08004250 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b08c      	sub	sp, #48	; 0x30
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004258:	f107 031c 	add.w	r3, r7, #28
 800425c:	2200      	movs	r2, #0
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	605a      	str	r2, [r3, #4]
 8004262:	609a      	str	r2, [r3, #8]
 8004264:	60da      	str	r2, [r3, #12]
 8004266:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a54      	ldr	r2, [pc, #336]	; (80043c0 <HAL_DCMI_MspInit+0x170>)
 800426e:	4293      	cmp	r3, r2
 8004270:	f040 80a1 	bne.w	80043b6 <HAL_DCMI_MspInit+0x166>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8004274:	2300      	movs	r3, #0
 8004276:	61bb      	str	r3, [r7, #24]
 8004278:	4b52      	ldr	r3, [pc, #328]	; (80043c4 <HAL_DCMI_MspInit+0x174>)
 800427a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800427c:	4a51      	ldr	r2, [pc, #324]	; (80043c4 <HAL_DCMI_MspInit+0x174>)
 800427e:	f043 0301 	orr.w	r3, r3, #1
 8004282:	6353      	str	r3, [r2, #52]	; 0x34
 8004284:	4b4f      	ldr	r3, [pc, #316]	; (80043c4 <HAL_DCMI_MspInit+0x174>)
 8004286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	61bb      	str	r3, [r7, #24]
 800428e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004290:	2300      	movs	r3, #0
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	4b4b      	ldr	r3, [pc, #300]	; (80043c4 <HAL_DCMI_MspInit+0x174>)
 8004296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004298:	4a4a      	ldr	r2, [pc, #296]	; (80043c4 <HAL_DCMI_MspInit+0x174>)
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	6313      	str	r3, [r2, #48]	; 0x30
 80042a0:	4b48      	ldr	r3, [pc, #288]	; (80043c4 <HAL_DCMI_MspInit+0x174>)
 80042a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	617b      	str	r3, [r7, #20]
 80042aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042ac:	2300      	movs	r3, #0
 80042ae:	613b      	str	r3, [r7, #16]
 80042b0:	4b44      	ldr	r3, [pc, #272]	; (80043c4 <HAL_DCMI_MspInit+0x174>)
 80042b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b4:	4a43      	ldr	r2, [pc, #268]	; (80043c4 <HAL_DCMI_MspInit+0x174>)
 80042b6:	f043 0304 	orr.w	r3, r3, #4
 80042ba:	6313      	str	r3, [r2, #48]	; 0x30
 80042bc:	4b41      	ldr	r3, [pc, #260]	; (80043c4 <HAL_DCMI_MspInit+0x174>)
 80042be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	613b      	str	r3, [r7, #16]
 80042c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042c8:	2300      	movs	r3, #0
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	4b3d      	ldr	r3, [pc, #244]	; (80043c4 <HAL_DCMI_MspInit+0x174>)
 80042ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d0:	4a3c      	ldr	r2, [pc, #240]	; (80043c4 <HAL_DCMI_MspInit+0x174>)
 80042d2:	f043 0302 	orr.w	r3, r3, #2
 80042d6:	6313      	str	r3, [r2, #48]	; 0x30
 80042d8:	4b3a      	ldr	r3, [pc, #232]	; (80043c4 <HAL_DCMI_MspInit+0x174>)
 80042da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PB8     ------> DCMI_D6
    PB9     ------> DCMI_D7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80042e4:	2350      	movs	r3, #80	; 0x50
 80042e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e8:	2302      	movs	r3, #2
 80042ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80042ec:	2302      	movs	r3, #2
 80042ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042f0:	2303      	movs	r3, #3
 80042f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80042f4:	230d      	movs	r3, #13
 80042f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042f8:	f107 031c 	add.w	r3, r7, #28
 80042fc:	4619      	mov	r1, r3
 80042fe:	4832      	ldr	r0, [pc, #200]	; (80043c8 <HAL_DCMI_MspInit+0x178>)
 8004300:	f001 f80c 	bl	800531c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 8004304:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 8004308:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800430a:	2302      	movs	r3, #2
 800430c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800430e:	2302      	movs	r3, #2
 8004310:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004312:	2303      	movs	r3, #3
 8004314:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004316:	230d      	movs	r3, #13
 8004318:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800431a:	f107 031c 	add.w	r3, r7, #28
 800431e:	4619      	mov	r1, r3
 8004320:	482a      	ldr	r0, [pc, #168]	; (80043cc <HAL_DCMI_MspInit+0x17c>)
 8004322:	f000 fffb 	bl	800531c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8004326:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800432a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800432c:	2302      	movs	r3, #2
 800432e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004330:	2302      	movs	r3, #2
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004334:	2303      	movs	r3, #3
 8004336:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004338:	230d      	movs	r3, #13
 800433a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800433c:	f107 031c 	add.w	r3, r7, #28
 8004340:	4619      	mov	r1, r3
 8004342:	4823      	ldr	r0, [pc, #140]	; (80043d0 <HAL_DCMI_MspInit+0x180>)
 8004344:	f000 ffea 	bl	800531c <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8004348:	4b22      	ldr	r3, [pc, #136]	; (80043d4 <HAL_DCMI_MspInit+0x184>)
 800434a:	4a23      	ldr	r2, [pc, #140]	; (80043d8 <HAL_DCMI_MspInit+0x188>)
 800434c:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 800434e:	4b21      	ldr	r3, [pc, #132]	; (80043d4 <HAL_DCMI_MspInit+0x184>)
 8004350:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004354:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004356:	4b1f      	ldr	r3, [pc, #124]	; (80043d4 <HAL_DCMI_MspInit+0x184>)
 8004358:	2200      	movs	r2, #0
 800435a:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800435c:	4b1d      	ldr	r3, [pc, #116]	; (80043d4 <HAL_DCMI_MspInit+0x184>)
 800435e:	2200      	movs	r2, #0
 8004360:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_DISABLE;
 8004362:	4b1c      	ldr	r3, [pc, #112]	; (80043d4 <HAL_DCMI_MspInit+0x184>)
 8004364:	2200      	movs	r2, #0
 8004366:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004368:	4b1a      	ldr	r3, [pc, #104]	; (80043d4 <HAL_DCMI_MspInit+0x184>)
 800436a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800436e:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004370:	4b18      	ldr	r3, [pc, #96]	; (80043d4 <HAL_DCMI_MspInit+0x184>)
 8004372:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004376:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8004378:	4b16      	ldr	r3, [pc, #88]	; (80043d4 <HAL_DCMI_MspInit+0x184>)
 800437a:	2200      	movs	r2, #0
 800437c:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 800437e:	4b15      	ldr	r3, [pc, #84]	; (80043d4 <HAL_DCMI_MspInit+0x184>)
 8004380:	2200      	movs	r2, #0
 8004382:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004384:	4b13      	ldr	r3, [pc, #76]	; (80043d4 <HAL_DCMI_MspInit+0x184>)
 8004386:	2200      	movs	r2, #0
 8004388:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800438a:	4812      	ldr	r0, [pc, #72]	; (80043d4 <HAL_DCMI_MspInit+0x184>)
 800438c:	f000 fcbc 	bl	8004d08 <HAL_DMA_Init>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <HAL_DCMI_MspInit+0x14a>
    {
      Error_Handler();
 8004396:	f7ff ff2b 	bl	80041f0 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a0d      	ldr	r2, [pc, #52]	; (80043d4 <HAL_DCMI_MspInit+0x184>)
 800439e:	639a      	str	r2, [r3, #56]	; 0x38
 80043a0:	4a0c      	ldr	r2, [pc, #48]	; (80043d4 <HAL_DCMI_MspInit+0x184>)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80043a6:	2200      	movs	r2, #0
 80043a8:	2100      	movs	r1, #0
 80043aa:	204e      	movs	r0, #78	; 0x4e
 80043ac:	f000 fb51 	bl	8004a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80043b0:	204e      	movs	r0, #78	; 0x4e
 80043b2:	f000 fb6a 	bl	8004a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80043b6:	bf00      	nop
 80043b8:	3730      	adds	r7, #48	; 0x30
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	50050000 	.word	0x50050000
 80043c4:	40023800 	.word	0x40023800
 80043c8:	40020000 	.word	0x40020000
 80043cc:	40020800 	.word	0x40020800
 80043d0:	40020400 	.word	0x40020400
 80043d4:	200006d0 	.word	0x200006d0
 80043d8:	40026428 	.word	0x40026428

080043dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b08a      	sub	sp, #40	; 0x28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043e4:	f107 0314 	add.w	r3, r7, #20
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	605a      	str	r2, [r3, #4]
 80043ee:	609a      	str	r2, [r3, #8]
 80043f0:	60da      	str	r2, [r3, #12]
 80043f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a19      	ldr	r2, [pc, #100]	; (8004460 <HAL_I2C_MspInit+0x84>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d12c      	bne.n	8004458 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043fe:	2300      	movs	r3, #0
 8004400:	613b      	str	r3, [r7, #16]
 8004402:	4b18      	ldr	r3, [pc, #96]	; (8004464 <HAL_I2C_MspInit+0x88>)
 8004404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004406:	4a17      	ldr	r2, [pc, #92]	; (8004464 <HAL_I2C_MspInit+0x88>)
 8004408:	f043 0302 	orr.w	r3, r3, #2
 800440c:	6313      	str	r3, [r2, #48]	; 0x30
 800440e:	4b15      	ldr	r3, [pc, #84]	; (8004464 <HAL_I2C_MspInit+0x88>)
 8004410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	613b      	str	r3, [r7, #16]
 8004418:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800441a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800441e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004420:	2312      	movs	r3, #18
 8004422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004424:	2301      	movs	r3, #1
 8004426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004428:	2303      	movs	r3, #3
 800442a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800442c:	2304      	movs	r3, #4
 800442e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004430:	f107 0314 	add.w	r3, r7, #20
 8004434:	4619      	mov	r1, r3
 8004436:	480c      	ldr	r0, [pc, #48]	; (8004468 <HAL_I2C_MspInit+0x8c>)
 8004438:	f000 ff70 	bl	800531c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800443c:	2300      	movs	r3, #0
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	4b08      	ldr	r3, [pc, #32]	; (8004464 <HAL_I2C_MspInit+0x88>)
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	4a07      	ldr	r2, [pc, #28]	; (8004464 <HAL_I2C_MspInit+0x88>)
 8004446:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800444a:	6413      	str	r3, [r2, #64]	; 0x40
 800444c:	4b05      	ldr	r3, [pc, #20]	; (8004464 <HAL_I2C_MspInit+0x88>)
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004458:	bf00      	nop
 800445a:	3728      	adds	r7, #40	; 0x28
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40005800 	.word	0x40005800
 8004464:	40023800 	.word	0x40023800
 8004468:	40020400 	.word	0x40020400

0800446c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b08a      	sub	sp, #40	; 0x28
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004474:	f107 0314 	add.w	r3, r7, #20
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	605a      	str	r2, [r3, #4]
 800447e:	609a      	str	r2, [r3, #8]
 8004480:	60da      	str	r2, [r3, #12]
 8004482:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a19      	ldr	r2, [pc, #100]	; (80044f0 <HAL_SPI_MspInit+0x84>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d12b      	bne.n	80044e6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800448e:	2300      	movs	r3, #0
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	4b18      	ldr	r3, [pc, #96]	; (80044f4 <HAL_SPI_MspInit+0x88>)
 8004494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004496:	4a17      	ldr	r2, [pc, #92]	; (80044f4 <HAL_SPI_MspInit+0x88>)
 8004498:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800449c:	6453      	str	r3, [r2, #68]	; 0x44
 800449e:	4b15      	ldr	r3, [pc, #84]	; (80044f4 <HAL_SPI_MspInit+0x88>)
 80044a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044a6:	613b      	str	r3, [r7, #16]
 80044a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044aa:	2300      	movs	r3, #0
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	4b11      	ldr	r3, [pc, #68]	; (80044f4 <HAL_SPI_MspInit+0x88>)
 80044b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b2:	4a10      	ldr	r2, [pc, #64]	; (80044f4 <HAL_SPI_MspInit+0x88>)
 80044b4:	f043 0302 	orr.w	r3, r3, #2
 80044b8:	6313      	str	r3, [r2, #48]	; 0x30
 80044ba:	4b0e      	ldr	r3, [pc, #56]	; (80044f4 <HAL_SPI_MspInit+0x88>)
 80044bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80044c6:	2338      	movs	r3, #56	; 0x38
 80044c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ca:	2302      	movs	r3, #2
 80044cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ce:	2300      	movs	r3, #0
 80044d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044d2:	2303      	movs	r3, #3
 80044d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80044d6:	2305      	movs	r3, #5
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044da:	f107 0314 	add.w	r3, r7, #20
 80044de:	4619      	mov	r1, r3
 80044e0:	4805      	ldr	r0, [pc, #20]	; (80044f8 <HAL_SPI_MspInit+0x8c>)
 80044e2:	f000 ff1b 	bl	800531c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80044e6:	bf00      	nop
 80044e8:	3728      	adds	r7, #40	; 0x28
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	40013000 	.word	0x40013000
 80044f4:	40023800 	.word	0x40023800
 80044f8:	40020400 	.word	0x40020400

080044fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a0e      	ldr	r2, [pc, #56]	; (8004544 <HAL_TIM_Base_MspInit+0x48>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d115      	bne.n	800453a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800450e:	2300      	movs	r3, #0
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	4b0d      	ldr	r3, [pc, #52]	; (8004548 <HAL_TIM_Base_MspInit+0x4c>)
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	4a0c      	ldr	r2, [pc, #48]	; (8004548 <HAL_TIM_Base_MspInit+0x4c>)
 8004518:	f043 0302 	orr.w	r3, r3, #2
 800451c:	6413      	str	r3, [r2, #64]	; 0x40
 800451e:	4b0a      	ldr	r3, [pc, #40]	; (8004548 <HAL_TIM_Base_MspInit+0x4c>)
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800452a:	2200      	movs	r2, #0
 800452c:	2100      	movs	r1, #0
 800452e:	201d      	movs	r0, #29
 8004530:	f000 fa8f 	bl	8004a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004534:	201d      	movs	r0, #29
 8004536:	f000 faa8 	bl	8004a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800453a:	bf00      	nop
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	40000400 	.word	0x40000400
 8004548:	40023800 	.word	0x40023800

0800454c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b08a      	sub	sp, #40	; 0x28
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004554:	f107 0314 	add.w	r3, r7, #20
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	605a      	str	r2, [r3, #4]
 800455e:	609a      	str	r2, [r3, #8]
 8004560:	60da      	str	r2, [r3, #12]
 8004562:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a1d      	ldr	r2, [pc, #116]	; (80045e0 <HAL_UART_MspInit+0x94>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d133      	bne.n	80045d6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800456e:	2300      	movs	r3, #0
 8004570:	613b      	str	r3, [r7, #16]
 8004572:	4b1c      	ldr	r3, [pc, #112]	; (80045e4 <HAL_UART_MspInit+0x98>)
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	4a1b      	ldr	r2, [pc, #108]	; (80045e4 <HAL_UART_MspInit+0x98>)
 8004578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800457c:	6413      	str	r3, [r2, #64]	; 0x40
 800457e:	4b19      	ldr	r3, [pc, #100]	; (80045e4 <HAL_UART_MspInit+0x98>)
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004586:	613b      	str	r3, [r7, #16]
 8004588:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800458a:	2300      	movs	r3, #0
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	4b15      	ldr	r3, [pc, #84]	; (80045e4 <HAL_UART_MspInit+0x98>)
 8004590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004592:	4a14      	ldr	r2, [pc, #80]	; (80045e4 <HAL_UART_MspInit+0x98>)
 8004594:	f043 0308 	orr.w	r3, r3, #8
 8004598:	6313      	str	r3, [r2, #48]	; 0x30
 800459a:	4b12      	ldr	r3, [pc, #72]	; (80045e4 <HAL_UART_MspInit+0x98>)
 800459c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80045a6:	2360      	movs	r3, #96	; 0x60
 80045a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045aa:	2302      	movs	r3, #2
 80045ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045ae:	2301      	movs	r3, #1
 80045b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045b2:	2303      	movs	r3, #3
 80045b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80045b6:	2307      	movs	r3, #7
 80045b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045ba:	f107 0314 	add.w	r3, r7, #20
 80045be:	4619      	mov	r1, r3
 80045c0:	4809      	ldr	r0, [pc, #36]	; (80045e8 <HAL_UART_MspInit+0x9c>)
 80045c2:	f000 feab 	bl	800531c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80045c6:	2200      	movs	r2, #0
 80045c8:	2100      	movs	r1, #0
 80045ca:	2026      	movs	r0, #38	; 0x26
 80045cc:	f000 fa41 	bl	8004a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80045d0:	2026      	movs	r0, #38	; 0x26
 80045d2:	f000 fa5a 	bl	8004a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80045d6:	bf00      	nop
 80045d8:	3728      	adds	r7, #40	; 0x28
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	40004400 	.word	0x40004400
 80045e4:	40023800 	.word	0x40023800
 80045e8:	40020c00 	.word	0x40020c00

080045ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80045f0:	bf00      	nop
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045fa:	b480      	push	{r7}
 80045fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045fe:	e7fe      	b.n	80045fe <HardFault_Handler+0x4>

08004600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004604:	e7fe      	b.n	8004604 <MemManage_Handler+0x4>

08004606 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004606:	b480      	push	{r7}
 8004608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800460a:	e7fe      	b.n	800460a <BusFault_Handler+0x4>

0800460c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004610:	e7fe      	b.n	8004610 <UsageFault_Handler+0x4>

08004612 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004612:	b480      	push	{r7}
 8004614:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004616:	bf00      	nop
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004624:	bf00      	nop
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800462e:	b480      	push	{r7}
 8004630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004632:	bf00      	nop
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	sdcard_systick_timerproc();
 8004640:	f7fd f944 	bl	80018cc <sdcard_systick_timerproc>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004644:	f000 f8e8 	bl	8004818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004648:	bf00      	nop
 800464a:	bd80      	pop	{r7, pc}

0800464c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004650:	4802      	ldr	r0, [pc, #8]	; (800465c <TIM3_IRQHandler+0x10>)
 8004652:	f002 fa74 	bl	8006b3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004656:	bf00      	nop
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20000734 	.word	0x20000734

08004660 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004664:	4802      	ldr	r0, [pc, #8]	; (8004670 <USART2_IRQHandler+0x10>)
 8004666:	f002 ff03 	bl	8007470 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800466a:	bf00      	nop
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	20000b40 	.word	0x20000b40

08004674 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8004678:	4802      	ldr	r0, [pc, #8]	; (8004684 <DMA2_Stream1_IRQHandler+0x10>)
 800467a:	f000 fc15 	bl	8004ea8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800467e:	bf00      	nop
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	200006d0 	.word	0x200006d0

08004688 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 800468c:	4802      	ldr	r0, [pc, #8]	; (8004698 <DCMI_IRQHandler+0x10>)
 800468e:	f000 fa17 	bl	8004ac0 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8004692:	bf00      	nop
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	2000099c 	.word	0x2000099c

0800469c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80046a4:	4b11      	ldr	r3, [pc, #68]	; (80046ec <_sbrk+0x50>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d102      	bne.n	80046b2 <_sbrk+0x16>
		heap_end = &end;
 80046ac:	4b0f      	ldr	r3, [pc, #60]	; (80046ec <_sbrk+0x50>)
 80046ae:	4a10      	ldr	r2, [pc, #64]	; (80046f0 <_sbrk+0x54>)
 80046b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80046b2:	4b0e      	ldr	r3, [pc, #56]	; (80046ec <_sbrk+0x50>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80046b8:	4b0c      	ldr	r3, [pc, #48]	; (80046ec <_sbrk+0x50>)
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4413      	add	r3, r2
 80046c0:	466a      	mov	r2, sp
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d907      	bls.n	80046d6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80046c6:	f003 fc85 	bl	8007fd4 <__errno>
 80046ca:	4602      	mov	r2, r0
 80046cc:	230c      	movs	r3, #12
 80046ce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80046d0:	f04f 33ff 	mov.w	r3, #4294967295
 80046d4:	e006      	b.n	80046e4 <_sbrk+0x48>
	}

	heap_end += incr;
 80046d6:	4b05      	ldr	r3, [pc, #20]	; (80046ec <_sbrk+0x50>)
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4413      	add	r3, r2
 80046de:	4a03      	ldr	r2, [pc, #12]	; (80046ec <_sbrk+0x50>)
 80046e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80046e2:	68fb      	ldr	r3, [r7, #12]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	2000043c 	.word	0x2000043c
 80046f0:	20000b90 	.word	0x20000b90

080046f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80046f8:	4b08      	ldr	r3, [pc, #32]	; (800471c <SystemInit+0x28>)
 80046fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fe:	4a07      	ldr	r2, [pc, #28]	; (800471c <SystemInit+0x28>)
 8004700:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004704:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004708:	4b04      	ldr	r3, [pc, #16]	; (800471c <SystemInit+0x28>)
 800470a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800470e:	609a      	str	r2, [r3, #8]
#endif
}
 8004710:	bf00      	nop
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	e000ed00 	.word	0xe000ed00

08004720 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004720:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004758 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004724:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004726:	e003      	b.n	8004730 <LoopCopyDataInit>

08004728 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004728:	4b0c      	ldr	r3, [pc, #48]	; (800475c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800472a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800472c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800472e:	3104      	adds	r1, #4

08004730 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004730:	480b      	ldr	r0, [pc, #44]	; (8004760 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004732:	4b0c      	ldr	r3, [pc, #48]	; (8004764 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004734:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004736:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004738:	d3f6      	bcc.n	8004728 <CopyDataInit>
  ldr  r2, =_sbss
 800473a:	4a0b      	ldr	r2, [pc, #44]	; (8004768 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800473c:	e002      	b.n	8004744 <LoopFillZerobss>

0800473e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800473e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004740:	f842 3b04 	str.w	r3, [r2], #4

08004744 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004744:	4b09      	ldr	r3, [pc, #36]	; (800476c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004746:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004748:	d3f9      	bcc.n	800473e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800474a:	f7ff ffd3 	bl	80046f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800474e:	f003 fc47 	bl	8007fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004752:	f7ff fa61 	bl	8003c18 <main>
  bx  lr    
 8004756:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004758:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800475c:	08009d40 	.word	0x08009d40
  ldr  r0, =_sdata
 8004760:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004764:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8004768:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 800476c:	20000b8c 	.word	0x20000b8c

08004770 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004770:	e7fe      	b.n	8004770 <ADC_IRQHandler>
	...

08004774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004778:	4b0e      	ldr	r3, [pc, #56]	; (80047b4 <HAL_Init+0x40>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a0d      	ldr	r2, [pc, #52]	; (80047b4 <HAL_Init+0x40>)
 800477e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004782:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004784:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <HAL_Init+0x40>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a0a      	ldr	r2, [pc, #40]	; (80047b4 <HAL_Init+0x40>)
 800478a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800478e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004790:	4b08      	ldr	r3, [pc, #32]	; (80047b4 <HAL_Init+0x40>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a07      	ldr	r2, [pc, #28]	; (80047b4 <HAL_Init+0x40>)
 8004796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800479a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800479c:	2003      	movs	r0, #3
 800479e:	f000 f94d 	bl	8004a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80047a2:	2000      	movs	r0, #0
 80047a4:	f000 f808 	bl	80047b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047a8:	f7ff fd2a 	bl	8004200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	40023c00 	.word	0x40023c00

080047b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80047c0:	4b12      	ldr	r3, [pc, #72]	; (800480c <HAL_InitTick+0x54>)
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	4b12      	ldr	r3, [pc, #72]	; (8004810 <HAL_InitTick+0x58>)
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	4619      	mov	r1, r3
 80047ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80047d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 f965 	bl	8004aa6 <HAL_SYSTICK_Config>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e00e      	b.n	8004804 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b0f      	cmp	r3, #15
 80047ea:	d80a      	bhi.n	8004802 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047ec:	2200      	movs	r2, #0
 80047ee:	6879      	ldr	r1, [r7, #4]
 80047f0:	f04f 30ff 	mov.w	r0, #4294967295
 80047f4:	f000 f92d 	bl	8004a52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80047f8:	4a06      	ldr	r2, [pc, #24]	; (8004814 <HAL_InitTick+0x5c>)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
 8004800:	e000      	b.n	8004804 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
}
 8004804:	4618      	mov	r0, r3
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	20000008 	.word	0x20000008
 8004810:	20000010 	.word	0x20000010
 8004814:	2000000c 	.word	0x2000000c

08004818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800481c:	4b06      	ldr	r3, [pc, #24]	; (8004838 <HAL_IncTick+0x20>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	461a      	mov	r2, r3
 8004822:	4b06      	ldr	r3, [pc, #24]	; (800483c <HAL_IncTick+0x24>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4413      	add	r3, r2
 8004828:	4a04      	ldr	r2, [pc, #16]	; (800483c <HAL_IncTick+0x24>)
 800482a:	6013      	str	r3, [r2, #0]
}
 800482c:	bf00      	nop
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	20000010 	.word	0x20000010
 800483c:	20000b84 	.word	0x20000b84

08004840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
  return uwTick;
 8004844:	4b03      	ldr	r3, [pc, #12]	; (8004854 <HAL_GetTick+0x14>)
 8004846:	681b      	ldr	r3, [r3, #0]
}
 8004848:	4618      	mov	r0, r3
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	20000b84 	.word	0x20000b84

08004858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004860:	f7ff ffee 	bl	8004840 <HAL_GetTick>
 8004864:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004870:	d005      	beq.n	800487e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004872:	4b09      	ldr	r3, [pc, #36]	; (8004898 <HAL_Delay+0x40>)
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	461a      	mov	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4413      	add	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800487e:	bf00      	nop
 8004880:	f7ff ffde 	bl	8004840 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	429a      	cmp	r2, r3
 800488e:	d8f7      	bhi.n	8004880 <HAL_Delay+0x28>
  {
  }
}
 8004890:	bf00      	nop
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	20000010 	.word	0x20000010

0800489c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f003 0307 	and.w	r3, r3, #7
 80048aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048ac:	4b0c      	ldr	r3, [pc, #48]	; (80048e0 <__NVIC_SetPriorityGrouping+0x44>)
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048b8:	4013      	ands	r3, r2
 80048ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048ce:	4a04      	ldr	r2, [pc, #16]	; (80048e0 <__NVIC_SetPriorityGrouping+0x44>)
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	60d3      	str	r3, [r2, #12]
}
 80048d4:	bf00      	nop
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	e000ed00 	.word	0xe000ed00

080048e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048e8:	4b04      	ldr	r3, [pc, #16]	; (80048fc <__NVIC_GetPriorityGrouping+0x18>)
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	0a1b      	lsrs	r3, r3, #8
 80048ee:	f003 0307 	and.w	r3, r3, #7
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	e000ed00 	.word	0xe000ed00

08004900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	4603      	mov	r3, r0
 8004908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800490a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800490e:	2b00      	cmp	r3, #0
 8004910:	db0b      	blt.n	800492a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004912:	79fb      	ldrb	r3, [r7, #7]
 8004914:	f003 021f 	and.w	r2, r3, #31
 8004918:	4907      	ldr	r1, [pc, #28]	; (8004938 <__NVIC_EnableIRQ+0x38>)
 800491a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800491e:	095b      	lsrs	r3, r3, #5
 8004920:	2001      	movs	r0, #1
 8004922:	fa00 f202 	lsl.w	r2, r0, r2
 8004926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	e000e100 	.word	0xe000e100

0800493c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	4603      	mov	r3, r0
 8004944:	6039      	str	r1, [r7, #0]
 8004946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800494c:	2b00      	cmp	r3, #0
 800494e:	db0a      	blt.n	8004966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	b2da      	uxtb	r2, r3
 8004954:	490c      	ldr	r1, [pc, #48]	; (8004988 <__NVIC_SetPriority+0x4c>)
 8004956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800495a:	0112      	lsls	r2, r2, #4
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	440b      	add	r3, r1
 8004960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004964:	e00a      	b.n	800497c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	b2da      	uxtb	r2, r3
 800496a:	4908      	ldr	r1, [pc, #32]	; (800498c <__NVIC_SetPriority+0x50>)
 800496c:	79fb      	ldrb	r3, [r7, #7]
 800496e:	f003 030f 	and.w	r3, r3, #15
 8004972:	3b04      	subs	r3, #4
 8004974:	0112      	lsls	r2, r2, #4
 8004976:	b2d2      	uxtb	r2, r2
 8004978:	440b      	add	r3, r1
 800497a:	761a      	strb	r2, [r3, #24]
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	e000e100 	.word	0xe000e100
 800498c:	e000ed00 	.word	0xe000ed00

08004990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004990:	b480      	push	{r7}
 8004992:	b089      	sub	sp, #36	; 0x24
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	f1c3 0307 	rsb	r3, r3, #7
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	bf28      	it	cs
 80049ae:	2304      	movcs	r3, #4
 80049b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	3304      	adds	r3, #4
 80049b6:	2b06      	cmp	r3, #6
 80049b8:	d902      	bls.n	80049c0 <NVIC_EncodePriority+0x30>
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	3b03      	subs	r3, #3
 80049be:	e000      	b.n	80049c2 <NVIC_EncodePriority+0x32>
 80049c0:	2300      	movs	r3, #0
 80049c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049c4:	f04f 32ff 	mov.w	r2, #4294967295
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	43da      	mvns	r2, r3
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	401a      	ands	r2, r3
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049d8:	f04f 31ff 	mov.w	r1, #4294967295
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	fa01 f303 	lsl.w	r3, r1, r3
 80049e2:	43d9      	mvns	r1, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049e8:	4313      	orrs	r3, r2
         );
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3724      	adds	r7, #36	; 0x24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
	...

080049f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a08:	d301      	bcc.n	8004a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e00f      	b.n	8004a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a0e:	4a0a      	ldr	r2, [pc, #40]	; (8004a38 <SysTick_Config+0x40>)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3b01      	subs	r3, #1
 8004a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a16:	210f      	movs	r1, #15
 8004a18:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1c:	f7ff ff8e 	bl	800493c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a20:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <SysTick_Config+0x40>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a26:	4b04      	ldr	r3, [pc, #16]	; (8004a38 <SysTick_Config+0x40>)
 8004a28:	2207      	movs	r2, #7
 8004a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	e000e010 	.word	0xe000e010

08004a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7ff ff29 	bl	800489c <__NVIC_SetPriorityGrouping>
}
 8004a4a:	bf00      	nop
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b086      	sub	sp, #24
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	4603      	mov	r3, r0
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	607a      	str	r2, [r7, #4]
 8004a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a64:	f7ff ff3e 	bl	80048e4 <__NVIC_GetPriorityGrouping>
 8004a68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	68b9      	ldr	r1, [r7, #8]
 8004a6e:	6978      	ldr	r0, [r7, #20]
 8004a70:	f7ff ff8e 	bl	8004990 <NVIC_EncodePriority>
 8004a74:	4602      	mov	r2, r0
 8004a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a7a:	4611      	mov	r1, r2
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7ff ff5d 	bl	800493c <__NVIC_SetPriority>
}
 8004a82:	bf00      	nop
 8004a84:	3718      	adds	r7, #24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b082      	sub	sp, #8
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	4603      	mov	r3, r0
 8004a92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7ff ff31 	bl	8004900 <__NVIC_EnableIRQ>
}
 8004a9e:	bf00      	nop
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b082      	sub	sp, #8
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7ff ffa2 	bl	80049f8 <SysTick_Config>
 8004ab4:	4603      	mov	r3, r0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
	...

08004ac0 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f003 0304 	and.w	r3, r3, #4
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d016      	beq.n	8004b08 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2204      	movs	r2, #4
 8004ae0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae6:	f043 0202 	orr.w	r2, r3, #2
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2204      	movs	r2, #4
 8004af2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afa:	4a2f      	ldr	r2, [pc, #188]	; (8004bb8 <HAL_DCMI_IRQHandler+0xf8>)
 8004afc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 f9ae 	bl	8004e64 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d016      	beq.n	8004b40 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2202      	movs	r2, #2
 8004b18:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1e:	f043 0201 	orr.w	r2, r3, #1
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2204      	movs	r2, #4
 8004b2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b32:	4a21      	ldr	r2, [pc, #132]	; (8004bb8 <HAL_DCMI_IRQHandler+0xf8>)
 8004b34:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 f992 	bl	8004e64 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f003 0310 	and.w	r3, r3, #16
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d006      	beq.n	8004b58 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2210      	movs	r2, #16
 8004b50:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f83c 	bl	8004bd0 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f003 0308 	and.w	r3, r3, #8
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d006      	beq.n	8004b70 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2208      	movs	r2, #8
 8004b68:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f83a 	bl	8004be4 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d019      	beq.n	8004bae <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d107      	bne.n	8004b98 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 021e 	bic.w	r2, r2, #30
 8004b96:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0201 	bic.w	r2, r2, #1
 8004ba6:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f825 	bl	8004bf8 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 8004bae:	bf00      	nop
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	08004c0d 	.word	0x08004c0d

08004bbc <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c18:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d003      	beq.n	8004c2c <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f7ff ffc5 	bl	8004bbc <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8004c32:	bf00      	nop
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b082      	sub	sp, #8
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e058      	b.n	8004cfe <HAL_DCMI_Init+0xc4>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d102      	bne.n	8004c5e <HAL_DCMI_Init+0x24>
  {
    /* Init the low level hardware */
    HAL_DCMI_MspInit(hdcmi);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7ff faf9 	bl	8004250 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2202      	movs	r2, #2
 8004c62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6812      	ldr	r2, [r2, #0]
 8004c70:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004c74:	f023 0308 	bic.w	r3, r3, #8
 8004c78:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6819      	ldr	r1, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004c8e:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004c9a:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode 
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004ca6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2b10      	cmp	r3, #16
 8004cb6:	d112      	bne.n	8004cde <HAL_DCMI_Init+0xa4>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	7f1b      	ldrb	r3, [r3, #28]
 8004cbc:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	7f5b      	ldrb	r3, [r3, #29]
 8004cc2:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8004cc4:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	7f9b      	ldrb	r3, [r3, #30]
 8004cca:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8004ccc:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	7fdb      	ldrb	r3, [r3, #31]
 8004cd4:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8004cda:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8004cdc:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68da      	ldr	r2, [r3, #12]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f042 021e 	orr.w	r2, r2, #30
 8004cec:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
	...

08004d08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d14:	f7ff fd94 	bl	8004840 <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e099      	b.n	8004e58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0201 	bic.w	r2, r2, #1
 8004d42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d44:	e00f      	b.n	8004d66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d46:	f7ff fd7b 	bl	8004840 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	2b05      	cmp	r3, #5
 8004d52:	d908      	bls.n	8004d66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2220      	movs	r2, #32
 8004d58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2203      	movs	r2, #3
 8004d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e078      	b.n	8004e58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1e8      	bne.n	8004d46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	4b38      	ldr	r3, [pc, #224]	; (8004e60 <HAL_DMA_Init+0x158>)
 8004d80:	4013      	ands	r3, r2
 8004d82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004daa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d107      	bne.n	8004dd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f023 0307 	bic.w	r3, r3, #7
 8004de6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	2b04      	cmp	r3, #4
 8004df8:	d117      	bne.n	8004e2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00e      	beq.n	8004e2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 fa0b 	bl	8005228 <DMA_CheckFifoParam>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d008      	beq.n	8004e2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2240      	movs	r2, #64	; 0x40
 8004e1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004e26:	2301      	movs	r3, #1
 8004e28:	e016      	b.n	8004e58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f9c2 	bl	80051bc <DMA_CalcBaseAndBitshift>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e40:	223f      	movs	r2, #63	; 0x3f
 8004e42:	409a      	lsls	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3718      	adds	r7, #24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	f010803f 	.word	0xf010803f

08004e64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d004      	beq.n	8004e82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2280      	movs	r2, #128	; 0x80
 8004e7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e00c      	b.n	8004e9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2205      	movs	r2, #5
 8004e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 0201 	bic.w	r2, r2, #1
 8004e98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004eb4:	4b92      	ldr	r3, [pc, #584]	; (8005100 <HAL_DMA_IRQHandler+0x258>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a92      	ldr	r2, [pc, #584]	; (8005104 <HAL_DMA_IRQHandler+0x25c>)
 8004eba:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebe:	0a9b      	lsrs	r3, r3, #10
 8004ec0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed2:	2208      	movs	r2, #8
 8004ed4:	409a      	lsls	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	4013      	ands	r3, r2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d01a      	beq.n	8004f14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d013      	beq.n	8004f14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f022 0204 	bic.w	r2, r2, #4
 8004efa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f00:	2208      	movs	r2, #8
 8004f02:	409a      	lsls	r2, r3
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0c:	f043 0201 	orr.w	r2, r3, #1
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f18:	2201      	movs	r2, #1
 8004f1a:	409a      	lsls	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d012      	beq.n	8004f4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00b      	beq.n	8004f4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f36:	2201      	movs	r2, #1
 8004f38:	409a      	lsls	r2, r3
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f42:	f043 0202 	orr.w	r2, r3, #2
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f4e:	2204      	movs	r2, #4
 8004f50:	409a      	lsls	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4013      	ands	r3, r2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d012      	beq.n	8004f80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00b      	beq.n	8004f80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f6c:	2204      	movs	r2, #4
 8004f6e:	409a      	lsls	r2, r3
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f78:	f043 0204 	orr.w	r2, r3, #4
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f84:	2210      	movs	r2, #16
 8004f86:	409a      	lsls	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d043      	beq.n	8005018 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0308 	and.w	r3, r3, #8
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d03c      	beq.n	8005018 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa2:	2210      	movs	r2, #16
 8004fa4:	409a      	lsls	r2, r3
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d018      	beq.n	8004fea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d108      	bne.n	8004fd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d024      	beq.n	8005018 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	4798      	blx	r3
 8004fd6:	e01f      	b.n	8005018 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d01b      	beq.n	8005018 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	4798      	blx	r3
 8004fe8:	e016      	b.n	8005018 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d107      	bne.n	8005008 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0208 	bic.w	r2, r2, #8
 8005006:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500c:	2b00      	cmp	r3, #0
 800500e:	d003      	beq.n	8005018 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800501c:	2220      	movs	r2, #32
 800501e:	409a      	lsls	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4013      	ands	r3, r2
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 808e 	beq.w	8005146 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0310 	and.w	r3, r3, #16
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 8086 	beq.w	8005146 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800503e:	2220      	movs	r2, #32
 8005040:	409a      	lsls	r2, r3
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b05      	cmp	r3, #5
 8005050:	d136      	bne.n	80050c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0216 	bic.w	r2, r2, #22
 8005060:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	695a      	ldr	r2, [r3, #20]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005070:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	2b00      	cmp	r3, #0
 8005078:	d103      	bne.n	8005082 <HAL_DMA_IRQHandler+0x1da>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800507e:	2b00      	cmp	r3, #0
 8005080:	d007      	beq.n	8005092 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0208 	bic.w	r2, r2, #8
 8005090:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005096:	223f      	movs	r2, #63	; 0x3f
 8005098:	409a      	lsls	r2, r3
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d07d      	beq.n	80051b2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	4798      	blx	r3
        }
        return;
 80050be:	e078      	b.n	80051b2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d01c      	beq.n	8005108 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d108      	bne.n	80050ee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d030      	beq.n	8005146 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	4798      	blx	r3
 80050ec:	e02b      	b.n	8005146 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d027      	beq.n	8005146 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	4798      	blx	r3
 80050fe:	e022      	b.n	8005146 <HAL_DMA_IRQHandler+0x29e>
 8005100:	20000008 	.word	0x20000008
 8005104:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10f      	bne.n	8005136 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 0210 	bic.w	r2, r2, #16
 8005124:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800514a:	2b00      	cmp	r3, #0
 800514c:	d032      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	d022      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2205      	movs	r2, #5
 800515e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0201 	bic.w	r2, r2, #1
 8005170:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	3301      	adds	r3, #1
 8005176:	60bb      	str	r3, [r7, #8]
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	429a      	cmp	r2, r3
 800517c:	d307      	bcc.n	800518e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1f2      	bne.n	8005172 <HAL_DMA_IRQHandler+0x2ca>
 800518c:	e000      	b.n	8005190 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800518e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d005      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	4798      	blx	r3
 80051b0:	e000      	b.n	80051b4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80051b2:	bf00      	nop
    }
  }
}
 80051b4:	3718      	adds	r7, #24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop

080051bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	3b10      	subs	r3, #16
 80051cc:	4a14      	ldr	r2, [pc, #80]	; (8005220 <DMA_CalcBaseAndBitshift+0x64>)
 80051ce:	fba2 2303 	umull	r2, r3, r2, r3
 80051d2:	091b      	lsrs	r3, r3, #4
 80051d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80051d6:	4a13      	ldr	r2, [pc, #76]	; (8005224 <DMA_CalcBaseAndBitshift+0x68>)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4413      	add	r3, r2
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	461a      	mov	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2b03      	cmp	r3, #3
 80051e8:	d909      	bls.n	80051fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80051f2:	f023 0303 	bic.w	r3, r3, #3
 80051f6:	1d1a      	adds	r2, r3, #4
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	659a      	str	r2, [r3, #88]	; 0x58
 80051fc:	e007      	b.n	800520e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005206:	f023 0303 	bic.w	r3, r3, #3
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005212:	4618      	mov	r0, r3
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	aaaaaaab 	.word	0xaaaaaaab
 8005224:	08009b00 	.word	0x08009b00

08005228 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005230:	2300      	movs	r3, #0
 8005232:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005238:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d11f      	bne.n	8005282 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	2b03      	cmp	r3, #3
 8005246:	d855      	bhi.n	80052f4 <DMA_CheckFifoParam+0xcc>
 8005248:	a201      	add	r2, pc, #4	; (adr r2, 8005250 <DMA_CheckFifoParam+0x28>)
 800524a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524e:	bf00      	nop
 8005250:	08005261 	.word	0x08005261
 8005254:	08005273 	.word	0x08005273
 8005258:	08005261 	.word	0x08005261
 800525c:	080052f5 	.word	0x080052f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005264:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d045      	beq.n	80052f8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005270:	e042      	b.n	80052f8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005276:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800527a:	d13f      	bne.n	80052fc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005280:	e03c      	b.n	80052fc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800528a:	d121      	bne.n	80052d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2b03      	cmp	r3, #3
 8005290:	d836      	bhi.n	8005300 <DMA_CheckFifoParam+0xd8>
 8005292:	a201      	add	r2, pc, #4	; (adr r2, 8005298 <DMA_CheckFifoParam+0x70>)
 8005294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005298:	080052a9 	.word	0x080052a9
 800529c:	080052af 	.word	0x080052af
 80052a0:	080052a9 	.word	0x080052a9
 80052a4:	080052c1 	.word	0x080052c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	73fb      	strb	r3, [r7, #15]
      break;
 80052ac:	e02f      	b.n	800530e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d024      	beq.n	8005304 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052be:	e021      	b.n	8005304 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052c8:	d11e      	bne.n	8005308 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80052ce:	e01b      	b.n	8005308 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d902      	bls.n	80052dc <DMA_CheckFifoParam+0xb4>
 80052d6:	2b03      	cmp	r3, #3
 80052d8:	d003      	beq.n	80052e2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80052da:	e018      	b.n	800530e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	73fb      	strb	r3, [r7, #15]
      break;
 80052e0:	e015      	b.n	800530e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00e      	beq.n	800530c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	73fb      	strb	r3, [r7, #15]
      break;
 80052f2:	e00b      	b.n	800530c <DMA_CheckFifoParam+0xe4>
      break;
 80052f4:	bf00      	nop
 80052f6:	e00a      	b.n	800530e <DMA_CheckFifoParam+0xe6>
      break;
 80052f8:	bf00      	nop
 80052fa:	e008      	b.n	800530e <DMA_CheckFifoParam+0xe6>
      break;
 80052fc:	bf00      	nop
 80052fe:	e006      	b.n	800530e <DMA_CheckFifoParam+0xe6>
      break;
 8005300:	bf00      	nop
 8005302:	e004      	b.n	800530e <DMA_CheckFifoParam+0xe6>
      break;
 8005304:	bf00      	nop
 8005306:	e002      	b.n	800530e <DMA_CheckFifoParam+0xe6>
      break;   
 8005308:	bf00      	nop
 800530a:	e000      	b.n	800530e <DMA_CheckFifoParam+0xe6>
      break;
 800530c:	bf00      	nop
    }
  } 
  
  return status; 
 800530e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005310:	4618      	mov	r0, r3
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800531c:	b480      	push	{r7}
 800531e:	b089      	sub	sp, #36	; 0x24
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005326:	2300      	movs	r3, #0
 8005328:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800532a:	2300      	movs	r3, #0
 800532c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800532e:	2300      	movs	r3, #0
 8005330:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005332:	2300      	movs	r3, #0
 8005334:	61fb      	str	r3, [r7, #28]
 8005336:	e16b      	b.n	8005610 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005338:	2201      	movs	r2, #1
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	fa02 f303 	lsl.w	r3, r2, r3
 8005340:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	4013      	ands	r3, r2
 800534a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	429a      	cmp	r2, r3
 8005352:	f040 815a 	bne.w	800560a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d00b      	beq.n	8005376 <HAL_GPIO_Init+0x5a>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	2b02      	cmp	r3, #2
 8005364:	d007      	beq.n	8005376 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800536a:	2b11      	cmp	r3, #17
 800536c:	d003      	beq.n	8005376 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	2b12      	cmp	r3, #18
 8005374:	d130      	bne.n	80053d8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	2203      	movs	r2, #3
 8005382:	fa02 f303 	lsl.w	r3, r2, r3
 8005386:	43db      	mvns	r3, r3
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	4013      	ands	r3, r2
 800538c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	68da      	ldr	r2, [r3, #12]
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	fa02 f303 	lsl.w	r3, r2, r3
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	4313      	orrs	r3, r2
 800539e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053ac:	2201      	movs	r2, #1
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	fa02 f303 	lsl.w	r3, r2, r3
 80053b4:	43db      	mvns	r3, r3
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	4013      	ands	r3, r2
 80053ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	091b      	lsrs	r3, r3, #4
 80053c2:	f003 0201 	and.w	r2, r3, #1
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	fa02 f303 	lsl.w	r3, r2, r3
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	2203      	movs	r2, #3
 80053e4:	fa02 f303 	lsl.w	r3, r2, r3
 80053e8:	43db      	mvns	r3, r3
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	4013      	ands	r3, r2
 80053ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	fa02 f303 	lsl.w	r3, r2, r3
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	4313      	orrs	r3, r2
 8005400:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	2b02      	cmp	r3, #2
 800540e:	d003      	beq.n	8005418 <HAL_GPIO_Init+0xfc>
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	2b12      	cmp	r3, #18
 8005416:	d123      	bne.n	8005460 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	08da      	lsrs	r2, r3, #3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3208      	adds	r2, #8
 8005420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005424:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	220f      	movs	r2, #15
 8005430:	fa02 f303 	lsl.w	r3, r2, r3
 8005434:	43db      	mvns	r3, r3
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	4013      	ands	r3, r2
 800543a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	691a      	ldr	r2, [r3, #16]
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	f003 0307 	and.w	r3, r3, #7
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	fa02 f303 	lsl.w	r3, r2, r3
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	4313      	orrs	r3, r2
 8005450:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	08da      	lsrs	r2, r3, #3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	3208      	adds	r2, #8
 800545a:	69b9      	ldr	r1, [r7, #24]
 800545c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	005b      	lsls	r3, r3, #1
 800546a:	2203      	movs	r2, #3
 800546c:	fa02 f303 	lsl.w	r3, r2, r3
 8005470:	43db      	mvns	r3, r3
 8005472:	69ba      	ldr	r2, [r7, #24]
 8005474:	4013      	ands	r3, r2
 8005476:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f003 0203 	and.w	r2, r3, #3
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	005b      	lsls	r3, r3, #1
 8005484:	fa02 f303 	lsl.w	r3, r2, r3
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	4313      	orrs	r3, r2
 800548c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800549c:	2b00      	cmp	r3, #0
 800549e:	f000 80b4 	beq.w	800560a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054a2:	2300      	movs	r3, #0
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	4b5f      	ldr	r3, [pc, #380]	; (8005624 <HAL_GPIO_Init+0x308>)
 80054a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054aa:	4a5e      	ldr	r2, [pc, #376]	; (8005624 <HAL_GPIO_Init+0x308>)
 80054ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054b0:	6453      	str	r3, [r2, #68]	; 0x44
 80054b2:	4b5c      	ldr	r3, [pc, #368]	; (8005624 <HAL_GPIO_Init+0x308>)
 80054b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80054be:	4a5a      	ldr	r2, [pc, #360]	; (8005628 <HAL_GPIO_Init+0x30c>)
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	089b      	lsrs	r3, r3, #2
 80054c4:	3302      	adds	r3, #2
 80054c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	220f      	movs	r2, #15
 80054d6:	fa02 f303 	lsl.w	r3, r2, r3
 80054da:	43db      	mvns	r3, r3
 80054dc:	69ba      	ldr	r2, [r7, #24]
 80054de:	4013      	ands	r3, r2
 80054e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a51      	ldr	r2, [pc, #324]	; (800562c <HAL_GPIO_Init+0x310>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d02b      	beq.n	8005542 <HAL_GPIO_Init+0x226>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a50      	ldr	r2, [pc, #320]	; (8005630 <HAL_GPIO_Init+0x314>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d025      	beq.n	800553e <HAL_GPIO_Init+0x222>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a4f      	ldr	r2, [pc, #316]	; (8005634 <HAL_GPIO_Init+0x318>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d01f      	beq.n	800553a <HAL_GPIO_Init+0x21e>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a4e      	ldr	r2, [pc, #312]	; (8005638 <HAL_GPIO_Init+0x31c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d019      	beq.n	8005536 <HAL_GPIO_Init+0x21a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a4d      	ldr	r2, [pc, #308]	; (800563c <HAL_GPIO_Init+0x320>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d013      	beq.n	8005532 <HAL_GPIO_Init+0x216>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a4c      	ldr	r2, [pc, #304]	; (8005640 <HAL_GPIO_Init+0x324>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00d      	beq.n	800552e <HAL_GPIO_Init+0x212>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a4b      	ldr	r2, [pc, #300]	; (8005644 <HAL_GPIO_Init+0x328>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d007      	beq.n	800552a <HAL_GPIO_Init+0x20e>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a4a      	ldr	r2, [pc, #296]	; (8005648 <HAL_GPIO_Init+0x32c>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d101      	bne.n	8005526 <HAL_GPIO_Init+0x20a>
 8005522:	2307      	movs	r3, #7
 8005524:	e00e      	b.n	8005544 <HAL_GPIO_Init+0x228>
 8005526:	2308      	movs	r3, #8
 8005528:	e00c      	b.n	8005544 <HAL_GPIO_Init+0x228>
 800552a:	2306      	movs	r3, #6
 800552c:	e00a      	b.n	8005544 <HAL_GPIO_Init+0x228>
 800552e:	2305      	movs	r3, #5
 8005530:	e008      	b.n	8005544 <HAL_GPIO_Init+0x228>
 8005532:	2304      	movs	r3, #4
 8005534:	e006      	b.n	8005544 <HAL_GPIO_Init+0x228>
 8005536:	2303      	movs	r3, #3
 8005538:	e004      	b.n	8005544 <HAL_GPIO_Init+0x228>
 800553a:	2302      	movs	r3, #2
 800553c:	e002      	b.n	8005544 <HAL_GPIO_Init+0x228>
 800553e:	2301      	movs	r3, #1
 8005540:	e000      	b.n	8005544 <HAL_GPIO_Init+0x228>
 8005542:	2300      	movs	r3, #0
 8005544:	69fa      	ldr	r2, [r7, #28]
 8005546:	f002 0203 	and.w	r2, r2, #3
 800554a:	0092      	lsls	r2, r2, #2
 800554c:	4093      	lsls	r3, r2
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	4313      	orrs	r3, r2
 8005552:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005554:	4934      	ldr	r1, [pc, #208]	; (8005628 <HAL_GPIO_Init+0x30c>)
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	089b      	lsrs	r3, r3, #2
 800555a:	3302      	adds	r3, #2
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005562:	4b3a      	ldr	r3, [pc, #232]	; (800564c <HAL_GPIO_Init+0x330>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	43db      	mvns	r3, r3
 800556c:	69ba      	ldr	r2, [r7, #24]
 800556e:	4013      	ands	r3, r2
 8005570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	4313      	orrs	r3, r2
 8005584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005586:	4a31      	ldr	r2, [pc, #196]	; (800564c <HAL_GPIO_Init+0x330>)
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800558c:	4b2f      	ldr	r3, [pc, #188]	; (800564c <HAL_GPIO_Init+0x330>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	43db      	mvns	r3, r3
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	4013      	ands	r3, r2
 800559a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d003      	beq.n	80055b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80055a8:	69ba      	ldr	r2, [r7, #24]
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80055b0:	4a26      	ldr	r2, [pc, #152]	; (800564c <HAL_GPIO_Init+0x330>)
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80055b6:	4b25      	ldr	r3, [pc, #148]	; (800564c <HAL_GPIO_Init+0x330>)
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	43db      	mvns	r3, r3
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	4013      	ands	r3, r2
 80055c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80055da:	4a1c      	ldr	r2, [pc, #112]	; (800564c <HAL_GPIO_Init+0x330>)
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80055e0:	4b1a      	ldr	r3, [pc, #104]	; (800564c <HAL_GPIO_Init+0x330>)
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	43db      	mvns	r3, r3
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	4013      	ands	r3, r2
 80055ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	4313      	orrs	r3, r2
 8005602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005604:	4a11      	ldr	r2, [pc, #68]	; (800564c <HAL_GPIO_Init+0x330>)
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	3301      	adds	r3, #1
 800560e:	61fb      	str	r3, [r7, #28]
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	2b0f      	cmp	r3, #15
 8005614:	f67f ae90 	bls.w	8005338 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005618:	bf00      	nop
 800561a:	3724      	adds	r7, #36	; 0x24
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr
 8005624:	40023800 	.word	0x40023800
 8005628:	40013800 	.word	0x40013800
 800562c:	40020000 	.word	0x40020000
 8005630:	40020400 	.word	0x40020400
 8005634:	40020800 	.word	0x40020800
 8005638:	40020c00 	.word	0x40020c00
 800563c:	40021000 	.word	0x40021000
 8005640:	40021400 	.word	0x40021400
 8005644:	40021800 	.word	0x40021800
 8005648:	40021c00 	.word	0x40021c00
 800564c:	40013c00 	.word	0x40013c00

08005650 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	460b      	mov	r3, r1
 800565a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	691a      	ldr	r2, [r3, #16]
 8005660:	887b      	ldrh	r3, [r7, #2]
 8005662:	4013      	ands	r3, r2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d002      	beq.n	800566e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005668:	2301      	movs	r3, #1
 800566a:	73fb      	strb	r3, [r7, #15]
 800566c:	e001      	b.n	8005672 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800566e:	2300      	movs	r3, #0
 8005670:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005672:	7bfb      	ldrb	r3, [r7, #15]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	460b      	mov	r3, r1
 800568a:	807b      	strh	r3, [r7, #2]
 800568c:	4613      	mov	r3, r2
 800568e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005690:	787b      	ldrb	r3, [r7, #1]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005696:	887a      	ldrh	r2, [r7, #2]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800569c:	e003      	b.n	80056a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800569e:	887b      	ldrh	r3, [r7, #2]
 80056a0:	041a      	lsls	r2, r3, #16
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	619a      	str	r2, [r3, #24]
}
 80056a6:	bf00      	nop
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
	...

080056b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e11f      	b.n	8005906 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d106      	bne.n	80056e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7fe fe7e 	bl	80043dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2224      	movs	r2, #36	; 0x24
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 0201 	bic.w	r2, r2, #1
 80056f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005706:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005716:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005718:	f000 fda6 	bl	8006268 <HAL_RCC_GetPCLK1Freq>
 800571c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	4a7b      	ldr	r2, [pc, #492]	; (8005910 <HAL_I2C_Init+0x25c>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d807      	bhi.n	8005738 <HAL_I2C_Init+0x84>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4a7a      	ldr	r2, [pc, #488]	; (8005914 <HAL_I2C_Init+0x260>)
 800572c:	4293      	cmp	r3, r2
 800572e:	bf94      	ite	ls
 8005730:	2301      	movls	r3, #1
 8005732:	2300      	movhi	r3, #0
 8005734:	b2db      	uxtb	r3, r3
 8005736:	e006      	b.n	8005746 <HAL_I2C_Init+0x92>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	4a77      	ldr	r2, [pc, #476]	; (8005918 <HAL_I2C_Init+0x264>)
 800573c:	4293      	cmp	r3, r2
 800573e:	bf94      	ite	ls
 8005740:	2301      	movls	r3, #1
 8005742:	2300      	movhi	r3, #0
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e0db      	b.n	8005906 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	4a72      	ldr	r2, [pc, #456]	; (800591c <HAL_I2C_Init+0x268>)
 8005752:	fba2 2303 	umull	r2, r3, r2, r3
 8005756:	0c9b      	lsrs	r3, r3, #18
 8005758:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	430a      	orrs	r2, r1
 800576c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	4a64      	ldr	r2, [pc, #400]	; (8005910 <HAL_I2C_Init+0x25c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d802      	bhi.n	8005788 <HAL_I2C_Init+0xd4>
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	3301      	adds	r3, #1
 8005786:	e009      	b.n	800579c <HAL_I2C_Init+0xe8>
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800578e:	fb02 f303 	mul.w	r3, r2, r3
 8005792:	4a63      	ldr	r2, [pc, #396]	; (8005920 <HAL_I2C_Init+0x26c>)
 8005794:	fba2 2303 	umull	r2, r3, r2, r3
 8005798:	099b      	lsrs	r3, r3, #6
 800579a:	3301      	adds	r3, #1
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	6812      	ldr	r2, [r2, #0]
 80057a0:	430b      	orrs	r3, r1
 80057a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80057ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	4956      	ldr	r1, [pc, #344]	; (8005910 <HAL_I2C_Init+0x25c>)
 80057b8:	428b      	cmp	r3, r1
 80057ba:	d80d      	bhi.n	80057d8 <HAL_I2C_Init+0x124>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	1e59      	subs	r1, r3, #1
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80057ca:	3301      	adds	r3, #1
 80057cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	bf38      	it	cc
 80057d4:	2304      	movcc	r3, #4
 80057d6:	e04f      	b.n	8005878 <HAL_I2C_Init+0x1c4>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d111      	bne.n	8005804 <HAL_I2C_Init+0x150>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	1e58      	subs	r0, r3, #1
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6859      	ldr	r1, [r3, #4]
 80057e8:	460b      	mov	r3, r1
 80057ea:	005b      	lsls	r3, r3, #1
 80057ec:	440b      	add	r3, r1
 80057ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80057f2:	3301      	adds	r3, #1
 80057f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	bf0c      	ite	eq
 80057fc:	2301      	moveq	r3, #1
 80057fe:	2300      	movne	r3, #0
 8005800:	b2db      	uxtb	r3, r3
 8005802:	e012      	b.n	800582a <HAL_I2C_Init+0x176>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	1e58      	subs	r0, r3, #1
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6859      	ldr	r1, [r3, #4]
 800580c:	460b      	mov	r3, r1
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	440b      	add	r3, r1
 8005812:	0099      	lsls	r1, r3, #2
 8005814:	440b      	add	r3, r1
 8005816:	fbb0 f3f3 	udiv	r3, r0, r3
 800581a:	3301      	adds	r3, #1
 800581c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005820:	2b00      	cmp	r3, #0
 8005822:	bf0c      	ite	eq
 8005824:	2301      	moveq	r3, #1
 8005826:	2300      	movne	r3, #0
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <HAL_I2C_Init+0x17e>
 800582e:	2301      	movs	r3, #1
 8005830:	e022      	b.n	8005878 <HAL_I2C_Init+0x1c4>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10e      	bne.n	8005858 <HAL_I2C_Init+0x1a4>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	1e58      	subs	r0, r3, #1
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6859      	ldr	r1, [r3, #4]
 8005842:	460b      	mov	r3, r1
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	440b      	add	r3, r1
 8005848:	fbb0 f3f3 	udiv	r3, r0, r3
 800584c:	3301      	adds	r3, #1
 800584e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005856:	e00f      	b.n	8005878 <HAL_I2C_Init+0x1c4>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	1e58      	subs	r0, r3, #1
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6859      	ldr	r1, [r3, #4]
 8005860:	460b      	mov	r3, r1
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	440b      	add	r3, r1
 8005866:	0099      	lsls	r1, r3, #2
 8005868:	440b      	add	r3, r1
 800586a:	fbb0 f3f3 	udiv	r3, r0, r3
 800586e:	3301      	adds	r3, #1
 8005870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005874:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005878:	6879      	ldr	r1, [r7, #4]
 800587a:	6809      	ldr	r1, [r1, #0]
 800587c:	4313      	orrs	r3, r2
 800587e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	69da      	ldr	r2, [r3, #28]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80058a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	6911      	ldr	r1, [r2, #16]
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	68d2      	ldr	r2, [r2, #12]
 80058b2:	4311      	orrs	r1, r2
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6812      	ldr	r2, [r2, #0]
 80058b8:	430b      	orrs	r3, r1
 80058ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	695a      	ldr	r2, [r3, #20]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	431a      	orrs	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0201 	orr.w	r2, r2, #1
 80058e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2220      	movs	r2, #32
 80058f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	000186a0 	.word	0x000186a0
 8005914:	001e847f 	.word	0x001e847f
 8005918:	003d08ff 	.word	0x003d08ff
 800591c:	431bde83 	.word	0x431bde83
 8005920:	10624dd3 	.word	0x10624dd3

08005924 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e25b      	b.n	8005dee <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d075      	beq.n	8005a2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005942:	4ba3      	ldr	r3, [pc, #652]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f003 030c 	and.w	r3, r3, #12
 800594a:	2b04      	cmp	r3, #4
 800594c:	d00c      	beq.n	8005968 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800594e:	4ba0      	ldr	r3, [pc, #640]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005956:	2b08      	cmp	r3, #8
 8005958:	d112      	bne.n	8005980 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800595a:	4b9d      	ldr	r3, [pc, #628]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005962:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005966:	d10b      	bne.n	8005980 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005968:	4b99      	ldr	r3, [pc, #612]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d05b      	beq.n	8005a2c <HAL_RCC_OscConfig+0x108>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d157      	bne.n	8005a2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e236      	b.n	8005dee <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005988:	d106      	bne.n	8005998 <HAL_RCC_OscConfig+0x74>
 800598a:	4b91      	ldr	r3, [pc, #580]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a90      	ldr	r2, [pc, #576]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 8005990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	e01d      	b.n	80059d4 <HAL_RCC_OscConfig+0xb0>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059a0:	d10c      	bne.n	80059bc <HAL_RCC_OscConfig+0x98>
 80059a2:	4b8b      	ldr	r3, [pc, #556]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a8a      	ldr	r2, [pc, #552]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 80059a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059ac:	6013      	str	r3, [r2, #0]
 80059ae:	4b88      	ldr	r3, [pc, #544]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a87      	ldr	r2, [pc, #540]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 80059b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	e00b      	b.n	80059d4 <HAL_RCC_OscConfig+0xb0>
 80059bc:	4b84      	ldr	r3, [pc, #528]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a83      	ldr	r2, [pc, #524]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 80059c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059c6:	6013      	str	r3, [r2, #0]
 80059c8:	4b81      	ldr	r3, [pc, #516]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a80      	ldr	r2, [pc, #512]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 80059ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d013      	beq.n	8005a04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059dc:	f7fe ff30 	bl	8004840 <HAL_GetTick>
 80059e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059e2:	e008      	b.n	80059f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059e4:	f7fe ff2c 	bl	8004840 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b64      	cmp	r3, #100	; 0x64
 80059f0:	d901      	bls.n	80059f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e1fb      	b.n	8005dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059f6:	4b76      	ldr	r3, [pc, #472]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d0f0      	beq.n	80059e4 <HAL_RCC_OscConfig+0xc0>
 8005a02:	e014      	b.n	8005a2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a04:	f7fe ff1c 	bl	8004840 <HAL_GetTick>
 8005a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a0a:	e008      	b.n	8005a1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a0c:	f7fe ff18 	bl	8004840 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	2b64      	cmp	r3, #100	; 0x64
 8005a18:	d901      	bls.n	8005a1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e1e7      	b.n	8005dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a1e:	4b6c      	ldr	r3, [pc, #432]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1f0      	bne.n	8005a0c <HAL_RCC_OscConfig+0xe8>
 8005a2a:	e000      	b.n	8005a2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d063      	beq.n	8005b02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a3a:	4b65      	ldr	r3, [pc, #404]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f003 030c 	and.w	r3, r3, #12
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00b      	beq.n	8005a5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a46:	4b62      	ldr	r3, [pc, #392]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a4e:	2b08      	cmp	r3, #8
 8005a50:	d11c      	bne.n	8005a8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a52:	4b5f      	ldr	r3, [pc, #380]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d116      	bne.n	8005a8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a5e:	4b5c      	ldr	r3, [pc, #368]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d005      	beq.n	8005a76 <HAL_RCC_OscConfig+0x152>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d001      	beq.n	8005a76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e1bb      	b.n	8005dee <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a76:	4b56      	ldr	r3, [pc, #344]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	00db      	lsls	r3, r3, #3
 8005a84:	4952      	ldr	r1, [pc, #328]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a8a:	e03a      	b.n	8005b02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d020      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a94:	4b4f      	ldr	r3, [pc, #316]	; (8005bd4 <HAL_RCC_OscConfig+0x2b0>)
 8005a96:	2201      	movs	r2, #1
 8005a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a9a:	f7fe fed1 	bl	8004840 <HAL_GetTick>
 8005a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aa0:	e008      	b.n	8005ab4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005aa2:	f7fe fecd 	bl	8004840 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d901      	bls.n	8005ab4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e19c      	b.n	8005dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ab4:	4b46      	ldr	r3, [pc, #280]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d0f0      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ac0:	4b43      	ldr	r3, [pc, #268]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	00db      	lsls	r3, r3, #3
 8005ace:	4940      	ldr	r1, [pc, #256]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	600b      	str	r3, [r1, #0]
 8005ad4:	e015      	b.n	8005b02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ad6:	4b3f      	ldr	r3, [pc, #252]	; (8005bd4 <HAL_RCC_OscConfig+0x2b0>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005adc:	f7fe feb0 	bl	8004840 <HAL_GetTick>
 8005ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ae2:	e008      	b.n	8005af6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ae4:	f7fe feac 	bl	8004840 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e17b      	b.n	8005dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005af6:	4b36      	ldr	r3, [pc, #216]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1f0      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0308 	and.w	r3, r3, #8
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d030      	beq.n	8005b70 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d016      	beq.n	8005b44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b16:	4b30      	ldr	r3, [pc, #192]	; (8005bd8 <HAL_RCC_OscConfig+0x2b4>)
 8005b18:	2201      	movs	r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b1c:	f7fe fe90 	bl	8004840 <HAL_GetTick>
 8005b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b22:	e008      	b.n	8005b36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b24:	f7fe fe8c 	bl	8004840 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d901      	bls.n	8005b36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e15b      	b.n	8005dee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b36:	4b26      	ldr	r3, [pc, #152]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 8005b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d0f0      	beq.n	8005b24 <HAL_RCC_OscConfig+0x200>
 8005b42:	e015      	b.n	8005b70 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b44:	4b24      	ldr	r3, [pc, #144]	; (8005bd8 <HAL_RCC_OscConfig+0x2b4>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b4a:	f7fe fe79 	bl	8004840 <HAL_GetTick>
 8005b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b50:	e008      	b.n	8005b64 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b52:	f7fe fe75 	bl	8004840 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d901      	bls.n	8005b64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e144      	b.n	8005dee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b64:	4b1a      	ldr	r3, [pc, #104]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 8005b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b68:	f003 0302 	and.w	r3, r3, #2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1f0      	bne.n	8005b52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0304 	and.w	r3, r3, #4
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 80a0 	beq.w	8005cbe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b82:	4b13      	ldr	r3, [pc, #76]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 8005b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10f      	bne.n	8005bae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60bb      	str	r3, [r7, #8]
 8005b92:	4b0f      	ldr	r3, [pc, #60]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	4a0e      	ldr	r2, [pc, #56]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 8005b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8005b9e:	4b0c      	ldr	r3, [pc, #48]	; (8005bd0 <HAL_RCC_OscConfig+0x2ac>)
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ba6:	60bb      	str	r3, [r7, #8]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005baa:	2301      	movs	r3, #1
 8005bac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bae:	4b0b      	ldr	r3, [pc, #44]	; (8005bdc <HAL_RCC_OscConfig+0x2b8>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d121      	bne.n	8005bfe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bba:	4b08      	ldr	r3, [pc, #32]	; (8005bdc <HAL_RCC_OscConfig+0x2b8>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a07      	ldr	r2, [pc, #28]	; (8005bdc <HAL_RCC_OscConfig+0x2b8>)
 8005bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bc6:	f7fe fe3b 	bl	8004840 <HAL_GetTick>
 8005bca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bcc:	e011      	b.n	8005bf2 <HAL_RCC_OscConfig+0x2ce>
 8005bce:	bf00      	nop
 8005bd0:	40023800 	.word	0x40023800
 8005bd4:	42470000 	.word	0x42470000
 8005bd8:	42470e80 	.word	0x42470e80
 8005bdc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005be0:	f7fe fe2e 	bl	8004840 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e0fd      	b.n	8005dee <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bf2:	4b81      	ldr	r3, [pc, #516]	; (8005df8 <HAL_RCC_OscConfig+0x4d4>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d0f0      	beq.n	8005be0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d106      	bne.n	8005c14 <HAL_RCC_OscConfig+0x2f0>
 8005c06:	4b7d      	ldr	r3, [pc, #500]	; (8005dfc <HAL_RCC_OscConfig+0x4d8>)
 8005c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0a:	4a7c      	ldr	r2, [pc, #496]	; (8005dfc <HAL_RCC_OscConfig+0x4d8>)
 8005c0c:	f043 0301 	orr.w	r3, r3, #1
 8005c10:	6713      	str	r3, [r2, #112]	; 0x70
 8005c12:	e01c      	b.n	8005c4e <HAL_RCC_OscConfig+0x32a>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	2b05      	cmp	r3, #5
 8005c1a:	d10c      	bne.n	8005c36 <HAL_RCC_OscConfig+0x312>
 8005c1c:	4b77      	ldr	r3, [pc, #476]	; (8005dfc <HAL_RCC_OscConfig+0x4d8>)
 8005c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c20:	4a76      	ldr	r2, [pc, #472]	; (8005dfc <HAL_RCC_OscConfig+0x4d8>)
 8005c22:	f043 0304 	orr.w	r3, r3, #4
 8005c26:	6713      	str	r3, [r2, #112]	; 0x70
 8005c28:	4b74      	ldr	r3, [pc, #464]	; (8005dfc <HAL_RCC_OscConfig+0x4d8>)
 8005c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c2c:	4a73      	ldr	r2, [pc, #460]	; (8005dfc <HAL_RCC_OscConfig+0x4d8>)
 8005c2e:	f043 0301 	orr.w	r3, r3, #1
 8005c32:	6713      	str	r3, [r2, #112]	; 0x70
 8005c34:	e00b      	b.n	8005c4e <HAL_RCC_OscConfig+0x32a>
 8005c36:	4b71      	ldr	r3, [pc, #452]	; (8005dfc <HAL_RCC_OscConfig+0x4d8>)
 8005c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c3a:	4a70      	ldr	r2, [pc, #448]	; (8005dfc <HAL_RCC_OscConfig+0x4d8>)
 8005c3c:	f023 0301 	bic.w	r3, r3, #1
 8005c40:	6713      	str	r3, [r2, #112]	; 0x70
 8005c42:	4b6e      	ldr	r3, [pc, #440]	; (8005dfc <HAL_RCC_OscConfig+0x4d8>)
 8005c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c46:	4a6d      	ldr	r2, [pc, #436]	; (8005dfc <HAL_RCC_OscConfig+0x4d8>)
 8005c48:	f023 0304 	bic.w	r3, r3, #4
 8005c4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d015      	beq.n	8005c82 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c56:	f7fe fdf3 	bl	8004840 <HAL_GetTick>
 8005c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c5c:	e00a      	b.n	8005c74 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c5e:	f7fe fdef 	bl	8004840 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d901      	bls.n	8005c74 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e0bc      	b.n	8005dee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c74:	4b61      	ldr	r3, [pc, #388]	; (8005dfc <HAL_RCC_OscConfig+0x4d8>)
 8005c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d0ee      	beq.n	8005c5e <HAL_RCC_OscConfig+0x33a>
 8005c80:	e014      	b.n	8005cac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c82:	f7fe fddd 	bl	8004840 <HAL_GetTick>
 8005c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c88:	e00a      	b.n	8005ca0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c8a:	f7fe fdd9 	bl	8004840 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e0a6      	b.n	8005dee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ca0:	4b56      	ldr	r3, [pc, #344]	; (8005dfc <HAL_RCC_OscConfig+0x4d8>)
 8005ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1ee      	bne.n	8005c8a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cac:	7dfb      	ldrb	r3, [r7, #23]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d105      	bne.n	8005cbe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cb2:	4b52      	ldr	r3, [pc, #328]	; (8005dfc <HAL_RCC_OscConfig+0x4d8>)
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	4a51      	ldr	r2, [pc, #324]	; (8005dfc <HAL_RCC_OscConfig+0x4d8>)
 8005cb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 8092 	beq.w	8005dec <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cc8:	4b4c      	ldr	r3, [pc, #304]	; (8005dfc <HAL_RCC_OscConfig+0x4d8>)
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f003 030c 	and.w	r3, r3, #12
 8005cd0:	2b08      	cmp	r3, #8
 8005cd2:	d05c      	beq.n	8005d8e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d141      	bne.n	8005d60 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cdc:	4b48      	ldr	r3, [pc, #288]	; (8005e00 <HAL_RCC_OscConfig+0x4dc>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ce2:	f7fe fdad 	bl	8004840 <HAL_GetTick>
 8005ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ce8:	e008      	b.n	8005cfc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cea:	f7fe fda9 	bl	8004840 <HAL_GetTick>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d901      	bls.n	8005cfc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e078      	b.n	8005dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cfc:	4b3f      	ldr	r3, [pc, #252]	; (8005dfc <HAL_RCC_OscConfig+0x4d8>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1f0      	bne.n	8005cea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	69da      	ldr	r2, [r3, #28]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a1b      	ldr	r3, [r3, #32]
 8005d10:	431a      	orrs	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	019b      	lsls	r3, r3, #6
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1e:	085b      	lsrs	r3, r3, #1
 8005d20:	3b01      	subs	r3, #1
 8005d22:	041b      	lsls	r3, r3, #16
 8005d24:	431a      	orrs	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2a:	061b      	lsls	r3, r3, #24
 8005d2c:	4933      	ldr	r1, [pc, #204]	; (8005dfc <HAL_RCC_OscConfig+0x4d8>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d32:	4b33      	ldr	r3, [pc, #204]	; (8005e00 <HAL_RCC_OscConfig+0x4dc>)
 8005d34:	2201      	movs	r2, #1
 8005d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d38:	f7fe fd82 	bl	8004840 <HAL_GetTick>
 8005d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d3e:	e008      	b.n	8005d52 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d40:	f7fe fd7e 	bl	8004840 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d901      	bls.n	8005d52 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e04d      	b.n	8005dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d52:	4b2a      	ldr	r3, [pc, #168]	; (8005dfc <HAL_RCC_OscConfig+0x4d8>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d0f0      	beq.n	8005d40 <HAL_RCC_OscConfig+0x41c>
 8005d5e:	e045      	b.n	8005dec <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d60:	4b27      	ldr	r3, [pc, #156]	; (8005e00 <HAL_RCC_OscConfig+0x4dc>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d66:	f7fe fd6b 	bl	8004840 <HAL_GetTick>
 8005d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d6c:	e008      	b.n	8005d80 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d6e:	f7fe fd67 	bl	8004840 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d901      	bls.n	8005d80 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e036      	b.n	8005dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d80:	4b1e      	ldr	r3, [pc, #120]	; (8005dfc <HAL_RCC_OscConfig+0x4d8>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1f0      	bne.n	8005d6e <HAL_RCC_OscConfig+0x44a>
 8005d8c:	e02e      	b.n	8005dec <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d101      	bne.n	8005d9a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e029      	b.n	8005dee <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005d9a:	4b18      	ldr	r3, [pc, #96]	; (8005dfc <HAL_RCC_OscConfig+0x4d8>)
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	69db      	ldr	r3, [r3, #28]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d11c      	bne.n	8005de8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d115      	bne.n	8005de8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d10d      	bne.n	8005de8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d106      	bne.n	8005de8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d001      	beq.n	8005dec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e000      	b.n	8005dee <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	40007000 	.word	0x40007000
 8005dfc:	40023800 	.word	0x40023800
 8005e00:	42470060 	.word	0x42470060

08005e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e0cc      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e18:	4b68      	ldr	r3, [pc, #416]	; (8005fbc <HAL_RCC_ClockConfig+0x1b8>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 030f 	and.w	r3, r3, #15
 8005e20:	683a      	ldr	r2, [r7, #0]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d90c      	bls.n	8005e40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e26:	4b65      	ldr	r3, [pc, #404]	; (8005fbc <HAL_RCC_ClockConfig+0x1b8>)
 8005e28:	683a      	ldr	r2, [r7, #0]
 8005e2a:	b2d2      	uxtb	r2, r2
 8005e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e2e:	4b63      	ldr	r3, [pc, #396]	; (8005fbc <HAL_RCC_ClockConfig+0x1b8>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 030f 	and.w	r3, r3, #15
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d001      	beq.n	8005e40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e0b8      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0302 	and.w	r3, r3, #2
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d020      	beq.n	8005e8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d005      	beq.n	8005e64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e58:	4b59      	ldr	r3, [pc, #356]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	4a58      	ldr	r2, [pc, #352]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0308 	and.w	r3, r3, #8
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d005      	beq.n	8005e7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e70:	4b53      	ldr	r3, [pc, #332]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	4a52      	ldr	r2, [pc, #328]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e7c:	4b50      	ldr	r3, [pc, #320]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	494d      	ldr	r1, [pc, #308]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d044      	beq.n	8005f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d107      	bne.n	8005eb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ea2:	4b47      	ldr	r3, [pc, #284]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d119      	bne.n	8005ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e07f      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d003      	beq.n	8005ec2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	d107      	bne.n	8005ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ec2:	4b3f      	ldr	r3, [pc, #252]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d109      	bne.n	8005ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e06f      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ed2:	4b3b      	ldr	r3, [pc, #236]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e067      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ee2:	4b37      	ldr	r3, [pc, #220]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f023 0203 	bic.w	r2, r3, #3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	4934      	ldr	r1, [pc, #208]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ef4:	f7fe fca4 	bl	8004840 <HAL_GetTick>
 8005ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005efa:	e00a      	b.n	8005f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005efc:	f7fe fca0 	bl	8004840 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d901      	bls.n	8005f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e04f      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f12:	4b2b      	ldr	r3, [pc, #172]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f003 020c 	and.w	r2, r3, #12
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d1eb      	bne.n	8005efc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f24:	4b25      	ldr	r3, [pc, #148]	; (8005fbc <HAL_RCC_ClockConfig+0x1b8>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 030f 	and.w	r3, r3, #15
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d20c      	bcs.n	8005f4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f32:	4b22      	ldr	r3, [pc, #136]	; (8005fbc <HAL_RCC_ClockConfig+0x1b8>)
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	b2d2      	uxtb	r2, r2
 8005f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f3a:	4b20      	ldr	r3, [pc, #128]	; (8005fbc <HAL_RCC_ClockConfig+0x1b8>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 030f 	and.w	r3, r3, #15
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d001      	beq.n	8005f4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e032      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0304 	and.w	r3, r3, #4
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d008      	beq.n	8005f6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f58:	4b19      	ldr	r3, [pc, #100]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	4916      	ldr	r1, [pc, #88]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0308 	and.w	r3, r3, #8
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d009      	beq.n	8005f8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f76:	4b12      	ldr	r3, [pc, #72]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	490e      	ldr	r1, [pc, #56]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f8a:	f000 f889 	bl	80060a0 <HAL_RCC_GetSysClockFreq>
 8005f8e:	4601      	mov	r1, r0
 8005f90:	4b0b      	ldr	r3, [pc, #44]	; (8005fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	091b      	lsrs	r3, r3, #4
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	4a0a      	ldr	r2, [pc, #40]	; (8005fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005f9c:	5cd3      	ldrb	r3, [r2, r3]
 8005f9e:	fa21 f303 	lsr.w	r3, r1, r3
 8005fa2:	4a09      	ldr	r2, [pc, #36]	; (8005fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005fa6:	4b09      	ldr	r3, [pc, #36]	; (8005fcc <HAL_RCC_ClockConfig+0x1c8>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fe fc04 	bl	80047b8 <HAL_InitTick>

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	40023c00 	.word	0x40023c00
 8005fc0:	40023800 	.word	0x40023800
 8005fc4:	08009ae8 	.word	0x08009ae8
 8005fc8:	20000008 	.word	0x20000008
 8005fcc:	2000000c 	.word	0x2000000c

08005fd0 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b08c      	sub	sp, #48	; 0x30
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d129      	bne.n	8006036 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	61bb      	str	r3, [r7, #24]
 8005fe6:	4b2b      	ldr	r3, [pc, #172]	; (8006094 <HAL_RCC_MCOConfig+0xc4>)
 8005fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fea:	4a2a      	ldr	r2, [pc, #168]	; (8006094 <HAL_RCC_MCOConfig+0xc4>)
 8005fec:	f043 0301 	orr.w	r3, r3, #1
 8005ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ff2:	4b28      	ldr	r3, [pc, #160]	; (8006094 <HAL_RCC_MCOConfig+0xc4>)
 8005ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	61bb      	str	r3, [r7, #24]
 8005ffc:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005ffe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006004:	2302      	movs	r3, #2
 8006006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006008:	2303      	movs	r3, #3
 800600a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800600c:	2300      	movs	r3, #0
 800600e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006010:	2300      	movs	r3, #0
 8006012:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006014:	f107 031c 	add.w	r3, r7, #28
 8006018:	4619      	mov	r1, r3
 800601a:	481f      	ldr	r0, [pc, #124]	; (8006098 <HAL_RCC_MCOConfig+0xc8>)
 800601c:	f7ff f97e 	bl	800531c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8006020:	4b1c      	ldr	r3, [pc, #112]	; (8006094 <HAL_RCC_MCOConfig+0xc4>)
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8006028:	68b9      	ldr	r1, [r7, #8]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	430b      	orrs	r3, r1
 800602e:	4919      	ldr	r1, [pc, #100]	; (8006094 <HAL_RCC_MCOConfig+0xc4>)
 8006030:	4313      	orrs	r3, r2
 8006032:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8006034:	e029      	b.n	800608a <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8006036:	2300      	movs	r3, #0
 8006038:	617b      	str	r3, [r7, #20]
 800603a:	4b16      	ldr	r3, [pc, #88]	; (8006094 <HAL_RCC_MCOConfig+0xc4>)
 800603c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603e:	4a15      	ldr	r2, [pc, #84]	; (8006094 <HAL_RCC_MCOConfig+0xc4>)
 8006040:	f043 0304 	orr.w	r3, r3, #4
 8006044:	6313      	str	r3, [r2, #48]	; 0x30
 8006046:	4b13      	ldr	r3, [pc, #76]	; (8006094 <HAL_RCC_MCOConfig+0xc4>)
 8006048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604a:	f003 0304 	and.w	r3, r3, #4
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8006052:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006058:	2302      	movs	r3, #2
 800605a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800605c:	2303      	movs	r3, #3
 800605e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006060:	2300      	movs	r3, #0
 8006062:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006064:	2300      	movs	r3, #0
 8006066:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8006068:	f107 031c 	add.w	r3, r7, #28
 800606c:	4619      	mov	r1, r3
 800606e:	480b      	ldr	r0, [pc, #44]	; (800609c <HAL_RCC_MCOConfig+0xcc>)
 8006070:	f7ff f954 	bl	800531c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8006074:	4b07      	ldr	r3, [pc, #28]	; (8006094 <HAL_RCC_MCOConfig+0xc4>)
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	00d9      	lsls	r1, r3, #3
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	430b      	orrs	r3, r1
 8006084:	4903      	ldr	r1, [pc, #12]	; (8006094 <HAL_RCC_MCOConfig+0xc4>)
 8006086:	4313      	orrs	r3, r2
 8006088:	608b      	str	r3, [r1, #8]
}
 800608a:	bf00      	nop
 800608c:	3730      	adds	r7, #48	; 0x30
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	40023800 	.word	0x40023800
 8006098:	40020000 	.word	0x40020000
 800609c:	40020800 	.word	0x40020800

080060a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	607b      	str	r3, [r7, #4]
 80060aa:	2300      	movs	r3, #0
 80060ac:	60fb      	str	r3, [r7, #12]
 80060ae:	2300      	movs	r3, #0
 80060b0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80060b2:	2300      	movs	r3, #0
 80060b4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060b6:	4b63      	ldr	r3, [pc, #396]	; (8006244 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f003 030c 	and.w	r3, r3, #12
 80060be:	2b04      	cmp	r3, #4
 80060c0:	d007      	beq.n	80060d2 <HAL_RCC_GetSysClockFreq+0x32>
 80060c2:	2b08      	cmp	r3, #8
 80060c4:	d008      	beq.n	80060d8 <HAL_RCC_GetSysClockFreq+0x38>
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f040 80b4 	bne.w	8006234 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060cc:	4b5e      	ldr	r3, [pc, #376]	; (8006248 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80060ce:	60bb      	str	r3, [r7, #8]
       break;
 80060d0:	e0b3      	b.n	800623a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060d2:	4b5e      	ldr	r3, [pc, #376]	; (800624c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80060d4:	60bb      	str	r3, [r7, #8]
      break;
 80060d6:	e0b0      	b.n	800623a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060d8:	4b5a      	ldr	r3, [pc, #360]	; (8006244 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060e2:	4b58      	ldr	r3, [pc, #352]	; (8006244 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d04a      	beq.n	8006184 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060ee:	4b55      	ldr	r3, [pc, #340]	; (8006244 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	099b      	lsrs	r3, r3, #6
 80060f4:	f04f 0400 	mov.w	r4, #0
 80060f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80060fc:	f04f 0200 	mov.w	r2, #0
 8006100:	ea03 0501 	and.w	r5, r3, r1
 8006104:	ea04 0602 	and.w	r6, r4, r2
 8006108:	4629      	mov	r1, r5
 800610a:	4632      	mov	r2, r6
 800610c:	f04f 0300 	mov.w	r3, #0
 8006110:	f04f 0400 	mov.w	r4, #0
 8006114:	0154      	lsls	r4, r2, #5
 8006116:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800611a:	014b      	lsls	r3, r1, #5
 800611c:	4619      	mov	r1, r3
 800611e:	4622      	mov	r2, r4
 8006120:	1b49      	subs	r1, r1, r5
 8006122:	eb62 0206 	sbc.w	r2, r2, r6
 8006126:	f04f 0300 	mov.w	r3, #0
 800612a:	f04f 0400 	mov.w	r4, #0
 800612e:	0194      	lsls	r4, r2, #6
 8006130:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006134:	018b      	lsls	r3, r1, #6
 8006136:	1a5b      	subs	r3, r3, r1
 8006138:	eb64 0402 	sbc.w	r4, r4, r2
 800613c:	f04f 0100 	mov.w	r1, #0
 8006140:	f04f 0200 	mov.w	r2, #0
 8006144:	00e2      	lsls	r2, r4, #3
 8006146:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800614a:	00d9      	lsls	r1, r3, #3
 800614c:	460b      	mov	r3, r1
 800614e:	4614      	mov	r4, r2
 8006150:	195b      	adds	r3, r3, r5
 8006152:	eb44 0406 	adc.w	r4, r4, r6
 8006156:	f04f 0100 	mov.w	r1, #0
 800615a:	f04f 0200 	mov.w	r2, #0
 800615e:	0262      	lsls	r2, r4, #9
 8006160:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006164:	0259      	lsls	r1, r3, #9
 8006166:	460b      	mov	r3, r1
 8006168:	4614      	mov	r4, r2
 800616a:	4618      	mov	r0, r3
 800616c:	4621      	mov	r1, r4
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f04f 0400 	mov.w	r4, #0
 8006174:	461a      	mov	r2, r3
 8006176:	4623      	mov	r3, r4
 8006178:	f7fa fce2 	bl	8000b40 <__aeabi_uldivmod>
 800617c:	4603      	mov	r3, r0
 800617e:	460c      	mov	r4, r1
 8006180:	60fb      	str	r3, [r7, #12]
 8006182:	e049      	b.n	8006218 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006184:	4b2f      	ldr	r3, [pc, #188]	; (8006244 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	099b      	lsrs	r3, r3, #6
 800618a:	f04f 0400 	mov.w	r4, #0
 800618e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006192:	f04f 0200 	mov.w	r2, #0
 8006196:	ea03 0501 	and.w	r5, r3, r1
 800619a:	ea04 0602 	and.w	r6, r4, r2
 800619e:	4629      	mov	r1, r5
 80061a0:	4632      	mov	r2, r6
 80061a2:	f04f 0300 	mov.w	r3, #0
 80061a6:	f04f 0400 	mov.w	r4, #0
 80061aa:	0154      	lsls	r4, r2, #5
 80061ac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80061b0:	014b      	lsls	r3, r1, #5
 80061b2:	4619      	mov	r1, r3
 80061b4:	4622      	mov	r2, r4
 80061b6:	1b49      	subs	r1, r1, r5
 80061b8:	eb62 0206 	sbc.w	r2, r2, r6
 80061bc:	f04f 0300 	mov.w	r3, #0
 80061c0:	f04f 0400 	mov.w	r4, #0
 80061c4:	0194      	lsls	r4, r2, #6
 80061c6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80061ca:	018b      	lsls	r3, r1, #6
 80061cc:	1a5b      	subs	r3, r3, r1
 80061ce:	eb64 0402 	sbc.w	r4, r4, r2
 80061d2:	f04f 0100 	mov.w	r1, #0
 80061d6:	f04f 0200 	mov.w	r2, #0
 80061da:	00e2      	lsls	r2, r4, #3
 80061dc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80061e0:	00d9      	lsls	r1, r3, #3
 80061e2:	460b      	mov	r3, r1
 80061e4:	4614      	mov	r4, r2
 80061e6:	195b      	adds	r3, r3, r5
 80061e8:	eb44 0406 	adc.w	r4, r4, r6
 80061ec:	f04f 0100 	mov.w	r1, #0
 80061f0:	f04f 0200 	mov.w	r2, #0
 80061f4:	02a2      	lsls	r2, r4, #10
 80061f6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80061fa:	0299      	lsls	r1, r3, #10
 80061fc:	460b      	mov	r3, r1
 80061fe:	4614      	mov	r4, r2
 8006200:	4618      	mov	r0, r3
 8006202:	4621      	mov	r1, r4
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f04f 0400 	mov.w	r4, #0
 800620a:	461a      	mov	r2, r3
 800620c:	4623      	mov	r3, r4
 800620e:	f7fa fc97 	bl	8000b40 <__aeabi_uldivmod>
 8006212:	4603      	mov	r3, r0
 8006214:	460c      	mov	r4, r1
 8006216:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006218:	4b0a      	ldr	r3, [pc, #40]	; (8006244 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	0c1b      	lsrs	r3, r3, #16
 800621e:	f003 0303 	and.w	r3, r3, #3
 8006222:	3301      	adds	r3, #1
 8006224:	005b      	lsls	r3, r3, #1
 8006226:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006230:	60bb      	str	r3, [r7, #8]
      break;
 8006232:	e002      	b.n	800623a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006234:	4b04      	ldr	r3, [pc, #16]	; (8006248 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006236:	60bb      	str	r3, [r7, #8]
      break;
 8006238:	bf00      	nop
    }
  }
  return sysclockfreq;
 800623a:	68bb      	ldr	r3, [r7, #8]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3714      	adds	r7, #20
 8006240:	46bd      	mov	sp, r7
 8006242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006244:	40023800 	.word	0x40023800
 8006248:	00f42400 	.word	0x00f42400
 800624c:	007a1200 	.word	0x007a1200

08006250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006250:	b480      	push	{r7}
 8006252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006254:	4b03      	ldr	r3, [pc, #12]	; (8006264 <HAL_RCC_GetHCLKFreq+0x14>)
 8006256:	681b      	ldr	r3, [r3, #0]
}
 8006258:	4618      	mov	r0, r3
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	20000008 	.word	0x20000008

08006268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800626c:	f7ff fff0 	bl	8006250 <HAL_RCC_GetHCLKFreq>
 8006270:	4601      	mov	r1, r0
 8006272:	4b05      	ldr	r3, [pc, #20]	; (8006288 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	0a9b      	lsrs	r3, r3, #10
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	4a03      	ldr	r2, [pc, #12]	; (800628c <HAL_RCC_GetPCLK1Freq+0x24>)
 800627e:	5cd3      	ldrb	r3, [r2, r3]
 8006280:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006284:	4618      	mov	r0, r3
 8006286:	bd80      	pop	{r7, pc}
 8006288:	40023800 	.word	0x40023800
 800628c:	08009af8 	.word	0x08009af8

08006290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006294:	f7ff ffdc 	bl	8006250 <HAL_RCC_GetHCLKFreq>
 8006298:	4601      	mov	r1, r0
 800629a:	4b05      	ldr	r3, [pc, #20]	; (80062b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	0b5b      	lsrs	r3, r3, #13
 80062a0:	f003 0307 	and.w	r3, r3, #7
 80062a4:	4a03      	ldr	r2, [pc, #12]	; (80062b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062a6:	5cd3      	ldrb	r3, [r2, r3]
 80062a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	40023800 	.word	0x40023800
 80062b4:	08009af8 	.word	0x08009af8

080062b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e056      	b.n	8006378 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d106      	bne.n	80062ea <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f7fe f8c1 	bl	800446c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2202      	movs	r2, #2
 80062ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006300:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	431a      	orrs	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	431a      	orrs	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	431a      	orrs	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	431a      	orrs	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006326:	431a      	orrs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	431a      	orrs	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	ea42 0103 	orr.w	r1, r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	430a      	orrs	r2, r1
 8006340:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	0c1b      	lsrs	r3, r3, #16
 8006348:	f003 0104 	and.w	r1, r3, #4
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	430a      	orrs	r2, r1
 8006356:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	69da      	ldr	r2, [r3, #28]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006366:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3708      	adds	r7, #8
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b088      	sub	sp, #32
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	603b      	str	r3, [r7, #0]
 800638c:	4613      	mov	r3, r2
 800638e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006390:	2300      	movs	r3, #0
 8006392:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800639a:	2b01      	cmp	r3, #1
 800639c:	d101      	bne.n	80063a2 <HAL_SPI_Transmit+0x22>
 800639e:	2302      	movs	r3, #2
 80063a0:	e11e      	b.n	80065e0 <HAL_SPI_Transmit+0x260>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063aa:	f7fe fa49 	bl	8004840 <HAL_GetTick>
 80063ae:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80063b0:	88fb      	ldrh	r3, [r7, #6]
 80063b2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d002      	beq.n	80063c6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80063c0:	2302      	movs	r3, #2
 80063c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063c4:	e103      	b.n	80065ce <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d002      	beq.n	80063d2 <HAL_SPI_Transmit+0x52>
 80063cc:	88fb      	ldrh	r3, [r7, #6]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d102      	bne.n	80063d8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063d6:	e0fa      	b.n	80065ce <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2203      	movs	r2, #3
 80063dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	88fa      	ldrh	r2, [r7, #6]
 80063f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	88fa      	ldrh	r2, [r7, #6]
 80063f6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800641e:	d107      	bne.n	8006430 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800642e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643a:	2b40      	cmp	r3, #64	; 0x40
 800643c:	d007      	beq.n	800644e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800644c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006456:	d14b      	bne.n	80064f0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d002      	beq.n	8006466 <HAL_SPI_Transmit+0xe6>
 8006460:	8afb      	ldrh	r3, [r7, #22]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d13e      	bne.n	80064e4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646a:	881a      	ldrh	r2, [r3, #0]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006476:	1c9a      	adds	r2, r3, #2
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006480:	b29b      	uxth	r3, r3
 8006482:	3b01      	subs	r3, #1
 8006484:	b29a      	uxth	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800648a:	e02b      	b.n	80064e4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f003 0302 	and.w	r3, r3, #2
 8006496:	2b02      	cmp	r3, #2
 8006498:	d112      	bne.n	80064c0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649e:	881a      	ldrh	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064aa:	1c9a      	adds	r2, r3, #2
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	3b01      	subs	r3, #1
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	86da      	strh	r2, [r3, #54]	; 0x36
 80064be:	e011      	b.n	80064e4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064c0:	f7fe f9be 	bl	8004840 <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d803      	bhi.n	80064d8 <HAL_SPI_Transmit+0x158>
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d6:	d102      	bne.n	80064de <HAL_SPI_Transmit+0x15e>
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d102      	bne.n	80064e4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80064e2:	e074      	b.n	80065ce <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1ce      	bne.n	800648c <HAL_SPI_Transmit+0x10c>
 80064ee:	e04c      	b.n	800658a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d002      	beq.n	80064fe <HAL_SPI_Transmit+0x17e>
 80064f8:	8afb      	ldrh	r3, [r7, #22]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d140      	bne.n	8006580 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	330c      	adds	r3, #12
 8006508:	7812      	ldrb	r2, [r2, #0]
 800650a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006510:	1c5a      	adds	r2, r3, #1
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800651a:	b29b      	uxth	r3, r3
 800651c:	3b01      	subs	r3, #1
 800651e:	b29a      	uxth	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006524:	e02c      	b.n	8006580 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f003 0302 	and.w	r3, r3, #2
 8006530:	2b02      	cmp	r3, #2
 8006532:	d113      	bne.n	800655c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	330c      	adds	r3, #12
 800653e:	7812      	ldrb	r2, [r2, #0]
 8006540:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006546:	1c5a      	adds	r2, r3, #1
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006550:	b29b      	uxth	r3, r3
 8006552:	3b01      	subs	r3, #1
 8006554:	b29a      	uxth	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	86da      	strh	r2, [r3, #54]	; 0x36
 800655a:	e011      	b.n	8006580 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800655c:	f7fe f970 	bl	8004840 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	429a      	cmp	r2, r3
 800656a:	d803      	bhi.n	8006574 <HAL_SPI_Transmit+0x1f4>
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006572:	d102      	bne.n	800657a <HAL_SPI_Transmit+0x1fa>
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d102      	bne.n	8006580 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800657e:	e026      	b.n	80065ce <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006584:	b29b      	uxth	r3, r3
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1cd      	bne.n	8006526 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800658a:	69ba      	ldr	r2, [r7, #24]
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f000 fa44 	bl	8006a1c <SPI_EndRxTxTransaction>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d002      	beq.n	80065a0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2220      	movs	r2, #32
 800659e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10a      	bne.n	80065be <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065a8:	2300      	movs	r3, #0
 80065aa:	613b      	str	r3, [r7, #16]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	613b      	str	r3, [r7, #16]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	613b      	str	r3, [r7, #16]
 80065bc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d002      	beq.n	80065cc <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	77fb      	strb	r3, [r7, #31]
 80065ca:	e000      	b.n	80065ce <HAL_SPI_Transmit+0x24e>
  }

error:
 80065cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065de:	7ffb      	ldrb	r3, [r7, #31]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3720      	adds	r7, #32
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b08c      	sub	sp, #48	; 0x30
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
 80065f4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80065f6:	2301      	movs	r3, #1
 80065f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80065fa:	2300      	movs	r3, #0
 80065fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006606:	2b01      	cmp	r3, #1
 8006608:	d101      	bne.n	800660e <HAL_SPI_TransmitReceive+0x26>
 800660a:	2302      	movs	r3, #2
 800660c:	e18a      	b.n	8006924 <HAL_SPI_TransmitReceive+0x33c>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006616:	f7fe f913 	bl	8004840 <HAL_GetTick>
 800661a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800662c:	887b      	ldrh	r3, [r7, #2]
 800662e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006630:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006634:	2b01      	cmp	r3, #1
 8006636:	d00f      	beq.n	8006658 <HAL_SPI_TransmitReceive+0x70>
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800663e:	d107      	bne.n	8006650 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d103      	bne.n	8006650 <HAL_SPI_TransmitReceive+0x68>
 8006648:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800664c:	2b04      	cmp	r3, #4
 800664e:	d003      	beq.n	8006658 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006650:	2302      	movs	r3, #2
 8006652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006656:	e15b      	b.n	8006910 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d005      	beq.n	800666a <HAL_SPI_TransmitReceive+0x82>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d002      	beq.n	800666a <HAL_SPI_TransmitReceive+0x82>
 8006664:	887b      	ldrh	r3, [r7, #2]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d103      	bne.n	8006672 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006670:	e14e      	b.n	8006910 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b04      	cmp	r3, #4
 800667c:	d003      	beq.n	8006686 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2205      	movs	r2, #5
 8006682:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	887a      	ldrh	r2, [r7, #2]
 8006696:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	887a      	ldrh	r2, [r7, #2]
 800669c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	887a      	ldrh	r2, [r7, #2]
 80066a8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	887a      	ldrh	r2, [r7, #2]
 80066ae:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c6:	2b40      	cmp	r3, #64	; 0x40
 80066c8:	d007      	beq.n	80066da <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066e2:	d178      	bne.n	80067d6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d002      	beq.n	80066f2 <HAL_SPI_TransmitReceive+0x10a>
 80066ec:	8b7b      	ldrh	r3, [r7, #26]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d166      	bne.n	80067c0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f6:	881a      	ldrh	r2, [r3, #0]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006702:	1c9a      	adds	r2, r3, #2
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800670c:	b29b      	uxth	r3, r3
 800670e:	3b01      	subs	r3, #1
 8006710:	b29a      	uxth	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006716:	e053      	b.n	80067c0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b02      	cmp	r3, #2
 8006724:	d11b      	bne.n	800675e <HAL_SPI_TransmitReceive+0x176>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800672a:	b29b      	uxth	r3, r3
 800672c:	2b00      	cmp	r3, #0
 800672e:	d016      	beq.n	800675e <HAL_SPI_TransmitReceive+0x176>
 8006730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006732:	2b01      	cmp	r3, #1
 8006734:	d113      	bne.n	800675e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673a:	881a      	ldrh	r2, [r3, #0]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006746:	1c9a      	adds	r2, r3, #2
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006750:	b29b      	uxth	r3, r3
 8006752:	3b01      	subs	r3, #1
 8006754:	b29a      	uxth	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800675a:	2300      	movs	r3, #0
 800675c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f003 0301 	and.w	r3, r3, #1
 8006768:	2b01      	cmp	r3, #1
 800676a:	d119      	bne.n	80067a0 <HAL_SPI_TransmitReceive+0x1b8>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006770:	b29b      	uxth	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d014      	beq.n	80067a0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68da      	ldr	r2, [r3, #12]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006780:	b292      	uxth	r2, r2
 8006782:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006788:	1c9a      	adds	r2, r3, #2
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006792:	b29b      	uxth	r3, r3
 8006794:	3b01      	subs	r3, #1
 8006796:	b29a      	uxth	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800679c:	2301      	movs	r3, #1
 800679e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80067a0:	f7fe f84e 	bl	8004840 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d807      	bhi.n	80067c0 <HAL_SPI_TransmitReceive+0x1d8>
 80067b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b6:	d003      	beq.n	80067c0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80067be:	e0a7      	b.n	8006910 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1a6      	bne.n	8006718 <HAL_SPI_TransmitReceive+0x130>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1a1      	bne.n	8006718 <HAL_SPI_TransmitReceive+0x130>
 80067d4:	e07c      	b.n	80068d0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d002      	beq.n	80067e4 <HAL_SPI_TransmitReceive+0x1fc>
 80067de:	8b7b      	ldrh	r3, [r7, #26]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d16b      	bne.n	80068bc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	330c      	adds	r3, #12
 80067ee:	7812      	ldrb	r2, [r2, #0]
 80067f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006800:	b29b      	uxth	r3, r3
 8006802:	3b01      	subs	r3, #1
 8006804:	b29a      	uxth	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800680a:	e057      	b.n	80068bc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b02      	cmp	r3, #2
 8006818:	d11c      	bne.n	8006854 <HAL_SPI_TransmitReceive+0x26c>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800681e:	b29b      	uxth	r3, r3
 8006820:	2b00      	cmp	r3, #0
 8006822:	d017      	beq.n	8006854 <HAL_SPI_TransmitReceive+0x26c>
 8006824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006826:	2b01      	cmp	r3, #1
 8006828:	d114      	bne.n	8006854 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	330c      	adds	r3, #12
 8006834:	7812      	ldrb	r2, [r2, #0]
 8006836:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683c:	1c5a      	adds	r2, r3, #1
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006846:	b29b      	uxth	r3, r3
 8006848:	3b01      	subs	r3, #1
 800684a:	b29a      	uxth	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006850:	2300      	movs	r3, #0
 8006852:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b01      	cmp	r3, #1
 8006860:	d119      	bne.n	8006896 <HAL_SPI_TransmitReceive+0x2ae>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006866:	b29b      	uxth	r3, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	d014      	beq.n	8006896 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68da      	ldr	r2, [r3, #12]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006876:	b2d2      	uxtb	r2, r2
 8006878:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687e:	1c5a      	adds	r2, r3, #1
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006888:	b29b      	uxth	r3, r3
 800688a:	3b01      	subs	r3, #1
 800688c:	b29a      	uxth	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006892:	2301      	movs	r3, #1
 8006894:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006896:	f7fd ffd3 	bl	8004840 <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d803      	bhi.n	80068ae <HAL_SPI_TransmitReceive+0x2c6>
 80068a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ac:	d102      	bne.n	80068b4 <HAL_SPI_TransmitReceive+0x2cc>
 80068ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d103      	bne.n	80068bc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80068ba:	e029      	b.n	8006910 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1a2      	bne.n	800680c <HAL_SPI_TransmitReceive+0x224>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d19d      	bne.n	800680c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f000 f8a1 	bl	8006a1c <SPI_EndRxTxTransaction>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d006      	beq.n	80068ee <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2220      	movs	r2, #32
 80068ea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80068ec:	e010      	b.n	8006910 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10b      	bne.n	800690e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068f6:	2300      	movs	r3, #0
 80068f8:	617b      	str	r3, [r7, #20]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	617b      	str	r3, [r7, #20]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	617b      	str	r3, [r7, #20]
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	e000      	b.n	8006910 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800690e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006920:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006924:	4618      	mov	r0, r3
 8006926:	3730      	adds	r7, #48	; 0x30
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800693a:	b2db      	uxtb	r3, r3
}
 800693c:	4618      	mov	r0, r3
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	603b      	str	r3, [r7, #0]
 8006954:	4613      	mov	r3, r2
 8006956:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006958:	e04c      	b.n	80069f4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006960:	d048      	beq.n	80069f4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006962:	f7fd ff6d 	bl	8004840 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	429a      	cmp	r2, r3
 8006970:	d902      	bls.n	8006978 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d13d      	bne.n	80069f4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006986:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006990:	d111      	bne.n	80069b6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800699a:	d004      	beq.n	80069a6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069a4:	d107      	bne.n	80069b6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069be:	d10f      	bne.n	80069e0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e00f      	b.n	8006a14 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689a      	ldr	r2, [r3, #8]
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	4013      	ands	r3, r2
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	bf0c      	ite	eq
 8006a04:	2301      	moveq	r3, #1
 8006a06:	2300      	movne	r3, #0
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	79fb      	ldrb	r3, [r7, #7]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d1a3      	bne.n	800695a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b088      	sub	sp, #32
 8006a20:	af02      	add	r7, sp, #8
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a28:	4b1b      	ldr	r3, [pc, #108]	; (8006a98 <SPI_EndRxTxTransaction+0x7c>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a1b      	ldr	r2, [pc, #108]	; (8006a9c <SPI_EndRxTxTransaction+0x80>)
 8006a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a32:	0d5b      	lsrs	r3, r3, #21
 8006a34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a38:	fb02 f303 	mul.w	r3, r2, r3
 8006a3c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a46:	d112      	bne.n	8006a6e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	9300      	str	r3, [sp, #0]
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	2180      	movs	r1, #128	; 0x80
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f7ff ff78 	bl	8006948 <SPI_WaitFlagStateUntilTimeout>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d016      	beq.n	8006a8c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a62:	f043 0220 	orr.w	r2, r3, #32
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e00f      	b.n	8006a8e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00a      	beq.n	8006a8a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	3b01      	subs	r3, #1
 8006a78:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a84:	2b80      	cmp	r3, #128	; 0x80
 8006a86:	d0f2      	beq.n	8006a6e <SPI_EndRxTxTransaction+0x52>
 8006a88:	e000      	b.n	8006a8c <SPI_EndRxTxTransaction+0x70>
        break;
 8006a8a:	bf00      	nop
  }

  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3718      	adds	r7, #24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	20000008 	.word	0x20000008
 8006a9c:	165e9f81 	.word	0x165e9f81

08006aa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e01d      	b.n	8006aee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d106      	bne.n	8006acc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7fd fd18 	bl	80044fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2202      	movs	r2, #2
 8006ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	3304      	adds	r3, #4
 8006adc:	4619      	mov	r1, r3
 8006ade:	4610      	mov	r0, r2
 8006ae0:	f000 fa14 	bl	8006f0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3708      	adds	r7, #8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b085      	sub	sp, #20
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68da      	ldr	r2, [r3, #12]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f042 0201 	orr.w	r2, r2, #1
 8006b0c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	f003 0307 	and.w	r3, r3, #7
 8006b18:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2b06      	cmp	r3, #6
 8006b1e:	d007      	beq.n	8006b30 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f042 0201 	orr.w	r2, r2, #1
 8006b2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3714      	adds	r7, #20
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b082      	sub	sp, #8
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	f003 0302 	and.w	r3, r3, #2
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d122      	bne.n	8006b9a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	f003 0302 	and.w	r3, r3, #2
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d11b      	bne.n	8006b9a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f06f 0202 	mvn.w	r2, #2
 8006b6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	f003 0303 	and.w	r3, r3, #3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d003      	beq.n	8006b88 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 f9a5 	bl	8006ed0 <HAL_TIM_IC_CaptureCallback>
 8006b86:	e005      	b.n	8006b94 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f997 	bl	8006ebc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f9a8 	bl	8006ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	f003 0304 	and.w	r3, r3, #4
 8006ba4:	2b04      	cmp	r3, #4
 8006ba6:	d122      	bne.n	8006bee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	f003 0304 	and.w	r3, r3, #4
 8006bb2:	2b04      	cmp	r3, #4
 8006bb4:	d11b      	bne.n	8006bee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f06f 0204 	mvn.w	r2, #4
 8006bbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d003      	beq.n	8006bdc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 f97b 	bl	8006ed0 <HAL_TIM_IC_CaptureCallback>
 8006bda:	e005      	b.n	8006be8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f96d 	bl	8006ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f97e 	bl	8006ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	f003 0308 	and.w	r3, r3, #8
 8006bf8:	2b08      	cmp	r3, #8
 8006bfa:	d122      	bne.n	8006c42 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	f003 0308 	and.w	r3, r3, #8
 8006c06:	2b08      	cmp	r3, #8
 8006c08:	d11b      	bne.n	8006c42 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f06f 0208 	mvn.w	r2, #8
 8006c12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2204      	movs	r2, #4
 8006c18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	f003 0303 	and.w	r3, r3, #3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d003      	beq.n	8006c30 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f951 	bl	8006ed0 <HAL_TIM_IC_CaptureCallback>
 8006c2e:	e005      	b.n	8006c3c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 f943 	bl	8006ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f954 	bl	8006ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	f003 0310 	and.w	r3, r3, #16
 8006c4c:	2b10      	cmp	r3, #16
 8006c4e:	d122      	bne.n	8006c96 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	f003 0310 	and.w	r3, r3, #16
 8006c5a:	2b10      	cmp	r3, #16
 8006c5c:	d11b      	bne.n	8006c96 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f06f 0210 	mvn.w	r2, #16
 8006c66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2208      	movs	r2, #8
 8006c6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d003      	beq.n	8006c84 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 f927 	bl	8006ed0 <HAL_TIM_IC_CaptureCallback>
 8006c82:	e005      	b.n	8006c90 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 f919 	bl	8006ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f92a 	bl	8006ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	f003 0301 	and.w	r3, r3, #1
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d10e      	bne.n	8006cc2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d107      	bne.n	8006cc2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f06f 0201 	mvn.w	r2, #1
 8006cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f7fc ffa1 	bl	8003c04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ccc:	2b80      	cmp	r3, #128	; 0x80
 8006cce:	d10e      	bne.n	8006cee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cda:	2b80      	cmp	r3, #128	; 0x80
 8006cdc:	d107      	bne.n	8006cee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 facf 	bl	800728c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf8:	2b40      	cmp	r3, #64	; 0x40
 8006cfa:	d10e      	bne.n	8006d1a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d06:	2b40      	cmp	r3, #64	; 0x40
 8006d08:	d107      	bne.n	8006d1a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f8ef 	bl	8006ef8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	f003 0320 	and.w	r3, r3, #32
 8006d24:	2b20      	cmp	r3, #32
 8006d26:	d10e      	bne.n	8006d46 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	f003 0320 	and.w	r3, r3, #32
 8006d32:	2b20      	cmp	r3, #32
 8006d34:	d107      	bne.n	8006d46 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f06f 0220 	mvn.w	r2, #32
 8006d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 fa99 	bl	8007278 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d46:	bf00      	nop
 8006d48:	3708      	adds	r7, #8
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b084      	sub	sp, #16
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d101      	bne.n	8006d66 <HAL_TIM_ConfigClockSource+0x18>
 8006d62:	2302      	movs	r3, #2
 8006d64:	e0a6      	b.n	8006eb4 <HAL_TIM_ConfigClockSource+0x166>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2202      	movs	r2, #2
 8006d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d84:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d8c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2b40      	cmp	r3, #64	; 0x40
 8006d9c:	d067      	beq.n	8006e6e <HAL_TIM_ConfigClockSource+0x120>
 8006d9e:	2b40      	cmp	r3, #64	; 0x40
 8006da0:	d80b      	bhi.n	8006dba <HAL_TIM_ConfigClockSource+0x6c>
 8006da2:	2b10      	cmp	r3, #16
 8006da4:	d073      	beq.n	8006e8e <HAL_TIM_ConfigClockSource+0x140>
 8006da6:	2b10      	cmp	r3, #16
 8006da8:	d802      	bhi.n	8006db0 <HAL_TIM_ConfigClockSource+0x62>
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d06f      	beq.n	8006e8e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006dae:	e078      	b.n	8006ea2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006db0:	2b20      	cmp	r3, #32
 8006db2:	d06c      	beq.n	8006e8e <HAL_TIM_ConfigClockSource+0x140>
 8006db4:	2b30      	cmp	r3, #48	; 0x30
 8006db6:	d06a      	beq.n	8006e8e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006db8:	e073      	b.n	8006ea2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006dba:	2b70      	cmp	r3, #112	; 0x70
 8006dbc:	d00d      	beq.n	8006dda <HAL_TIM_ConfigClockSource+0x8c>
 8006dbe:	2b70      	cmp	r3, #112	; 0x70
 8006dc0:	d804      	bhi.n	8006dcc <HAL_TIM_ConfigClockSource+0x7e>
 8006dc2:	2b50      	cmp	r3, #80	; 0x50
 8006dc4:	d033      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0xe0>
 8006dc6:	2b60      	cmp	r3, #96	; 0x60
 8006dc8:	d041      	beq.n	8006e4e <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006dca:	e06a      	b.n	8006ea2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dd0:	d066      	beq.n	8006ea0 <HAL_TIM_ConfigClockSource+0x152>
 8006dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dd6:	d017      	beq.n	8006e08 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006dd8:	e063      	b.n	8006ea2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6818      	ldr	r0, [r3, #0]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	6899      	ldr	r1, [r3, #8]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	685a      	ldr	r2, [r3, #4]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	f000 f9a9 	bl	8007140 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006dfc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	609a      	str	r2, [r3, #8]
      break;
 8006e06:	e04c      	b.n	8006ea2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6818      	ldr	r0, [r3, #0]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	6899      	ldr	r1, [r3, #8]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	f000 f992 	bl	8007140 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	689a      	ldr	r2, [r3, #8]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e2a:	609a      	str	r2, [r3, #8]
      break;
 8006e2c:	e039      	b.n	8006ea2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6818      	ldr	r0, [r3, #0]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	6859      	ldr	r1, [r3, #4]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	f000 f906 	bl	800704c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2150      	movs	r1, #80	; 0x50
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 f95f 	bl	800710a <TIM_ITRx_SetConfig>
      break;
 8006e4c:	e029      	b.n	8006ea2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6818      	ldr	r0, [r3, #0]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	6859      	ldr	r1, [r3, #4]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	f000 f925 	bl	80070aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2160      	movs	r1, #96	; 0x60
 8006e66:	4618      	mov	r0, r3
 8006e68:	f000 f94f 	bl	800710a <TIM_ITRx_SetConfig>
      break;
 8006e6c:	e019      	b.n	8006ea2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6818      	ldr	r0, [r3, #0]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	6859      	ldr	r1, [r3, #4]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	f000 f8e6 	bl	800704c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2140      	movs	r1, #64	; 0x40
 8006e86:	4618      	mov	r0, r3
 8006e88:	f000 f93f 	bl	800710a <TIM_ITRx_SetConfig>
      break;
 8006e8c:	e009      	b.n	8006ea2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4619      	mov	r1, r3
 8006e98:	4610      	mov	r0, r2
 8006e9a:	f000 f936 	bl	800710a <TIM_ITRx_SetConfig>
      break;
 8006e9e:	e000      	b.n	8006ea2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006ea0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ed8:	bf00      	nop
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a40      	ldr	r2, [pc, #256]	; (8007020 <TIM_Base_SetConfig+0x114>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d013      	beq.n	8006f4c <TIM_Base_SetConfig+0x40>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f2a:	d00f      	beq.n	8006f4c <TIM_Base_SetConfig+0x40>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a3d      	ldr	r2, [pc, #244]	; (8007024 <TIM_Base_SetConfig+0x118>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d00b      	beq.n	8006f4c <TIM_Base_SetConfig+0x40>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a3c      	ldr	r2, [pc, #240]	; (8007028 <TIM_Base_SetConfig+0x11c>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d007      	beq.n	8006f4c <TIM_Base_SetConfig+0x40>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a3b      	ldr	r2, [pc, #236]	; (800702c <TIM_Base_SetConfig+0x120>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d003      	beq.n	8006f4c <TIM_Base_SetConfig+0x40>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a3a      	ldr	r2, [pc, #232]	; (8007030 <TIM_Base_SetConfig+0x124>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d108      	bne.n	8006f5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a2f      	ldr	r2, [pc, #188]	; (8007020 <TIM_Base_SetConfig+0x114>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d02b      	beq.n	8006fbe <TIM_Base_SetConfig+0xb2>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f6c:	d027      	beq.n	8006fbe <TIM_Base_SetConfig+0xb2>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a2c      	ldr	r2, [pc, #176]	; (8007024 <TIM_Base_SetConfig+0x118>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d023      	beq.n	8006fbe <TIM_Base_SetConfig+0xb2>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a2b      	ldr	r2, [pc, #172]	; (8007028 <TIM_Base_SetConfig+0x11c>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d01f      	beq.n	8006fbe <TIM_Base_SetConfig+0xb2>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a2a      	ldr	r2, [pc, #168]	; (800702c <TIM_Base_SetConfig+0x120>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d01b      	beq.n	8006fbe <TIM_Base_SetConfig+0xb2>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a29      	ldr	r2, [pc, #164]	; (8007030 <TIM_Base_SetConfig+0x124>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d017      	beq.n	8006fbe <TIM_Base_SetConfig+0xb2>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a28      	ldr	r2, [pc, #160]	; (8007034 <TIM_Base_SetConfig+0x128>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d013      	beq.n	8006fbe <TIM_Base_SetConfig+0xb2>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a27      	ldr	r2, [pc, #156]	; (8007038 <TIM_Base_SetConfig+0x12c>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d00f      	beq.n	8006fbe <TIM_Base_SetConfig+0xb2>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a26      	ldr	r2, [pc, #152]	; (800703c <TIM_Base_SetConfig+0x130>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d00b      	beq.n	8006fbe <TIM_Base_SetConfig+0xb2>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a25      	ldr	r2, [pc, #148]	; (8007040 <TIM_Base_SetConfig+0x134>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d007      	beq.n	8006fbe <TIM_Base_SetConfig+0xb2>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a24      	ldr	r2, [pc, #144]	; (8007044 <TIM_Base_SetConfig+0x138>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d003      	beq.n	8006fbe <TIM_Base_SetConfig+0xb2>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a23      	ldr	r2, [pc, #140]	; (8007048 <TIM_Base_SetConfig+0x13c>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d108      	bne.n	8006fd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	689a      	ldr	r2, [r3, #8]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a0a      	ldr	r2, [pc, #40]	; (8007020 <TIM_Base_SetConfig+0x114>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d003      	beq.n	8007004 <TIM_Base_SetConfig+0xf8>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a0c      	ldr	r2, [pc, #48]	; (8007030 <TIM_Base_SetConfig+0x124>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d103      	bne.n	800700c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	691a      	ldr	r2, [r3, #16]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	615a      	str	r2, [r3, #20]
}
 8007012:	bf00      	nop
 8007014:	3714      	adds	r7, #20
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	40010000 	.word	0x40010000
 8007024:	40000400 	.word	0x40000400
 8007028:	40000800 	.word	0x40000800
 800702c:	40000c00 	.word	0x40000c00
 8007030:	40010400 	.word	0x40010400
 8007034:	40014000 	.word	0x40014000
 8007038:	40014400 	.word	0x40014400
 800703c:	40014800 	.word	0x40014800
 8007040:	40001800 	.word	0x40001800
 8007044:	40001c00 	.word	0x40001c00
 8007048:	40002000 	.word	0x40002000

0800704c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800704c:	b480      	push	{r7}
 800704e:	b087      	sub	sp, #28
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6a1b      	ldr	r3, [r3, #32]
 800705c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6a1b      	ldr	r3, [r3, #32]
 8007062:	f023 0201 	bic.w	r2, r3, #1
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007076:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	011b      	lsls	r3, r3, #4
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	4313      	orrs	r3, r2
 8007080:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f023 030a 	bic.w	r3, r3, #10
 8007088:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800708a:	697a      	ldr	r2, [r7, #20]
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	4313      	orrs	r3, r2
 8007090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	693a      	ldr	r2, [r7, #16]
 8007096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	697a      	ldr	r2, [r7, #20]
 800709c:	621a      	str	r2, [r3, #32]
}
 800709e:	bf00      	nop
 80070a0:	371c      	adds	r7, #28
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b087      	sub	sp, #28
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	60f8      	str	r0, [r7, #12]
 80070b2:	60b9      	str	r1, [r7, #8]
 80070b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	f023 0210 	bic.w	r2, r3, #16
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6a1b      	ldr	r3, [r3, #32]
 80070cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	031b      	lsls	r3, r3, #12
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	4313      	orrs	r3, r2
 80070de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80070e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	011b      	lsls	r3, r3, #4
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	693a      	ldr	r2, [r7, #16]
 80070fc:	621a      	str	r2, [r3, #32]
}
 80070fe:	bf00      	nop
 8007100:	371c      	adds	r7, #28
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr

0800710a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800710a:	b480      	push	{r7}
 800710c:	b085      	sub	sp, #20
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
 8007112:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007120:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007122:	683a      	ldr	r2, [r7, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4313      	orrs	r3, r2
 8007128:	f043 0307 	orr.w	r3, r3, #7
 800712c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	609a      	str	r2, [r3, #8]
}
 8007134:	bf00      	nop
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007140:	b480      	push	{r7}
 8007142:	b087      	sub	sp, #28
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
 800714c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800715a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	021a      	lsls	r2, r3, #8
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	431a      	orrs	r2, r3
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	4313      	orrs	r3, r2
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	4313      	orrs	r3, r2
 800716c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	609a      	str	r2, [r3, #8]
}
 8007174:	bf00      	nop
 8007176:	371c      	adds	r7, #28
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007190:	2b01      	cmp	r3, #1
 8007192:	d101      	bne.n	8007198 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007194:	2302      	movs	r3, #2
 8007196:	e05a      	b.n	800724e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2202      	movs	r2, #2
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a21      	ldr	r2, [pc, #132]	; (800725c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d022      	beq.n	8007222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071e4:	d01d      	beq.n	8007222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a1d      	ldr	r2, [pc, #116]	; (8007260 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d018      	beq.n	8007222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a1b      	ldr	r2, [pc, #108]	; (8007264 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d013      	beq.n	8007222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a1a      	ldr	r2, [pc, #104]	; (8007268 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d00e      	beq.n	8007222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a18      	ldr	r2, [pc, #96]	; (800726c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d009      	beq.n	8007222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a17      	ldr	r2, [pc, #92]	; (8007270 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d004      	beq.n	8007222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a15      	ldr	r2, [pc, #84]	; (8007274 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d10c      	bne.n	800723c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007228:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	4313      	orrs	r3, r2
 8007232:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68ba      	ldr	r2, [r7, #8]
 800723a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	40010000 	.word	0x40010000
 8007260:	40000400 	.word	0x40000400
 8007264:	40000800 	.word	0x40000800
 8007268:	40000c00 	.word	0x40000c00
 800726c:	40010400 	.word	0x40010400
 8007270:	40014000 	.word	0x40014000
 8007274:	40001800 	.word	0x40001800

08007278 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007294:	bf00      	nop
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d101      	bne.n	80072b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e03f      	b.n	8007332 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d106      	bne.n	80072cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7fd f940 	bl	800454c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2224      	movs	r2, #36	; 0x24
 80072d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68da      	ldr	r2, [r3, #12]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 faf9 	bl	80078dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	691a      	ldr	r2, [r3, #16]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	695a      	ldr	r2, [r3, #20]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007308:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68da      	ldr	r2, [r3, #12]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007318:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2220      	movs	r2, #32
 8007324:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2220      	movs	r2, #32
 800732c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800733a:	b480      	push	{r7}
 800733c:	b085      	sub	sp, #20
 800733e:	af00      	add	r7, sp, #0
 8007340:	60f8      	str	r0, [r7, #12]
 8007342:	60b9      	str	r1, [r7, #8]
 8007344:	4613      	mov	r3, r2
 8007346:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800734e:	b2db      	uxtb	r3, r3
 8007350:	2b20      	cmp	r3, #32
 8007352:	d130      	bne.n	80073b6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d002      	beq.n	8007360 <HAL_UART_Transmit_IT+0x26>
 800735a:	88fb      	ldrh	r3, [r7, #6]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d101      	bne.n	8007364 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e029      	b.n	80073b8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800736a:	2b01      	cmp	r3, #1
 800736c:	d101      	bne.n	8007372 <HAL_UART_Transmit_IT+0x38>
 800736e:	2302      	movs	r3, #2
 8007370:	e022      	b.n	80073b8 <HAL_UART_Transmit_IT+0x7e>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	88fa      	ldrh	r2, [r7, #6]
 8007384:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	88fa      	ldrh	r2, [r7, #6]
 800738a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2221      	movs	r2, #33	; 0x21
 8007396:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68da      	ldr	r2, [r3, #12]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80073b0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	e000      	b.n	80073b8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80073b6:	2302      	movs	r3, #2
  }
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	4613      	mov	r3, r2
 80073d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	2b20      	cmp	r3, #32
 80073dc:	d140      	bne.n	8007460 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <HAL_UART_Receive_IT+0x26>
 80073e4:	88fb      	ldrh	r3, [r7, #6]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d101      	bne.n	80073ee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e039      	b.n	8007462 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d101      	bne.n	80073fc <HAL_UART_Receive_IT+0x38>
 80073f8:	2302      	movs	r3, #2
 80073fa:	e032      	b.n	8007462 <HAL_UART_Receive_IT+0x9e>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	68ba      	ldr	r2, [r7, #8]
 8007408:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	88fa      	ldrh	r2, [r7, #6]
 800740e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	88fa      	ldrh	r2, [r7, #6]
 8007414:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2222      	movs	r2, #34	; 0x22
 8007420:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	68da      	ldr	r2, [r3, #12]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800743a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	695a      	ldr	r2, [r3, #20]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f042 0201 	orr.w	r2, r2, #1
 800744a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68da      	ldr	r2, [r3, #12]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f042 0220 	orr.w	r2, r2, #32
 800745a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800745c:	2300      	movs	r3, #0
 800745e:	e000      	b.n	8007462 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007460:	2302      	movs	r3, #2
  }
}
 8007462:	4618      	mov	r0, r3
 8007464:	3714      	adds	r7, #20
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
	...

08007470 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b088      	sub	sp, #32
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007490:	2300      	movs	r3, #0
 8007492:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007494:	2300      	movs	r3, #0
 8007496:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	f003 030f 	and.w	r3, r3, #15
 800749e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10d      	bne.n	80074c2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	f003 0320 	and.w	r3, r3, #32
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d008      	beq.n	80074c2 <HAL_UART_IRQHandler+0x52>
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	f003 0320 	and.w	r3, r3, #32
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d003      	beq.n	80074c2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f98c 	bl	80077d8 <UART_Receive_IT>
      return;
 80074c0:	e0d1      	b.n	8007666 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 80b0 	beq.w	800762a <HAL_UART_IRQHandler+0x1ba>
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	f003 0301 	and.w	r3, r3, #1
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d105      	bne.n	80074e0 <HAL_UART_IRQHandler+0x70>
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f000 80a5 	beq.w	800762a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	f003 0301 	and.w	r3, r3, #1
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00a      	beq.n	8007500 <HAL_UART_IRQHandler+0x90>
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d005      	beq.n	8007500 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074f8:	f043 0201 	orr.w	r2, r3, #1
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	f003 0304 	and.w	r3, r3, #4
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00a      	beq.n	8007520 <HAL_UART_IRQHandler+0xb0>
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	2b00      	cmp	r3, #0
 8007512:	d005      	beq.n	8007520 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007518:	f043 0202 	orr.w	r2, r3, #2
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	f003 0302 	and.w	r3, r3, #2
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00a      	beq.n	8007540 <HAL_UART_IRQHandler+0xd0>
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	2b00      	cmp	r3, #0
 8007532:	d005      	beq.n	8007540 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007538:	f043 0204 	orr.w	r2, r3, #4
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	f003 0308 	and.w	r3, r3, #8
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00f      	beq.n	800756a <HAL_UART_IRQHandler+0xfa>
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	f003 0320 	and.w	r3, r3, #32
 8007550:	2b00      	cmp	r3, #0
 8007552:	d104      	bne.n	800755e <HAL_UART_IRQHandler+0xee>
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	f003 0301 	and.w	r3, r3, #1
 800755a:	2b00      	cmp	r3, #0
 800755c:	d005      	beq.n	800756a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007562:	f043 0208 	orr.w	r2, r3, #8
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800756e:	2b00      	cmp	r3, #0
 8007570:	d078      	beq.n	8007664 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	f003 0320 	and.w	r3, r3, #32
 8007578:	2b00      	cmp	r3, #0
 800757a:	d007      	beq.n	800758c <HAL_UART_IRQHandler+0x11c>
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	f003 0320 	and.w	r3, r3, #32
 8007582:	2b00      	cmp	r3, #0
 8007584:	d002      	beq.n	800758c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f926 	bl	80077d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	695b      	ldr	r3, [r3, #20]
 8007592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007596:	2b40      	cmp	r3, #64	; 0x40
 8007598:	bf0c      	ite	eq
 800759a:	2301      	moveq	r3, #1
 800759c:	2300      	movne	r3, #0
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a6:	f003 0308 	and.w	r3, r3, #8
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d102      	bne.n	80075b4 <HAL_UART_IRQHandler+0x144>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d031      	beq.n	8007618 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f86f 	bl	8007698 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	695b      	ldr	r3, [r3, #20]
 80075c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c4:	2b40      	cmp	r3, #64	; 0x40
 80075c6:	d123      	bne.n	8007610 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	695a      	ldr	r2, [r3, #20]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075d6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d013      	beq.n	8007608 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e4:	4a21      	ldr	r2, [pc, #132]	; (800766c <HAL_UART_IRQHandler+0x1fc>)
 80075e6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7fd fc39 	bl	8004e64 <HAL_DMA_Abort_IT>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d016      	beq.n	8007626 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007602:	4610      	mov	r0, r2
 8007604:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007606:	e00e      	b.n	8007626 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f83b 	bl	8007684 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800760e:	e00a      	b.n	8007626 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 f837 	bl	8007684 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007616:	e006      	b.n	8007626 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 f833 	bl	8007684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007624:	e01e      	b.n	8007664 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007626:	bf00      	nop
    return;
 8007628:	e01c      	b.n	8007664 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007630:	2b00      	cmp	r3, #0
 8007632:	d008      	beq.n	8007646 <HAL_UART_IRQHandler+0x1d6>
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800763a:	2b00      	cmp	r3, #0
 800763c:	d003      	beq.n	8007646 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 f85c 	bl	80076fc <UART_Transmit_IT>
    return;
 8007644:	e00f      	b.n	8007666 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00a      	beq.n	8007666 <HAL_UART_IRQHandler+0x1f6>
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007656:	2b00      	cmp	r3, #0
 8007658:	d005      	beq.n	8007666 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f8a4 	bl	80077a8 <UART_EndTransmit_IT>
    return;
 8007660:	bf00      	nop
 8007662:	e000      	b.n	8007666 <HAL_UART_IRQHandler+0x1f6>
    return;
 8007664:	bf00      	nop
  }
}
 8007666:	3720      	adds	r7, #32
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	080076d5 	.word	0x080076d5

08007670 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007678:	bf00      	nop
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800768c:	bf00      	nop
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68da      	ldr	r2, [r3, #12]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80076ae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	695a      	ldr	r2, [r3, #20]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f022 0201 	bic.w	r2, r2, #1
 80076be:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2220      	movs	r2, #32
 80076c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80076c8:	bf00      	nop
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	f7ff ffc8 	bl	8007684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076f4:	bf00      	nop
 80076f6:	3710      	adds	r7, #16
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b21      	cmp	r3, #33	; 0x21
 800770e:	d144      	bne.n	800779a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007718:	d11a      	bne.n	8007750 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	881b      	ldrh	r3, [r3, #0]
 8007724:	461a      	mov	r2, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800772e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d105      	bne.n	8007744 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a1b      	ldr	r3, [r3, #32]
 800773c:	1c9a      	adds	r2, r3, #2
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	621a      	str	r2, [r3, #32]
 8007742:	e00e      	b.n	8007762 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a1b      	ldr	r3, [r3, #32]
 8007748:	1c5a      	adds	r2, r3, #1
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	621a      	str	r2, [r3, #32]
 800774e:	e008      	b.n	8007762 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a1b      	ldr	r3, [r3, #32]
 8007754:	1c59      	adds	r1, r3, #1
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	6211      	str	r1, [r2, #32]
 800775a:	781a      	ldrb	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007766:	b29b      	uxth	r3, r3
 8007768:	3b01      	subs	r3, #1
 800776a:	b29b      	uxth	r3, r3
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	4619      	mov	r1, r3
 8007770:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007772:	2b00      	cmp	r3, #0
 8007774:	d10f      	bne.n	8007796 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68da      	ldr	r2, [r3, #12]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007784:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68da      	ldr	r2, [r3, #12]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007794:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	e000      	b.n	800779c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800779a:	2302      	movs	r3, #2
  }
}
 800779c:	4618      	mov	r0, r3
 800779e:	3714      	adds	r7, #20
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68da      	ldr	r2, [r3, #12]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2220      	movs	r2, #32
 80077c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f7ff ff51 	bl	8007670 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3708      	adds	r7, #8
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	2b22      	cmp	r3, #34	; 0x22
 80077ea:	d171      	bne.n	80078d0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077f4:	d123      	bne.n	800783e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077fa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10e      	bne.n	8007822 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	b29b      	uxth	r3, r3
 800780c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007810:	b29a      	uxth	r2, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781a:	1c9a      	adds	r2, r3, #2
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	629a      	str	r2, [r3, #40]	; 0x28
 8007820:	e029      	b.n	8007876 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	b29b      	uxth	r3, r3
 800782a:	b2db      	uxtb	r3, r3
 800782c:	b29a      	uxth	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007836:	1c5a      	adds	r2, r3, #1
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	629a      	str	r2, [r3, #40]	; 0x28
 800783c:	e01b      	b.n	8007876 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10a      	bne.n	800785c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	6858      	ldr	r0, [r3, #4]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007850:	1c59      	adds	r1, r3, #1
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	6291      	str	r1, [r2, #40]	; 0x28
 8007856:	b2c2      	uxtb	r2, r0
 8007858:	701a      	strb	r2, [r3, #0]
 800785a:	e00c      	b.n	8007876 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	b2da      	uxtb	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007868:	1c58      	adds	r0, r3, #1
 800786a:	6879      	ldr	r1, [r7, #4]
 800786c:	6288      	str	r0, [r1, #40]	; 0x28
 800786e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007872:	b2d2      	uxtb	r2, r2
 8007874:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800787a:	b29b      	uxth	r3, r3
 800787c:	3b01      	subs	r3, #1
 800787e:	b29b      	uxth	r3, r3
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	4619      	mov	r1, r3
 8007884:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007886:	2b00      	cmp	r3, #0
 8007888:	d120      	bne.n	80078cc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68da      	ldr	r2, [r3, #12]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f022 0220 	bic.w	r2, r2, #32
 8007898:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68da      	ldr	r2, [r3, #12]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	695a      	ldr	r2, [r3, #20]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f022 0201 	bic.w	r2, r2, #1
 80078b8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2220      	movs	r2, #32
 80078be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7fc f92a 	bl	8003b1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80078c8:	2300      	movs	r3, #0
 80078ca:	e002      	b.n	80078d2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80078cc:	2300      	movs	r3, #0
 80078ce:	e000      	b.n	80078d2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80078d0:	2302      	movs	r3, #2
  }
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
	...

080078dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e0:	b085      	sub	sp, #20
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	68da      	ldr	r2, [r3, #12]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	430a      	orrs	r2, r1
 80078fa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	689a      	ldr	r2, [r3, #8]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	431a      	orrs	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	695b      	ldr	r3, [r3, #20]
 800790a:	431a      	orrs	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	69db      	ldr	r3, [r3, #28]
 8007910:	4313      	orrs	r3, r2
 8007912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800791e:	f023 030c 	bic.w	r3, r3, #12
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	6812      	ldr	r2, [r2, #0]
 8007926:	68f9      	ldr	r1, [r7, #12]
 8007928:	430b      	orrs	r3, r1
 800792a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	699a      	ldr	r2, [r3, #24]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	430a      	orrs	r2, r1
 8007940:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	69db      	ldr	r3, [r3, #28]
 8007946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800794a:	f040 818b 	bne.w	8007c64 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4ac1      	ldr	r2, [pc, #772]	; (8007c58 <UART_SetConfig+0x37c>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d005      	beq.n	8007964 <UART_SetConfig+0x88>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4abf      	ldr	r2, [pc, #764]	; (8007c5c <UART_SetConfig+0x380>)
 800795e:	4293      	cmp	r3, r2
 8007960:	f040 80bd 	bne.w	8007ade <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007964:	f7fe fc94 	bl	8006290 <HAL_RCC_GetPCLK2Freq>
 8007968:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	461d      	mov	r5, r3
 800796e:	f04f 0600 	mov.w	r6, #0
 8007972:	46a8      	mov	r8, r5
 8007974:	46b1      	mov	r9, r6
 8007976:	eb18 0308 	adds.w	r3, r8, r8
 800797a:	eb49 0409 	adc.w	r4, r9, r9
 800797e:	4698      	mov	r8, r3
 8007980:	46a1      	mov	r9, r4
 8007982:	eb18 0805 	adds.w	r8, r8, r5
 8007986:	eb49 0906 	adc.w	r9, r9, r6
 800798a:	f04f 0100 	mov.w	r1, #0
 800798e:	f04f 0200 	mov.w	r2, #0
 8007992:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007996:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800799a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800799e:	4688      	mov	r8, r1
 80079a0:	4691      	mov	r9, r2
 80079a2:	eb18 0005 	adds.w	r0, r8, r5
 80079a6:	eb49 0106 	adc.w	r1, r9, r6
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	461d      	mov	r5, r3
 80079b0:	f04f 0600 	mov.w	r6, #0
 80079b4:	196b      	adds	r3, r5, r5
 80079b6:	eb46 0406 	adc.w	r4, r6, r6
 80079ba:	461a      	mov	r2, r3
 80079bc:	4623      	mov	r3, r4
 80079be:	f7f9 f8bf 	bl	8000b40 <__aeabi_uldivmod>
 80079c2:	4603      	mov	r3, r0
 80079c4:	460c      	mov	r4, r1
 80079c6:	461a      	mov	r2, r3
 80079c8:	4ba5      	ldr	r3, [pc, #660]	; (8007c60 <UART_SetConfig+0x384>)
 80079ca:	fba3 2302 	umull	r2, r3, r3, r2
 80079ce:	095b      	lsrs	r3, r3, #5
 80079d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	461d      	mov	r5, r3
 80079d8:	f04f 0600 	mov.w	r6, #0
 80079dc:	46a9      	mov	r9, r5
 80079de:	46b2      	mov	sl, r6
 80079e0:	eb19 0309 	adds.w	r3, r9, r9
 80079e4:	eb4a 040a 	adc.w	r4, sl, sl
 80079e8:	4699      	mov	r9, r3
 80079ea:	46a2      	mov	sl, r4
 80079ec:	eb19 0905 	adds.w	r9, r9, r5
 80079f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80079f4:	f04f 0100 	mov.w	r1, #0
 80079f8:	f04f 0200 	mov.w	r2, #0
 80079fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a08:	4689      	mov	r9, r1
 8007a0a:	4692      	mov	sl, r2
 8007a0c:	eb19 0005 	adds.w	r0, r9, r5
 8007a10:	eb4a 0106 	adc.w	r1, sl, r6
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	461d      	mov	r5, r3
 8007a1a:	f04f 0600 	mov.w	r6, #0
 8007a1e:	196b      	adds	r3, r5, r5
 8007a20:	eb46 0406 	adc.w	r4, r6, r6
 8007a24:	461a      	mov	r2, r3
 8007a26:	4623      	mov	r3, r4
 8007a28:	f7f9 f88a 	bl	8000b40 <__aeabi_uldivmod>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	460c      	mov	r4, r1
 8007a30:	461a      	mov	r2, r3
 8007a32:	4b8b      	ldr	r3, [pc, #556]	; (8007c60 <UART_SetConfig+0x384>)
 8007a34:	fba3 1302 	umull	r1, r3, r3, r2
 8007a38:	095b      	lsrs	r3, r3, #5
 8007a3a:	2164      	movs	r1, #100	; 0x64
 8007a3c:	fb01 f303 	mul.w	r3, r1, r3
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	00db      	lsls	r3, r3, #3
 8007a44:	3332      	adds	r3, #50	; 0x32
 8007a46:	4a86      	ldr	r2, [pc, #536]	; (8007c60 <UART_SetConfig+0x384>)
 8007a48:	fba2 2303 	umull	r2, r3, r2, r3
 8007a4c:	095b      	lsrs	r3, r3, #5
 8007a4e:	005b      	lsls	r3, r3, #1
 8007a50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a54:	4498      	add	r8, r3
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	461d      	mov	r5, r3
 8007a5a:	f04f 0600 	mov.w	r6, #0
 8007a5e:	46a9      	mov	r9, r5
 8007a60:	46b2      	mov	sl, r6
 8007a62:	eb19 0309 	adds.w	r3, r9, r9
 8007a66:	eb4a 040a 	adc.w	r4, sl, sl
 8007a6a:	4699      	mov	r9, r3
 8007a6c:	46a2      	mov	sl, r4
 8007a6e:	eb19 0905 	adds.w	r9, r9, r5
 8007a72:	eb4a 0a06 	adc.w	sl, sl, r6
 8007a76:	f04f 0100 	mov.w	r1, #0
 8007a7a:	f04f 0200 	mov.w	r2, #0
 8007a7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a8a:	4689      	mov	r9, r1
 8007a8c:	4692      	mov	sl, r2
 8007a8e:	eb19 0005 	adds.w	r0, r9, r5
 8007a92:	eb4a 0106 	adc.w	r1, sl, r6
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	461d      	mov	r5, r3
 8007a9c:	f04f 0600 	mov.w	r6, #0
 8007aa0:	196b      	adds	r3, r5, r5
 8007aa2:	eb46 0406 	adc.w	r4, r6, r6
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	4623      	mov	r3, r4
 8007aaa:	f7f9 f849 	bl	8000b40 <__aeabi_uldivmod>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	460c      	mov	r4, r1
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	4b6a      	ldr	r3, [pc, #424]	; (8007c60 <UART_SetConfig+0x384>)
 8007ab6:	fba3 1302 	umull	r1, r3, r3, r2
 8007aba:	095b      	lsrs	r3, r3, #5
 8007abc:	2164      	movs	r1, #100	; 0x64
 8007abe:	fb01 f303 	mul.w	r3, r1, r3
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	00db      	lsls	r3, r3, #3
 8007ac6:	3332      	adds	r3, #50	; 0x32
 8007ac8:	4a65      	ldr	r2, [pc, #404]	; (8007c60 <UART_SetConfig+0x384>)
 8007aca:	fba2 2303 	umull	r2, r3, r2, r3
 8007ace:	095b      	lsrs	r3, r3, #5
 8007ad0:	f003 0207 	and.w	r2, r3, #7
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4442      	add	r2, r8
 8007ada:	609a      	str	r2, [r3, #8]
 8007adc:	e26f      	b.n	8007fbe <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ade:	f7fe fbc3 	bl	8006268 <HAL_RCC_GetPCLK1Freq>
 8007ae2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	461d      	mov	r5, r3
 8007ae8:	f04f 0600 	mov.w	r6, #0
 8007aec:	46a8      	mov	r8, r5
 8007aee:	46b1      	mov	r9, r6
 8007af0:	eb18 0308 	adds.w	r3, r8, r8
 8007af4:	eb49 0409 	adc.w	r4, r9, r9
 8007af8:	4698      	mov	r8, r3
 8007afa:	46a1      	mov	r9, r4
 8007afc:	eb18 0805 	adds.w	r8, r8, r5
 8007b00:	eb49 0906 	adc.w	r9, r9, r6
 8007b04:	f04f 0100 	mov.w	r1, #0
 8007b08:	f04f 0200 	mov.w	r2, #0
 8007b0c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007b10:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007b14:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007b18:	4688      	mov	r8, r1
 8007b1a:	4691      	mov	r9, r2
 8007b1c:	eb18 0005 	adds.w	r0, r8, r5
 8007b20:	eb49 0106 	adc.w	r1, r9, r6
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	461d      	mov	r5, r3
 8007b2a:	f04f 0600 	mov.w	r6, #0
 8007b2e:	196b      	adds	r3, r5, r5
 8007b30:	eb46 0406 	adc.w	r4, r6, r6
 8007b34:	461a      	mov	r2, r3
 8007b36:	4623      	mov	r3, r4
 8007b38:	f7f9 f802 	bl	8000b40 <__aeabi_uldivmod>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	460c      	mov	r4, r1
 8007b40:	461a      	mov	r2, r3
 8007b42:	4b47      	ldr	r3, [pc, #284]	; (8007c60 <UART_SetConfig+0x384>)
 8007b44:	fba3 2302 	umull	r2, r3, r3, r2
 8007b48:	095b      	lsrs	r3, r3, #5
 8007b4a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	461d      	mov	r5, r3
 8007b52:	f04f 0600 	mov.w	r6, #0
 8007b56:	46a9      	mov	r9, r5
 8007b58:	46b2      	mov	sl, r6
 8007b5a:	eb19 0309 	adds.w	r3, r9, r9
 8007b5e:	eb4a 040a 	adc.w	r4, sl, sl
 8007b62:	4699      	mov	r9, r3
 8007b64:	46a2      	mov	sl, r4
 8007b66:	eb19 0905 	adds.w	r9, r9, r5
 8007b6a:	eb4a 0a06 	adc.w	sl, sl, r6
 8007b6e:	f04f 0100 	mov.w	r1, #0
 8007b72:	f04f 0200 	mov.w	r2, #0
 8007b76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b82:	4689      	mov	r9, r1
 8007b84:	4692      	mov	sl, r2
 8007b86:	eb19 0005 	adds.w	r0, r9, r5
 8007b8a:	eb4a 0106 	adc.w	r1, sl, r6
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	461d      	mov	r5, r3
 8007b94:	f04f 0600 	mov.w	r6, #0
 8007b98:	196b      	adds	r3, r5, r5
 8007b9a:	eb46 0406 	adc.w	r4, r6, r6
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	4623      	mov	r3, r4
 8007ba2:	f7f8 ffcd 	bl	8000b40 <__aeabi_uldivmod>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	460c      	mov	r4, r1
 8007baa:	461a      	mov	r2, r3
 8007bac:	4b2c      	ldr	r3, [pc, #176]	; (8007c60 <UART_SetConfig+0x384>)
 8007bae:	fba3 1302 	umull	r1, r3, r3, r2
 8007bb2:	095b      	lsrs	r3, r3, #5
 8007bb4:	2164      	movs	r1, #100	; 0x64
 8007bb6:	fb01 f303 	mul.w	r3, r1, r3
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	00db      	lsls	r3, r3, #3
 8007bbe:	3332      	adds	r3, #50	; 0x32
 8007bc0:	4a27      	ldr	r2, [pc, #156]	; (8007c60 <UART_SetConfig+0x384>)
 8007bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bc6:	095b      	lsrs	r3, r3, #5
 8007bc8:	005b      	lsls	r3, r3, #1
 8007bca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007bce:	4498      	add	r8, r3
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	461d      	mov	r5, r3
 8007bd4:	f04f 0600 	mov.w	r6, #0
 8007bd8:	46a9      	mov	r9, r5
 8007bda:	46b2      	mov	sl, r6
 8007bdc:	eb19 0309 	adds.w	r3, r9, r9
 8007be0:	eb4a 040a 	adc.w	r4, sl, sl
 8007be4:	4699      	mov	r9, r3
 8007be6:	46a2      	mov	sl, r4
 8007be8:	eb19 0905 	adds.w	r9, r9, r5
 8007bec:	eb4a 0a06 	adc.w	sl, sl, r6
 8007bf0:	f04f 0100 	mov.w	r1, #0
 8007bf4:	f04f 0200 	mov.w	r2, #0
 8007bf8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bfc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c04:	4689      	mov	r9, r1
 8007c06:	4692      	mov	sl, r2
 8007c08:	eb19 0005 	adds.w	r0, r9, r5
 8007c0c:	eb4a 0106 	adc.w	r1, sl, r6
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	461d      	mov	r5, r3
 8007c16:	f04f 0600 	mov.w	r6, #0
 8007c1a:	196b      	adds	r3, r5, r5
 8007c1c:	eb46 0406 	adc.w	r4, r6, r6
 8007c20:	461a      	mov	r2, r3
 8007c22:	4623      	mov	r3, r4
 8007c24:	f7f8 ff8c 	bl	8000b40 <__aeabi_uldivmod>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	460c      	mov	r4, r1
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	4b0c      	ldr	r3, [pc, #48]	; (8007c60 <UART_SetConfig+0x384>)
 8007c30:	fba3 1302 	umull	r1, r3, r3, r2
 8007c34:	095b      	lsrs	r3, r3, #5
 8007c36:	2164      	movs	r1, #100	; 0x64
 8007c38:	fb01 f303 	mul.w	r3, r1, r3
 8007c3c:	1ad3      	subs	r3, r2, r3
 8007c3e:	00db      	lsls	r3, r3, #3
 8007c40:	3332      	adds	r3, #50	; 0x32
 8007c42:	4a07      	ldr	r2, [pc, #28]	; (8007c60 <UART_SetConfig+0x384>)
 8007c44:	fba2 2303 	umull	r2, r3, r2, r3
 8007c48:	095b      	lsrs	r3, r3, #5
 8007c4a:	f003 0207 	and.w	r2, r3, #7
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4442      	add	r2, r8
 8007c54:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007c56:	e1b2      	b.n	8007fbe <UART_SetConfig+0x6e2>
 8007c58:	40011000 	.word	0x40011000
 8007c5c:	40011400 	.word	0x40011400
 8007c60:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4ad7      	ldr	r2, [pc, #860]	; (8007fc8 <UART_SetConfig+0x6ec>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d005      	beq.n	8007c7a <UART_SetConfig+0x39e>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4ad6      	ldr	r2, [pc, #856]	; (8007fcc <UART_SetConfig+0x6f0>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	f040 80d1 	bne.w	8007e1c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c7a:	f7fe fb09 	bl	8006290 <HAL_RCC_GetPCLK2Freq>
 8007c7e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	469a      	mov	sl, r3
 8007c84:	f04f 0b00 	mov.w	fp, #0
 8007c88:	46d0      	mov	r8, sl
 8007c8a:	46d9      	mov	r9, fp
 8007c8c:	eb18 0308 	adds.w	r3, r8, r8
 8007c90:	eb49 0409 	adc.w	r4, r9, r9
 8007c94:	4698      	mov	r8, r3
 8007c96:	46a1      	mov	r9, r4
 8007c98:	eb18 080a 	adds.w	r8, r8, sl
 8007c9c:	eb49 090b 	adc.w	r9, r9, fp
 8007ca0:	f04f 0100 	mov.w	r1, #0
 8007ca4:	f04f 0200 	mov.w	r2, #0
 8007ca8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007cac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007cb0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007cb4:	4688      	mov	r8, r1
 8007cb6:	4691      	mov	r9, r2
 8007cb8:	eb1a 0508 	adds.w	r5, sl, r8
 8007cbc:	eb4b 0609 	adc.w	r6, fp, r9
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	f04f 0200 	mov.w	r2, #0
 8007cca:	f04f 0300 	mov.w	r3, #0
 8007cce:	f04f 0400 	mov.w	r4, #0
 8007cd2:	0094      	lsls	r4, r2, #2
 8007cd4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007cd8:	008b      	lsls	r3, r1, #2
 8007cda:	461a      	mov	r2, r3
 8007cdc:	4623      	mov	r3, r4
 8007cde:	4628      	mov	r0, r5
 8007ce0:	4631      	mov	r1, r6
 8007ce2:	f7f8 ff2d 	bl	8000b40 <__aeabi_uldivmod>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	460c      	mov	r4, r1
 8007cea:	461a      	mov	r2, r3
 8007cec:	4bb8      	ldr	r3, [pc, #736]	; (8007fd0 <UART_SetConfig+0x6f4>)
 8007cee:	fba3 2302 	umull	r2, r3, r3, r2
 8007cf2:	095b      	lsrs	r3, r3, #5
 8007cf4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	469b      	mov	fp, r3
 8007cfc:	f04f 0c00 	mov.w	ip, #0
 8007d00:	46d9      	mov	r9, fp
 8007d02:	46e2      	mov	sl, ip
 8007d04:	eb19 0309 	adds.w	r3, r9, r9
 8007d08:	eb4a 040a 	adc.w	r4, sl, sl
 8007d0c:	4699      	mov	r9, r3
 8007d0e:	46a2      	mov	sl, r4
 8007d10:	eb19 090b 	adds.w	r9, r9, fp
 8007d14:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007d18:	f04f 0100 	mov.w	r1, #0
 8007d1c:	f04f 0200 	mov.w	r2, #0
 8007d20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d24:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d28:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d2c:	4689      	mov	r9, r1
 8007d2e:	4692      	mov	sl, r2
 8007d30:	eb1b 0509 	adds.w	r5, fp, r9
 8007d34:	eb4c 060a 	adc.w	r6, ip, sl
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	f04f 0200 	mov.w	r2, #0
 8007d42:	f04f 0300 	mov.w	r3, #0
 8007d46:	f04f 0400 	mov.w	r4, #0
 8007d4a:	0094      	lsls	r4, r2, #2
 8007d4c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d50:	008b      	lsls	r3, r1, #2
 8007d52:	461a      	mov	r2, r3
 8007d54:	4623      	mov	r3, r4
 8007d56:	4628      	mov	r0, r5
 8007d58:	4631      	mov	r1, r6
 8007d5a:	f7f8 fef1 	bl	8000b40 <__aeabi_uldivmod>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	460c      	mov	r4, r1
 8007d62:	461a      	mov	r2, r3
 8007d64:	4b9a      	ldr	r3, [pc, #616]	; (8007fd0 <UART_SetConfig+0x6f4>)
 8007d66:	fba3 1302 	umull	r1, r3, r3, r2
 8007d6a:	095b      	lsrs	r3, r3, #5
 8007d6c:	2164      	movs	r1, #100	; 0x64
 8007d6e:	fb01 f303 	mul.w	r3, r1, r3
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	011b      	lsls	r3, r3, #4
 8007d76:	3332      	adds	r3, #50	; 0x32
 8007d78:	4a95      	ldr	r2, [pc, #596]	; (8007fd0 <UART_SetConfig+0x6f4>)
 8007d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d7e:	095b      	lsrs	r3, r3, #5
 8007d80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d84:	4498      	add	r8, r3
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	469b      	mov	fp, r3
 8007d8a:	f04f 0c00 	mov.w	ip, #0
 8007d8e:	46d9      	mov	r9, fp
 8007d90:	46e2      	mov	sl, ip
 8007d92:	eb19 0309 	adds.w	r3, r9, r9
 8007d96:	eb4a 040a 	adc.w	r4, sl, sl
 8007d9a:	4699      	mov	r9, r3
 8007d9c:	46a2      	mov	sl, r4
 8007d9e:	eb19 090b 	adds.w	r9, r9, fp
 8007da2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007da6:	f04f 0100 	mov.w	r1, #0
 8007daa:	f04f 0200 	mov.w	r2, #0
 8007dae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007db2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007db6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007dba:	4689      	mov	r9, r1
 8007dbc:	4692      	mov	sl, r2
 8007dbe:	eb1b 0509 	adds.w	r5, fp, r9
 8007dc2:	eb4c 060a 	adc.w	r6, ip, sl
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	4619      	mov	r1, r3
 8007dcc:	f04f 0200 	mov.w	r2, #0
 8007dd0:	f04f 0300 	mov.w	r3, #0
 8007dd4:	f04f 0400 	mov.w	r4, #0
 8007dd8:	0094      	lsls	r4, r2, #2
 8007dda:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007dde:	008b      	lsls	r3, r1, #2
 8007de0:	461a      	mov	r2, r3
 8007de2:	4623      	mov	r3, r4
 8007de4:	4628      	mov	r0, r5
 8007de6:	4631      	mov	r1, r6
 8007de8:	f7f8 feaa 	bl	8000b40 <__aeabi_uldivmod>
 8007dec:	4603      	mov	r3, r0
 8007dee:	460c      	mov	r4, r1
 8007df0:	461a      	mov	r2, r3
 8007df2:	4b77      	ldr	r3, [pc, #476]	; (8007fd0 <UART_SetConfig+0x6f4>)
 8007df4:	fba3 1302 	umull	r1, r3, r3, r2
 8007df8:	095b      	lsrs	r3, r3, #5
 8007dfa:	2164      	movs	r1, #100	; 0x64
 8007dfc:	fb01 f303 	mul.w	r3, r1, r3
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	011b      	lsls	r3, r3, #4
 8007e04:	3332      	adds	r3, #50	; 0x32
 8007e06:	4a72      	ldr	r2, [pc, #456]	; (8007fd0 <UART_SetConfig+0x6f4>)
 8007e08:	fba2 2303 	umull	r2, r3, r2, r3
 8007e0c:	095b      	lsrs	r3, r3, #5
 8007e0e:	f003 020f 	and.w	r2, r3, #15
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4442      	add	r2, r8
 8007e18:	609a      	str	r2, [r3, #8]
 8007e1a:	e0d0      	b.n	8007fbe <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e1c:	f7fe fa24 	bl	8006268 <HAL_RCC_GetPCLK1Freq>
 8007e20:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	469a      	mov	sl, r3
 8007e26:	f04f 0b00 	mov.w	fp, #0
 8007e2a:	46d0      	mov	r8, sl
 8007e2c:	46d9      	mov	r9, fp
 8007e2e:	eb18 0308 	adds.w	r3, r8, r8
 8007e32:	eb49 0409 	adc.w	r4, r9, r9
 8007e36:	4698      	mov	r8, r3
 8007e38:	46a1      	mov	r9, r4
 8007e3a:	eb18 080a 	adds.w	r8, r8, sl
 8007e3e:	eb49 090b 	adc.w	r9, r9, fp
 8007e42:	f04f 0100 	mov.w	r1, #0
 8007e46:	f04f 0200 	mov.w	r2, #0
 8007e4a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007e4e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007e52:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007e56:	4688      	mov	r8, r1
 8007e58:	4691      	mov	r9, r2
 8007e5a:	eb1a 0508 	adds.w	r5, sl, r8
 8007e5e:	eb4b 0609 	adc.w	r6, fp, r9
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	4619      	mov	r1, r3
 8007e68:	f04f 0200 	mov.w	r2, #0
 8007e6c:	f04f 0300 	mov.w	r3, #0
 8007e70:	f04f 0400 	mov.w	r4, #0
 8007e74:	0094      	lsls	r4, r2, #2
 8007e76:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007e7a:	008b      	lsls	r3, r1, #2
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	4623      	mov	r3, r4
 8007e80:	4628      	mov	r0, r5
 8007e82:	4631      	mov	r1, r6
 8007e84:	f7f8 fe5c 	bl	8000b40 <__aeabi_uldivmod>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	460c      	mov	r4, r1
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	4b50      	ldr	r3, [pc, #320]	; (8007fd0 <UART_SetConfig+0x6f4>)
 8007e90:	fba3 2302 	umull	r2, r3, r3, r2
 8007e94:	095b      	lsrs	r3, r3, #5
 8007e96:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	469b      	mov	fp, r3
 8007e9e:	f04f 0c00 	mov.w	ip, #0
 8007ea2:	46d9      	mov	r9, fp
 8007ea4:	46e2      	mov	sl, ip
 8007ea6:	eb19 0309 	adds.w	r3, r9, r9
 8007eaa:	eb4a 040a 	adc.w	r4, sl, sl
 8007eae:	4699      	mov	r9, r3
 8007eb0:	46a2      	mov	sl, r4
 8007eb2:	eb19 090b 	adds.w	r9, r9, fp
 8007eb6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007eba:	f04f 0100 	mov.w	r1, #0
 8007ebe:	f04f 0200 	mov.w	r2, #0
 8007ec2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ec6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007eca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007ece:	4689      	mov	r9, r1
 8007ed0:	4692      	mov	sl, r2
 8007ed2:	eb1b 0509 	adds.w	r5, fp, r9
 8007ed6:	eb4c 060a 	adc.w	r6, ip, sl
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	f04f 0200 	mov.w	r2, #0
 8007ee4:	f04f 0300 	mov.w	r3, #0
 8007ee8:	f04f 0400 	mov.w	r4, #0
 8007eec:	0094      	lsls	r4, r2, #2
 8007eee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007ef2:	008b      	lsls	r3, r1, #2
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	4623      	mov	r3, r4
 8007ef8:	4628      	mov	r0, r5
 8007efa:	4631      	mov	r1, r6
 8007efc:	f7f8 fe20 	bl	8000b40 <__aeabi_uldivmod>
 8007f00:	4603      	mov	r3, r0
 8007f02:	460c      	mov	r4, r1
 8007f04:	461a      	mov	r2, r3
 8007f06:	4b32      	ldr	r3, [pc, #200]	; (8007fd0 <UART_SetConfig+0x6f4>)
 8007f08:	fba3 1302 	umull	r1, r3, r3, r2
 8007f0c:	095b      	lsrs	r3, r3, #5
 8007f0e:	2164      	movs	r1, #100	; 0x64
 8007f10:	fb01 f303 	mul.w	r3, r1, r3
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	011b      	lsls	r3, r3, #4
 8007f18:	3332      	adds	r3, #50	; 0x32
 8007f1a:	4a2d      	ldr	r2, [pc, #180]	; (8007fd0 <UART_SetConfig+0x6f4>)
 8007f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f20:	095b      	lsrs	r3, r3, #5
 8007f22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f26:	4498      	add	r8, r3
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	469b      	mov	fp, r3
 8007f2c:	f04f 0c00 	mov.w	ip, #0
 8007f30:	46d9      	mov	r9, fp
 8007f32:	46e2      	mov	sl, ip
 8007f34:	eb19 0309 	adds.w	r3, r9, r9
 8007f38:	eb4a 040a 	adc.w	r4, sl, sl
 8007f3c:	4699      	mov	r9, r3
 8007f3e:	46a2      	mov	sl, r4
 8007f40:	eb19 090b 	adds.w	r9, r9, fp
 8007f44:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007f48:	f04f 0100 	mov.w	r1, #0
 8007f4c:	f04f 0200 	mov.w	r2, #0
 8007f50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007f58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007f5c:	4689      	mov	r9, r1
 8007f5e:	4692      	mov	sl, r2
 8007f60:	eb1b 0509 	adds.w	r5, fp, r9
 8007f64:	eb4c 060a 	adc.w	r6, ip, sl
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	f04f 0200 	mov.w	r2, #0
 8007f72:	f04f 0300 	mov.w	r3, #0
 8007f76:	f04f 0400 	mov.w	r4, #0
 8007f7a:	0094      	lsls	r4, r2, #2
 8007f7c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007f80:	008b      	lsls	r3, r1, #2
 8007f82:	461a      	mov	r2, r3
 8007f84:	4623      	mov	r3, r4
 8007f86:	4628      	mov	r0, r5
 8007f88:	4631      	mov	r1, r6
 8007f8a:	f7f8 fdd9 	bl	8000b40 <__aeabi_uldivmod>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	460c      	mov	r4, r1
 8007f92:	461a      	mov	r2, r3
 8007f94:	4b0e      	ldr	r3, [pc, #56]	; (8007fd0 <UART_SetConfig+0x6f4>)
 8007f96:	fba3 1302 	umull	r1, r3, r3, r2
 8007f9a:	095b      	lsrs	r3, r3, #5
 8007f9c:	2164      	movs	r1, #100	; 0x64
 8007f9e:	fb01 f303 	mul.w	r3, r1, r3
 8007fa2:	1ad3      	subs	r3, r2, r3
 8007fa4:	011b      	lsls	r3, r3, #4
 8007fa6:	3332      	adds	r3, #50	; 0x32
 8007fa8:	4a09      	ldr	r2, [pc, #36]	; (8007fd0 <UART_SetConfig+0x6f4>)
 8007faa:	fba2 2303 	umull	r2, r3, r2, r3
 8007fae:	095b      	lsrs	r3, r3, #5
 8007fb0:	f003 020f 	and.w	r2, r3, #15
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4442      	add	r2, r8
 8007fba:	609a      	str	r2, [r3, #8]
}
 8007fbc:	e7ff      	b.n	8007fbe <UART_SetConfig+0x6e2>
 8007fbe:	bf00      	nop
 8007fc0:	3714      	adds	r7, #20
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fc8:	40011000 	.word	0x40011000
 8007fcc:	40011400 	.word	0x40011400
 8007fd0:	51eb851f 	.word	0x51eb851f

08007fd4 <__errno>:
 8007fd4:	4b01      	ldr	r3, [pc, #4]	; (8007fdc <__errno+0x8>)
 8007fd6:	6818      	ldr	r0, [r3, #0]
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	20000014 	.word	0x20000014

08007fe0 <__libc_init_array>:
 8007fe0:	b570      	push	{r4, r5, r6, lr}
 8007fe2:	4e0d      	ldr	r6, [pc, #52]	; (8008018 <__libc_init_array+0x38>)
 8007fe4:	4c0d      	ldr	r4, [pc, #52]	; (800801c <__libc_init_array+0x3c>)
 8007fe6:	1ba4      	subs	r4, r4, r6
 8007fe8:	10a4      	asrs	r4, r4, #2
 8007fea:	2500      	movs	r5, #0
 8007fec:	42a5      	cmp	r5, r4
 8007fee:	d109      	bne.n	8008004 <__libc_init_array+0x24>
 8007ff0:	4e0b      	ldr	r6, [pc, #44]	; (8008020 <__libc_init_array+0x40>)
 8007ff2:	4c0c      	ldr	r4, [pc, #48]	; (8008024 <__libc_init_array+0x44>)
 8007ff4:	f001 fd46 	bl	8009a84 <_init>
 8007ff8:	1ba4      	subs	r4, r4, r6
 8007ffa:	10a4      	asrs	r4, r4, #2
 8007ffc:	2500      	movs	r5, #0
 8007ffe:	42a5      	cmp	r5, r4
 8008000:	d105      	bne.n	800800e <__libc_init_array+0x2e>
 8008002:	bd70      	pop	{r4, r5, r6, pc}
 8008004:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008008:	4798      	blx	r3
 800800a:	3501      	adds	r5, #1
 800800c:	e7ee      	b.n	8007fec <__libc_init_array+0xc>
 800800e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008012:	4798      	blx	r3
 8008014:	3501      	adds	r5, #1
 8008016:	e7f2      	b.n	8007ffe <__libc_init_array+0x1e>
 8008018:	08009d38 	.word	0x08009d38
 800801c:	08009d38 	.word	0x08009d38
 8008020:	08009d38 	.word	0x08009d38
 8008024:	08009d3c 	.word	0x08009d3c

08008028 <memset>:
 8008028:	4402      	add	r2, r0
 800802a:	4603      	mov	r3, r0
 800802c:	4293      	cmp	r3, r2
 800802e:	d100      	bne.n	8008032 <memset+0xa>
 8008030:	4770      	bx	lr
 8008032:	f803 1b01 	strb.w	r1, [r3], #1
 8008036:	e7f9      	b.n	800802c <memset+0x4>

08008038 <__cvt>:
 8008038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800803c:	ec55 4b10 	vmov	r4, r5, d0
 8008040:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008042:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008046:	2d00      	cmp	r5, #0
 8008048:	460e      	mov	r6, r1
 800804a:	4691      	mov	r9, r2
 800804c:	4619      	mov	r1, r3
 800804e:	bfb8      	it	lt
 8008050:	4622      	movlt	r2, r4
 8008052:	462b      	mov	r3, r5
 8008054:	f027 0720 	bic.w	r7, r7, #32
 8008058:	bfbb      	ittet	lt
 800805a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800805e:	461d      	movlt	r5, r3
 8008060:	2300      	movge	r3, #0
 8008062:	232d      	movlt	r3, #45	; 0x2d
 8008064:	bfb8      	it	lt
 8008066:	4614      	movlt	r4, r2
 8008068:	2f46      	cmp	r7, #70	; 0x46
 800806a:	700b      	strb	r3, [r1, #0]
 800806c:	d004      	beq.n	8008078 <__cvt+0x40>
 800806e:	2f45      	cmp	r7, #69	; 0x45
 8008070:	d100      	bne.n	8008074 <__cvt+0x3c>
 8008072:	3601      	adds	r6, #1
 8008074:	2102      	movs	r1, #2
 8008076:	e000      	b.n	800807a <__cvt+0x42>
 8008078:	2103      	movs	r1, #3
 800807a:	ab03      	add	r3, sp, #12
 800807c:	9301      	str	r3, [sp, #4]
 800807e:	ab02      	add	r3, sp, #8
 8008080:	9300      	str	r3, [sp, #0]
 8008082:	4632      	mov	r2, r6
 8008084:	4653      	mov	r3, sl
 8008086:	ec45 4b10 	vmov	d0, r4, r5
 800808a:	f000 fbad 	bl	80087e8 <_dtoa_r>
 800808e:	2f47      	cmp	r7, #71	; 0x47
 8008090:	4680      	mov	r8, r0
 8008092:	d102      	bne.n	800809a <__cvt+0x62>
 8008094:	f019 0f01 	tst.w	r9, #1
 8008098:	d026      	beq.n	80080e8 <__cvt+0xb0>
 800809a:	2f46      	cmp	r7, #70	; 0x46
 800809c:	eb08 0906 	add.w	r9, r8, r6
 80080a0:	d111      	bne.n	80080c6 <__cvt+0x8e>
 80080a2:	f898 3000 	ldrb.w	r3, [r8]
 80080a6:	2b30      	cmp	r3, #48	; 0x30
 80080a8:	d10a      	bne.n	80080c0 <__cvt+0x88>
 80080aa:	2200      	movs	r2, #0
 80080ac:	2300      	movs	r3, #0
 80080ae:	4620      	mov	r0, r4
 80080b0:	4629      	mov	r1, r5
 80080b2:	f7f8 fcb5 	bl	8000a20 <__aeabi_dcmpeq>
 80080b6:	b918      	cbnz	r0, 80080c0 <__cvt+0x88>
 80080b8:	f1c6 0601 	rsb	r6, r6, #1
 80080bc:	f8ca 6000 	str.w	r6, [sl]
 80080c0:	f8da 3000 	ldr.w	r3, [sl]
 80080c4:	4499      	add	r9, r3
 80080c6:	2200      	movs	r2, #0
 80080c8:	2300      	movs	r3, #0
 80080ca:	4620      	mov	r0, r4
 80080cc:	4629      	mov	r1, r5
 80080ce:	f7f8 fca7 	bl	8000a20 <__aeabi_dcmpeq>
 80080d2:	b938      	cbnz	r0, 80080e4 <__cvt+0xac>
 80080d4:	2230      	movs	r2, #48	; 0x30
 80080d6:	9b03      	ldr	r3, [sp, #12]
 80080d8:	454b      	cmp	r3, r9
 80080da:	d205      	bcs.n	80080e8 <__cvt+0xb0>
 80080dc:	1c59      	adds	r1, r3, #1
 80080de:	9103      	str	r1, [sp, #12]
 80080e0:	701a      	strb	r2, [r3, #0]
 80080e2:	e7f8      	b.n	80080d6 <__cvt+0x9e>
 80080e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80080e8:	9b03      	ldr	r3, [sp, #12]
 80080ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080ec:	eba3 0308 	sub.w	r3, r3, r8
 80080f0:	4640      	mov	r0, r8
 80080f2:	6013      	str	r3, [r2, #0]
 80080f4:	b004      	add	sp, #16
 80080f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080080fa <__exponent>:
 80080fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080fc:	2900      	cmp	r1, #0
 80080fe:	4604      	mov	r4, r0
 8008100:	bfba      	itte	lt
 8008102:	4249      	neglt	r1, r1
 8008104:	232d      	movlt	r3, #45	; 0x2d
 8008106:	232b      	movge	r3, #43	; 0x2b
 8008108:	2909      	cmp	r1, #9
 800810a:	f804 2b02 	strb.w	r2, [r4], #2
 800810e:	7043      	strb	r3, [r0, #1]
 8008110:	dd20      	ble.n	8008154 <__exponent+0x5a>
 8008112:	f10d 0307 	add.w	r3, sp, #7
 8008116:	461f      	mov	r7, r3
 8008118:	260a      	movs	r6, #10
 800811a:	fb91 f5f6 	sdiv	r5, r1, r6
 800811e:	fb06 1115 	mls	r1, r6, r5, r1
 8008122:	3130      	adds	r1, #48	; 0x30
 8008124:	2d09      	cmp	r5, #9
 8008126:	f803 1c01 	strb.w	r1, [r3, #-1]
 800812a:	f103 32ff 	add.w	r2, r3, #4294967295
 800812e:	4629      	mov	r1, r5
 8008130:	dc09      	bgt.n	8008146 <__exponent+0x4c>
 8008132:	3130      	adds	r1, #48	; 0x30
 8008134:	3b02      	subs	r3, #2
 8008136:	f802 1c01 	strb.w	r1, [r2, #-1]
 800813a:	42bb      	cmp	r3, r7
 800813c:	4622      	mov	r2, r4
 800813e:	d304      	bcc.n	800814a <__exponent+0x50>
 8008140:	1a10      	subs	r0, r2, r0
 8008142:	b003      	add	sp, #12
 8008144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008146:	4613      	mov	r3, r2
 8008148:	e7e7      	b.n	800811a <__exponent+0x20>
 800814a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800814e:	f804 2b01 	strb.w	r2, [r4], #1
 8008152:	e7f2      	b.n	800813a <__exponent+0x40>
 8008154:	2330      	movs	r3, #48	; 0x30
 8008156:	4419      	add	r1, r3
 8008158:	7083      	strb	r3, [r0, #2]
 800815a:	1d02      	adds	r2, r0, #4
 800815c:	70c1      	strb	r1, [r0, #3]
 800815e:	e7ef      	b.n	8008140 <__exponent+0x46>

08008160 <_printf_float>:
 8008160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008164:	b08d      	sub	sp, #52	; 0x34
 8008166:	460c      	mov	r4, r1
 8008168:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800816c:	4616      	mov	r6, r2
 800816e:	461f      	mov	r7, r3
 8008170:	4605      	mov	r5, r0
 8008172:	f001 f8f1 	bl	8009358 <_localeconv_r>
 8008176:	6803      	ldr	r3, [r0, #0]
 8008178:	9304      	str	r3, [sp, #16]
 800817a:	4618      	mov	r0, r3
 800817c:	f7f8 f824 	bl	80001c8 <strlen>
 8008180:	2300      	movs	r3, #0
 8008182:	930a      	str	r3, [sp, #40]	; 0x28
 8008184:	f8d8 3000 	ldr.w	r3, [r8]
 8008188:	9005      	str	r0, [sp, #20]
 800818a:	3307      	adds	r3, #7
 800818c:	f023 0307 	bic.w	r3, r3, #7
 8008190:	f103 0208 	add.w	r2, r3, #8
 8008194:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008198:	f8d4 b000 	ldr.w	fp, [r4]
 800819c:	f8c8 2000 	str.w	r2, [r8]
 80081a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80081a8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80081ac:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80081b0:	9307      	str	r3, [sp, #28]
 80081b2:	f8cd 8018 	str.w	r8, [sp, #24]
 80081b6:	f04f 32ff 	mov.w	r2, #4294967295
 80081ba:	4ba7      	ldr	r3, [pc, #668]	; (8008458 <_printf_float+0x2f8>)
 80081bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081c0:	f7f8 fc60 	bl	8000a84 <__aeabi_dcmpun>
 80081c4:	bb70      	cbnz	r0, 8008224 <_printf_float+0xc4>
 80081c6:	f04f 32ff 	mov.w	r2, #4294967295
 80081ca:	4ba3      	ldr	r3, [pc, #652]	; (8008458 <_printf_float+0x2f8>)
 80081cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081d0:	f7f8 fc3a 	bl	8000a48 <__aeabi_dcmple>
 80081d4:	bb30      	cbnz	r0, 8008224 <_printf_float+0xc4>
 80081d6:	2200      	movs	r2, #0
 80081d8:	2300      	movs	r3, #0
 80081da:	4640      	mov	r0, r8
 80081dc:	4649      	mov	r1, r9
 80081de:	f7f8 fc29 	bl	8000a34 <__aeabi_dcmplt>
 80081e2:	b110      	cbz	r0, 80081ea <_printf_float+0x8a>
 80081e4:	232d      	movs	r3, #45	; 0x2d
 80081e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081ea:	4a9c      	ldr	r2, [pc, #624]	; (800845c <_printf_float+0x2fc>)
 80081ec:	4b9c      	ldr	r3, [pc, #624]	; (8008460 <_printf_float+0x300>)
 80081ee:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80081f2:	bf8c      	ite	hi
 80081f4:	4690      	movhi	r8, r2
 80081f6:	4698      	movls	r8, r3
 80081f8:	2303      	movs	r3, #3
 80081fa:	f02b 0204 	bic.w	r2, fp, #4
 80081fe:	6123      	str	r3, [r4, #16]
 8008200:	6022      	str	r2, [r4, #0]
 8008202:	f04f 0900 	mov.w	r9, #0
 8008206:	9700      	str	r7, [sp, #0]
 8008208:	4633      	mov	r3, r6
 800820a:	aa0b      	add	r2, sp, #44	; 0x2c
 800820c:	4621      	mov	r1, r4
 800820e:	4628      	mov	r0, r5
 8008210:	f000 f9e6 	bl	80085e0 <_printf_common>
 8008214:	3001      	adds	r0, #1
 8008216:	f040 808d 	bne.w	8008334 <_printf_float+0x1d4>
 800821a:	f04f 30ff 	mov.w	r0, #4294967295
 800821e:	b00d      	add	sp, #52	; 0x34
 8008220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008224:	4642      	mov	r2, r8
 8008226:	464b      	mov	r3, r9
 8008228:	4640      	mov	r0, r8
 800822a:	4649      	mov	r1, r9
 800822c:	f7f8 fc2a 	bl	8000a84 <__aeabi_dcmpun>
 8008230:	b110      	cbz	r0, 8008238 <_printf_float+0xd8>
 8008232:	4a8c      	ldr	r2, [pc, #560]	; (8008464 <_printf_float+0x304>)
 8008234:	4b8c      	ldr	r3, [pc, #560]	; (8008468 <_printf_float+0x308>)
 8008236:	e7da      	b.n	80081ee <_printf_float+0x8e>
 8008238:	6861      	ldr	r1, [r4, #4]
 800823a:	1c4b      	adds	r3, r1, #1
 800823c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008240:	a80a      	add	r0, sp, #40	; 0x28
 8008242:	d13e      	bne.n	80082c2 <_printf_float+0x162>
 8008244:	2306      	movs	r3, #6
 8008246:	6063      	str	r3, [r4, #4]
 8008248:	2300      	movs	r3, #0
 800824a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800824e:	ab09      	add	r3, sp, #36	; 0x24
 8008250:	9300      	str	r3, [sp, #0]
 8008252:	ec49 8b10 	vmov	d0, r8, r9
 8008256:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800825a:	6022      	str	r2, [r4, #0]
 800825c:	f8cd a004 	str.w	sl, [sp, #4]
 8008260:	6861      	ldr	r1, [r4, #4]
 8008262:	4628      	mov	r0, r5
 8008264:	f7ff fee8 	bl	8008038 <__cvt>
 8008268:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800826c:	2b47      	cmp	r3, #71	; 0x47
 800826e:	4680      	mov	r8, r0
 8008270:	d109      	bne.n	8008286 <_printf_float+0x126>
 8008272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008274:	1cd8      	adds	r0, r3, #3
 8008276:	db02      	blt.n	800827e <_printf_float+0x11e>
 8008278:	6862      	ldr	r2, [r4, #4]
 800827a:	4293      	cmp	r3, r2
 800827c:	dd47      	ble.n	800830e <_printf_float+0x1ae>
 800827e:	f1aa 0a02 	sub.w	sl, sl, #2
 8008282:	fa5f fa8a 	uxtb.w	sl, sl
 8008286:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800828a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800828c:	d824      	bhi.n	80082d8 <_printf_float+0x178>
 800828e:	3901      	subs	r1, #1
 8008290:	4652      	mov	r2, sl
 8008292:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008296:	9109      	str	r1, [sp, #36]	; 0x24
 8008298:	f7ff ff2f 	bl	80080fa <__exponent>
 800829c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800829e:	1813      	adds	r3, r2, r0
 80082a0:	2a01      	cmp	r2, #1
 80082a2:	4681      	mov	r9, r0
 80082a4:	6123      	str	r3, [r4, #16]
 80082a6:	dc02      	bgt.n	80082ae <_printf_float+0x14e>
 80082a8:	6822      	ldr	r2, [r4, #0]
 80082aa:	07d1      	lsls	r1, r2, #31
 80082ac:	d501      	bpl.n	80082b2 <_printf_float+0x152>
 80082ae:	3301      	adds	r3, #1
 80082b0:	6123      	str	r3, [r4, #16]
 80082b2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d0a5      	beq.n	8008206 <_printf_float+0xa6>
 80082ba:	232d      	movs	r3, #45	; 0x2d
 80082bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082c0:	e7a1      	b.n	8008206 <_printf_float+0xa6>
 80082c2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80082c6:	f000 8177 	beq.w	80085b8 <_printf_float+0x458>
 80082ca:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80082ce:	d1bb      	bne.n	8008248 <_printf_float+0xe8>
 80082d0:	2900      	cmp	r1, #0
 80082d2:	d1b9      	bne.n	8008248 <_printf_float+0xe8>
 80082d4:	2301      	movs	r3, #1
 80082d6:	e7b6      	b.n	8008246 <_printf_float+0xe6>
 80082d8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80082dc:	d119      	bne.n	8008312 <_printf_float+0x1b2>
 80082de:	2900      	cmp	r1, #0
 80082e0:	6863      	ldr	r3, [r4, #4]
 80082e2:	dd0c      	ble.n	80082fe <_printf_float+0x19e>
 80082e4:	6121      	str	r1, [r4, #16]
 80082e6:	b913      	cbnz	r3, 80082ee <_printf_float+0x18e>
 80082e8:	6822      	ldr	r2, [r4, #0]
 80082ea:	07d2      	lsls	r2, r2, #31
 80082ec:	d502      	bpl.n	80082f4 <_printf_float+0x194>
 80082ee:	3301      	adds	r3, #1
 80082f0:	440b      	add	r3, r1
 80082f2:	6123      	str	r3, [r4, #16]
 80082f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f6:	65a3      	str	r3, [r4, #88]	; 0x58
 80082f8:	f04f 0900 	mov.w	r9, #0
 80082fc:	e7d9      	b.n	80082b2 <_printf_float+0x152>
 80082fe:	b913      	cbnz	r3, 8008306 <_printf_float+0x1a6>
 8008300:	6822      	ldr	r2, [r4, #0]
 8008302:	07d0      	lsls	r0, r2, #31
 8008304:	d501      	bpl.n	800830a <_printf_float+0x1aa>
 8008306:	3302      	adds	r3, #2
 8008308:	e7f3      	b.n	80082f2 <_printf_float+0x192>
 800830a:	2301      	movs	r3, #1
 800830c:	e7f1      	b.n	80082f2 <_printf_float+0x192>
 800830e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008312:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008316:	4293      	cmp	r3, r2
 8008318:	db05      	blt.n	8008326 <_printf_float+0x1c6>
 800831a:	6822      	ldr	r2, [r4, #0]
 800831c:	6123      	str	r3, [r4, #16]
 800831e:	07d1      	lsls	r1, r2, #31
 8008320:	d5e8      	bpl.n	80082f4 <_printf_float+0x194>
 8008322:	3301      	adds	r3, #1
 8008324:	e7e5      	b.n	80082f2 <_printf_float+0x192>
 8008326:	2b00      	cmp	r3, #0
 8008328:	bfd4      	ite	le
 800832a:	f1c3 0302 	rsble	r3, r3, #2
 800832e:	2301      	movgt	r3, #1
 8008330:	4413      	add	r3, r2
 8008332:	e7de      	b.n	80082f2 <_printf_float+0x192>
 8008334:	6823      	ldr	r3, [r4, #0]
 8008336:	055a      	lsls	r2, r3, #21
 8008338:	d407      	bmi.n	800834a <_printf_float+0x1ea>
 800833a:	6923      	ldr	r3, [r4, #16]
 800833c:	4642      	mov	r2, r8
 800833e:	4631      	mov	r1, r6
 8008340:	4628      	mov	r0, r5
 8008342:	47b8      	blx	r7
 8008344:	3001      	adds	r0, #1
 8008346:	d12b      	bne.n	80083a0 <_printf_float+0x240>
 8008348:	e767      	b.n	800821a <_printf_float+0xba>
 800834a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800834e:	f240 80dc 	bls.w	800850a <_printf_float+0x3aa>
 8008352:	2200      	movs	r2, #0
 8008354:	2300      	movs	r3, #0
 8008356:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800835a:	f7f8 fb61 	bl	8000a20 <__aeabi_dcmpeq>
 800835e:	2800      	cmp	r0, #0
 8008360:	d033      	beq.n	80083ca <_printf_float+0x26a>
 8008362:	2301      	movs	r3, #1
 8008364:	4a41      	ldr	r2, [pc, #260]	; (800846c <_printf_float+0x30c>)
 8008366:	4631      	mov	r1, r6
 8008368:	4628      	mov	r0, r5
 800836a:	47b8      	blx	r7
 800836c:	3001      	adds	r0, #1
 800836e:	f43f af54 	beq.w	800821a <_printf_float+0xba>
 8008372:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008376:	429a      	cmp	r2, r3
 8008378:	db02      	blt.n	8008380 <_printf_float+0x220>
 800837a:	6823      	ldr	r3, [r4, #0]
 800837c:	07d8      	lsls	r0, r3, #31
 800837e:	d50f      	bpl.n	80083a0 <_printf_float+0x240>
 8008380:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008384:	4631      	mov	r1, r6
 8008386:	4628      	mov	r0, r5
 8008388:	47b8      	blx	r7
 800838a:	3001      	adds	r0, #1
 800838c:	f43f af45 	beq.w	800821a <_printf_float+0xba>
 8008390:	f04f 0800 	mov.w	r8, #0
 8008394:	f104 091a 	add.w	r9, r4, #26
 8008398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800839a:	3b01      	subs	r3, #1
 800839c:	4543      	cmp	r3, r8
 800839e:	dc09      	bgt.n	80083b4 <_printf_float+0x254>
 80083a0:	6823      	ldr	r3, [r4, #0]
 80083a2:	079b      	lsls	r3, r3, #30
 80083a4:	f100 8103 	bmi.w	80085ae <_printf_float+0x44e>
 80083a8:	68e0      	ldr	r0, [r4, #12]
 80083aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083ac:	4298      	cmp	r0, r3
 80083ae:	bfb8      	it	lt
 80083b0:	4618      	movlt	r0, r3
 80083b2:	e734      	b.n	800821e <_printf_float+0xbe>
 80083b4:	2301      	movs	r3, #1
 80083b6:	464a      	mov	r2, r9
 80083b8:	4631      	mov	r1, r6
 80083ba:	4628      	mov	r0, r5
 80083bc:	47b8      	blx	r7
 80083be:	3001      	adds	r0, #1
 80083c0:	f43f af2b 	beq.w	800821a <_printf_float+0xba>
 80083c4:	f108 0801 	add.w	r8, r8, #1
 80083c8:	e7e6      	b.n	8008398 <_printf_float+0x238>
 80083ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	dc2b      	bgt.n	8008428 <_printf_float+0x2c8>
 80083d0:	2301      	movs	r3, #1
 80083d2:	4a26      	ldr	r2, [pc, #152]	; (800846c <_printf_float+0x30c>)
 80083d4:	4631      	mov	r1, r6
 80083d6:	4628      	mov	r0, r5
 80083d8:	47b8      	blx	r7
 80083da:	3001      	adds	r0, #1
 80083dc:	f43f af1d 	beq.w	800821a <_printf_float+0xba>
 80083e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083e2:	b923      	cbnz	r3, 80083ee <_printf_float+0x28e>
 80083e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083e6:	b913      	cbnz	r3, 80083ee <_printf_float+0x28e>
 80083e8:	6823      	ldr	r3, [r4, #0]
 80083ea:	07d9      	lsls	r1, r3, #31
 80083ec:	d5d8      	bpl.n	80083a0 <_printf_float+0x240>
 80083ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083f2:	4631      	mov	r1, r6
 80083f4:	4628      	mov	r0, r5
 80083f6:	47b8      	blx	r7
 80083f8:	3001      	adds	r0, #1
 80083fa:	f43f af0e 	beq.w	800821a <_printf_float+0xba>
 80083fe:	f04f 0900 	mov.w	r9, #0
 8008402:	f104 0a1a 	add.w	sl, r4, #26
 8008406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008408:	425b      	negs	r3, r3
 800840a:	454b      	cmp	r3, r9
 800840c:	dc01      	bgt.n	8008412 <_printf_float+0x2b2>
 800840e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008410:	e794      	b.n	800833c <_printf_float+0x1dc>
 8008412:	2301      	movs	r3, #1
 8008414:	4652      	mov	r2, sl
 8008416:	4631      	mov	r1, r6
 8008418:	4628      	mov	r0, r5
 800841a:	47b8      	blx	r7
 800841c:	3001      	adds	r0, #1
 800841e:	f43f aefc 	beq.w	800821a <_printf_float+0xba>
 8008422:	f109 0901 	add.w	r9, r9, #1
 8008426:	e7ee      	b.n	8008406 <_printf_float+0x2a6>
 8008428:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800842a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800842c:	429a      	cmp	r2, r3
 800842e:	bfa8      	it	ge
 8008430:	461a      	movge	r2, r3
 8008432:	2a00      	cmp	r2, #0
 8008434:	4691      	mov	r9, r2
 8008436:	dd07      	ble.n	8008448 <_printf_float+0x2e8>
 8008438:	4613      	mov	r3, r2
 800843a:	4631      	mov	r1, r6
 800843c:	4642      	mov	r2, r8
 800843e:	4628      	mov	r0, r5
 8008440:	47b8      	blx	r7
 8008442:	3001      	adds	r0, #1
 8008444:	f43f aee9 	beq.w	800821a <_printf_float+0xba>
 8008448:	f104 031a 	add.w	r3, r4, #26
 800844c:	f04f 0b00 	mov.w	fp, #0
 8008450:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008454:	9306      	str	r3, [sp, #24]
 8008456:	e015      	b.n	8008484 <_printf_float+0x324>
 8008458:	7fefffff 	.word	0x7fefffff
 800845c:	08009b0c 	.word	0x08009b0c
 8008460:	08009b08 	.word	0x08009b08
 8008464:	08009b14 	.word	0x08009b14
 8008468:	08009b10 	.word	0x08009b10
 800846c:	08009b18 	.word	0x08009b18
 8008470:	2301      	movs	r3, #1
 8008472:	9a06      	ldr	r2, [sp, #24]
 8008474:	4631      	mov	r1, r6
 8008476:	4628      	mov	r0, r5
 8008478:	47b8      	blx	r7
 800847a:	3001      	adds	r0, #1
 800847c:	f43f aecd 	beq.w	800821a <_printf_float+0xba>
 8008480:	f10b 0b01 	add.w	fp, fp, #1
 8008484:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008488:	ebaa 0309 	sub.w	r3, sl, r9
 800848c:	455b      	cmp	r3, fp
 800848e:	dcef      	bgt.n	8008470 <_printf_float+0x310>
 8008490:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008494:	429a      	cmp	r2, r3
 8008496:	44d0      	add	r8, sl
 8008498:	db15      	blt.n	80084c6 <_printf_float+0x366>
 800849a:	6823      	ldr	r3, [r4, #0]
 800849c:	07da      	lsls	r2, r3, #31
 800849e:	d412      	bmi.n	80084c6 <_printf_float+0x366>
 80084a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084a4:	eba3 020a 	sub.w	r2, r3, sl
 80084a8:	eba3 0a01 	sub.w	sl, r3, r1
 80084ac:	4592      	cmp	sl, r2
 80084ae:	bfa8      	it	ge
 80084b0:	4692      	movge	sl, r2
 80084b2:	f1ba 0f00 	cmp.w	sl, #0
 80084b6:	dc0e      	bgt.n	80084d6 <_printf_float+0x376>
 80084b8:	f04f 0800 	mov.w	r8, #0
 80084bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084c0:	f104 091a 	add.w	r9, r4, #26
 80084c4:	e019      	b.n	80084fa <_printf_float+0x39a>
 80084c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084ca:	4631      	mov	r1, r6
 80084cc:	4628      	mov	r0, r5
 80084ce:	47b8      	blx	r7
 80084d0:	3001      	adds	r0, #1
 80084d2:	d1e5      	bne.n	80084a0 <_printf_float+0x340>
 80084d4:	e6a1      	b.n	800821a <_printf_float+0xba>
 80084d6:	4653      	mov	r3, sl
 80084d8:	4642      	mov	r2, r8
 80084da:	4631      	mov	r1, r6
 80084dc:	4628      	mov	r0, r5
 80084de:	47b8      	blx	r7
 80084e0:	3001      	adds	r0, #1
 80084e2:	d1e9      	bne.n	80084b8 <_printf_float+0x358>
 80084e4:	e699      	b.n	800821a <_printf_float+0xba>
 80084e6:	2301      	movs	r3, #1
 80084e8:	464a      	mov	r2, r9
 80084ea:	4631      	mov	r1, r6
 80084ec:	4628      	mov	r0, r5
 80084ee:	47b8      	blx	r7
 80084f0:	3001      	adds	r0, #1
 80084f2:	f43f ae92 	beq.w	800821a <_printf_float+0xba>
 80084f6:	f108 0801 	add.w	r8, r8, #1
 80084fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084fe:	1a9b      	subs	r3, r3, r2
 8008500:	eba3 030a 	sub.w	r3, r3, sl
 8008504:	4543      	cmp	r3, r8
 8008506:	dcee      	bgt.n	80084e6 <_printf_float+0x386>
 8008508:	e74a      	b.n	80083a0 <_printf_float+0x240>
 800850a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800850c:	2a01      	cmp	r2, #1
 800850e:	dc01      	bgt.n	8008514 <_printf_float+0x3b4>
 8008510:	07db      	lsls	r3, r3, #31
 8008512:	d53a      	bpl.n	800858a <_printf_float+0x42a>
 8008514:	2301      	movs	r3, #1
 8008516:	4642      	mov	r2, r8
 8008518:	4631      	mov	r1, r6
 800851a:	4628      	mov	r0, r5
 800851c:	47b8      	blx	r7
 800851e:	3001      	adds	r0, #1
 8008520:	f43f ae7b 	beq.w	800821a <_printf_float+0xba>
 8008524:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008528:	4631      	mov	r1, r6
 800852a:	4628      	mov	r0, r5
 800852c:	47b8      	blx	r7
 800852e:	3001      	adds	r0, #1
 8008530:	f108 0801 	add.w	r8, r8, #1
 8008534:	f43f ae71 	beq.w	800821a <_printf_float+0xba>
 8008538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800853a:	2200      	movs	r2, #0
 800853c:	f103 3aff 	add.w	sl, r3, #4294967295
 8008540:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008544:	2300      	movs	r3, #0
 8008546:	f7f8 fa6b 	bl	8000a20 <__aeabi_dcmpeq>
 800854a:	b9c8      	cbnz	r0, 8008580 <_printf_float+0x420>
 800854c:	4653      	mov	r3, sl
 800854e:	4642      	mov	r2, r8
 8008550:	4631      	mov	r1, r6
 8008552:	4628      	mov	r0, r5
 8008554:	47b8      	blx	r7
 8008556:	3001      	adds	r0, #1
 8008558:	d10e      	bne.n	8008578 <_printf_float+0x418>
 800855a:	e65e      	b.n	800821a <_printf_float+0xba>
 800855c:	2301      	movs	r3, #1
 800855e:	4652      	mov	r2, sl
 8008560:	4631      	mov	r1, r6
 8008562:	4628      	mov	r0, r5
 8008564:	47b8      	blx	r7
 8008566:	3001      	adds	r0, #1
 8008568:	f43f ae57 	beq.w	800821a <_printf_float+0xba>
 800856c:	f108 0801 	add.w	r8, r8, #1
 8008570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008572:	3b01      	subs	r3, #1
 8008574:	4543      	cmp	r3, r8
 8008576:	dcf1      	bgt.n	800855c <_printf_float+0x3fc>
 8008578:	464b      	mov	r3, r9
 800857a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800857e:	e6de      	b.n	800833e <_printf_float+0x1de>
 8008580:	f04f 0800 	mov.w	r8, #0
 8008584:	f104 0a1a 	add.w	sl, r4, #26
 8008588:	e7f2      	b.n	8008570 <_printf_float+0x410>
 800858a:	2301      	movs	r3, #1
 800858c:	e7df      	b.n	800854e <_printf_float+0x3ee>
 800858e:	2301      	movs	r3, #1
 8008590:	464a      	mov	r2, r9
 8008592:	4631      	mov	r1, r6
 8008594:	4628      	mov	r0, r5
 8008596:	47b8      	blx	r7
 8008598:	3001      	adds	r0, #1
 800859a:	f43f ae3e 	beq.w	800821a <_printf_float+0xba>
 800859e:	f108 0801 	add.w	r8, r8, #1
 80085a2:	68e3      	ldr	r3, [r4, #12]
 80085a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80085a6:	1a9b      	subs	r3, r3, r2
 80085a8:	4543      	cmp	r3, r8
 80085aa:	dcf0      	bgt.n	800858e <_printf_float+0x42e>
 80085ac:	e6fc      	b.n	80083a8 <_printf_float+0x248>
 80085ae:	f04f 0800 	mov.w	r8, #0
 80085b2:	f104 0919 	add.w	r9, r4, #25
 80085b6:	e7f4      	b.n	80085a2 <_printf_float+0x442>
 80085b8:	2900      	cmp	r1, #0
 80085ba:	f43f ae8b 	beq.w	80082d4 <_printf_float+0x174>
 80085be:	2300      	movs	r3, #0
 80085c0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80085c4:	ab09      	add	r3, sp, #36	; 0x24
 80085c6:	9300      	str	r3, [sp, #0]
 80085c8:	ec49 8b10 	vmov	d0, r8, r9
 80085cc:	6022      	str	r2, [r4, #0]
 80085ce:	f8cd a004 	str.w	sl, [sp, #4]
 80085d2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80085d6:	4628      	mov	r0, r5
 80085d8:	f7ff fd2e 	bl	8008038 <__cvt>
 80085dc:	4680      	mov	r8, r0
 80085de:	e648      	b.n	8008272 <_printf_float+0x112>

080085e0 <_printf_common>:
 80085e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085e4:	4691      	mov	r9, r2
 80085e6:	461f      	mov	r7, r3
 80085e8:	688a      	ldr	r2, [r1, #8]
 80085ea:	690b      	ldr	r3, [r1, #16]
 80085ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085f0:	4293      	cmp	r3, r2
 80085f2:	bfb8      	it	lt
 80085f4:	4613      	movlt	r3, r2
 80085f6:	f8c9 3000 	str.w	r3, [r9]
 80085fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085fe:	4606      	mov	r6, r0
 8008600:	460c      	mov	r4, r1
 8008602:	b112      	cbz	r2, 800860a <_printf_common+0x2a>
 8008604:	3301      	adds	r3, #1
 8008606:	f8c9 3000 	str.w	r3, [r9]
 800860a:	6823      	ldr	r3, [r4, #0]
 800860c:	0699      	lsls	r1, r3, #26
 800860e:	bf42      	ittt	mi
 8008610:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008614:	3302      	addmi	r3, #2
 8008616:	f8c9 3000 	strmi.w	r3, [r9]
 800861a:	6825      	ldr	r5, [r4, #0]
 800861c:	f015 0506 	ands.w	r5, r5, #6
 8008620:	d107      	bne.n	8008632 <_printf_common+0x52>
 8008622:	f104 0a19 	add.w	sl, r4, #25
 8008626:	68e3      	ldr	r3, [r4, #12]
 8008628:	f8d9 2000 	ldr.w	r2, [r9]
 800862c:	1a9b      	subs	r3, r3, r2
 800862e:	42ab      	cmp	r3, r5
 8008630:	dc28      	bgt.n	8008684 <_printf_common+0xa4>
 8008632:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008636:	6822      	ldr	r2, [r4, #0]
 8008638:	3300      	adds	r3, #0
 800863a:	bf18      	it	ne
 800863c:	2301      	movne	r3, #1
 800863e:	0692      	lsls	r2, r2, #26
 8008640:	d42d      	bmi.n	800869e <_printf_common+0xbe>
 8008642:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008646:	4639      	mov	r1, r7
 8008648:	4630      	mov	r0, r6
 800864a:	47c0      	blx	r8
 800864c:	3001      	adds	r0, #1
 800864e:	d020      	beq.n	8008692 <_printf_common+0xb2>
 8008650:	6823      	ldr	r3, [r4, #0]
 8008652:	68e5      	ldr	r5, [r4, #12]
 8008654:	f8d9 2000 	ldr.w	r2, [r9]
 8008658:	f003 0306 	and.w	r3, r3, #6
 800865c:	2b04      	cmp	r3, #4
 800865e:	bf08      	it	eq
 8008660:	1aad      	subeq	r5, r5, r2
 8008662:	68a3      	ldr	r3, [r4, #8]
 8008664:	6922      	ldr	r2, [r4, #16]
 8008666:	bf0c      	ite	eq
 8008668:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800866c:	2500      	movne	r5, #0
 800866e:	4293      	cmp	r3, r2
 8008670:	bfc4      	itt	gt
 8008672:	1a9b      	subgt	r3, r3, r2
 8008674:	18ed      	addgt	r5, r5, r3
 8008676:	f04f 0900 	mov.w	r9, #0
 800867a:	341a      	adds	r4, #26
 800867c:	454d      	cmp	r5, r9
 800867e:	d11a      	bne.n	80086b6 <_printf_common+0xd6>
 8008680:	2000      	movs	r0, #0
 8008682:	e008      	b.n	8008696 <_printf_common+0xb6>
 8008684:	2301      	movs	r3, #1
 8008686:	4652      	mov	r2, sl
 8008688:	4639      	mov	r1, r7
 800868a:	4630      	mov	r0, r6
 800868c:	47c0      	blx	r8
 800868e:	3001      	adds	r0, #1
 8008690:	d103      	bne.n	800869a <_printf_common+0xba>
 8008692:	f04f 30ff 	mov.w	r0, #4294967295
 8008696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800869a:	3501      	adds	r5, #1
 800869c:	e7c3      	b.n	8008626 <_printf_common+0x46>
 800869e:	18e1      	adds	r1, r4, r3
 80086a0:	1c5a      	adds	r2, r3, #1
 80086a2:	2030      	movs	r0, #48	; 0x30
 80086a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086a8:	4422      	add	r2, r4
 80086aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086b2:	3302      	adds	r3, #2
 80086b4:	e7c5      	b.n	8008642 <_printf_common+0x62>
 80086b6:	2301      	movs	r3, #1
 80086b8:	4622      	mov	r2, r4
 80086ba:	4639      	mov	r1, r7
 80086bc:	4630      	mov	r0, r6
 80086be:	47c0      	blx	r8
 80086c0:	3001      	adds	r0, #1
 80086c2:	d0e6      	beq.n	8008692 <_printf_common+0xb2>
 80086c4:	f109 0901 	add.w	r9, r9, #1
 80086c8:	e7d8      	b.n	800867c <_printf_common+0x9c>

080086ca <quorem>:
 80086ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ce:	6903      	ldr	r3, [r0, #16]
 80086d0:	690c      	ldr	r4, [r1, #16]
 80086d2:	42a3      	cmp	r3, r4
 80086d4:	4680      	mov	r8, r0
 80086d6:	f2c0 8082 	blt.w	80087de <quorem+0x114>
 80086da:	3c01      	subs	r4, #1
 80086dc:	f101 0714 	add.w	r7, r1, #20
 80086e0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80086e4:	f100 0614 	add.w	r6, r0, #20
 80086e8:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80086ec:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80086f0:	eb06 030c 	add.w	r3, r6, ip
 80086f4:	3501      	adds	r5, #1
 80086f6:	eb07 090c 	add.w	r9, r7, ip
 80086fa:	9301      	str	r3, [sp, #4]
 80086fc:	fbb0 f5f5 	udiv	r5, r0, r5
 8008700:	b395      	cbz	r5, 8008768 <quorem+0x9e>
 8008702:	f04f 0a00 	mov.w	sl, #0
 8008706:	4638      	mov	r0, r7
 8008708:	46b6      	mov	lr, r6
 800870a:	46d3      	mov	fp, sl
 800870c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008710:	b293      	uxth	r3, r2
 8008712:	fb05 a303 	mla	r3, r5, r3, sl
 8008716:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800871a:	b29b      	uxth	r3, r3
 800871c:	ebab 0303 	sub.w	r3, fp, r3
 8008720:	0c12      	lsrs	r2, r2, #16
 8008722:	f8de b000 	ldr.w	fp, [lr]
 8008726:	fb05 a202 	mla	r2, r5, r2, sl
 800872a:	fa13 f38b 	uxtah	r3, r3, fp
 800872e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008732:	fa1f fb82 	uxth.w	fp, r2
 8008736:	f8de 2000 	ldr.w	r2, [lr]
 800873a:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800873e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008742:	b29b      	uxth	r3, r3
 8008744:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008748:	4581      	cmp	r9, r0
 800874a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800874e:	f84e 3b04 	str.w	r3, [lr], #4
 8008752:	d2db      	bcs.n	800870c <quorem+0x42>
 8008754:	f856 300c 	ldr.w	r3, [r6, ip]
 8008758:	b933      	cbnz	r3, 8008768 <quorem+0x9e>
 800875a:	9b01      	ldr	r3, [sp, #4]
 800875c:	3b04      	subs	r3, #4
 800875e:	429e      	cmp	r6, r3
 8008760:	461a      	mov	r2, r3
 8008762:	d330      	bcc.n	80087c6 <quorem+0xfc>
 8008764:	f8c8 4010 	str.w	r4, [r8, #16]
 8008768:	4640      	mov	r0, r8
 800876a:	f001 f82b 	bl	80097c4 <__mcmp>
 800876e:	2800      	cmp	r0, #0
 8008770:	db25      	blt.n	80087be <quorem+0xf4>
 8008772:	3501      	adds	r5, #1
 8008774:	4630      	mov	r0, r6
 8008776:	f04f 0c00 	mov.w	ip, #0
 800877a:	f857 2b04 	ldr.w	r2, [r7], #4
 800877e:	f8d0 e000 	ldr.w	lr, [r0]
 8008782:	b293      	uxth	r3, r2
 8008784:	ebac 0303 	sub.w	r3, ip, r3
 8008788:	0c12      	lsrs	r2, r2, #16
 800878a:	fa13 f38e 	uxtah	r3, r3, lr
 800878e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008792:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008796:	b29b      	uxth	r3, r3
 8008798:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800879c:	45b9      	cmp	r9, r7
 800879e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80087a2:	f840 3b04 	str.w	r3, [r0], #4
 80087a6:	d2e8      	bcs.n	800877a <quorem+0xb0>
 80087a8:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80087ac:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80087b0:	b92a      	cbnz	r2, 80087be <quorem+0xf4>
 80087b2:	3b04      	subs	r3, #4
 80087b4:	429e      	cmp	r6, r3
 80087b6:	461a      	mov	r2, r3
 80087b8:	d30b      	bcc.n	80087d2 <quorem+0x108>
 80087ba:	f8c8 4010 	str.w	r4, [r8, #16]
 80087be:	4628      	mov	r0, r5
 80087c0:	b003      	add	sp, #12
 80087c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c6:	6812      	ldr	r2, [r2, #0]
 80087c8:	3b04      	subs	r3, #4
 80087ca:	2a00      	cmp	r2, #0
 80087cc:	d1ca      	bne.n	8008764 <quorem+0x9a>
 80087ce:	3c01      	subs	r4, #1
 80087d0:	e7c5      	b.n	800875e <quorem+0x94>
 80087d2:	6812      	ldr	r2, [r2, #0]
 80087d4:	3b04      	subs	r3, #4
 80087d6:	2a00      	cmp	r2, #0
 80087d8:	d1ef      	bne.n	80087ba <quorem+0xf0>
 80087da:	3c01      	subs	r4, #1
 80087dc:	e7ea      	b.n	80087b4 <quorem+0xea>
 80087de:	2000      	movs	r0, #0
 80087e0:	e7ee      	b.n	80087c0 <quorem+0xf6>
 80087e2:	0000      	movs	r0, r0
 80087e4:	0000      	movs	r0, r0
	...

080087e8 <_dtoa_r>:
 80087e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ec:	ec57 6b10 	vmov	r6, r7, d0
 80087f0:	b097      	sub	sp, #92	; 0x5c
 80087f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80087f4:	9106      	str	r1, [sp, #24]
 80087f6:	4604      	mov	r4, r0
 80087f8:	920b      	str	r2, [sp, #44]	; 0x2c
 80087fa:	9312      	str	r3, [sp, #72]	; 0x48
 80087fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008800:	e9cd 6700 	strd	r6, r7, [sp]
 8008804:	b93d      	cbnz	r5, 8008816 <_dtoa_r+0x2e>
 8008806:	2010      	movs	r0, #16
 8008808:	f000 fdb4 	bl	8009374 <malloc>
 800880c:	6260      	str	r0, [r4, #36]	; 0x24
 800880e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008812:	6005      	str	r5, [r0, #0]
 8008814:	60c5      	str	r5, [r0, #12]
 8008816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008818:	6819      	ldr	r1, [r3, #0]
 800881a:	b151      	cbz	r1, 8008832 <_dtoa_r+0x4a>
 800881c:	685a      	ldr	r2, [r3, #4]
 800881e:	604a      	str	r2, [r1, #4]
 8008820:	2301      	movs	r3, #1
 8008822:	4093      	lsls	r3, r2
 8008824:	608b      	str	r3, [r1, #8]
 8008826:	4620      	mov	r0, r4
 8008828:	f000 fdeb 	bl	8009402 <_Bfree>
 800882c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800882e:	2200      	movs	r2, #0
 8008830:	601a      	str	r2, [r3, #0]
 8008832:	1e3b      	subs	r3, r7, #0
 8008834:	bfbb      	ittet	lt
 8008836:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800883a:	9301      	strlt	r3, [sp, #4]
 800883c:	2300      	movge	r3, #0
 800883e:	2201      	movlt	r2, #1
 8008840:	bfac      	ite	ge
 8008842:	f8c8 3000 	strge.w	r3, [r8]
 8008846:	f8c8 2000 	strlt.w	r2, [r8]
 800884a:	4baf      	ldr	r3, [pc, #700]	; (8008b08 <_dtoa_r+0x320>)
 800884c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008850:	ea33 0308 	bics.w	r3, r3, r8
 8008854:	d114      	bne.n	8008880 <_dtoa_r+0x98>
 8008856:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008858:	f242 730f 	movw	r3, #9999	; 0x270f
 800885c:	6013      	str	r3, [r2, #0]
 800885e:	9b00      	ldr	r3, [sp, #0]
 8008860:	b923      	cbnz	r3, 800886c <_dtoa_r+0x84>
 8008862:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008866:	2800      	cmp	r0, #0
 8008868:	f000 8542 	beq.w	80092f0 <_dtoa_r+0xb08>
 800886c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800886e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008b1c <_dtoa_r+0x334>
 8008872:	2b00      	cmp	r3, #0
 8008874:	f000 8544 	beq.w	8009300 <_dtoa_r+0xb18>
 8008878:	f10b 0303 	add.w	r3, fp, #3
 800887c:	f000 bd3e 	b.w	80092fc <_dtoa_r+0xb14>
 8008880:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008884:	2200      	movs	r2, #0
 8008886:	2300      	movs	r3, #0
 8008888:	4630      	mov	r0, r6
 800888a:	4639      	mov	r1, r7
 800888c:	f7f8 f8c8 	bl	8000a20 <__aeabi_dcmpeq>
 8008890:	4681      	mov	r9, r0
 8008892:	b168      	cbz	r0, 80088b0 <_dtoa_r+0xc8>
 8008894:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008896:	2301      	movs	r3, #1
 8008898:	6013      	str	r3, [r2, #0]
 800889a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800889c:	2b00      	cmp	r3, #0
 800889e:	f000 8524 	beq.w	80092ea <_dtoa_r+0xb02>
 80088a2:	4b9a      	ldr	r3, [pc, #616]	; (8008b0c <_dtoa_r+0x324>)
 80088a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80088a6:	f103 3bff 	add.w	fp, r3, #4294967295
 80088aa:	6013      	str	r3, [r2, #0]
 80088ac:	f000 bd28 	b.w	8009300 <_dtoa_r+0xb18>
 80088b0:	aa14      	add	r2, sp, #80	; 0x50
 80088b2:	a915      	add	r1, sp, #84	; 0x54
 80088b4:	ec47 6b10 	vmov	d0, r6, r7
 80088b8:	4620      	mov	r0, r4
 80088ba:	f000 fffa 	bl	80098b2 <__d2b>
 80088be:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80088c2:	9004      	str	r0, [sp, #16]
 80088c4:	2d00      	cmp	r5, #0
 80088c6:	d07c      	beq.n	80089c2 <_dtoa_r+0x1da>
 80088c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80088cc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80088d0:	46b2      	mov	sl, r6
 80088d2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80088d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80088da:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80088de:	2200      	movs	r2, #0
 80088e0:	4b8b      	ldr	r3, [pc, #556]	; (8008b10 <_dtoa_r+0x328>)
 80088e2:	4650      	mov	r0, sl
 80088e4:	4659      	mov	r1, fp
 80088e6:	f7f7 fc7b 	bl	80001e0 <__aeabi_dsub>
 80088ea:	a381      	add	r3, pc, #516	; (adr r3, 8008af0 <_dtoa_r+0x308>)
 80088ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f0:	f7f7 fe2e 	bl	8000550 <__aeabi_dmul>
 80088f4:	a380      	add	r3, pc, #512	; (adr r3, 8008af8 <_dtoa_r+0x310>)
 80088f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fa:	f7f7 fc73 	bl	80001e4 <__adddf3>
 80088fe:	4606      	mov	r6, r0
 8008900:	4628      	mov	r0, r5
 8008902:	460f      	mov	r7, r1
 8008904:	f7f7 fdba 	bl	800047c <__aeabi_i2d>
 8008908:	a37d      	add	r3, pc, #500	; (adr r3, 8008b00 <_dtoa_r+0x318>)
 800890a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890e:	f7f7 fe1f 	bl	8000550 <__aeabi_dmul>
 8008912:	4602      	mov	r2, r0
 8008914:	460b      	mov	r3, r1
 8008916:	4630      	mov	r0, r6
 8008918:	4639      	mov	r1, r7
 800891a:	f7f7 fc63 	bl	80001e4 <__adddf3>
 800891e:	4606      	mov	r6, r0
 8008920:	460f      	mov	r7, r1
 8008922:	f7f8 f8c5 	bl	8000ab0 <__aeabi_d2iz>
 8008926:	2200      	movs	r2, #0
 8008928:	4682      	mov	sl, r0
 800892a:	2300      	movs	r3, #0
 800892c:	4630      	mov	r0, r6
 800892e:	4639      	mov	r1, r7
 8008930:	f7f8 f880 	bl	8000a34 <__aeabi_dcmplt>
 8008934:	b148      	cbz	r0, 800894a <_dtoa_r+0x162>
 8008936:	4650      	mov	r0, sl
 8008938:	f7f7 fda0 	bl	800047c <__aeabi_i2d>
 800893c:	4632      	mov	r2, r6
 800893e:	463b      	mov	r3, r7
 8008940:	f7f8 f86e 	bl	8000a20 <__aeabi_dcmpeq>
 8008944:	b908      	cbnz	r0, 800894a <_dtoa_r+0x162>
 8008946:	f10a 3aff 	add.w	sl, sl, #4294967295
 800894a:	f1ba 0f16 	cmp.w	sl, #22
 800894e:	d859      	bhi.n	8008a04 <_dtoa_r+0x21c>
 8008950:	4970      	ldr	r1, [pc, #448]	; (8008b14 <_dtoa_r+0x32c>)
 8008952:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008956:	e9dd 2300 	ldrd	r2, r3, [sp]
 800895a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800895e:	f7f8 f887 	bl	8000a70 <__aeabi_dcmpgt>
 8008962:	2800      	cmp	r0, #0
 8008964:	d050      	beq.n	8008a08 <_dtoa_r+0x220>
 8008966:	f10a 3aff 	add.w	sl, sl, #4294967295
 800896a:	2300      	movs	r3, #0
 800896c:	930f      	str	r3, [sp, #60]	; 0x3c
 800896e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008970:	1b5d      	subs	r5, r3, r5
 8008972:	f1b5 0801 	subs.w	r8, r5, #1
 8008976:	bf49      	itett	mi
 8008978:	f1c5 0301 	rsbmi	r3, r5, #1
 800897c:	2300      	movpl	r3, #0
 800897e:	9305      	strmi	r3, [sp, #20]
 8008980:	f04f 0800 	movmi.w	r8, #0
 8008984:	bf58      	it	pl
 8008986:	9305      	strpl	r3, [sp, #20]
 8008988:	f1ba 0f00 	cmp.w	sl, #0
 800898c:	db3e      	blt.n	8008a0c <_dtoa_r+0x224>
 800898e:	2300      	movs	r3, #0
 8008990:	44d0      	add	r8, sl
 8008992:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008996:	9307      	str	r3, [sp, #28]
 8008998:	9b06      	ldr	r3, [sp, #24]
 800899a:	2b09      	cmp	r3, #9
 800899c:	f200 8090 	bhi.w	8008ac0 <_dtoa_r+0x2d8>
 80089a0:	2b05      	cmp	r3, #5
 80089a2:	bfc4      	itt	gt
 80089a4:	3b04      	subgt	r3, #4
 80089a6:	9306      	strgt	r3, [sp, #24]
 80089a8:	9b06      	ldr	r3, [sp, #24]
 80089aa:	f1a3 0302 	sub.w	r3, r3, #2
 80089ae:	bfcc      	ite	gt
 80089b0:	2500      	movgt	r5, #0
 80089b2:	2501      	movle	r5, #1
 80089b4:	2b03      	cmp	r3, #3
 80089b6:	f200 808f 	bhi.w	8008ad8 <_dtoa_r+0x2f0>
 80089ba:	e8df f003 	tbb	[pc, r3]
 80089be:	7f7d      	.short	0x7f7d
 80089c0:	7131      	.short	0x7131
 80089c2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80089c6:	441d      	add	r5, r3
 80089c8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80089cc:	2820      	cmp	r0, #32
 80089ce:	dd13      	ble.n	80089f8 <_dtoa_r+0x210>
 80089d0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80089d4:	9b00      	ldr	r3, [sp, #0]
 80089d6:	fa08 f800 	lsl.w	r8, r8, r0
 80089da:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80089de:	fa23 f000 	lsr.w	r0, r3, r0
 80089e2:	ea48 0000 	orr.w	r0, r8, r0
 80089e6:	f7f7 fd39 	bl	800045c <__aeabi_ui2d>
 80089ea:	2301      	movs	r3, #1
 80089ec:	4682      	mov	sl, r0
 80089ee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80089f2:	3d01      	subs	r5, #1
 80089f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80089f6:	e772      	b.n	80088de <_dtoa_r+0xf6>
 80089f8:	9b00      	ldr	r3, [sp, #0]
 80089fa:	f1c0 0020 	rsb	r0, r0, #32
 80089fe:	fa03 f000 	lsl.w	r0, r3, r0
 8008a02:	e7f0      	b.n	80089e6 <_dtoa_r+0x1fe>
 8008a04:	2301      	movs	r3, #1
 8008a06:	e7b1      	b.n	800896c <_dtoa_r+0x184>
 8008a08:	900f      	str	r0, [sp, #60]	; 0x3c
 8008a0a:	e7b0      	b.n	800896e <_dtoa_r+0x186>
 8008a0c:	9b05      	ldr	r3, [sp, #20]
 8008a0e:	eba3 030a 	sub.w	r3, r3, sl
 8008a12:	9305      	str	r3, [sp, #20]
 8008a14:	f1ca 0300 	rsb	r3, sl, #0
 8008a18:	9307      	str	r3, [sp, #28]
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	930e      	str	r3, [sp, #56]	; 0x38
 8008a1e:	e7bb      	b.n	8008998 <_dtoa_r+0x1b0>
 8008a20:	2301      	movs	r3, #1
 8008a22:	930a      	str	r3, [sp, #40]	; 0x28
 8008a24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	dd59      	ble.n	8008ade <_dtoa_r+0x2f6>
 8008a2a:	9302      	str	r3, [sp, #8]
 8008a2c:	4699      	mov	r9, r3
 8008a2e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008a30:	2200      	movs	r2, #0
 8008a32:	6072      	str	r2, [r6, #4]
 8008a34:	2204      	movs	r2, #4
 8008a36:	f102 0014 	add.w	r0, r2, #20
 8008a3a:	4298      	cmp	r0, r3
 8008a3c:	6871      	ldr	r1, [r6, #4]
 8008a3e:	d953      	bls.n	8008ae8 <_dtoa_r+0x300>
 8008a40:	4620      	mov	r0, r4
 8008a42:	f000 fcaa 	bl	800939a <_Balloc>
 8008a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a48:	6030      	str	r0, [r6, #0]
 8008a4a:	f1b9 0f0e 	cmp.w	r9, #14
 8008a4e:	f8d3 b000 	ldr.w	fp, [r3]
 8008a52:	f200 80e6 	bhi.w	8008c22 <_dtoa_r+0x43a>
 8008a56:	2d00      	cmp	r5, #0
 8008a58:	f000 80e3 	beq.w	8008c22 <_dtoa_r+0x43a>
 8008a5c:	ed9d 7b00 	vldr	d7, [sp]
 8008a60:	f1ba 0f00 	cmp.w	sl, #0
 8008a64:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008a68:	dd74      	ble.n	8008b54 <_dtoa_r+0x36c>
 8008a6a:	4a2a      	ldr	r2, [pc, #168]	; (8008b14 <_dtoa_r+0x32c>)
 8008a6c:	f00a 030f 	and.w	r3, sl, #15
 8008a70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008a74:	ed93 7b00 	vldr	d7, [r3]
 8008a78:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008a7c:	06f0      	lsls	r0, r6, #27
 8008a7e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008a82:	d565      	bpl.n	8008b50 <_dtoa_r+0x368>
 8008a84:	4b24      	ldr	r3, [pc, #144]	; (8008b18 <_dtoa_r+0x330>)
 8008a86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008a8a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a8e:	f7f7 fe89 	bl	80007a4 <__aeabi_ddiv>
 8008a92:	e9cd 0100 	strd	r0, r1, [sp]
 8008a96:	f006 060f 	and.w	r6, r6, #15
 8008a9a:	2503      	movs	r5, #3
 8008a9c:	4f1e      	ldr	r7, [pc, #120]	; (8008b18 <_dtoa_r+0x330>)
 8008a9e:	e04c      	b.n	8008b3a <_dtoa_r+0x352>
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	930a      	str	r3, [sp, #40]	; 0x28
 8008aa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008aa6:	4453      	add	r3, sl
 8008aa8:	f103 0901 	add.w	r9, r3, #1
 8008aac:	9302      	str	r3, [sp, #8]
 8008aae:	464b      	mov	r3, r9
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	bfb8      	it	lt
 8008ab4:	2301      	movlt	r3, #1
 8008ab6:	e7ba      	b.n	8008a2e <_dtoa_r+0x246>
 8008ab8:	2300      	movs	r3, #0
 8008aba:	e7b2      	b.n	8008a22 <_dtoa_r+0x23a>
 8008abc:	2300      	movs	r3, #0
 8008abe:	e7f0      	b.n	8008aa2 <_dtoa_r+0x2ba>
 8008ac0:	2501      	movs	r5, #1
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	9306      	str	r3, [sp, #24]
 8008ac6:	950a      	str	r5, [sp, #40]	; 0x28
 8008ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8008acc:	9302      	str	r3, [sp, #8]
 8008ace:	4699      	mov	r9, r3
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	2312      	movs	r3, #18
 8008ad4:	920b      	str	r2, [sp, #44]	; 0x2c
 8008ad6:	e7aa      	b.n	8008a2e <_dtoa_r+0x246>
 8008ad8:	2301      	movs	r3, #1
 8008ada:	930a      	str	r3, [sp, #40]	; 0x28
 8008adc:	e7f4      	b.n	8008ac8 <_dtoa_r+0x2e0>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	9302      	str	r3, [sp, #8]
 8008ae2:	4699      	mov	r9, r3
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	e7f5      	b.n	8008ad4 <_dtoa_r+0x2ec>
 8008ae8:	3101      	adds	r1, #1
 8008aea:	6071      	str	r1, [r6, #4]
 8008aec:	0052      	lsls	r2, r2, #1
 8008aee:	e7a2      	b.n	8008a36 <_dtoa_r+0x24e>
 8008af0:	636f4361 	.word	0x636f4361
 8008af4:	3fd287a7 	.word	0x3fd287a7
 8008af8:	8b60c8b3 	.word	0x8b60c8b3
 8008afc:	3fc68a28 	.word	0x3fc68a28
 8008b00:	509f79fb 	.word	0x509f79fb
 8008b04:	3fd34413 	.word	0x3fd34413
 8008b08:	7ff00000 	.word	0x7ff00000
 8008b0c:	08009b19 	.word	0x08009b19
 8008b10:	3ff80000 	.word	0x3ff80000
 8008b14:	08009b50 	.word	0x08009b50
 8008b18:	08009b28 	.word	0x08009b28
 8008b1c:	08009b23 	.word	0x08009b23
 8008b20:	07f1      	lsls	r1, r6, #31
 8008b22:	d508      	bpl.n	8008b36 <_dtoa_r+0x34e>
 8008b24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b2c:	f7f7 fd10 	bl	8000550 <__aeabi_dmul>
 8008b30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008b34:	3501      	adds	r5, #1
 8008b36:	1076      	asrs	r6, r6, #1
 8008b38:	3708      	adds	r7, #8
 8008b3a:	2e00      	cmp	r6, #0
 8008b3c:	d1f0      	bne.n	8008b20 <_dtoa_r+0x338>
 8008b3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008b42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b46:	f7f7 fe2d 	bl	80007a4 <__aeabi_ddiv>
 8008b4a:	e9cd 0100 	strd	r0, r1, [sp]
 8008b4e:	e01a      	b.n	8008b86 <_dtoa_r+0x39e>
 8008b50:	2502      	movs	r5, #2
 8008b52:	e7a3      	b.n	8008a9c <_dtoa_r+0x2b4>
 8008b54:	f000 80a0 	beq.w	8008c98 <_dtoa_r+0x4b0>
 8008b58:	f1ca 0600 	rsb	r6, sl, #0
 8008b5c:	4b9f      	ldr	r3, [pc, #636]	; (8008ddc <_dtoa_r+0x5f4>)
 8008b5e:	4fa0      	ldr	r7, [pc, #640]	; (8008de0 <_dtoa_r+0x5f8>)
 8008b60:	f006 020f 	and.w	r2, r6, #15
 8008b64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b70:	f7f7 fcee 	bl	8000550 <__aeabi_dmul>
 8008b74:	e9cd 0100 	strd	r0, r1, [sp]
 8008b78:	1136      	asrs	r6, r6, #4
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	2502      	movs	r5, #2
 8008b7e:	2e00      	cmp	r6, #0
 8008b80:	d17f      	bne.n	8008c82 <_dtoa_r+0x49a>
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d1e1      	bne.n	8008b4a <_dtoa_r+0x362>
 8008b86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f000 8087 	beq.w	8008c9c <_dtoa_r+0x4b4>
 8008b8e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008b92:	2200      	movs	r2, #0
 8008b94:	4b93      	ldr	r3, [pc, #588]	; (8008de4 <_dtoa_r+0x5fc>)
 8008b96:	4630      	mov	r0, r6
 8008b98:	4639      	mov	r1, r7
 8008b9a:	f7f7 ff4b 	bl	8000a34 <__aeabi_dcmplt>
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	d07c      	beq.n	8008c9c <_dtoa_r+0x4b4>
 8008ba2:	f1b9 0f00 	cmp.w	r9, #0
 8008ba6:	d079      	beq.n	8008c9c <_dtoa_r+0x4b4>
 8008ba8:	9b02      	ldr	r3, [sp, #8]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	dd35      	ble.n	8008c1a <_dtoa_r+0x432>
 8008bae:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008bb2:	9308      	str	r3, [sp, #32]
 8008bb4:	4639      	mov	r1, r7
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	4b8b      	ldr	r3, [pc, #556]	; (8008de8 <_dtoa_r+0x600>)
 8008bba:	4630      	mov	r0, r6
 8008bbc:	f7f7 fcc8 	bl	8000550 <__aeabi_dmul>
 8008bc0:	e9cd 0100 	strd	r0, r1, [sp]
 8008bc4:	9f02      	ldr	r7, [sp, #8]
 8008bc6:	3501      	adds	r5, #1
 8008bc8:	4628      	mov	r0, r5
 8008bca:	f7f7 fc57 	bl	800047c <__aeabi_i2d>
 8008bce:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bd2:	f7f7 fcbd 	bl	8000550 <__aeabi_dmul>
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	4b84      	ldr	r3, [pc, #528]	; (8008dec <_dtoa_r+0x604>)
 8008bda:	f7f7 fb03 	bl	80001e4 <__adddf3>
 8008bde:	4605      	mov	r5, r0
 8008be0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008be4:	2f00      	cmp	r7, #0
 8008be6:	d15d      	bne.n	8008ca4 <_dtoa_r+0x4bc>
 8008be8:	2200      	movs	r2, #0
 8008bea:	4b81      	ldr	r3, [pc, #516]	; (8008df0 <_dtoa_r+0x608>)
 8008bec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bf0:	f7f7 faf6 	bl	80001e0 <__aeabi_dsub>
 8008bf4:	462a      	mov	r2, r5
 8008bf6:	4633      	mov	r3, r6
 8008bf8:	e9cd 0100 	strd	r0, r1, [sp]
 8008bfc:	f7f7 ff38 	bl	8000a70 <__aeabi_dcmpgt>
 8008c00:	2800      	cmp	r0, #0
 8008c02:	f040 8288 	bne.w	8009116 <_dtoa_r+0x92e>
 8008c06:	462a      	mov	r2, r5
 8008c08:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008c0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c10:	f7f7 ff10 	bl	8000a34 <__aeabi_dcmplt>
 8008c14:	2800      	cmp	r0, #0
 8008c16:	f040 827c 	bne.w	8009112 <_dtoa_r+0x92a>
 8008c1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008c1e:	e9cd 2300 	strd	r2, r3, [sp]
 8008c22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	f2c0 8150 	blt.w	8008eca <_dtoa_r+0x6e2>
 8008c2a:	f1ba 0f0e 	cmp.w	sl, #14
 8008c2e:	f300 814c 	bgt.w	8008eca <_dtoa_r+0x6e2>
 8008c32:	4b6a      	ldr	r3, [pc, #424]	; (8008ddc <_dtoa_r+0x5f4>)
 8008c34:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c38:	ed93 7b00 	vldr	d7, [r3]
 8008c3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008c44:	f280 80d8 	bge.w	8008df8 <_dtoa_r+0x610>
 8008c48:	f1b9 0f00 	cmp.w	r9, #0
 8008c4c:	f300 80d4 	bgt.w	8008df8 <_dtoa_r+0x610>
 8008c50:	f040 825e 	bne.w	8009110 <_dtoa_r+0x928>
 8008c54:	2200      	movs	r2, #0
 8008c56:	4b66      	ldr	r3, [pc, #408]	; (8008df0 <_dtoa_r+0x608>)
 8008c58:	ec51 0b17 	vmov	r0, r1, d7
 8008c5c:	f7f7 fc78 	bl	8000550 <__aeabi_dmul>
 8008c60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c64:	f7f7 fefa 	bl	8000a5c <__aeabi_dcmpge>
 8008c68:	464f      	mov	r7, r9
 8008c6a:	464e      	mov	r6, r9
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	f040 8234 	bne.w	80090da <_dtoa_r+0x8f2>
 8008c72:	2331      	movs	r3, #49	; 0x31
 8008c74:	f10b 0501 	add.w	r5, fp, #1
 8008c78:	f88b 3000 	strb.w	r3, [fp]
 8008c7c:	f10a 0a01 	add.w	sl, sl, #1
 8008c80:	e22f      	b.n	80090e2 <_dtoa_r+0x8fa>
 8008c82:	07f2      	lsls	r2, r6, #31
 8008c84:	d505      	bpl.n	8008c92 <_dtoa_r+0x4aa>
 8008c86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c8a:	f7f7 fc61 	bl	8000550 <__aeabi_dmul>
 8008c8e:	3501      	adds	r5, #1
 8008c90:	2301      	movs	r3, #1
 8008c92:	1076      	asrs	r6, r6, #1
 8008c94:	3708      	adds	r7, #8
 8008c96:	e772      	b.n	8008b7e <_dtoa_r+0x396>
 8008c98:	2502      	movs	r5, #2
 8008c9a:	e774      	b.n	8008b86 <_dtoa_r+0x39e>
 8008c9c:	f8cd a020 	str.w	sl, [sp, #32]
 8008ca0:	464f      	mov	r7, r9
 8008ca2:	e791      	b.n	8008bc8 <_dtoa_r+0x3e0>
 8008ca4:	4b4d      	ldr	r3, [pc, #308]	; (8008ddc <_dtoa_r+0x5f4>)
 8008ca6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008caa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d047      	beq.n	8008d44 <_dtoa_r+0x55c>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	2000      	movs	r0, #0
 8008cba:	494e      	ldr	r1, [pc, #312]	; (8008df4 <_dtoa_r+0x60c>)
 8008cbc:	f7f7 fd72 	bl	80007a4 <__aeabi_ddiv>
 8008cc0:	462a      	mov	r2, r5
 8008cc2:	4633      	mov	r3, r6
 8008cc4:	f7f7 fa8c 	bl	80001e0 <__aeabi_dsub>
 8008cc8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008ccc:	465d      	mov	r5, fp
 8008cce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cd2:	f7f7 feed 	bl	8000ab0 <__aeabi_d2iz>
 8008cd6:	4606      	mov	r6, r0
 8008cd8:	f7f7 fbd0 	bl	800047c <__aeabi_i2d>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	460b      	mov	r3, r1
 8008ce0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ce4:	f7f7 fa7c 	bl	80001e0 <__aeabi_dsub>
 8008ce8:	3630      	adds	r6, #48	; 0x30
 8008cea:	f805 6b01 	strb.w	r6, [r5], #1
 8008cee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008cf2:	e9cd 0100 	strd	r0, r1, [sp]
 8008cf6:	f7f7 fe9d 	bl	8000a34 <__aeabi_dcmplt>
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	d163      	bne.n	8008dc6 <_dtoa_r+0x5de>
 8008cfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d02:	2000      	movs	r0, #0
 8008d04:	4937      	ldr	r1, [pc, #220]	; (8008de4 <_dtoa_r+0x5fc>)
 8008d06:	f7f7 fa6b 	bl	80001e0 <__aeabi_dsub>
 8008d0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008d0e:	f7f7 fe91 	bl	8000a34 <__aeabi_dcmplt>
 8008d12:	2800      	cmp	r0, #0
 8008d14:	f040 80b7 	bne.w	8008e86 <_dtoa_r+0x69e>
 8008d18:	eba5 030b 	sub.w	r3, r5, fp
 8008d1c:	429f      	cmp	r7, r3
 8008d1e:	f77f af7c 	ble.w	8008c1a <_dtoa_r+0x432>
 8008d22:	2200      	movs	r2, #0
 8008d24:	4b30      	ldr	r3, [pc, #192]	; (8008de8 <_dtoa_r+0x600>)
 8008d26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d2a:	f7f7 fc11 	bl	8000550 <__aeabi_dmul>
 8008d2e:	2200      	movs	r2, #0
 8008d30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008d34:	4b2c      	ldr	r3, [pc, #176]	; (8008de8 <_dtoa_r+0x600>)
 8008d36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d3a:	f7f7 fc09 	bl	8000550 <__aeabi_dmul>
 8008d3e:	e9cd 0100 	strd	r0, r1, [sp]
 8008d42:	e7c4      	b.n	8008cce <_dtoa_r+0x4e6>
 8008d44:	462a      	mov	r2, r5
 8008d46:	4633      	mov	r3, r6
 8008d48:	f7f7 fc02 	bl	8000550 <__aeabi_dmul>
 8008d4c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008d50:	eb0b 0507 	add.w	r5, fp, r7
 8008d54:	465e      	mov	r6, fp
 8008d56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d5a:	f7f7 fea9 	bl	8000ab0 <__aeabi_d2iz>
 8008d5e:	4607      	mov	r7, r0
 8008d60:	f7f7 fb8c 	bl	800047c <__aeabi_i2d>
 8008d64:	3730      	adds	r7, #48	; 0x30
 8008d66:	4602      	mov	r2, r0
 8008d68:	460b      	mov	r3, r1
 8008d6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d6e:	f7f7 fa37 	bl	80001e0 <__aeabi_dsub>
 8008d72:	f806 7b01 	strb.w	r7, [r6], #1
 8008d76:	42ae      	cmp	r6, r5
 8008d78:	e9cd 0100 	strd	r0, r1, [sp]
 8008d7c:	f04f 0200 	mov.w	r2, #0
 8008d80:	d126      	bne.n	8008dd0 <_dtoa_r+0x5e8>
 8008d82:	4b1c      	ldr	r3, [pc, #112]	; (8008df4 <_dtoa_r+0x60c>)
 8008d84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d88:	f7f7 fa2c 	bl	80001e4 <__adddf3>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	460b      	mov	r3, r1
 8008d90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d94:	f7f7 fe6c 	bl	8000a70 <__aeabi_dcmpgt>
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	d174      	bne.n	8008e86 <_dtoa_r+0x69e>
 8008d9c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008da0:	2000      	movs	r0, #0
 8008da2:	4914      	ldr	r1, [pc, #80]	; (8008df4 <_dtoa_r+0x60c>)
 8008da4:	f7f7 fa1c 	bl	80001e0 <__aeabi_dsub>
 8008da8:	4602      	mov	r2, r0
 8008daa:	460b      	mov	r3, r1
 8008dac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008db0:	f7f7 fe40 	bl	8000a34 <__aeabi_dcmplt>
 8008db4:	2800      	cmp	r0, #0
 8008db6:	f43f af30 	beq.w	8008c1a <_dtoa_r+0x432>
 8008dba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008dbe:	2b30      	cmp	r3, #48	; 0x30
 8008dc0:	f105 32ff 	add.w	r2, r5, #4294967295
 8008dc4:	d002      	beq.n	8008dcc <_dtoa_r+0x5e4>
 8008dc6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008dca:	e04a      	b.n	8008e62 <_dtoa_r+0x67a>
 8008dcc:	4615      	mov	r5, r2
 8008dce:	e7f4      	b.n	8008dba <_dtoa_r+0x5d2>
 8008dd0:	4b05      	ldr	r3, [pc, #20]	; (8008de8 <_dtoa_r+0x600>)
 8008dd2:	f7f7 fbbd 	bl	8000550 <__aeabi_dmul>
 8008dd6:	e9cd 0100 	strd	r0, r1, [sp]
 8008dda:	e7bc      	b.n	8008d56 <_dtoa_r+0x56e>
 8008ddc:	08009b50 	.word	0x08009b50
 8008de0:	08009b28 	.word	0x08009b28
 8008de4:	3ff00000 	.word	0x3ff00000
 8008de8:	40240000 	.word	0x40240000
 8008dec:	401c0000 	.word	0x401c0000
 8008df0:	40140000 	.word	0x40140000
 8008df4:	3fe00000 	.word	0x3fe00000
 8008df8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008dfc:	465d      	mov	r5, fp
 8008dfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e02:	4630      	mov	r0, r6
 8008e04:	4639      	mov	r1, r7
 8008e06:	f7f7 fccd 	bl	80007a4 <__aeabi_ddiv>
 8008e0a:	f7f7 fe51 	bl	8000ab0 <__aeabi_d2iz>
 8008e0e:	4680      	mov	r8, r0
 8008e10:	f7f7 fb34 	bl	800047c <__aeabi_i2d>
 8008e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e18:	f7f7 fb9a 	bl	8000550 <__aeabi_dmul>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	460b      	mov	r3, r1
 8008e20:	4630      	mov	r0, r6
 8008e22:	4639      	mov	r1, r7
 8008e24:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008e28:	f7f7 f9da 	bl	80001e0 <__aeabi_dsub>
 8008e2c:	f805 6b01 	strb.w	r6, [r5], #1
 8008e30:	eba5 060b 	sub.w	r6, r5, fp
 8008e34:	45b1      	cmp	r9, r6
 8008e36:	4602      	mov	r2, r0
 8008e38:	460b      	mov	r3, r1
 8008e3a:	d139      	bne.n	8008eb0 <_dtoa_r+0x6c8>
 8008e3c:	f7f7 f9d2 	bl	80001e4 <__adddf3>
 8008e40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e44:	4606      	mov	r6, r0
 8008e46:	460f      	mov	r7, r1
 8008e48:	f7f7 fe12 	bl	8000a70 <__aeabi_dcmpgt>
 8008e4c:	b9c8      	cbnz	r0, 8008e82 <_dtoa_r+0x69a>
 8008e4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e52:	4630      	mov	r0, r6
 8008e54:	4639      	mov	r1, r7
 8008e56:	f7f7 fde3 	bl	8000a20 <__aeabi_dcmpeq>
 8008e5a:	b110      	cbz	r0, 8008e62 <_dtoa_r+0x67a>
 8008e5c:	f018 0f01 	tst.w	r8, #1
 8008e60:	d10f      	bne.n	8008e82 <_dtoa_r+0x69a>
 8008e62:	9904      	ldr	r1, [sp, #16]
 8008e64:	4620      	mov	r0, r4
 8008e66:	f000 facc 	bl	8009402 <_Bfree>
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e6e:	702b      	strb	r3, [r5, #0]
 8008e70:	f10a 0301 	add.w	r3, sl, #1
 8008e74:	6013      	str	r3, [r2, #0]
 8008e76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	f000 8241 	beq.w	8009300 <_dtoa_r+0xb18>
 8008e7e:	601d      	str	r5, [r3, #0]
 8008e80:	e23e      	b.n	8009300 <_dtoa_r+0xb18>
 8008e82:	f8cd a020 	str.w	sl, [sp, #32]
 8008e86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008e8a:	2a39      	cmp	r2, #57	; 0x39
 8008e8c:	f105 33ff 	add.w	r3, r5, #4294967295
 8008e90:	d108      	bne.n	8008ea4 <_dtoa_r+0x6bc>
 8008e92:	459b      	cmp	fp, r3
 8008e94:	d10a      	bne.n	8008eac <_dtoa_r+0x6c4>
 8008e96:	9b08      	ldr	r3, [sp, #32]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	9308      	str	r3, [sp, #32]
 8008e9c:	2330      	movs	r3, #48	; 0x30
 8008e9e:	f88b 3000 	strb.w	r3, [fp]
 8008ea2:	465b      	mov	r3, fp
 8008ea4:	781a      	ldrb	r2, [r3, #0]
 8008ea6:	3201      	adds	r2, #1
 8008ea8:	701a      	strb	r2, [r3, #0]
 8008eaa:	e78c      	b.n	8008dc6 <_dtoa_r+0x5de>
 8008eac:	461d      	mov	r5, r3
 8008eae:	e7ea      	b.n	8008e86 <_dtoa_r+0x69e>
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	4b9b      	ldr	r3, [pc, #620]	; (8009120 <_dtoa_r+0x938>)
 8008eb4:	f7f7 fb4c 	bl	8000550 <__aeabi_dmul>
 8008eb8:	2200      	movs	r2, #0
 8008eba:	2300      	movs	r3, #0
 8008ebc:	4606      	mov	r6, r0
 8008ebe:	460f      	mov	r7, r1
 8008ec0:	f7f7 fdae 	bl	8000a20 <__aeabi_dcmpeq>
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	d09a      	beq.n	8008dfe <_dtoa_r+0x616>
 8008ec8:	e7cb      	b.n	8008e62 <_dtoa_r+0x67a>
 8008eca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ecc:	2a00      	cmp	r2, #0
 8008ece:	f000 808b 	beq.w	8008fe8 <_dtoa_r+0x800>
 8008ed2:	9a06      	ldr	r2, [sp, #24]
 8008ed4:	2a01      	cmp	r2, #1
 8008ed6:	dc6e      	bgt.n	8008fb6 <_dtoa_r+0x7ce>
 8008ed8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008eda:	2a00      	cmp	r2, #0
 8008edc:	d067      	beq.n	8008fae <_dtoa_r+0x7c6>
 8008ede:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008ee2:	9f07      	ldr	r7, [sp, #28]
 8008ee4:	9d05      	ldr	r5, [sp, #20]
 8008ee6:	9a05      	ldr	r2, [sp, #20]
 8008ee8:	2101      	movs	r1, #1
 8008eea:	441a      	add	r2, r3
 8008eec:	4620      	mov	r0, r4
 8008eee:	9205      	str	r2, [sp, #20]
 8008ef0:	4498      	add	r8, r3
 8008ef2:	f000 fb26 	bl	8009542 <__i2b>
 8008ef6:	4606      	mov	r6, r0
 8008ef8:	2d00      	cmp	r5, #0
 8008efa:	dd0c      	ble.n	8008f16 <_dtoa_r+0x72e>
 8008efc:	f1b8 0f00 	cmp.w	r8, #0
 8008f00:	dd09      	ble.n	8008f16 <_dtoa_r+0x72e>
 8008f02:	4545      	cmp	r5, r8
 8008f04:	9a05      	ldr	r2, [sp, #20]
 8008f06:	462b      	mov	r3, r5
 8008f08:	bfa8      	it	ge
 8008f0a:	4643      	movge	r3, r8
 8008f0c:	1ad2      	subs	r2, r2, r3
 8008f0e:	9205      	str	r2, [sp, #20]
 8008f10:	1aed      	subs	r5, r5, r3
 8008f12:	eba8 0803 	sub.w	r8, r8, r3
 8008f16:	9b07      	ldr	r3, [sp, #28]
 8008f18:	b1eb      	cbz	r3, 8008f56 <_dtoa_r+0x76e>
 8008f1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d067      	beq.n	8008ff0 <_dtoa_r+0x808>
 8008f20:	b18f      	cbz	r7, 8008f46 <_dtoa_r+0x75e>
 8008f22:	4631      	mov	r1, r6
 8008f24:	463a      	mov	r2, r7
 8008f26:	4620      	mov	r0, r4
 8008f28:	f000 fbaa 	bl	8009680 <__pow5mult>
 8008f2c:	9a04      	ldr	r2, [sp, #16]
 8008f2e:	4601      	mov	r1, r0
 8008f30:	4606      	mov	r6, r0
 8008f32:	4620      	mov	r0, r4
 8008f34:	f000 fb0e 	bl	8009554 <__multiply>
 8008f38:	9904      	ldr	r1, [sp, #16]
 8008f3a:	9008      	str	r0, [sp, #32]
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	f000 fa60 	bl	8009402 <_Bfree>
 8008f42:	9b08      	ldr	r3, [sp, #32]
 8008f44:	9304      	str	r3, [sp, #16]
 8008f46:	9b07      	ldr	r3, [sp, #28]
 8008f48:	1bda      	subs	r2, r3, r7
 8008f4a:	d004      	beq.n	8008f56 <_dtoa_r+0x76e>
 8008f4c:	9904      	ldr	r1, [sp, #16]
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f000 fb96 	bl	8009680 <__pow5mult>
 8008f54:	9004      	str	r0, [sp, #16]
 8008f56:	2101      	movs	r1, #1
 8008f58:	4620      	mov	r0, r4
 8008f5a:	f000 faf2 	bl	8009542 <__i2b>
 8008f5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f60:	4607      	mov	r7, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	f000 81d0 	beq.w	8009308 <_dtoa_r+0xb20>
 8008f68:	461a      	mov	r2, r3
 8008f6a:	4601      	mov	r1, r0
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	f000 fb87 	bl	8009680 <__pow5mult>
 8008f72:	9b06      	ldr	r3, [sp, #24]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	4607      	mov	r7, r0
 8008f78:	dc40      	bgt.n	8008ffc <_dtoa_r+0x814>
 8008f7a:	9b00      	ldr	r3, [sp, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d139      	bne.n	8008ff4 <_dtoa_r+0x80c>
 8008f80:	9b01      	ldr	r3, [sp, #4]
 8008f82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d136      	bne.n	8008ff8 <_dtoa_r+0x810>
 8008f8a:	9b01      	ldr	r3, [sp, #4]
 8008f8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f90:	0d1b      	lsrs	r3, r3, #20
 8008f92:	051b      	lsls	r3, r3, #20
 8008f94:	b12b      	cbz	r3, 8008fa2 <_dtoa_r+0x7ba>
 8008f96:	9b05      	ldr	r3, [sp, #20]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	9305      	str	r3, [sp, #20]
 8008f9c:	f108 0801 	add.w	r8, r8, #1
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	9307      	str	r3, [sp, #28]
 8008fa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d12a      	bne.n	8009000 <_dtoa_r+0x818>
 8008faa:	2001      	movs	r0, #1
 8008fac:	e030      	b.n	8009010 <_dtoa_r+0x828>
 8008fae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008fb0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008fb4:	e795      	b.n	8008ee2 <_dtoa_r+0x6fa>
 8008fb6:	9b07      	ldr	r3, [sp, #28]
 8008fb8:	f109 37ff 	add.w	r7, r9, #4294967295
 8008fbc:	42bb      	cmp	r3, r7
 8008fbe:	bfbf      	itttt	lt
 8008fc0:	9b07      	ldrlt	r3, [sp, #28]
 8008fc2:	9707      	strlt	r7, [sp, #28]
 8008fc4:	1afa      	sublt	r2, r7, r3
 8008fc6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008fc8:	bfbb      	ittet	lt
 8008fca:	189b      	addlt	r3, r3, r2
 8008fcc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008fce:	1bdf      	subge	r7, r3, r7
 8008fd0:	2700      	movlt	r7, #0
 8008fd2:	f1b9 0f00 	cmp.w	r9, #0
 8008fd6:	bfb5      	itete	lt
 8008fd8:	9b05      	ldrlt	r3, [sp, #20]
 8008fda:	9d05      	ldrge	r5, [sp, #20]
 8008fdc:	eba3 0509 	sublt.w	r5, r3, r9
 8008fe0:	464b      	movge	r3, r9
 8008fe2:	bfb8      	it	lt
 8008fe4:	2300      	movlt	r3, #0
 8008fe6:	e77e      	b.n	8008ee6 <_dtoa_r+0x6fe>
 8008fe8:	9f07      	ldr	r7, [sp, #28]
 8008fea:	9d05      	ldr	r5, [sp, #20]
 8008fec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008fee:	e783      	b.n	8008ef8 <_dtoa_r+0x710>
 8008ff0:	9a07      	ldr	r2, [sp, #28]
 8008ff2:	e7ab      	b.n	8008f4c <_dtoa_r+0x764>
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	e7d4      	b.n	8008fa2 <_dtoa_r+0x7ba>
 8008ff8:	9b00      	ldr	r3, [sp, #0]
 8008ffa:	e7d2      	b.n	8008fa2 <_dtoa_r+0x7ba>
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	9307      	str	r3, [sp, #28]
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009006:	6918      	ldr	r0, [r3, #16]
 8009008:	f000 fa4d 	bl	80094a6 <__hi0bits>
 800900c:	f1c0 0020 	rsb	r0, r0, #32
 8009010:	4440      	add	r0, r8
 8009012:	f010 001f 	ands.w	r0, r0, #31
 8009016:	d047      	beq.n	80090a8 <_dtoa_r+0x8c0>
 8009018:	f1c0 0320 	rsb	r3, r0, #32
 800901c:	2b04      	cmp	r3, #4
 800901e:	dd3b      	ble.n	8009098 <_dtoa_r+0x8b0>
 8009020:	9b05      	ldr	r3, [sp, #20]
 8009022:	f1c0 001c 	rsb	r0, r0, #28
 8009026:	4403      	add	r3, r0
 8009028:	9305      	str	r3, [sp, #20]
 800902a:	4405      	add	r5, r0
 800902c:	4480      	add	r8, r0
 800902e:	9b05      	ldr	r3, [sp, #20]
 8009030:	2b00      	cmp	r3, #0
 8009032:	dd05      	ble.n	8009040 <_dtoa_r+0x858>
 8009034:	461a      	mov	r2, r3
 8009036:	9904      	ldr	r1, [sp, #16]
 8009038:	4620      	mov	r0, r4
 800903a:	f000 fb6f 	bl	800971c <__lshift>
 800903e:	9004      	str	r0, [sp, #16]
 8009040:	f1b8 0f00 	cmp.w	r8, #0
 8009044:	dd05      	ble.n	8009052 <_dtoa_r+0x86a>
 8009046:	4639      	mov	r1, r7
 8009048:	4642      	mov	r2, r8
 800904a:	4620      	mov	r0, r4
 800904c:	f000 fb66 	bl	800971c <__lshift>
 8009050:	4607      	mov	r7, r0
 8009052:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009054:	b353      	cbz	r3, 80090ac <_dtoa_r+0x8c4>
 8009056:	4639      	mov	r1, r7
 8009058:	9804      	ldr	r0, [sp, #16]
 800905a:	f000 fbb3 	bl	80097c4 <__mcmp>
 800905e:	2800      	cmp	r0, #0
 8009060:	da24      	bge.n	80090ac <_dtoa_r+0x8c4>
 8009062:	2300      	movs	r3, #0
 8009064:	220a      	movs	r2, #10
 8009066:	9904      	ldr	r1, [sp, #16]
 8009068:	4620      	mov	r0, r4
 800906a:	f000 f9e1 	bl	8009430 <__multadd>
 800906e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009070:	9004      	str	r0, [sp, #16]
 8009072:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009076:	2b00      	cmp	r3, #0
 8009078:	f000 814d 	beq.w	8009316 <_dtoa_r+0xb2e>
 800907c:	2300      	movs	r3, #0
 800907e:	4631      	mov	r1, r6
 8009080:	220a      	movs	r2, #10
 8009082:	4620      	mov	r0, r4
 8009084:	f000 f9d4 	bl	8009430 <__multadd>
 8009088:	9b02      	ldr	r3, [sp, #8]
 800908a:	2b00      	cmp	r3, #0
 800908c:	4606      	mov	r6, r0
 800908e:	dc4f      	bgt.n	8009130 <_dtoa_r+0x948>
 8009090:	9b06      	ldr	r3, [sp, #24]
 8009092:	2b02      	cmp	r3, #2
 8009094:	dd4c      	ble.n	8009130 <_dtoa_r+0x948>
 8009096:	e011      	b.n	80090bc <_dtoa_r+0x8d4>
 8009098:	d0c9      	beq.n	800902e <_dtoa_r+0x846>
 800909a:	9a05      	ldr	r2, [sp, #20]
 800909c:	331c      	adds	r3, #28
 800909e:	441a      	add	r2, r3
 80090a0:	9205      	str	r2, [sp, #20]
 80090a2:	441d      	add	r5, r3
 80090a4:	4498      	add	r8, r3
 80090a6:	e7c2      	b.n	800902e <_dtoa_r+0x846>
 80090a8:	4603      	mov	r3, r0
 80090aa:	e7f6      	b.n	800909a <_dtoa_r+0x8b2>
 80090ac:	f1b9 0f00 	cmp.w	r9, #0
 80090b0:	dc38      	bgt.n	8009124 <_dtoa_r+0x93c>
 80090b2:	9b06      	ldr	r3, [sp, #24]
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	dd35      	ble.n	8009124 <_dtoa_r+0x93c>
 80090b8:	f8cd 9008 	str.w	r9, [sp, #8]
 80090bc:	9b02      	ldr	r3, [sp, #8]
 80090be:	b963      	cbnz	r3, 80090da <_dtoa_r+0x8f2>
 80090c0:	4639      	mov	r1, r7
 80090c2:	2205      	movs	r2, #5
 80090c4:	4620      	mov	r0, r4
 80090c6:	f000 f9b3 	bl	8009430 <__multadd>
 80090ca:	4601      	mov	r1, r0
 80090cc:	4607      	mov	r7, r0
 80090ce:	9804      	ldr	r0, [sp, #16]
 80090d0:	f000 fb78 	bl	80097c4 <__mcmp>
 80090d4:	2800      	cmp	r0, #0
 80090d6:	f73f adcc 	bgt.w	8008c72 <_dtoa_r+0x48a>
 80090da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090dc:	465d      	mov	r5, fp
 80090de:	ea6f 0a03 	mvn.w	sl, r3
 80090e2:	f04f 0900 	mov.w	r9, #0
 80090e6:	4639      	mov	r1, r7
 80090e8:	4620      	mov	r0, r4
 80090ea:	f000 f98a 	bl	8009402 <_Bfree>
 80090ee:	2e00      	cmp	r6, #0
 80090f0:	f43f aeb7 	beq.w	8008e62 <_dtoa_r+0x67a>
 80090f4:	f1b9 0f00 	cmp.w	r9, #0
 80090f8:	d005      	beq.n	8009106 <_dtoa_r+0x91e>
 80090fa:	45b1      	cmp	r9, r6
 80090fc:	d003      	beq.n	8009106 <_dtoa_r+0x91e>
 80090fe:	4649      	mov	r1, r9
 8009100:	4620      	mov	r0, r4
 8009102:	f000 f97e 	bl	8009402 <_Bfree>
 8009106:	4631      	mov	r1, r6
 8009108:	4620      	mov	r0, r4
 800910a:	f000 f97a 	bl	8009402 <_Bfree>
 800910e:	e6a8      	b.n	8008e62 <_dtoa_r+0x67a>
 8009110:	2700      	movs	r7, #0
 8009112:	463e      	mov	r6, r7
 8009114:	e7e1      	b.n	80090da <_dtoa_r+0x8f2>
 8009116:	f8dd a020 	ldr.w	sl, [sp, #32]
 800911a:	463e      	mov	r6, r7
 800911c:	e5a9      	b.n	8008c72 <_dtoa_r+0x48a>
 800911e:	bf00      	nop
 8009120:	40240000 	.word	0x40240000
 8009124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009126:	f8cd 9008 	str.w	r9, [sp, #8]
 800912a:	2b00      	cmp	r3, #0
 800912c:	f000 80fa 	beq.w	8009324 <_dtoa_r+0xb3c>
 8009130:	2d00      	cmp	r5, #0
 8009132:	dd05      	ble.n	8009140 <_dtoa_r+0x958>
 8009134:	4631      	mov	r1, r6
 8009136:	462a      	mov	r2, r5
 8009138:	4620      	mov	r0, r4
 800913a:	f000 faef 	bl	800971c <__lshift>
 800913e:	4606      	mov	r6, r0
 8009140:	9b07      	ldr	r3, [sp, #28]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d04c      	beq.n	80091e0 <_dtoa_r+0x9f8>
 8009146:	6871      	ldr	r1, [r6, #4]
 8009148:	4620      	mov	r0, r4
 800914a:	f000 f926 	bl	800939a <_Balloc>
 800914e:	6932      	ldr	r2, [r6, #16]
 8009150:	3202      	adds	r2, #2
 8009152:	4605      	mov	r5, r0
 8009154:	0092      	lsls	r2, r2, #2
 8009156:	f106 010c 	add.w	r1, r6, #12
 800915a:	300c      	adds	r0, #12
 800915c:	f000 f912 	bl	8009384 <memcpy>
 8009160:	2201      	movs	r2, #1
 8009162:	4629      	mov	r1, r5
 8009164:	4620      	mov	r0, r4
 8009166:	f000 fad9 	bl	800971c <__lshift>
 800916a:	9b00      	ldr	r3, [sp, #0]
 800916c:	f8cd b014 	str.w	fp, [sp, #20]
 8009170:	f003 0301 	and.w	r3, r3, #1
 8009174:	46b1      	mov	r9, r6
 8009176:	9307      	str	r3, [sp, #28]
 8009178:	4606      	mov	r6, r0
 800917a:	4639      	mov	r1, r7
 800917c:	9804      	ldr	r0, [sp, #16]
 800917e:	f7ff faa4 	bl	80086ca <quorem>
 8009182:	4649      	mov	r1, r9
 8009184:	4605      	mov	r5, r0
 8009186:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800918a:	9804      	ldr	r0, [sp, #16]
 800918c:	f000 fb1a 	bl	80097c4 <__mcmp>
 8009190:	4632      	mov	r2, r6
 8009192:	9000      	str	r0, [sp, #0]
 8009194:	4639      	mov	r1, r7
 8009196:	4620      	mov	r0, r4
 8009198:	f000 fb2e 	bl	80097f8 <__mdiff>
 800919c:	68c3      	ldr	r3, [r0, #12]
 800919e:	4602      	mov	r2, r0
 80091a0:	bb03      	cbnz	r3, 80091e4 <_dtoa_r+0x9fc>
 80091a2:	4601      	mov	r1, r0
 80091a4:	9008      	str	r0, [sp, #32]
 80091a6:	9804      	ldr	r0, [sp, #16]
 80091a8:	f000 fb0c 	bl	80097c4 <__mcmp>
 80091ac:	9a08      	ldr	r2, [sp, #32]
 80091ae:	4603      	mov	r3, r0
 80091b0:	4611      	mov	r1, r2
 80091b2:	4620      	mov	r0, r4
 80091b4:	9308      	str	r3, [sp, #32]
 80091b6:	f000 f924 	bl	8009402 <_Bfree>
 80091ba:	9b08      	ldr	r3, [sp, #32]
 80091bc:	b9a3      	cbnz	r3, 80091e8 <_dtoa_r+0xa00>
 80091be:	9a06      	ldr	r2, [sp, #24]
 80091c0:	b992      	cbnz	r2, 80091e8 <_dtoa_r+0xa00>
 80091c2:	9a07      	ldr	r2, [sp, #28]
 80091c4:	b982      	cbnz	r2, 80091e8 <_dtoa_r+0xa00>
 80091c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80091ca:	d029      	beq.n	8009220 <_dtoa_r+0xa38>
 80091cc:	9b00      	ldr	r3, [sp, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	dd01      	ble.n	80091d6 <_dtoa_r+0x9ee>
 80091d2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80091d6:	9b05      	ldr	r3, [sp, #20]
 80091d8:	1c5d      	adds	r5, r3, #1
 80091da:	f883 8000 	strb.w	r8, [r3]
 80091de:	e782      	b.n	80090e6 <_dtoa_r+0x8fe>
 80091e0:	4630      	mov	r0, r6
 80091e2:	e7c2      	b.n	800916a <_dtoa_r+0x982>
 80091e4:	2301      	movs	r3, #1
 80091e6:	e7e3      	b.n	80091b0 <_dtoa_r+0x9c8>
 80091e8:	9a00      	ldr	r2, [sp, #0]
 80091ea:	2a00      	cmp	r2, #0
 80091ec:	db04      	blt.n	80091f8 <_dtoa_r+0xa10>
 80091ee:	d125      	bne.n	800923c <_dtoa_r+0xa54>
 80091f0:	9a06      	ldr	r2, [sp, #24]
 80091f2:	bb1a      	cbnz	r2, 800923c <_dtoa_r+0xa54>
 80091f4:	9a07      	ldr	r2, [sp, #28]
 80091f6:	bb0a      	cbnz	r2, 800923c <_dtoa_r+0xa54>
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	ddec      	ble.n	80091d6 <_dtoa_r+0x9ee>
 80091fc:	2201      	movs	r2, #1
 80091fe:	9904      	ldr	r1, [sp, #16]
 8009200:	4620      	mov	r0, r4
 8009202:	f000 fa8b 	bl	800971c <__lshift>
 8009206:	4639      	mov	r1, r7
 8009208:	9004      	str	r0, [sp, #16]
 800920a:	f000 fadb 	bl	80097c4 <__mcmp>
 800920e:	2800      	cmp	r0, #0
 8009210:	dc03      	bgt.n	800921a <_dtoa_r+0xa32>
 8009212:	d1e0      	bne.n	80091d6 <_dtoa_r+0x9ee>
 8009214:	f018 0f01 	tst.w	r8, #1
 8009218:	d0dd      	beq.n	80091d6 <_dtoa_r+0x9ee>
 800921a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800921e:	d1d8      	bne.n	80091d2 <_dtoa_r+0x9ea>
 8009220:	9b05      	ldr	r3, [sp, #20]
 8009222:	9a05      	ldr	r2, [sp, #20]
 8009224:	1c5d      	adds	r5, r3, #1
 8009226:	2339      	movs	r3, #57	; 0x39
 8009228:	7013      	strb	r3, [r2, #0]
 800922a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800922e:	2b39      	cmp	r3, #57	; 0x39
 8009230:	f105 32ff 	add.w	r2, r5, #4294967295
 8009234:	d04f      	beq.n	80092d6 <_dtoa_r+0xaee>
 8009236:	3301      	adds	r3, #1
 8009238:	7013      	strb	r3, [r2, #0]
 800923a:	e754      	b.n	80090e6 <_dtoa_r+0x8fe>
 800923c:	9a05      	ldr	r2, [sp, #20]
 800923e:	2b00      	cmp	r3, #0
 8009240:	f102 0501 	add.w	r5, r2, #1
 8009244:	dd06      	ble.n	8009254 <_dtoa_r+0xa6c>
 8009246:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800924a:	d0e9      	beq.n	8009220 <_dtoa_r+0xa38>
 800924c:	f108 0801 	add.w	r8, r8, #1
 8009250:	9b05      	ldr	r3, [sp, #20]
 8009252:	e7c2      	b.n	80091da <_dtoa_r+0x9f2>
 8009254:	9a02      	ldr	r2, [sp, #8]
 8009256:	f805 8c01 	strb.w	r8, [r5, #-1]
 800925a:	eba5 030b 	sub.w	r3, r5, fp
 800925e:	4293      	cmp	r3, r2
 8009260:	d021      	beq.n	80092a6 <_dtoa_r+0xabe>
 8009262:	2300      	movs	r3, #0
 8009264:	220a      	movs	r2, #10
 8009266:	9904      	ldr	r1, [sp, #16]
 8009268:	4620      	mov	r0, r4
 800926a:	f000 f8e1 	bl	8009430 <__multadd>
 800926e:	45b1      	cmp	r9, r6
 8009270:	9004      	str	r0, [sp, #16]
 8009272:	f04f 0300 	mov.w	r3, #0
 8009276:	f04f 020a 	mov.w	r2, #10
 800927a:	4649      	mov	r1, r9
 800927c:	4620      	mov	r0, r4
 800927e:	d105      	bne.n	800928c <_dtoa_r+0xaa4>
 8009280:	f000 f8d6 	bl	8009430 <__multadd>
 8009284:	4681      	mov	r9, r0
 8009286:	4606      	mov	r6, r0
 8009288:	9505      	str	r5, [sp, #20]
 800928a:	e776      	b.n	800917a <_dtoa_r+0x992>
 800928c:	f000 f8d0 	bl	8009430 <__multadd>
 8009290:	4631      	mov	r1, r6
 8009292:	4681      	mov	r9, r0
 8009294:	2300      	movs	r3, #0
 8009296:	220a      	movs	r2, #10
 8009298:	4620      	mov	r0, r4
 800929a:	f000 f8c9 	bl	8009430 <__multadd>
 800929e:	4606      	mov	r6, r0
 80092a0:	e7f2      	b.n	8009288 <_dtoa_r+0xaa0>
 80092a2:	f04f 0900 	mov.w	r9, #0
 80092a6:	2201      	movs	r2, #1
 80092a8:	9904      	ldr	r1, [sp, #16]
 80092aa:	4620      	mov	r0, r4
 80092ac:	f000 fa36 	bl	800971c <__lshift>
 80092b0:	4639      	mov	r1, r7
 80092b2:	9004      	str	r0, [sp, #16]
 80092b4:	f000 fa86 	bl	80097c4 <__mcmp>
 80092b8:	2800      	cmp	r0, #0
 80092ba:	dcb6      	bgt.n	800922a <_dtoa_r+0xa42>
 80092bc:	d102      	bne.n	80092c4 <_dtoa_r+0xadc>
 80092be:	f018 0f01 	tst.w	r8, #1
 80092c2:	d1b2      	bne.n	800922a <_dtoa_r+0xa42>
 80092c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80092c8:	2b30      	cmp	r3, #48	; 0x30
 80092ca:	f105 32ff 	add.w	r2, r5, #4294967295
 80092ce:	f47f af0a 	bne.w	80090e6 <_dtoa_r+0x8fe>
 80092d2:	4615      	mov	r5, r2
 80092d4:	e7f6      	b.n	80092c4 <_dtoa_r+0xadc>
 80092d6:	4593      	cmp	fp, r2
 80092d8:	d105      	bne.n	80092e6 <_dtoa_r+0xafe>
 80092da:	2331      	movs	r3, #49	; 0x31
 80092dc:	f10a 0a01 	add.w	sl, sl, #1
 80092e0:	f88b 3000 	strb.w	r3, [fp]
 80092e4:	e6ff      	b.n	80090e6 <_dtoa_r+0x8fe>
 80092e6:	4615      	mov	r5, r2
 80092e8:	e79f      	b.n	800922a <_dtoa_r+0xa42>
 80092ea:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009350 <_dtoa_r+0xb68>
 80092ee:	e007      	b.n	8009300 <_dtoa_r+0xb18>
 80092f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092f2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009354 <_dtoa_r+0xb6c>
 80092f6:	b11b      	cbz	r3, 8009300 <_dtoa_r+0xb18>
 80092f8:	f10b 0308 	add.w	r3, fp, #8
 80092fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80092fe:	6013      	str	r3, [r2, #0]
 8009300:	4658      	mov	r0, fp
 8009302:	b017      	add	sp, #92	; 0x5c
 8009304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009308:	9b06      	ldr	r3, [sp, #24]
 800930a:	2b01      	cmp	r3, #1
 800930c:	f77f ae35 	ble.w	8008f7a <_dtoa_r+0x792>
 8009310:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009312:	9307      	str	r3, [sp, #28]
 8009314:	e649      	b.n	8008faa <_dtoa_r+0x7c2>
 8009316:	9b02      	ldr	r3, [sp, #8]
 8009318:	2b00      	cmp	r3, #0
 800931a:	dc03      	bgt.n	8009324 <_dtoa_r+0xb3c>
 800931c:	9b06      	ldr	r3, [sp, #24]
 800931e:	2b02      	cmp	r3, #2
 8009320:	f73f aecc 	bgt.w	80090bc <_dtoa_r+0x8d4>
 8009324:	465d      	mov	r5, fp
 8009326:	4639      	mov	r1, r7
 8009328:	9804      	ldr	r0, [sp, #16]
 800932a:	f7ff f9ce 	bl	80086ca <quorem>
 800932e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009332:	f805 8b01 	strb.w	r8, [r5], #1
 8009336:	9a02      	ldr	r2, [sp, #8]
 8009338:	eba5 030b 	sub.w	r3, r5, fp
 800933c:	429a      	cmp	r2, r3
 800933e:	ddb0      	ble.n	80092a2 <_dtoa_r+0xaba>
 8009340:	2300      	movs	r3, #0
 8009342:	220a      	movs	r2, #10
 8009344:	9904      	ldr	r1, [sp, #16]
 8009346:	4620      	mov	r0, r4
 8009348:	f000 f872 	bl	8009430 <__multadd>
 800934c:	9004      	str	r0, [sp, #16]
 800934e:	e7ea      	b.n	8009326 <_dtoa_r+0xb3e>
 8009350:	08009b18 	.word	0x08009b18
 8009354:	08009b1a 	.word	0x08009b1a

08009358 <_localeconv_r>:
 8009358:	4b04      	ldr	r3, [pc, #16]	; (800936c <_localeconv_r+0x14>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	6a18      	ldr	r0, [r3, #32]
 800935e:	4b04      	ldr	r3, [pc, #16]	; (8009370 <_localeconv_r+0x18>)
 8009360:	2800      	cmp	r0, #0
 8009362:	bf08      	it	eq
 8009364:	4618      	moveq	r0, r3
 8009366:	30f0      	adds	r0, #240	; 0xf0
 8009368:	4770      	bx	lr
 800936a:	bf00      	nop
 800936c:	20000014 	.word	0x20000014
 8009370:	20000078 	.word	0x20000078

08009374 <malloc>:
 8009374:	4b02      	ldr	r3, [pc, #8]	; (8009380 <malloc+0xc>)
 8009376:	4601      	mov	r1, r0
 8009378:	6818      	ldr	r0, [r3, #0]
 800937a:	f000 baf7 	b.w	800996c <_malloc_r>
 800937e:	bf00      	nop
 8009380:	20000014 	.word	0x20000014

08009384 <memcpy>:
 8009384:	b510      	push	{r4, lr}
 8009386:	1e43      	subs	r3, r0, #1
 8009388:	440a      	add	r2, r1
 800938a:	4291      	cmp	r1, r2
 800938c:	d100      	bne.n	8009390 <memcpy+0xc>
 800938e:	bd10      	pop	{r4, pc}
 8009390:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009394:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009398:	e7f7      	b.n	800938a <memcpy+0x6>

0800939a <_Balloc>:
 800939a:	b570      	push	{r4, r5, r6, lr}
 800939c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800939e:	4604      	mov	r4, r0
 80093a0:	460e      	mov	r6, r1
 80093a2:	b93d      	cbnz	r5, 80093b4 <_Balloc+0x1a>
 80093a4:	2010      	movs	r0, #16
 80093a6:	f7ff ffe5 	bl	8009374 <malloc>
 80093aa:	6260      	str	r0, [r4, #36]	; 0x24
 80093ac:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80093b0:	6005      	str	r5, [r0, #0]
 80093b2:	60c5      	str	r5, [r0, #12]
 80093b4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80093b6:	68eb      	ldr	r3, [r5, #12]
 80093b8:	b183      	cbz	r3, 80093dc <_Balloc+0x42>
 80093ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80093c2:	b9b8      	cbnz	r0, 80093f4 <_Balloc+0x5a>
 80093c4:	2101      	movs	r1, #1
 80093c6:	fa01 f506 	lsl.w	r5, r1, r6
 80093ca:	1d6a      	adds	r2, r5, #5
 80093cc:	0092      	lsls	r2, r2, #2
 80093ce:	4620      	mov	r0, r4
 80093d0:	f000 fabe 	bl	8009950 <_calloc_r>
 80093d4:	b160      	cbz	r0, 80093f0 <_Balloc+0x56>
 80093d6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80093da:	e00e      	b.n	80093fa <_Balloc+0x60>
 80093dc:	2221      	movs	r2, #33	; 0x21
 80093de:	2104      	movs	r1, #4
 80093e0:	4620      	mov	r0, r4
 80093e2:	f000 fab5 	bl	8009950 <_calloc_r>
 80093e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093e8:	60e8      	str	r0, [r5, #12]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d1e4      	bne.n	80093ba <_Balloc+0x20>
 80093f0:	2000      	movs	r0, #0
 80093f2:	bd70      	pop	{r4, r5, r6, pc}
 80093f4:	6802      	ldr	r2, [r0, #0]
 80093f6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80093fa:	2300      	movs	r3, #0
 80093fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009400:	e7f7      	b.n	80093f2 <_Balloc+0x58>

08009402 <_Bfree>:
 8009402:	b570      	push	{r4, r5, r6, lr}
 8009404:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009406:	4606      	mov	r6, r0
 8009408:	460d      	mov	r5, r1
 800940a:	b93c      	cbnz	r4, 800941c <_Bfree+0x1a>
 800940c:	2010      	movs	r0, #16
 800940e:	f7ff ffb1 	bl	8009374 <malloc>
 8009412:	6270      	str	r0, [r6, #36]	; 0x24
 8009414:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009418:	6004      	str	r4, [r0, #0]
 800941a:	60c4      	str	r4, [r0, #12]
 800941c:	b13d      	cbz	r5, 800942e <_Bfree+0x2c>
 800941e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009420:	686a      	ldr	r2, [r5, #4]
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009428:	6029      	str	r1, [r5, #0]
 800942a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800942e:	bd70      	pop	{r4, r5, r6, pc}

08009430 <__multadd>:
 8009430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009434:	690d      	ldr	r5, [r1, #16]
 8009436:	461f      	mov	r7, r3
 8009438:	4606      	mov	r6, r0
 800943a:	460c      	mov	r4, r1
 800943c:	f101 0c14 	add.w	ip, r1, #20
 8009440:	2300      	movs	r3, #0
 8009442:	f8dc 0000 	ldr.w	r0, [ip]
 8009446:	b281      	uxth	r1, r0
 8009448:	fb02 7101 	mla	r1, r2, r1, r7
 800944c:	0c0f      	lsrs	r7, r1, #16
 800944e:	0c00      	lsrs	r0, r0, #16
 8009450:	fb02 7000 	mla	r0, r2, r0, r7
 8009454:	b289      	uxth	r1, r1
 8009456:	3301      	adds	r3, #1
 8009458:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800945c:	429d      	cmp	r5, r3
 800945e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009462:	f84c 1b04 	str.w	r1, [ip], #4
 8009466:	dcec      	bgt.n	8009442 <__multadd+0x12>
 8009468:	b1d7      	cbz	r7, 80094a0 <__multadd+0x70>
 800946a:	68a3      	ldr	r3, [r4, #8]
 800946c:	42ab      	cmp	r3, r5
 800946e:	dc12      	bgt.n	8009496 <__multadd+0x66>
 8009470:	6861      	ldr	r1, [r4, #4]
 8009472:	4630      	mov	r0, r6
 8009474:	3101      	adds	r1, #1
 8009476:	f7ff ff90 	bl	800939a <_Balloc>
 800947a:	6922      	ldr	r2, [r4, #16]
 800947c:	3202      	adds	r2, #2
 800947e:	f104 010c 	add.w	r1, r4, #12
 8009482:	4680      	mov	r8, r0
 8009484:	0092      	lsls	r2, r2, #2
 8009486:	300c      	adds	r0, #12
 8009488:	f7ff ff7c 	bl	8009384 <memcpy>
 800948c:	4621      	mov	r1, r4
 800948e:	4630      	mov	r0, r6
 8009490:	f7ff ffb7 	bl	8009402 <_Bfree>
 8009494:	4644      	mov	r4, r8
 8009496:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800949a:	3501      	adds	r5, #1
 800949c:	615f      	str	r7, [r3, #20]
 800949e:	6125      	str	r5, [r4, #16]
 80094a0:	4620      	mov	r0, r4
 80094a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080094a6 <__hi0bits>:
 80094a6:	0c02      	lsrs	r2, r0, #16
 80094a8:	0412      	lsls	r2, r2, #16
 80094aa:	4603      	mov	r3, r0
 80094ac:	b9b2      	cbnz	r2, 80094dc <__hi0bits+0x36>
 80094ae:	0403      	lsls	r3, r0, #16
 80094b0:	2010      	movs	r0, #16
 80094b2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80094b6:	bf04      	itt	eq
 80094b8:	021b      	lsleq	r3, r3, #8
 80094ba:	3008      	addeq	r0, #8
 80094bc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80094c0:	bf04      	itt	eq
 80094c2:	011b      	lsleq	r3, r3, #4
 80094c4:	3004      	addeq	r0, #4
 80094c6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80094ca:	bf04      	itt	eq
 80094cc:	009b      	lsleq	r3, r3, #2
 80094ce:	3002      	addeq	r0, #2
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	db06      	blt.n	80094e2 <__hi0bits+0x3c>
 80094d4:	005b      	lsls	r3, r3, #1
 80094d6:	d503      	bpl.n	80094e0 <__hi0bits+0x3a>
 80094d8:	3001      	adds	r0, #1
 80094da:	4770      	bx	lr
 80094dc:	2000      	movs	r0, #0
 80094de:	e7e8      	b.n	80094b2 <__hi0bits+0xc>
 80094e0:	2020      	movs	r0, #32
 80094e2:	4770      	bx	lr

080094e4 <__lo0bits>:
 80094e4:	6803      	ldr	r3, [r0, #0]
 80094e6:	f013 0207 	ands.w	r2, r3, #7
 80094ea:	4601      	mov	r1, r0
 80094ec:	d00b      	beq.n	8009506 <__lo0bits+0x22>
 80094ee:	07da      	lsls	r2, r3, #31
 80094f0:	d423      	bmi.n	800953a <__lo0bits+0x56>
 80094f2:	0798      	lsls	r0, r3, #30
 80094f4:	bf49      	itett	mi
 80094f6:	085b      	lsrmi	r3, r3, #1
 80094f8:	089b      	lsrpl	r3, r3, #2
 80094fa:	2001      	movmi	r0, #1
 80094fc:	600b      	strmi	r3, [r1, #0]
 80094fe:	bf5c      	itt	pl
 8009500:	600b      	strpl	r3, [r1, #0]
 8009502:	2002      	movpl	r0, #2
 8009504:	4770      	bx	lr
 8009506:	b298      	uxth	r0, r3
 8009508:	b9a8      	cbnz	r0, 8009536 <__lo0bits+0x52>
 800950a:	0c1b      	lsrs	r3, r3, #16
 800950c:	2010      	movs	r0, #16
 800950e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009512:	bf04      	itt	eq
 8009514:	0a1b      	lsreq	r3, r3, #8
 8009516:	3008      	addeq	r0, #8
 8009518:	071a      	lsls	r2, r3, #28
 800951a:	bf04      	itt	eq
 800951c:	091b      	lsreq	r3, r3, #4
 800951e:	3004      	addeq	r0, #4
 8009520:	079a      	lsls	r2, r3, #30
 8009522:	bf04      	itt	eq
 8009524:	089b      	lsreq	r3, r3, #2
 8009526:	3002      	addeq	r0, #2
 8009528:	07da      	lsls	r2, r3, #31
 800952a:	d402      	bmi.n	8009532 <__lo0bits+0x4e>
 800952c:	085b      	lsrs	r3, r3, #1
 800952e:	d006      	beq.n	800953e <__lo0bits+0x5a>
 8009530:	3001      	adds	r0, #1
 8009532:	600b      	str	r3, [r1, #0]
 8009534:	4770      	bx	lr
 8009536:	4610      	mov	r0, r2
 8009538:	e7e9      	b.n	800950e <__lo0bits+0x2a>
 800953a:	2000      	movs	r0, #0
 800953c:	4770      	bx	lr
 800953e:	2020      	movs	r0, #32
 8009540:	4770      	bx	lr

08009542 <__i2b>:
 8009542:	b510      	push	{r4, lr}
 8009544:	460c      	mov	r4, r1
 8009546:	2101      	movs	r1, #1
 8009548:	f7ff ff27 	bl	800939a <_Balloc>
 800954c:	2201      	movs	r2, #1
 800954e:	6144      	str	r4, [r0, #20]
 8009550:	6102      	str	r2, [r0, #16]
 8009552:	bd10      	pop	{r4, pc}

08009554 <__multiply>:
 8009554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009558:	4614      	mov	r4, r2
 800955a:	690a      	ldr	r2, [r1, #16]
 800955c:	6923      	ldr	r3, [r4, #16]
 800955e:	429a      	cmp	r2, r3
 8009560:	bfb8      	it	lt
 8009562:	460b      	movlt	r3, r1
 8009564:	4688      	mov	r8, r1
 8009566:	bfbc      	itt	lt
 8009568:	46a0      	movlt	r8, r4
 800956a:	461c      	movlt	r4, r3
 800956c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009570:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009574:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009578:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800957c:	eb07 0609 	add.w	r6, r7, r9
 8009580:	42b3      	cmp	r3, r6
 8009582:	bfb8      	it	lt
 8009584:	3101      	addlt	r1, #1
 8009586:	f7ff ff08 	bl	800939a <_Balloc>
 800958a:	f100 0514 	add.w	r5, r0, #20
 800958e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009592:	462b      	mov	r3, r5
 8009594:	2200      	movs	r2, #0
 8009596:	4573      	cmp	r3, lr
 8009598:	d316      	bcc.n	80095c8 <__multiply+0x74>
 800959a:	f104 0214 	add.w	r2, r4, #20
 800959e:	f108 0114 	add.w	r1, r8, #20
 80095a2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80095a6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80095aa:	9300      	str	r3, [sp, #0]
 80095ac:	9b00      	ldr	r3, [sp, #0]
 80095ae:	9201      	str	r2, [sp, #4]
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d80c      	bhi.n	80095ce <__multiply+0x7a>
 80095b4:	2e00      	cmp	r6, #0
 80095b6:	dd03      	ble.n	80095c0 <__multiply+0x6c>
 80095b8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d05d      	beq.n	800967c <__multiply+0x128>
 80095c0:	6106      	str	r6, [r0, #16]
 80095c2:	b003      	add	sp, #12
 80095c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c8:	f843 2b04 	str.w	r2, [r3], #4
 80095cc:	e7e3      	b.n	8009596 <__multiply+0x42>
 80095ce:	f8b2 b000 	ldrh.w	fp, [r2]
 80095d2:	f1bb 0f00 	cmp.w	fp, #0
 80095d6:	d023      	beq.n	8009620 <__multiply+0xcc>
 80095d8:	4689      	mov	r9, r1
 80095da:	46ac      	mov	ip, r5
 80095dc:	f04f 0800 	mov.w	r8, #0
 80095e0:	f859 4b04 	ldr.w	r4, [r9], #4
 80095e4:	f8dc a000 	ldr.w	sl, [ip]
 80095e8:	b2a3      	uxth	r3, r4
 80095ea:	fa1f fa8a 	uxth.w	sl, sl
 80095ee:	fb0b a303 	mla	r3, fp, r3, sl
 80095f2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80095f6:	f8dc 4000 	ldr.w	r4, [ip]
 80095fa:	4443      	add	r3, r8
 80095fc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009600:	fb0b 840a 	mla	r4, fp, sl, r8
 8009604:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009608:	46e2      	mov	sl, ip
 800960a:	b29b      	uxth	r3, r3
 800960c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009610:	454f      	cmp	r7, r9
 8009612:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009616:	f84a 3b04 	str.w	r3, [sl], #4
 800961a:	d82b      	bhi.n	8009674 <__multiply+0x120>
 800961c:	f8cc 8004 	str.w	r8, [ip, #4]
 8009620:	9b01      	ldr	r3, [sp, #4]
 8009622:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009626:	3204      	adds	r2, #4
 8009628:	f1ba 0f00 	cmp.w	sl, #0
 800962c:	d020      	beq.n	8009670 <__multiply+0x11c>
 800962e:	682b      	ldr	r3, [r5, #0]
 8009630:	4689      	mov	r9, r1
 8009632:	46a8      	mov	r8, r5
 8009634:	f04f 0b00 	mov.w	fp, #0
 8009638:	f8b9 c000 	ldrh.w	ip, [r9]
 800963c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009640:	fb0a 440c 	mla	r4, sl, ip, r4
 8009644:	445c      	add	r4, fp
 8009646:	46c4      	mov	ip, r8
 8009648:	b29b      	uxth	r3, r3
 800964a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800964e:	f84c 3b04 	str.w	r3, [ip], #4
 8009652:	f859 3b04 	ldr.w	r3, [r9], #4
 8009656:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800965a:	0c1b      	lsrs	r3, r3, #16
 800965c:	fb0a b303 	mla	r3, sl, r3, fp
 8009660:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009664:	454f      	cmp	r7, r9
 8009666:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800966a:	d805      	bhi.n	8009678 <__multiply+0x124>
 800966c:	f8c8 3004 	str.w	r3, [r8, #4]
 8009670:	3504      	adds	r5, #4
 8009672:	e79b      	b.n	80095ac <__multiply+0x58>
 8009674:	46d4      	mov	ip, sl
 8009676:	e7b3      	b.n	80095e0 <__multiply+0x8c>
 8009678:	46e0      	mov	r8, ip
 800967a:	e7dd      	b.n	8009638 <__multiply+0xe4>
 800967c:	3e01      	subs	r6, #1
 800967e:	e799      	b.n	80095b4 <__multiply+0x60>

08009680 <__pow5mult>:
 8009680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009684:	4615      	mov	r5, r2
 8009686:	f012 0203 	ands.w	r2, r2, #3
 800968a:	4606      	mov	r6, r0
 800968c:	460f      	mov	r7, r1
 800968e:	d007      	beq.n	80096a0 <__pow5mult+0x20>
 8009690:	3a01      	subs	r2, #1
 8009692:	4c21      	ldr	r4, [pc, #132]	; (8009718 <__pow5mult+0x98>)
 8009694:	2300      	movs	r3, #0
 8009696:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800969a:	f7ff fec9 	bl	8009430 <__multadd>
 800969e:	4607      	mov	r7, r0
 80096a0:	10ad      	asrs	r5, r5, #2
 80096a2:	d035      	beq.n	8009710 <__pow5mult+0x90>
 80096a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80096a6:	b93c      	cbnz	r4, 80096b8 <__pow5mult+0x38>
 80096a8:	2010      	movs	r0, #16
 80096aa:	f7ff fe63 	bl	8009374 <malloc>
 80096ae:	6270      	str	r0, [r6, #36]	; 0x24
 80096b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096b4:	6004      	str	r4, [r0, #0]
 80096b6:	60c4      	str	r4, [r0, #12]
 80096b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80096bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80096c0:	b94c      	cbnz	r4, 80096d6 <__pow5mult+0x56>
 80096c2:	f240 2171 	movw	r1, #625	; 0x271
 80096c6:	4630      	mov	r0, r6
 80096c8:	f7ff ff3b 	bl	8009542 <__i2b>
 80096cc:	2300      	movs	r3, #0
 80096ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80096d2:	4604      	mov	r4, r0
 80096d4:	6003      	str	r3, [r0, #0]
 80096d6:	f04f 0800 	mov.w	r8, #0
 80096da:	07eb      	lsls	r3, r5, #31
 80096dc:	d50a      	bpl.n	80096f4 <__pow5mult+0x74>
 80096de:	4639      	mov	r1, r7
 80096e0:	4622      	mov	r2, r4
 80096e2:	4630      	mov	r0, r6
 80096e4:	f7ff ff36 	bl	8009554 <__multiply>
 80096e8:	4639      	mov	r1, r7
 80096ea:	4681      	mov	r9, r0
 80096ec:	4630      	mov	r0, r6
 80096ee:	f7ff fe88 	bl	8009402 <_Bfree>
 80096f2:	464f      	mov	r7, r9
 80096f4:	106d      	asrs	r5, r5, #1
 80096f6:	d00b      	beq.n	8009710 <__pow5mult+0x90>
 80096f8:	6820      	ldr	r0, [r4, #0]
 80096fa:	b938      	cbnz	r0, 800970c <__pow5mult+0x8c>
 80096fc:	4622      	mov	r2, r4
 80096fe:	4621      	mov	r1, r4
 8009700:	4630      	mov	r0, r6
 8009702:	f7ff ff27 	bl	8009554 <__multiply>
 8009706:	6020      	str	r0, [r4, #0]
 8009708:	f8c0 8000 	str.w	r8, [r0]
 800970c:	4604      	mov	r4, r0
 800970e:	e7e4      	b.n	80096da <__pow5mult+0x5a>
 8009710:	4638      	mov	r0, r7
 8009712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009716:	bf00      	nop
 8009718:	08009c18 	.word	0x08009c18

0800971c <__lshift>:
 800971c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009720:	460c      	mov	r4, r1
 8009722:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009726:	6923      	ldr	r3, [r4, #16]
 8009728:	6849      	ldr	r1, [r1, #4]
 800972a:	eb0a 0903 	add.w	r9, sl, r3
 800972e:	68a3      	ldr	r3, [r4, #8]
 8009730:	4607      	mov	r7, r0
 8009732:	4616      	mov	r6, r2
 8009734:	f109 0501 	add.w	r5, r9, #1
 8009738:	42ab      	cmp	r3, r5
 800973a:	db32      	blt.n	80097a2 <__lshift+0x86>
 800973c:	4638      	mov	r0, r7
 800973e:	f7ff fe2c 	bl	800939a <_Balloc>
 8009742:	2300      	movs	r3, #0
 8009744:	4680      	mov	r8, r0
 8009746:	f100 0114 	add.w	r1, r0, #20
 800974a:	461a      	mov	r2, r3
 800974c:	4553      	cmp	r3, sl
 800974e:	db2b      	blt.n	80097a8 <__lshift+0x8c>
 8009750:	6920      	ldr	r0, [r4, #16]
 8009752:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009756:	f104 0314 	add.w	r3, r4, #20
 800975a:	f016 021f 	ands.w	r2, r6, #31
 800975e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009762:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009766:	d025      	beq.n	80097b4 <__lshift+0x98>
 8009768:	f1c2 0e20 	rsb	lr, r2, #32
 800976c:	2000      	movs	r0, #0
 800976e:	681e      	ldr	r6, [r3, #0]
 8009770:	468a      	mov	sl, r1
 8009772:	4096      	lsls	r6, r2
 8009774:	4330      	orrs	r0, r6
 8009776:	f84a 0b04 	str.w	r0, [sl], #4
 800977a:	f853 0b04 	ldr.w	r0, [r3], #4
 800977e:	459c      	cmp	ip, r3
 8009780:	fa20 f00e 	lsr.w	r0, r0, lr
 8009784:	d814      	bhi.n	80097b0 <__lshift+0x94>
 8009786:	6048      	str	r0, [r1, #4]
 8009788:	b108      	cbz	r0, 800978e <__lshift+0x72>
 800978a:	f109 0502 	add.w	r5, r9, #2
 800978e:	3d01      	subs	r5, #1
 8009790:	4638      	mov	r0, r7
 8009792:	f8c8 5010 	str.w	r5, [r8, #16]
 8009796:	4621      	mov	r1, r4
 8009798:	f7ff fe33 	bl	8009402 <_Bfree>
 800979c:	4640      	mov	r0, r8
 800979e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097a2:	3101      	adds	r1, #1
 80097a4:	005b      	lsls	r3, r3, #1
 80097a6:	e7c7      	b.n	8009738 <__lshift+0x1c>
 80097a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80097ac:	3301      	adds	r3, #1
 80097ae:	e7cd      	b.n	800974c <__lshift+0x30>
 80097b0:	4651      	mov	r1, sl
 80097b2:	e7dc      	b.n	800976e <__lshift+0x52>
 80097b4:	3904      	subs	r1, #4
 80097b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80097ba:	f841 2f04 	str.w	r2, [r1, #4]!
 80097be:	459c      	cmp	ip, r3
 80097c0:	d8f9      	bhi.n	80097b6 <__lshift+0x9a>
 80097c2:	e7e4      	b.n	800978e <__lshift+0x72>

080097c4 <__mcmp>:
 80097c4:	6903      	ldr	r3, [r0, #16]
 80097c6:	690a      	ldr	r2, [r1, #16]
 80097c8:	1a9b      	subs	r3, r3, r2
 80097ca:	b530      	push	{r4, r5, lr}
 80097cc:	d10c      	bne.n	80097e8 <__mcmp+0x24>
 80097ce:	0092      	lsls	r2, r2, #2
 80097d0:	3014      	adds	r0, #20
 80097d2:	3114      	adds	r1, #20
 80097d4:	1884      	adds	r4, r0, r2
 80097d6:	4411      	add	r1, r2
 80097d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80097dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80097e0:	4295      	cmp	r5, r2
 80097e2:	d003      	beq.n	80097ec <__mcmp+0x28>
 80097e4:	d305      	bcc.n	80097f2 <__mcmp+0x2e>
 80097e6:	2301      	movs	r3, #1
 80097e8:	4618      	mov	r0, r3
 80097ea:	bd30      	pop	{r4, r5, pc}
 80097ec:	42a0      	cmp	r0, r4
 80097ee:	d3f3      	bcc.n	80097d8 <__mcmp+0x14>
 80097f0:	e7fa      	b.n	80097e8 <__mcmp+0x24>
 80097f2:	f04f 33ff 	mov.w	r3, #4294967295
 80097f6:	e7f7      	b.n	80097e8 <__mcmp+0x24>

080097f8 <__mdiff>:
 80097f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097fc:	460d      	mov	r5, r1
 80097fe:	4607      	mov	r7, r0
 8009800:	4611      	mov	r1, r2
 8009802:	4628      	mov	r0, r5
 8009804:	4614      	mov	r4, r2
 8009806:	f7ff ffdd 	bl	80097c4 <__mcmp>
 800980a:	1e06      	subs	r6, r0, #0
 800980c:	d108      	bne.n	8009820 <__mdiff+0x28>
 800980e:	4631      	mov	r1, r6
 8009810:	4638      	mov	r0, r7
 8009812:	f7ff fdc2 	bl	800939a <_Balloc>
 8009816:	2301      	movs	r3, #1
 8009818:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800981c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009820:	bfa4      	itt	ge
 8009822:	4623      	movge	r3, r4
 8009824:	462c      	movge	r4, r5
 8009826:	4638      	mov	r0, r7
 8009828:	6861      	ldr	r1, [r4, #4]
 800982a:	bfa6      	itte	ge
 800982c:	461d      	movge	r5, r3
 800982e:	2600      	movge	r6, #0
 8009830:	2601      	movlt	r6, #1
 8009832:	f7ff fdb2 	bl	800939a <_Balloc>
 8009836:	692b      	ldr	r3, [r5, #16]
 8009838:	60c6      	str	r6, [r0, #12]
 800983a:	6926      	ldr	r6, [r4, #16]
 800983c:	f105 0914 	add.w	r9, r5, #20
 8009840:	f104 0214 	add.w	r2, r4, #20
 8009844:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009848:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800984c:	f100 0514 	add.w	r5, r0, #20
 8009850:	f04f 0e00 	mov.w	lr, #0
 8009854:	f852 ab04 	ldr.w	sl, [r2], #4
 8009858:	f859 4b04 	ldr.w	r4, [r9], #4
 800985c:	fa1e f18a 	uxtah	r1, lr, sl
 8009860:	b2a3      	uxth	r3, r4
 8009862:	1ac9      	subs	r1, r1, r3
 8009864:	0c23      	lsrs	r3, r4, #16
 8009866:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800986a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800986e:	b289      	uxth	r1, r1
 8009870:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009874:	45c8      	cmp	r8, r9
 8009876:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800987a:	4694      	mov	ip, r2
 800987c:	f845 3b04 	str.w	r3, [r5], #4
 8009880:	d8e8      	bhi.n	8009854 <__mdiff+0x5c>
 8009882:	45bc      	cmp	ip, r7
 8009884:	d304      	bcc.n	8009890 <__mdiff+0x98>
 8009886:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800988a:	b183      	cbz	r3, 80098ae <__mdiff+0xb6>
 800988c:	6106      	str	r6, [r0, #16]
 800988e:	e7c5      	b.n	800981c <__mdiff+0x24>
 8009890:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009894:	fa1e f381 	uxtah	r3, lr, r1
 8009898:	141a      	asrs	r2, r3, #16
 800989a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800989e:	b29b      	uxth	r3, r3
 80098a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098a4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80098a8:	f845 3b04 	str.w	r3, [r5], #4
 80098ac:	e7e9      	b.n	8009882 <__mdiff+0x8a>
 80098ae:	3e01      	subs	r6, #1
 80098b0:	e7e9      	b.n	8009886 <__mdiff+0x8e>

080098b2 <__d2b>:
 80098b2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80098b6:	460e      	mov	r6, r1
 80098b8:	2101      	movs	r1, #1
 80098ba:	ec59 8b10 	vmov	r8, r9, d0
 80098be:	4615      	mov	r5, r2
 80098c0:	f7ff fd6b 	bl	800939a <_Balloc>
 80098c4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80098c8:	4607      	mov	r7, r0
 80098ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80098ce:	bb34      	cbnz	r4, 800991e <__d2b+0x6c>
 80098d0:	9301      	str	r3, [sp, #4]
 80098d2:	f1b8 0300 	subs.w	r3, r8, #0
 80098d6:	d027      	beq.n	8009928 <__d2b+0x76>
 80098d8:	a802      	add	r0, sp, #8
 80098da:	f840 3d08 	str.w	r3, [r0, #-8]!
 80098de:	f7ff fe01 	bl	80094e4 <__lo0bits>
 80098e2:	9900      	ldr	r1, [sp, #0]
 80098e4:	b1f0      	cbz	r0, 8009924 <__d2b+0x72>
 80098e6:	9a01      	ldr	r2, [sp, #4]
 80098e8:	f1c0 0320 	rsb	r3, r0, #32
 80098ec:	fa02 f303 	lsl.w	r3, r2, r3
 80098f0:	430b      	orrs	r3, r1
 80098f2:	40c2      	lsrs	r2, r0
 80098f4:	617b      	str	r3, [r7, #20]
 80098f6:	9201      	str	r2, [sp, #4]
 80098f8:	9b01      	ldr	r3, [sp, #4]
 80098fa:	61bb      	str	r3, [r7, #24]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	bf14      	ite	ne
 8009900:	2102      	movne	r1, #2
 8009902:	2101      	moveq	r1, #1
 8009904:	6139      	str	r1, [r7, #16]
 8009906:	b1c4      	cbz	r4, 800993a <__d2b+0x88>
 8009908:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800990c:	4404      	add	r4, r0
 800990e:	6034      	str	r4, [r6, #0]
 8009910:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009914:	6028      	str	r0, [r5, #0]
 8009916:	4638      	mov	r0, r7
 8009918:	b003      	add	sp, #12
 800991a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800991e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009922:	e7d5      	b.n	80098d0 <__d2b+0x1e>
 8009924:	6179      	str	r1, [r7, #20]
 8009926:	e7e7      	b.n	80098f8 <__d2b+0x46>
 8009928:	a801      	add	r0, sp, #4
 800992a:	f7ff fddb 	bl	80094e4 <__lo0bits>
 800992e:	9b01      	ldr	r3, [sp, #4]
 8009930:	617b      	str	r3, [r7, #20]
 8009932:	2101      	movs	r1, #1
 8009934:	6139      	str	r1, [r7, #16]
 8009936:	3020      	adds	r0, #32
 8009938:	e7e5      	b.n	8009906 <__d2b+0x54>
 800993a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800993e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009942:	6030      	str	r0, [r6, #0]
 8009944:	6918      	ldr	r0, [r3, #16]
 8009946:	f7ff fdae 	bl	80094a6 <__hi0bits>
 800994a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800994e:	e7e1      	b.n	8009914 <__d2b+0x62>

08009950 <_calloc_r>:
 8009950:	b538      	push	{r3, r4, r5, lr}
 8009952:	fb02 f401 	mul.w	r4, r2, r1
 8009956:	4621      	mov	r1, r4
 8009958:	f000 f808 	bl	800996c <_malloc_r>
 800995c:	4605      	mov	r5, r0
 800995e:	b118      	cbz	r0, 8009968 <_calloc_r+0x18>
 8009960:	4622      	mov	r2, r4
 8009962:	2100      	movs	r1, #0
 8009964:	f7fe fb60 	bl	8008028 <memset>
 8009968:	4628      	mov	r0, r5
 800996a:	bd38      	pop	{r3, r4, r5, pc}

0800996c <_malloc_r>:
 800996c:	b570      	push	{r4, r5, r6, lr}
 800996e:	1ccd      	adds	r5, r1, #3
 8009970:	f025 0503 	bic.w	r5, r5, #3
 8009974:	3508      	adds	r5, #8
 8009976:	2d0c      	cmp	r5, #12
 8009978:	bf38      	it	cc
 800997a:	250c      	movcc	r5, #12
 800997c:	2d00      	cmp	r5, #0
 800997e:	4606      	mov	r6, r0
 8009980:	db01      	blt.n	8009986 <_malloc_r+0x1a>
 8009982:	42a9      	cmp	r1, r5
 8009984:	d903      	bls.n	800998e <_malloc_r+0x22>
 8009986:	230c      	movs	r3, #12
 8009988:	6033      	str	r3, [r6, #0]
 800998a:	2000      	movs	r0, #0
 800998c:	bd70      	pop	{r4, r5, r6, pc}
 800998e:	f000 f869 	bl	8009a64 <__malloc_lock>
 8009992:	4a21      	ldr	r2, [pc, #132]	; (8009a18 <_malloc_r+0xac>)
 8009994:	6814      	ldr	r4, [r2, #0]
 8009996:	4621      	mov	r1, r4
 8009998:	b991      	cbnz	r1, 80099c0 <_malloc_r+0x54>
 800999a:	4c20      	ldr	r4, [pc, #128]	; (8009a1c <_malloc_r+0xb0>)
 800999c:	6823      	ldr	r3, [r4, #0]
 800999e:	b91b      	cbnz	r3, 80099a8 <_malloc_r+0x3c>
 80099a0:	4630      	mov	r0, r6
 80099a2:	f000 f83d 	bl	8009a20 <_sbrk_r>
 80099a6:	6020      	str	r0, [r4, #0]
 80099a8:	4629      	mov	r1, r5
 80099aa:	4630      	mov	r0, r6
 80099ac:	f000 f838 	bl	8009a20 <_sbrk_r>
 80099b0:	1c43      	adds	r3, r0, #1
 80099b2:	d124      	bne.n	80099fe <_malloc_r+0x92>
 80099b4:	230c      	movs	r3, #12
 80099b6:	6033      	str	r3, [r6, #0]
 80099b8:	4630      	mov	r0, r6
 80099ba:	f000 f854 	bl	8009a66 <__malloc_unlock>
 80099be:	e7e4      	b.n	800998a <_malloc_r+0x1e>
 80099c0:	680b      	ldr	r3, [r1, #0]
 80099c2:	1b5b      	subs	r3, r3, r5
 80099c4:	d418      	bmi.n	80099f8 <_malloc_r+0x8c>
 80099c6:	2b0b      	cmp	r3, #11
 80099c8:	d90f      	bls.n	80099ea <_malloc_r+0x7e>
 80099ca:	600b      	str	r3, [r1, #0]
 80099cc:	50cd      	str	r5, [r1, r3]
 80099ce:	18cc      	adds	r4, r1, r3
 80099d0:	4630      	mov	r0, r6
 80099d2:	f000 f848 	bl	8009a66 <__malloc_unlock>
 80099d6:	f104 000b 	add.w	r0, r4, #11
 80099da:	1d23      	adds	r3, r4, #4
 80099dc:	f020 0007 	bic.w	r0, r0, #7
 80099e0:	1ac3      	subs	r3, r0, r3
 80099e2:	d0d3      	beq.n	800998c <_malloc_r+0x20>
 80099e4:	425a      	negs	r2, r3
 80099e6:	50e2      	str	r2, [r4, r3]
 80099e8:	e7d0      	b.n	800998c <_malloc_r+0x20>
 80099ea:	428c      	cmp	r4, r1
 80099ec:	684b      	ldr	r3, [r1, #4]
 80099ee:	bf16      	itet	ne
 80099f0:	6063      	strne	r3, [r4, #4]
 80099f2:	6013      	streq	r3, [r2, #0]
 80099f4:	460c      	movne	r4, r1
 80099f6:	e7eb      	b.n	80099d0 <_malloc_r+0x64>
 80099f8:	460c      	mov	r4, r1
 80099fa:	6849      	ldr	r1, [r1, #4]
 80099fc:	e7cc      	b.n	8009998 <_malloc_r+0x2c>
 80099fe:	1cc4      	adds	r4, r0, #3
 8009a00:	f024 0403 	bic.w	r4, r4, #3
 8009a04:	42a0      	cmp	r0, r4
 8009a06:	d005      	beq.n	8009a14 <_malloc_r+0xa8>
 8009a08:	1a21      	subs	r1, r4, r0
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	f000 f808 	bl	8009a20 <_sbrk_r>
 8009a10:	3001      	adds	r0, #1
 8009a12:	d0cf      	beq.n	80099b4 <_malloc_r+0x48>
 8009a14:	6025      	str	r5, [r4, #0]
 8009a16:	e7db      	b.n	80099d0 <_malloc_r+0x64>
 8009a18:	20000440 	.word	0x20000440
 8009a1c:	20000444 	.word	0x20000444

08009a20 <_sbrk_r>:
 8009a20:	b538      	push	{r3, r4, r5, lr}
 8009a22:	4c06      	ldr	r4, [pc, #24]	; (8009a3c <_sbrk_r+0x1c>)
 8009a24:	2300      	movs	r3, #0
 8009a26:	4605      	mov	r5, r0
 8009a28:	4608      	mov	r0, r1
 8009a2a:	6023      	str	r3, [r4, #0]
 8009a2c:	f7fa fe36 	bl	800469c <_sbrk>
 8009a30:	1c43      	adds	r3, r0, #1
 8009a32:	d102      	bne.n	8009a3a <_sbrk_r+0x1a>
 8009a34:	6823      	ldr	r3, [r4, #0]
 8009a36:	b103      	cbz	r3, 8009a3a <_sbrk_r+0x1a>
 8009a38:	602b      	str	r3, [r5, #0]
 8009a3a:	bd38      	pop	{r3, r4, r5, pc}
 8009a3c:	20000b88 	.word	0x20000b88

08009a40 <__ascii_mbtowc>:
 8009a40:	b082      	sub	sp, #8
 8009a42:	b901      	cbnz	r1, 8009a46 <__ascii_mbtowc+0x6>
 8009a44:	a901      	add	r1, sp, #4
 8009a46:	b142      	cbz	r2, 8009a5a <__ascii_mbtowc+0x1a>
 8009a48:	b14b      	cbz	r3, 8009a5e <__ascii_mbtowc+0x1e>
 8009a4a:	7813      	ldrb	r3, [r2, #0]
 8009a4c:	600b      	str	r3, [r1, #0]
 8009a4e:	7812      	ldrb	r2, [r2, #0]
 8009a50:	1c10      	adds	r0, r2, #0
 8009a52:	bf18      	it	ne
 8009a54:	2001      	movne	r0, #1
 8009a56:	b002      	add	sp, #8
 8009a58:	4770      	bx	lr
 8009a5a:	4610      	mov	r0, r2
 8009a5c:	e7fb      	b.n	8009a56 <__ascii_mbtowc+0x16>
 8009a5e:	f06f 0001 	mvn.w	r0, #1
 8009a62:	e7f8      	b.n	8009a56 <__ascii_mbtowc+0x16>

08009a64 <__malloc_lock>:
 8009a64:	4770      	bx	lr

08009a66 <__malloc_unlock>:
 8009a66:	4770      	bx	lr

08009a68 <__ascii_wctomb>:
 8009a68:	b149      	cbz	r1, 8009a7e <__ascii_wctomb+0x16>
 8009a6a:	2aff      	cmp	r2, #255	; 0xff
 8009a6c:	bf85      	ittet	hi
 8009a6e:	238a      	movhi	r3, #138	; 0x8a
 8009a70:	6003      	strhi	r3, [r0, #0]
 8009a72:	700a      	strbls	r2, [r1, #0]
 8009a74:	f04f 30ff 	movhi.w	r0, #4294967295
 8009a78:	bf98      	it	ls
 8009a7a:	2001      	movls	r0, #1
 8009a7c:	4770      	bx	lr
 8009a7e:	4608      	mov	r0, r1
 8009a80:	4770      	bx	lr
	...

08009a84 <_init>:
 8009a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a86:	bf00      	nop
 8009a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a8a:	bc08      	pop	{r3}
 8009a8c:	469e      	mov	lr, r3
 8009a8e:	4770      	bx	lr

08009a90 <_fini>:
 8009a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a92:	bf00      	nop
 8009a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a96:	bc08      	pop	{r3}
 8009a98:	469e      	mov	lr, r3
 8009a9a:	4770      	bx	lr
