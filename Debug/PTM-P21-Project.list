
PTM-P21-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005404  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08005590  08005590  00015590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057d0  080057d0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080057d0  080057d0  000157d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057d8  080057d8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057d8  080057d8  000157d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057dc  080057dc  000157dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080057e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  200001dc  080059bc  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  080059bc  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2c9  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001aac  00000000  00000000  0002b4d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000be8  00000000  00000000  0002cf88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b00  00000000  00000000  0002db70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000204b6  00000000  00000000  0002e670  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a412  00000000  00000000  0004eb26  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9966  00000000  00000000  00058f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012289e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039e0  00000000  00000000  0012291c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001dc 	.word	0x200001dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005574 	.word	0x08005574

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e0 	.word	0x200001e0
 80001c4:	08005574 	.word	0x08005574

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b972 	b.w	8000e3c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9e08      	ldr	r6, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	4688      	mov	r8, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d14b      	bne.n	8000c16 <__udivmoddi4+0xa6>
 8000b7e:	428a      	cmp	r2, r1
 8000b80:	4615      	mov	r5, r2
 8000b82:	d967      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	b14a      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8a:	f1c2 0720 	rsb	r7, r2, #32
 8000b8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b92:	fa20 f707 	lsr.w	r7, r0, r7
 8000b96:	4095      	lsls	r5, r2
 8000b98:	ea47 0803 	orr.w	r8, r7, r3
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ba8:	fa1f fc85 	uxth.w	ip, r5
 8000bac:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bb0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb4:	fb07 f10c 	mul.w	r1, r7, ip
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18eb      	adds	r3, r5, r3
 8000bbe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bc2:	f080 811b 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8118 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bcc:	3f02      	subs	r7, #2
 8000bce:	442b      	add	r3, r5
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be4:	45a4      	cmp	ip, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	192c      	adds	r4, r5, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	f080 8107 	bcs.w	8000e00 <__udivmoddi4+0x290>
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	f240 8104 	bls.w	8000e00 <__udivmoddi4+0x290>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	442c      	add	r4, r5
 8000bfc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c00:	eba4 040c 	sub.w	r4, r4, ip
 8000c04:	2700      	movs	r7, #0
 8000c06:	b11e      	cbz	r6, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c10:	4639      	mov	r1, r7
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d909      	bls.n	8000c2e <__udivmoddi4+0xbe>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	f000 80eb 	beq.w	8000df6 <__udivmoddi4+0x286>
 8000c20:	2700      	movs	r7, #0
 8000c22:	e9c6 0100 	strd	r0, r1, [r6]
 8000c26:	4638      	mov	r0, r7
 8000c28:	4639      	mov	r1, r7
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	fab3 f783 	clz	r7, r3
 8000c32:	2f00      	cmp	r7, #0
 8000c34:	d147      	bne.n	8000cc6 <__udivmoddi4+0x156>
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d302      	bcc.n	8000c40 <__udivmoddi4+0xd0>
 8000c3a:	4282      	cmp	r2, r0
 8000c3c:	f200 80fa 	bhi.w	8000e34 <__udivmoddi4+0x2c4>
 8000c40:	1a84      	subs	r4, r0, r2
 8000c42:	eb61 0303 	sbc.w	r3, r1, r3
 8000c46:	2001      	movs	r0, #1
 8000c48:	4698      	mov	r8, r3
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	d0e0      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000c4e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c52:	e7dd      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000c54:	b902      	cbnz	r2, 8000c58 <__udivmoddi4+0xe8>
 8000c56:	deff      	udf	#255	; 0xff
 8000c58:	fab2 f282 	clz	r2, r2
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	f040 808f 	bne.w	8000d80 <__udivmoddi4+0x210>
 8000c62:	1b49      	subs	r1, r1, r5
 8000c64:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c68:	fa1f f885 	uxth.w	r8, r5
 8000c6c:	2701      	movs	r7, #1
 8000c6e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c72:	0c23      	lsrs	r3, r4, #16
 8000c74:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x124>
 8000c84:	18eb      	adds	r3, r5, r3
 8000c86:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x122>
 8000c8c:	4299      	cmp	r1, r3
 8000c8e:	f200 80cd 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c92:	4684      	mov	ip, r0
 8000c94:	1a59      	subs	r1, r3, r1
 8000c96:	b2a3      	uxth	r3, r4
 8000c98:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c9c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ca0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ca4:	fb08 f800 	mul.w	r8, r8, r0
 8000ca8:	45a0      	cmp	r8, r4
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0x14c>
 8000cac:	192c      	adds	r4, r5, r4
 8000cae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x14a>
 8000cb4:	45a0      	cmp	r8, r4
 8000cb6:	f200 80b6 	bhi.w	8000e26 <__udivmoddi4+0x2b6>
 8000cba:	4618      	mov	r0, r3
 8000cbc:	eba4 0408 	sub.w	r4, r4, r8
 8000cc0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc4:	e79f      	b.n	8000c06 <__udivmoddi4+0x96>
 8000cc6:	f1c7 0c20 	rsb	ip, r7, #32
 8000cca:	40bb      	lsls	r3, r7
 8000ccc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cd0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cd4:	fa01 f407 	lsl.w	r4, r1, r7
 8000cd8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cdc:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ce0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ce4:	4325      	orrs	r5, r4
 8000ce6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cea:	0c2c      	lsrs	r4, r5, #16
 8000cec:	fb08 3319 	mls	r3, r8, r9, r3
 8000cf0:	fa1f fa8e 	uxth.w	sl, lr
 8000cf4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cf8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cfc:	429c      	cmp	r4, r3
 8000cfe:	fa02 f207 	lsl.w	r2, r2, r7
 8000d02:	fa00 f107 	lsl.w	r1, r0, r7
 8000d06:	d90b      	bls.n	8000d20 <__udivmoddi4+0x1b0>
 8000d08:	eb1e 0303 	adds.w	r3, lr, r3
 8000d0c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d10:	f080 8087 	bcs.w	8000e22 <__udivmoddi4+0x2b2>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f240 8084 	bls.w	8000e22 <__udivmoddi4+0x2b2>
 8000d1a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d1e:	4473      	add	r3, lr
 8000d20:	1b1b      	subs	r3, r3, r4
 8000d22:	b2ad      	uxth	r5, r5
 8000d24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d28:	fb08 3310 	mls	r3, r8, r0, r3
 8000d2c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d30:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d34:	45a2      	cmp	sl, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x1da>
 8000d38:	eb1e 0404 	adds.w	r4, lr, r4
 8000d3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d40:	d26b      	bcs.n	8000e1a <__udivmoddi4+0x2aa>
 8000d42:	45a2      	cmp	sl, r4
 8000d44:	d969      	bls.n	8000e1a <__udivmoddi4+0x2aa>
 8000d46:	3802      	subs	r0, #2
 8000d48:	4474      	add	r4, lr
 8000d4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d52:	eba4 040a 	sub.w	r4, r4, sl
 8000d56:	454c      	cmp	r4, r9
 8000d58:	46c2      	mov	sl, r8
 8000d5a:	464b      	mov	r3, r9
 8000d5c:	d354      	bcc.n	8000e08 <__udivmoddi4+0x298>
 8000d5e:	d051      	beq.n	8000e04 <__udivmoddi4+0x294>
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d069      	beq.n	8000e38 <__udivmoddi4+0x2c8>
 8000d64:	ebb1 050a 	subs.w	r5, r1, sl
 8000d68:	eb64 0403 	sbc.w	r4, r4, r3
 8000d6c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d70:	40fd      	lsrs	r5, r7
 8000d72:	40fc      	lsrs	r4, r7
 8000d74:	ea4c 0505 	orr.w	r5, ip, r5
 8000d78:	e9c6 5400 	strd	r5, r4, [r6]
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	e747      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000d80:	f1c2 0320 	rsb	r3, r2, #32
 8000d84:	fa20 f703 	lsr.w	r7, r0, r3
 8000d88:	4095      	lsls	r5, r2
 8000d8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d92:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d96:	4338      	orrs	r0, r7
 8000d98:	0c01      	lsrs	r1, r0, #16
 8000d9a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d9e:	fa1f f885 	uxth.w	r8, r5
 8000da2:	fb0e 3317 	mls	r3, lr, r7, r3
 8000da6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000daa:	fb07 f308 	mul.w	r3, r7, r8
 8000dae:	428b      	cmp	r3, r1
 8000db0:	fa04 f402 	lsl.w	r4, r4, r2
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x256>
 8000db6:	1869      	adds	r1, r5, r1
 8000db8:	f107 3cff 	add.w	ip, r7, #4294967295
 8000dbc:	d22f      	bcs.n	8000e1e <__udivmoddi4+0x2ae>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d92d      	bls.n	8000e1e <__udivmoddi4+0x2ae>
 8000dc2:	3f02      	subs	r7, #2
 8000dc4:	4429      	add	r1, r5
 8000dc6:	1acb      	subs	r3, r1, r3
 8000dc8:	b281      	uxth	r1, r0
 8000dca:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dce:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd6:	fb00 f308 	mul.w	r3, r0, r8
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x27e>
 8000dde:	1869      	adds	r1, r5, r1
 8000de0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de4:	d217      	bcs.n	8000e16 <__udivmoddi4+0x2a6>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d915      	bls.n	8000e16 <__udivmoddi4+0x2a6>
 8000dea:	3802      	subs	r0, #2
 8000dec:	4429      	add	r1, r5
 8000dee:	1ac9      	subs	r1, r1, r3
 8000df0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000df4:	e73b      	b.n	8000c6e <__udivmoddi4+0xfe>
 8000df6:	4637      	mov	r7, r6
 8000df8:	4630      	mov	r0, r6
 8000dfa:	e709      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000dfc:	4607      	mov	r7, r0
 8000dfe:	e6e7      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000e00:	4618      	mov	r0, r3
 8000e02:	e6fb      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e04:	4541      	cmp	r1, r8
 8000e06:	d2ab      	bcs.n	8000d60 <__udivmoddi4+0x1f0>
 8000e08:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e0c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e10:	3801      	subs	r0, #1
 8000e12:	4613      	mov	r3, r2
 8000e14:	e7a4      	b.n	8000d60 <__udivmoddi4+0x1f0>
 8000e16:	4660      	mov	r0, ip
 8000e18:	e7e9      	b.n	8000dee <__udivmoddi4+0x27e>
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	e795      	b.n	8000d4a <__udivmoddi4+0x1da>
 8000e1e:	4667      	mov	r7, ip
 8000e20:	e7d1      	b.n	8000dc6 <__udivmoddi4+0x256>
 8000e22:	4681      	mov	r9, r0
 8000e24:	e77c      	b.n	8000d20 <__udivmoddi4+0x1b0>
 8000e26:	3802      	subs	r0, #2
 8000e28:	442c      	add	r4, r5
 8000e2a:	e747      	b.n	8000cbc <__udivmoddi4+0x14c>
 8000e2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e30:	442b      	add	r3, r5
 8000e32:	e72f      	b.n	8000c94 <__udivmoddi4+0x124>
 8000e34:	4638      	mov	r0, r7
 8000e36:	e708      	b.n	8000c4a <__udivmoddi4+0xda>
 8000e38:	4637      	mov	r7, r6
 8000e3a:	e6e9      	b.n	8000c10 <__udivmoddi4+0xa0>

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <DWT_Init+0x38>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d10e      	bne.n	8000e6e <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <DWT_Init+0x38>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	4a08      	ldr	r2, [pc, #32]	; (8000e78 <DWT_Init+0x38>)
 8000e56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e5a:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8000e5c:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <DWT_Init+0x3c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <DWT_Init+0x3c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <DWT_Init+0x3c>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6013      	str	r3, [r2, #0]
    }
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000edf0 	.word	0xe000edf0
 8000e7c:	e0001000 	.word	0xe0001000

08000e80 <DWT_Delay>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8000e88:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <DWT_Delay+0x40>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <DWT_Delay+0x44>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a0d      	ldr	r2, [pc, #52]	; (8000ec8 <DWT_Delay+0x48>)
 8000e94:	fba2 2303 	umull	r2, r3, r2, r3
 8000e98:	0c9a      	lsrs	r2, r3, #18
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	fb02 f303 	mul.w	r3, r2, r3
 8000ea0:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8000ea2:	bf00      	nop
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <DWT_Delay+0x40>)
 8000ea6:	685a      	ldr	r2, [r3, #4]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	68ba      	ldr	r2, [r7, #8]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d8f8      	bhi.n	8000ea4 <DWT_Delay+0x24>
}
 8000eb2:	bf00      	nop
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e0001000 	.word	0xe0001000
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	431bde83 	.word	0x431bde83

08000ecc <hcsr04_read>:
static void MX_TIM3_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */

uint32_t hcsr04_read (void)
{		// 6 echo_pin	 0 pin_trigger
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	signal_time=0;			//BIBLIOTEKA DWT_DELAY DLA DELAYU W US A NIE MS
 8000ed0:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <hcsr04_read+0x6c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // reset pinu
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2101      	movs	r1, #1
 8000eda:	4818      	ldr	r0, [pc, #96]	; (8000f3c <hcsr04_read+0x70>)
 8000edc:	f000 ff0a 	bl	8001cf4 <HAL_GPIO_WritePin>
	DWT_Delay(2);
 8000ee0:	2002      	movs	r0, #2
 8000ee2:	f7ff ffcd 	bl	8000e80 <DWT_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // stan wysoki na pin
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	2101      	movs	r1, #1
 8000eea:	4814      	ldr	r0, [pc, #80]	; (8000f3c <hcsr04_read+0x70>)
 8000eec:	f000 ff02 	bl	8001cf4 <HAL_GPIO_WritePin>
	DWT_Delay(10);
 8000ef0:	200a      	movs	r0, #10
 8000ef2:	f7ff ffc5 	bl	8000e80 <DWT_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // stan wysoki na pin
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2101      	movs	r1, #1
 8000efa:	4810      	ldr	r0, [pc, #64]	; (8000f3c <hcsr04_read+0x70>)
 8000efc:	f000 fefa 	bl	8001cf4 <HAL_GPIO_WritePin>

	while (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)));  // petla az pin nie wejdzie w stan wysoki
 8000f00:	bf00      	nop
 8000f02:	2140      	movs	r1, #64	; 0x40
 8000f04:	480e      	ldr	r0, [pc, #56]	; (8000f40 <hcsr04_read+0x74>)
 8000f06:	f000 fedd 	bl	8001cc4 <HAL_GPIO_ReadPin>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d0f8      	beq.n	8000f02 <hcsr04_read+0x36>
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6))    // while jest wysoki mierz czas
 8000f10:	e007      	b.n	8000f22 <hcsr04_read+0x56>
	{
		signal_time++;
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <hcsr04_read+0x6c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	3301      	adds	r3, #1
 8000f18:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <hcsr04_read+0x6c>)
 8000f1a:	6013      	str	r3, [r2, #0]
		DWT_Delay(1);
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	f7ff ffaf 	bl	8000e80 <DWT_Delay>
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6))    // while jest wysoki mierz czas
 8000f22:	2140      	movs	r1, #64	; 0x40
 8000f24:	4806      	ldr	r0, [pc, #24]	; (8000f40 <hcsr04_read+0x74>)
 8000f26:	f000 fecd 	bl	8001cc4 <HAL_GPIO_ReadPin>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d1f0      	bne.n	8000f12 <hcsr04_read+0x46>
	}

	return signal_time;
 8000f30:	4b01      	ldr	r3, [pc, #4]	; (8000f38 <hcsr04_read+0x6c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000248 	.word	0x20000248
 8000f3c:	40020400 	.word	0x40020400
 8000f40:	40020000 	.word	0x40020000

08000f44 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	if(htim->Instance== TIM3)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d104      	bne.n	8000f60 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000f56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f5a:	4804      	ldr	r0, [pc, #16]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000f5c:	f000 fee3 	bl	8001d26 <HAL_GPIO_TogglePin>

		//HAL_UART_Transmit_IT(&huart3, sendUARTz2, sizeSendUARTz2);

	}
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40000400 	.word	0x40000400
 8000f6c:	40020c00 	.word	0x40020c00

08000f70 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <HAL_UART_RxCpltCallback+0x58>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d11d      	bne.n	8000fbe <HAL_UART_RxCpltCallback+0x4e>
	{
		if (znak == 'd'){
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <HAL_UART_RxCpltCallback+0x5c>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b64      	cmp	r3, #100	; 0x64
 8000f88:	d10e      	bne.n	8000fa8 <HAL_UART_RxCpltCallback+0x38>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14 | GPIO_PIN_13 | GPIO_PIN_12);
 8000f8a:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000f8e:	4810      	ldr	r0, [pc, #64]	; (8000fd0 <HAL_UART_RxCpltCallback+0x60>)
 8000f90:	f000 fec9 	bl	8001d26 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8000f94:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f98:	f000 fba4 	bl	80016e4 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14 | GPIO_PIN_13 | GPIO_PIN_12);
 8000f9c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000fa0:	480b      	ldr	r0, [pc, #44]	; (8000fd0 <HAL_UART_RxCpltCallback+0x60>)
 8000fa2:	f000 fec0 	bl	8001d26 <HAL_GPIO_TogglePin>
 8000fa6:	e005      	b.n	8000fb4 <HAL_UART_RxCpltCallback+0x44>
		}
		else{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fae:	4808      	ldr	r0, [pc, #32]	; (8000fd0 <HAL_UART_RxCpltCallback+0x60>)
 8000fb0:	f000 fea0 	bl	8001cf4 <HAL_GPIO_WritePin>
		}
		HAL_UART_Receive_IT(&huart3, &znak, 1);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	4905      	ldr	r1, [pc, #20]	; (8000fcc <HAL_UART_RxCpltCallback+0x5c>)
 8000fb8:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <HAL_UART_RxCpltCallback+0x64>)
 8000fba:	f001 ff7e 	bl	8002eba <HAL_UART_Receive_IT>
	}
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40004800 	.word	0x40004800
 8000fcc:	20000290 	.word	0x20000290
 8000fd0:	40020c00 	.word	0x40020c00
 8000fd4:	20000208 	.word	0x20000208

08000fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd8:	b598      	push	{r3, r4, r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fdc:	f000 fb10 	bl	8001600 <HAL_Init>

  /* USER CODE BEGIN Init */
  DWT_Init();
 8000fe0:	f7ff ff2e 	bl	8000e40 <DWT_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe4:	f000 f842 	bl	800106c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe8:	f000 f922 	bl	8001230 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000fec:	f000 f8a8 	bl	8001140 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000ff0:	f000 f8f4 	bl	80011dc <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);
 8000ff4:	4818      	ldr	r0, [pc, #96]	; (8001058 <main+0x80>)
 8000ff6:	f001 fb3e 	bl	8002676 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(&huart3, &znak, 1);
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	4917      	ldr	r1, [pc, #92]	; (800105c <main+0x84>)
 8000ffe:	4818      	ldr	r0, [pc, #96]	; (8001060 <main+0x88>)
 8001000:	f001 ff5b 	bl	8002eba <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sensor_time = hcsr04_read();
 8001004:	f7ff ff62 	bl	8000ecc <hcsr04_read>
 8001008:	4602      	mov	r2, r0
 800100a:	4b16      	ldr	r3, [pc, #88]	; (8001064 <main+0x8c>)
 800100c:	601a      	str	r2, [r3, #0]
	  distance  = sensor_time * .034/2;
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <main+0x8c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fa22 	bl	800045c <__aeabi_ui2d>
 8001018:	a30d      	add	r3, pc, #52	; (adr r3, 8001050 <main+0x78>)
 800101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101e:	f7ff fa97 	bl	8000550 <__aeabi_dmul>
 8001022:	4603      	mov	r3, r0
 8001024:	460c      	mov	r4, r1
 8001026:	4618      	mov	r0, r3
 8001028:	4621      	mov	r1, r4
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001032:	f7ff fbb7 	bl	80007a4 <__aeabi_ddiv>
 8001036:	4603      	mov	r3, r0
 8001038:	460c      	mov	r4, r1
 800103a:	4618      	mov	r0, r3
 800103c:	4621      	mov	r1, r4
 800103e:	f7ff fd5f 	bl	8000b00 <__aeabi_d2uiz>
 8001042:	4602      	mov	r2, r0
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <main+0x90>)
 8001046:	601a      	str	r2, [r3, #0]


	  HAL_Delay(200);
 8001048:	20c8      	movs	r0, #200	; 0xc8
 800104a:	f000 fb4b 	bl	80016e4 <HAL_Delay>
	  sensor_time = hcsr04_read();
 800104e:	e7d9      	b.n	8001004 <main+0x2c>
 8001050:	b020c49c 	.word	0xb020c49c
 8001054:	3fa16872 	.word	0x3fa16872
 8001058:	20000250 	.word	0x20000250
 800105c:	20000290 	.word	0x20000290
 8001060:	20000208 	.word	0x20000208
 8001064:	20000204 	.word	0x20000204
 8001068:	2000024c 	.word	0x2000024c

0800106c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b094      	sub	sp, #80	; 0x50
 8001070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001072:	f107 0320 	add.w	r3, r7, #32
 8001076:	2230      	movs	r2, #48	; 0x30
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f002 fd4e 	bl	8003b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	4b28      	ldr	r3, [pc, #160]	; (8001138 <SystemClock_Config+0xcc>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	4a27      	ldr	r2, [pc, #156]	; (8001138 <SystemClock_Config+0xcc>)
 800109a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109e:	6413      	str	r3, [r2, #64]	; 0x40
 80010a0:	4b25      	ldr	r3, [pc, #148]	; (8001138 <SystemClock_Config+0xcc>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ac:	2300      	movs	r3, #0
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	4b22      	ldr	r3, [pc, #136]	; (800113c <SystemClock_Config+0xd0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a21      	ldr	r2, [pc, #132]	; (800113c <SystemClock_Config+0xd0>)
 80010b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	4b1f      	ldr	r3, [pc, #124]	; (800113c <SystemClock_Config+0xd0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c8:	2301      	movs	r3, #1
 80010ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d2:	2302      	movs	r3, #2
 80010d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010dc:	2304      	movs	r3, #4
 80010de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010e0:	23a8      	movs	r3, #168	; 0xa8
 80010e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e4:	2302      	movs	r3, #2
 80010e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010e8:	2304      	movs	r3, #4
 80010ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ec:	f107 0320 	add.w	r3, r7, #32
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 fe33 	bl	8001d5c <HAL_RCC_OscConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010fc:	f000 f92a 	bl	8001354 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001100:	230f      	movs	r3, #15
 8001102:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001104:	2302      	movs	r3, #2
 8001106:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800110c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001110:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001116:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	2105      	movs	r1, #5
 800111e:	4618      	mov	r0, r3
 8001120:	f001 f88c 	bl	800223c <HAL_RCC_ClockConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800112a:	f000 f913 	bl	8001354 <Error_Handler>
  }
}
 800112e:	bf00      	nop
 8001130:	3750      	adds	r7, #80	; 0x50
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800
 800113c:	40007000 	.word	0x40007000

08001140 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001146:	f107 0308 	add.w	r3, r7, #8
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001154:	463b      	mov	r3, r7
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800115c:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <MX_TIM3_Init+0x94>)
 800115e:	4a1e      	ldr	r2, [pc, #120]	; (80011d8 <MX_TIM3_Init+0x98>)
 8001160:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 8001162:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <MX_TIM3_Init+0x94>)
 8001164:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001168:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <MX_TIM3_Init+0x94>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001170:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <MX_TIM3_Init+0x94>)
 8001172:	f242 720f 	movw	r2, #9999	; 0x270f
 8001176:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <MX_TIM3_Init+0x94>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <MX_TIM3_Init+0x94>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001184:	4813      	ldr	r0, [pc, #76]	; (80011d4 <MX_TIM3_Init+0x94>)
 8001186:	f001 fa4b 	bl	8002620 <HAL_TIM_Base_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001190:	f000 f8e0 	bl	8001354 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001198:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800119a:	f107 0308 	add.w	r3, r7, #8
 800119e:	4619      	mov	r1, r3
 80011a0:	480c      	ldr	r0, [pc, #48]	; (80011d4 <MX_TIM3_Init+0x94>)
 80011a2:	f001 fb94 	bl	80028ce <HAL_TIM_ConfigClockSource>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80011ac:	f000 f8d2 	bl	8001354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b0:	2300      	movs	r3, #0
 80011b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011b8:	463b      	mov	r3, r7
 80011ba:	4619      	mov	r1, r3
 80011bc:	4805      	ldr	r0, [pc, #20]	; (80011d4 <MX_TIM3_Init+0x94>)
 80011be:	f001 fd9f 	bl	8002d00 <HAL_TIMEx_MasterConfigSynchronization>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80011c8:	f000 f8c4 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011cc:	bf00      	nop
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000250 	.word	0x20000250
 80011d8:	40000400 	.word	0x40000400

080011dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_USART3_UART_Init+0x4c>)
 80011e2:	4a12      	ldr	r2, [pc, #72]	; (800122c <MX_USART3_UART_Init+0x50>)
 80011e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <MX_USART3_UART_Init+0x4c>)
 80011e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <MX_USART3_UART_Init+0x4c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MX_USART3_UART_Init+0x4c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <MX_USART3_UART_Init+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <MX_USART3_UART_Init+0x4c>)
 8001202:	220c      	movs	r2, #12
 8001204:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <MX_USART3_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <MX_USART3_UART_Init+0x4c>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_USART3_UART_Init+0x4c>)
 8001214:	f001 fe04 	bl	8002e20 <HAL_UART_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800121e:	f000 f899 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000208 	.word	0x20000208
 800122c:	40004800 	.word	0x40004800

08001230 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
 8001244:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	4b3e      	ldr	r3, [pc, #248]	; (8001344 <MX_GPIO_Init+0x114>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a3d      	ldr	r2, [pc, #244]	; (8001344 <MX_GPIO_Init+0x114>)
 8001250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b3b      	ldr	r3, [pc, #236]	; (8001344 <MX_GPIO_Init+0x114>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b37      	ldr	r3, [pc, #220]	; (8001344 <MX_GPIO_Init+0x114>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a36      	ldr	r2, [pc, #216]	; (8001344 <MX_GPIO_Init+0x114>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b34      	ldr	r3, [pc, #208]	; (8001344 <MX_GPIO_Init+0x114>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	4b30      	ldr	r3, [pc, #192]	; (8001344 <MX_GPIO_Init+0x114>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a2f      	ldr	r2, [pc, #188]	; (8001344 <MX_GPIO_Init+0x114>)
 8001288:	f043 0302 	orr.w	r3, r3, #2
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <MX_GPIO_Init+0x114>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4b29      	ldr	r3, [pc, #164]	; (8001344 <MX_GPIO_Init+0x114>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a28      	ldr	r2, [pc, #160]	; (8001344 <MX_GPIO_Init+0x114>)
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b26      	ldr	r3, [pc, #152]	; (8001344 <MX_GPIO_Init+0x114>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	603b      	str	r3, [r7, #0]
 80012ba:	4b22      	ldr	r3, [pc, #136]	; (8001344 <MX_GPIO_Init+0x114>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a21      	ldr	r2, [pc, #132]	; (8001344 <MX_GPIO_Init+0x114>)
 80012c0:	f043 0304 	orr.w	r3, r3, #4
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <MX_GPIO_Init+0x114>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0304 	and.w	r3, r3, #4
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2101      	movs	r1, #1
 80012d6:	481c      	ldr	r0, [pc, #112]	; (8001348 <MX_GPIO_Init+0x118>)
 80012d8:	f000 fd0c 	bl	8001cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80012e2:	481a      	ldr	r0, [pc, #104]	; (800134c <MX_GPIO_Init+0x11c>)
 80012e4:	f000 fd06 	bl	8001cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012e8:	2340      	movs	r3, #64	; 0x40
 80012ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	4815      	ldr	r0, [pc, #84]	; (8001350 <MX_GPIO_Init+0x120>)
 80012fc:	f000 fb48 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001300:	2301      	movs	r3, #1
 8001302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	2301      	movs	r3, #1
 8001306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4619      	mov	r1, r3
 8001316:	480c      	ldr	r0, [pc, #48]	; (8001348 <MX_GPIO_Init+0x118>)
 8001318:	f000 fb3a 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800131c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	2301      	movs	r3, #1
 8001324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_GPIO_Init+0x11c>)
 8001336:	f000 fb2b 	bl	8001990 <HAL_GPIO_Init>

}
 800133a:	bf00      	nop
 800133c:	3728      	adds	r7, #40	; 0x28
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800
 8001348:	40020400 	.word	0x40020400
 800134c:	40020c00 	.word	0x40020c00
 8001350:	40020000 	.word	0x40020000

08001354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
	...

08001364 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <HAL_MspInit+0x4c>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	4a0f      	ldr	r2, [pc, #60]	; (80013b0 <HAL_MspInit+0x4c>)
 8001374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001378:	6453      	str	r3, [r2, #68]	; 0x44
 800137a:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <HAL_MspInit+0x4c>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	603b      	str	r3, [r7, #0]
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <HAL_MspInit+0x4c>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	4a08      	ldr	r2, [pc, #32]	; (80013b0 <HAL_MspInit+0x4c>)
 8001390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001394:	6413      	str	r3, [r2, #64]	; 0x40
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_MspInit+0x4c>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800

080013b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <HAL_TIM_Base_MspInit+0x48>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d115      	bne.n	80013f2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <HAL_TIM_Base_MspInit+0x4c>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	4a0c      	ldr	r2, [pc, #48]	; (8001400 <HAL_TIM_Base_MspInit+0x4c>)
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <HAL_TIM_Base_MspInit+0x4c>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2100      	movs	r1, #0
 80013e6:	201d      	movs	r0, #29
 80013e8:	f000 fa79 	bl	80018de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013ec:	201d      	movs	r0, #29
 80013ee:	f000 fa92 	bl	8001916 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40000400 	.word	0x40000400
 8001400:	40023800 	.word	0x40023800

08001404 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	; 0x28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a1d      	ldr	r2, [pc, #116]	; (8001498 <HAL_UART_MspInit+0x94>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d134      	bne.n	8001490 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	4b1c      	ldr	r3, [pc, #112]	; (800149c <HAL_UART_MspInit+0x98>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	4a1b      	ldr	r2, [pc, #108]	; (800149c <HAL_UART_MspInit+0x98>)
 8001430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001434:	6413      	str	r3, [r2, #64]	; 0x40
 8001436:	4b19      	ldr	r3, [pc, #100]	; (800149c <HAL_UART_MspInit+0x98>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <HAL_UART_MspInit+0x98>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a14      	ldr	r2, [pc, #80]	; (800149c <HAL_UART_MspInit+0x98>)
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b12      	ldr	r3, [pc, #72]	; (800149c <HAL_UART_MspInit+0x98>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800145e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001464:	2302      	movs	r3, #2
 8001466:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001468:	2301      	movs	r3, #1
 800146a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146c:	2303      	movs	r3, #3
 800146e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001470:	2307      	movs	r3, #7
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	4619      	mov	r1, r3
 800147a:	4809      	ldr	r0, [pc, #36]	; (80014a0 <HAL_UART_MspInit+0x9c>)
 800147c:	f000 fa88 	bl	8001990 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001480:	2200      	movs	r2, #0
 8001482:	2100      	movs	r1, #0
 8001484:	2027      	movs	r0, #39	; 0x27
 8001486:	f000 fa2a 	bl	80018de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800148a:	2027      	movs	r0, #39	; 0x27
 800148c:	f000 fa43 	bl	8001916 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001490:	bf00      	nop
 8001492:	3728      	adds	r7, #40	; 0x28
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40004800 	.word	0x40004800
 800149c:	40023800 	.word	0x40023800
 80014a0:	40020800 	.word	0x40020800

080014a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <HardFault_Handler+0x4>

080014b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <MemManage_Handler+0x4>

080014be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <BusFault_Handler+0x4>

080014c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <UsageFault_Handler+0x4>

080014ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f8:	f000 f8d4 	bl	80016a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}

08001500 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <TIM3_IRQHandler+0x10>)
 8001506:	f001 f8da 	bl	80026be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000250 	.word	0x20000250

08001514 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <USART3_IRQHandler+0x10>)
 800151a:	f001 fd23 	bl	8002f64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000208 	.word	0x20000208

08001528 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <_sbrk+0x50>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d102      	bne.n	800153e <_sbrk+0x16>
		heap_end = &end;
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <_sbrk+0x50>)
 800153a:	4a10      	ldr	r2, [pc, #64]	; (800157c <_sbrk+0x54>)
 800153c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <_sbrk+0x50>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <_sbrk+0x50>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	466a      	mov	r2, sp
 800154e:	4293      	cmp	r3, r2
 8001550:	d907      	bls.n	8001562 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001552:	f002 fab9 	bl	8003ac8 <__errno>
 8001556:	4602      	mov	r2, r0
 8001558:	230c      	movs	r3, #12
 800155a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800155c:	f04f 33ff 	mov.w	r3, #4294967295
 8001560:	e006      	b.n	8001570 <_sbrk+0x48>
	}

	heap_end += incr;
 8001562:	4b05      	ldr	r3, [pc, #20]	; (8001578 <_sbrk+0x50>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	4a03      	ldr	r2, [pc, #12]	; (8001578 <_sbrk+0x50>)
 800156c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800156e:	68fb      	ldr	r3, [r7, #12]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200001f8 	.word	0x200001f8
 800157c:	200002a0 	.word	0x200002a0

08001580 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <SystemInit+0x28>)
 8001586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800158a:	4a07      	ldr	r2, [pc, #28]	; (80015a8 <SystemInit+0x28>)
 800158c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001590:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <SystemInit+0x28>)
 8001596:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800159a:	609a      	str	r2, [r3, #8]
#endif
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015b2:	e003      	b.n	80015bc <LoopCopyDataInit>

080015b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015ba:	3104      	adds	r1, #4

080015bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015bc:	480b      	ldr	r0, [pc, #44]	; (80015ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015c4:	d3f6      	bcc.n	80015b4 <CopyDataInit>
  ldr  r2, =_sbss
 80015c6:	4a0b      	ldr	r2, [pc, #44]	; (80015f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015c8:	e002      	b.n	80015d0 <LoopFillZerobss>

080015ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015cc:	f842 3b04 	str.w	r3, [r2], #4

080015d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015d4:	d3f9      	bcc.n	80015ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015d6:	f7ff ffd3 	bl	8001580 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015da:	f002 fa7b 	bl	8003ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015de:	f7ff fcfb 	bl	8000fd8 <main>
  bx  lr    
 80015e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015e4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80015e8:	080057e0 	.word	0x080057e0
  ldr  r0, =_sdata
 80015ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015f0:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80015f4:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80015f8:	200002a0 	.word	0x200002a0

080015fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015fc:	e7fe      	b.n	80015fc <ADC_IRQHandler>
	...

08001600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001604:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <HAL_Init+0x40>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <HAL_Init+0x40>)
 800160a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800160e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <HAL_Init+0x40>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <HAL_Init+0x40>)
 8001616:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800161a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <HAL_Init+0x40>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a07      	ldr	r2, [pc, #28]	; (8001640 <HAL_Init+0x40>)
 8001622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001626:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001628:	2003      	movs	r0, #3
 800162a:	f000 f94d 	bl	80018c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800162e:	2000      	movs	r0, #0
 8001630:	f000 f808 	bl	8001644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001634:	f7ff fe96 	bl	8001364 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40023c00 	.word	0x40023c00

08001644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_InitTick+0x54>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <HAL_InitTick+0x58>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	4619      	mov	r1, r3
 8001656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165a:	fbb3 f3f1 	udiv	r3, r3, r1
 800165e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001662:	4618      	mov	r0, r3
 8001664:	f000 f965 	bl	8001932 <HAL_SYSTICK_Config>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e00e      	b.n	8001690 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b0f      	cmp	r3, #15
 8001676:	d80a      	bhi.n	800168e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001678:	2200      	movs	r2, #0
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	f04f 30ff 	mov.w	r0, #4294967295
 8001680:	f000 f92d 	bl	80018de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001684:	4a06      	ldr	r2, [pc, #24]	; (80016a0 <HAL_InitTick+0x5c>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	e000      	b.n	8001690 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000000 	.word	0x20000000
 800169c:	20000008 	.word	0x20000008
 80016a0:	20000004 	.word	0x20000004

080016a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_IncTick+0x20>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	461a      	mov	r2, r3
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_IncTick+0x24>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <HAL_IncTick+0x24>)
 80016b6:	6013      	str	r3, [r2, #0]
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20000008 	.word	0x20000008
 80016c8:	20000298 	.word	0x20000298

080016cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return uwTick;
 80016d0:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <HAL_GetTick+0x14>)
 80016d2:	681b      	ldr	r3, [r3, #0]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	20000298 	.word	0x20000298

080016e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016ec:	f7ff ffee 	bl	80016cc <HAL_GetTick>
 80016f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016fc:	d005      	beq.n	800170a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <HAL_Delay+0x40>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4413      	add	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800170a:	bf00      	nop
 800170c:	f7ff ffde 	bl	80016cc <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	429a      	cmp	r2, r3
 800171a:	d8f7      	bhi.n	800170c <HAL_Delay+0x28>
  {
  }
}
 800171c:	bf00      	nop
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000008 	.word	0x20000008

08001728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <__NVIC_SetPriorityGrouping+0x44>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001744:	4013      	ands	r3, r2
 8001746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001750:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800175a:	4a04      	ldr	r2, [pc, #16]	; (800176c <__NVIC_SetPriorityGrouping+0x44>)
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	60d3      	str	r3, [r2, #12]
}
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001774:	4b04      	ldr	r3, [pc, #16]	; (8001788 <__NVIC_GetPriorityGrouping+0x18>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	0a1b      	lsrs	r3, r3, #8
 800177a:	f003 0307 	and.w	r3, r3, #7
}
 800177e:	4618      	mov	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	2b00      	cmp	r3, #0
 800179c:	db0b      	blt.n	80017b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	f003 021f 	and.w	r2, r3, #31
 80017a4:	4907      	ldr	r1, [pc, #28]	; (80017c4 <__NVIC_EnableIRQ+0x38>)
 80017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017aa:	095b      	lsrs	r3, r3, #5
 80017ac:	2001      	movs	r0, #1
 80017ae:	fa00 f202 	lsl.w	r2, r0, r2
 80017b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000e100 	.word	0xe000e100

080017c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	6039      	str	r1, [r7, #0]
 80017d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	db0a      	blt.n	80017f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	490c      	ldr	r1, [pc, #48]	; (8001814 <__NVIC_SetPriority+0x4c>)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	0112      	lsls	r2, r2, #4
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	440b      	add	r3, r1
 80017ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f0:	e00a      	b.n	8001808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	4908      	ldr	r1, [pc, #32]	; (8001818 <__NVIC_SetPriority+0x50>)
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	3b04      	subs	r3, #4
 8001800:	0112      	lsls	r2, r2, #4
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	440b      	add	r3, r1
 8001806:	761a      	strb	r2, [r3, #24]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	e000e100 	.word	0xe000e100
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800181c:	b480      	push	{r7}
 800181e:	b089      	sub	sp, #36	; 0x24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f1c3 0307 	rsb	r3, r3, #7
 8001836:	2b04      	cmp	r3, #4
 8001838:	bf28      	it	cs
 800183a:	2304      	movcs	r3, #4
 800183c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3304      	adds	r3, #4
 8001842:	2b06      	cmp	r3, #6
 8001844:	d902      	bls.n	800184c <NVIC_EncodePriority+0x30>
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3b03      	subs	r3, #3
 800184a:	e000      	b.n	800184e <NVIC_EncodePriority+0x32>
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001850:	f04f 32ff 	mov.w	r2, #4294967295
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43da      	mvns	r2, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	401a      	ands	r2, r3
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001864:	f04f 31ff 	mov.w	r1, #4294967295
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fa01 f303 	lsl.w	r3, r1, r3
 800186e:	43d9      	mvns	r1, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001874:	4313      	orrs	r3, r2
         );
}
 8001876:	4618      	mov	r0, r3
 8001878:	3724      	adds	r7, #36	; 0x24
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001894:	d301      	bcc.n	800189a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001896:	2301      	movs	r3, #1
 8001898:	e00f      	b.n	80018ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800189a:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <SysTick_Config+0x40>)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3b01      	subs	r3, #1
 80018a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018a2:	210f      	movs	r1, #15
 80018a4:	f04f 30ff 	mov.w	r0, #4294967295
 80018a8:	f7ff ff8e 	bl	80017c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <SysTick_Config+0x40>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018b2:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <SysTick_Config+0x40>)
 80018b4:	2207      	movs	r2, #7
 80018b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	e000e010 	.word	0xe000e010

080018c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ff29 	bl	8001728 <__NVIC_SetPriorityGrouping>
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018f0:	f7ff ff3e 	bl	8001770 <__NVIC_GetPriorityGrouping>
 80018f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	68b9      	ldr	r1, [r7, #8]
 80018fa:	6978      	ldr	r0, [r7, #20]
 80018fc:	f7ff ff8e 	bl	800181c <NVIC_EncodePriority>
 8001900:	4602      	mov	r2, r0
 8001902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff5d 	bl	80017c8 <__NVIC_SetPriority>
}
 800190e:	bf00      	nop
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	4603      	mov	r3, r0
 800191e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff31 	bl	800178c <__NVIC_EnableIRQ>
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ffa2 	bl	8001884 <SysTick_Config>
 8001940:	4603      	mov	r3, r0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d004      	beq.n	8001968 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2280      	movs	r2, #128	; 0x80
 8001962:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e00c      	b.n	8001982 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2205      	movs	r2, #5
 800196c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0201 	bic.w	r2, r2, #1
 800197e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001990:	b480      	push	{r7}
 8001992:	b089      	sub	sp, #36	; 0x24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
 80019aa:	e16b      	b.n	8001c84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019ac:	2201      	movs	r2, #1
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	f040 815a 	bne.w	8001c7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d00b      	beq.n	80019ea <HAL_GPIO_Init+0x5a>
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d007      	beq.n	80019ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019de:	2b11      	cmp	r3, #17
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b12      	cmp	r3, #18
 80019e8:	d130      	bne.n	8001a4c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	2203      	movs	r2, #3
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4013      	ands	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a20:	2201      	movs	r2, #1
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	f003 0201 	and.w	r2, r3, #1
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	2203      	movs	r2, #3
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d003      	beq.n	8001a8c <HAL_GPIO_Init+0xfc>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b12      	cmp	r3, #18
 8001a8a:	d123      	bne.n	8001ad4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	08da      	lsrs	r2, r3, #3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3208      	adds	r2, #8
 8001a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	220f      	movs	r2, #15
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	691a      	ldr	r2, [r3, #16]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	08da      	lsrs	r2, r3, #3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3208      	adds	r2, #8
 8001ace:	69b9      	ldr	r1, [r7, #24]
 8001ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	2203      	movs	r2, #3
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 0203 	and.w	r2, r3, #3
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 80b4 	beq.w	8001c7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	4b5f      	ldr	r3, [pc, #380]	; (8001c98 <HAL_GPIO_Init+0x308>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	4a5e      	ldr	r2, [pc, #376]	; (8001c98 <HAL_GPIO_Init+0x308>)
 8001b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b24:	6453      	str	r3, [r2, #68]	; 0x44
 8001b26:	4b5c      	ldr	r3, [pc, #368]	; (8001c98 <HAL_GPIO_Init+0x308>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b32:	4a5a      	ldr	r2, [pc, #360]	; (8001c9c <HAL_GPIO_Init+0x30c>)
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	089b      	lsrs	r3, r3, #2
 8001b38:	3302      	adds	r3, #2
 8001b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	220f      	movs	r2, #15
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a51      	ldr	r2, [pc, #324]	; (8001ca0 <HAL_GPIO_Init+0x310>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d02b      	beq.n	8001bb6 <HAL_GPIO_Init+0x226>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a50      	ldr	r2, [pc, #320]	; (8001ca4 <HAL_GPIO_Init+0x314>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d025      	beq.n	8001bb2 <HAL_GPIO_Init+0x222>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a4f      	ldr	r2, [pc, #316]	; (8001ca8 <HAL_GPIO_Init+0x318>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d01f      	beq.n	8001bae <HAL_GPIO_Init+0x21e>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a4e      	ldr	r2, [pc, #312]	; (8001cac <HAL_GPIO_Init+0x31c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d019      	beq.n	8001baa <HAL_GPIO_Init+0x21a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a4d      	ldr	r2, [pc, #308]	; (8001cb0 <HAL_GPIO_Init+0x320>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d013      	beq.n	8001ba6 <HAL_GPIO_Init+0x216>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a4c      	ldr	r2, [pc, #304]	; (8001cb4 <HAL_GPIO_Init+0x324>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d00d      	beq.n	8001ba2 <HAL_GPIO_Init+0x212>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a4b      	ldr	r2, [pc, #300]	; (8001cb8 <HAL_GPIO_Init+0x328>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d007      	beq.n	8001b9e <HAL_GPIO_Init+0x20e>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a4a      	ldr	r2, [pc, #296]	; (8001cbc <HAL_GPIO_Init+0x32c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d101      	bne.n	8001b9a <HAL_GPIO_Init+0x20a>
 8001b96:	2307      	movs	r3, #7
 8001b98:	e00e      	b.n	8001bb8 <HAL_GPIO_Init+0x228>
 8001b9a:	2308      	movs	r3, #8
 8001b9c:	e00c      	b.n	8001bb8 <HAL_GPIO_Init+0x228>
 8001b9e:	2306      	movs	r3, #6
 8001ba0:	e00a      	b.n	8001bb8 <HAL_GPIO_Init+0x228>
 8001ba2:	2305      	movs	r3, #5
 8001ba4:	e008      	b.n	8001bb8 <HAL_GPIO_Init+0x228>
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	e006      	b.n	8001bb8 <HAL_GPIO_Init+0x228>
 8001baa:	2303      	movs	r3, #3
 8001bac:	e004      	b.n	8001bb8 <HAL_GPIO_Init+0x228>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e002      	b.n	8001bb8 <HAL_GPIO_Init+0x228>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_GPIO_Init+0x228>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	69fa      	ldr	r2, [r7, #28]
 8001bba:	f002 0203 	and.w	r2, r2, #3
 8001bbe:	0092      	lsls	r2, r2, #2
 8001bc0:	4093      	lsls	r3, r2
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bc8:	4934      	ldr	r1, [pc, #208]	; (8001c9c <HAL_GPIO_Init+0x30c>)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	089b      	lsrs	r3, r3, #2
 8001bce:	3302      	adds	r3, #2
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bd6:	4b3a      	ldr	r3, [pc, #232]	; (8001cc0 <HAL_GPIO_Init+0x330>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4013      	ands	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bfa:	4a31      	ldr	r2, [pc, #196]	; (8001cc0 <HAL_GPIO_Init+0x330>)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c00:	4b2f      	ldr	r3, [pc, #188]	; (8001cc0 <HAL_GPIO_Init+0x330>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c24:	4a26      	ldr	r2, [pc, #152]	; (8001cc0 <HAL_GPIO_Init+0x330>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c2a:	4b25      	ldr	r3, [pc, #148]	; (8001cc0 <HAL_GPIO_Init+0x330>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c4e:	4a1c      	ldr	r2, [pc, #112]	; (8001cc0 <HAL_GPIO_Init+0x330>)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c54:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <HAL_GPIO_Init+0x330>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c78:	4a11      	ldr	r2, [pc, #68]	; (8001cc0 <HAL_GPIO_Init+0x330>)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3301      	adds	r3, #1
 8001c82:	61fb      	str	r3, [r7, #28]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	2b0f      	cmp	r3, #15
 8001c88:	f67f ae90 	bls.w	80019ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	3724      	adds	r7, #36	; 0x24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40013800 	.word	0x40013800
 8001ca0:	40020000 	.word	0x40020000
 8001ca4:	40020400 	.word	0x40020400
 8001ca8:	40020800 	.word	0x40020800
 8001cac:	40020c00 	.word	0x40020c00
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40021400 	.word	0x40021400
 8001cb8:	40021800 	.word	0x40021800
 8001cbc:	40021c00 	.word	0x40021c00
 8001cc0:	40013c00 	.word	0x40013c00

08001cc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691a      	ldr	r2, [r3, #16]
 8001cd4:	887b      	ldrh	r3, [r7, #2]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d002      	beq.n	8001ce2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]
 8001ce0:	e001      	b.n	8001ce6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	807b      	strh	r3, [r7, #2]
 8001d00:	4613      	mov	r3, r2
 8001d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d04:	787b      	ldrb	r3, [r7, #1]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d0a:	887a      	ldrh	r2, [r7, #2]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d10:	e003      	b.n	8001d1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d12:	887b      	ldrh	r3, [r7, #2]
 8001d14:	041a      	lsls	r2, r3, #16
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	619a      	str	r2, [r3, #24]
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	695a      	ldr	r2, [r3, #20]
 8001d36:	887b      	ldrh	r3, [r7, #2]
 8001d38:	401a      	ands	r2, r3
 8001d3a:	887b      	ldrh	r3, [r7, #2]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d104      	bne.n	8001d4a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d40:	887b      	ldrh	r3, [r7, #2]
 8001d42:	041a      	lsls	r2, r3, #16
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001d48:	e002      	b.n	8001d50 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001d4a:	887a      	ldrh	r2, [r7, #2]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	619a      	str	r2, [r3, #24]
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e25b      	b.n	8002226 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d075      	beq.n	8001e66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d7a:	4ba3      	ldr	r3, [pc, #652]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d00c      	beq.n	8001da0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d86:	4ba0      	ldr	r3, [pc, #640]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d8e:	2b08      	cmp	r3, #8
 8001d90:	d112      	bne.n	8001db8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d92:	4b9d      	ldr	r3, [pc, #628]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d9e:	d10b      	bne.n	8001db8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da0:	4b99      	ldr	r3, [pc, #612]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d05b      	beq.n	8001e64 <HAL_RCC_OscConfig+0x108>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d157      	bne.n	8001e64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e236      	b.n	8002226 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc0:	d106      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x74>
 8001dc2:	4b91      	ldr	r3, [pc, #580]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a90      	ldr	r2, [pc, #576]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e01d      	b.n	8001e0c <HAL_RCC_OscConfig+0xb0>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dd8:	d10c      	bne.n	8001df4 <HAL_RCC_OscConfig+0x98>
 8001dda:	4b8b      	ldr	r3, [pc, #556]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a8a      	ldr	r2, [pc, #552]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	4b88      	ldr	r3, [pc, #544]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a87      	ldr	r2, [pc, #540]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	e00b      	b.n	8001e0c <HAL_RCC_OscConfig+0xb0>
 8001df4:	4b84      	ldr	r3, [pc, #528]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a83      	ldr	r2, [pc, #524]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	4b81      	ldr	r3, [pc, #516]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a80      	ldr	r2, [pc, #512]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d013      	beq.n	8001e3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e14:	f7ff fc5a 	bl	80016cc <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e1c:	f7ff fc56 	bl	80016cc <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b64      	cmp	r3, #100	; 0x64
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e1fb      	b.n	8002226 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2e:	4b76      	ldr	r3, [pc, #472]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0xc0>
 8001e3a:	e014      	b.n	8001e66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3c:	f7ff fc46 	bl	80016cc <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e44:	f7ff fc42 	bl	80016cc <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b64      	cmp	r3, #100	; 0x64
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e1e7      	b.n	8002226 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e56:	4b6c      	ldr	r3, [pc, #432]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0xe8>
 8001e62:	e000      	b.n	8001e66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d063      	beq.n	8001f3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e72:	4b65      	ldr	r3, [pc, #404]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 030c 	and.w	r3, r3, #12
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00b      	beq.n	8001e96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e7e:	4b62      	ldr	r3, [pc, #392]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d11c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e8a:	4b5f      	ldr	r3, [pc, #380]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d116      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e96:	4b5c      	ldr	r3, [pc, #368]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d005      	beq.n	8001eae <HAL_RCC_OscConfig+0x152>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d001      	beq.n	8001eae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e1bb      	b.n	8002226 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eae:	4b56      	ldr	r3, [pc, #344]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	4952      	ldr	r1, [pc, #328]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec2:	e03a      	b.n	8001f3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d020      	beq.n	8001f0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ecc:	4b4f      	ldr	r3, [pc, #316]	; (800200c <HAL_RCC_OscConfig+0x2b0>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed2:	f7ff fbfb 	bl	80016cc <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eda:	f7ff fbf7 	bl	80016cc <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e19c      	b.n	8002226 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eec:	4b46      	ldr	r3, [pc, #280]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0f0      	beq.n	8001eda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef8:	4b43      	ldr	r3, [pc, #268]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	4940      	ldr	r1, [pc, #256]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	600b      	str	r3, [r1, #0]
 8001f0c:	e015      	b.n	8001f3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f0e:	4b3f      	ldr	r3, [pc, #252]	; (800200c <HAL_RCC_OscConfig+0x2b0>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f14:	f7ff fbda 	bl	80016cc <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f1c:	f7ff fbd6 	bl	80016cc <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e17b      	b.n	8002226 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2e:	4b36      	ldr	r3, [pc, #216]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d030      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d016      	beq.n	8001f7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f4e:	4b30      	ldr	r3, [pc, #192]	; (8002010 <HAL_RCC_OscConfig+0x2b4>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f54:	f7ff fbba 	bl	80016cc <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f5c:	f7ff fbb6 	bl	80016cc <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e15b      	b.n	8002226 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f6e:	4b26      	ldr	r3, [pc, #152]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0x200>
 8001f7a:	e015      	b.n	8001fa8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f7c:	4b24      	ldr	r3, [pc, #144]	; (8002010 <HAL_RCC_OscConfig+0x2b4>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f82:	f7ff fba3 	bl	80016cc <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f8a:	f7ff fb9f 	bl	80016cc <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e144      	b.n	8002226 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f9c:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1f0      	bne.n	8001f8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 80a0 	beq.w	80020f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fba:	4b13      	ldr	r3, [pc, #76]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10f      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	4a0e      	ldr	r2, [pc, #56]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd6:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_RCC_OscConfig+0x2b8>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d121      	bne.n	8002036 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ff2:	4b08      	ldr	r3, [pc, #32]	; (8002014 <HAL_RCC_OscConfig+0x2b8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a07      	ldr	r2, [pc, #28]	; (8002014 <HAL_RCC_OscConfig+0x2b8>)
 8001ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ffe:	f7ff fb65 	bl	80016cc <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002004:	e011      	b.n	800202a <HAL_RCC_OscConfig+0x2ce>
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800
 800200c:	42470000 	.word	0x42470000
 8002010:	42470e80 	.word	0x42470e80
 8002014:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002018:	f7ff fb58 	bl	80016cc <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e0fd      	b.n	8002226 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202a:	4b81      	ldr	r3, [pc, #516]	; (8002230 <HAL_RCC_OscConfig+0x4d4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f0      	beq.n	8002018 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d106      	bne.n	800204c <HAL_RCC_OscConfig+0x2f0>
 800203e:	4b7d      	ldr	r3, [pc, #500]	; (8002234 <HAL_RCC_OscConfig+0x4d8>)
 8002040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002042:	4a7c      	ldr	r2, [pc, #496]	; (8002234 <HAL_RCC_OscConfig+0x4d8>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6713      	str	r3, [r2, #112]	; 0x70
 800204a:	e01c      	b.n	8002086 <HAL_RCC_OscConfig+0x32a>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b05      	cmp	r3, #5
 8002052:	d10c      	bne.n	800206e <HAL_RCC_OscConfig+0x312>
 8002054:	4b77      	ldr	r3, [pc, #476]	; (8002234 <HAL_RCC_OscConfig+0x4d8>)
 8002056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002058:	4a76      	ldr	r2, [pc, #472]	; (8002234 <HAL_RCC_OscConfig+0x4d8>)
 800205a:	f043 0304 	orr.w	r3, r3, #4
 800205e:	6713      	str	r3, [r2, #112]	; 0x70
 8002060:	4b74      	ldr	r3, [pc, #464]	; (8002234 <HAL_RCC_OscConfig+0x4d8>)
 8002062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002064:	4a73      	ldr	r2, [pc, #460]	; (8002234 <HAL_RCC_OscConfig+0x4d8>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6713      	str	r3, [r2, #112]	; 0x70
 800206c:	e00b      	b.n	8002086 <HAL_RCC_OscConfig+0x32a>
 800206e:	4b71      	ldr	r3, [pc, #452]	; (8002234 <HAL_RCC_OscConfig+0x4d8>)
 8002070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002072:	4a70      	ldr	r2, [pc, #448]	; (8002234 <HAL_RCC_OscConfig+0x4d8>)
 8002074:	f023 0301 	bic.w	r3, r3, #1
 8002078:	6713      	str	r3, [r2, #112]	; 0x70
 800207a:	4b6e      	ldr	r3, [pc, #440]	; (8002234 <HAL_RCC_OscConfig+0x4d8>)
 800207c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207e:	4a6d      	ldr	r2, [pc, #436]	; (8002234 <HAL_RCC_OscConfig+0x4d8>)
 8002080:	f023 0304 	bic.w	r3, r3, #4
 8002084:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d015      	beq.n	80020ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208e:	f7ff fb1d 	bl	80016cc <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002094:	e00a      	b.n	80020ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002096:	f7ff fb19 	bl	80016cc <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e0bc      	b.n	8002226 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ac:	4b61      	ldr	r3, [pc, #388]	; (8002234 <HAL_RCC_OscConfig+0x4d8>)
 80020ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0ee      	beq.n	8002096 <HAL_RCC_OscConfig+0x33a>
 80020b8:	e014      	b.n	80020e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ba:	f7ff fb07 	bl	80016cc <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c0:	e00a      	b.n	80020d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c2:	f7ff fb03 	bl	80016cc <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e0a6      	b.n	8002226 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d8:	4b56      	ldr	r3, [pc, #344]	; (8002234 <HAL_RCC_OscConfig+0x4d8>)
 80020da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1ee      	bne.n	80020c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020e4:	7dfb      	ldrb	r3, [r7, #23]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d105      	bne.n	80020f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ea:	4b52      	ldr	r3, [pc, #328]	; (8002234 <HAL_RCC_OscConfig+0x4d8>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	4a51      	ldr	r2, [pc, #324]	; (8002234 <HAL_RCC_OscConfig+0x4d8>)
 80020f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 8092 	beq.w	8002224 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002100:	4b4c      	ldr	r3, [pc, #304]	; (8002234 <HAL_RCC_OscConfig+0x4d8>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 030c 	and.w	r3, r3, #12
 8002108:	2b08      	cmp	r3, #8
 800210a:	d05c      	beq.n	80021c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	2b02      	cmp	r3, #2
 8002112:	d141      	bne.n	8002198 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002114:	4b48      	ldr	r3, [pc, #288]	; (8002238 <HAL_RCC_OscConfig+0x4dc>)
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211a:	f7ff fad7 	bl	80016cc <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002122:	f7ff fad3 	bl	80016cc <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e078      	b.n	8002226 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002134:	4b3f      	ldr	r3, [pc, #252]	; (8002234 <HAL_RCC_OscConfig+0x4d8>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f0      	bne.n	8002122 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69da      	ldr	r2, [r3, #28]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	431a      	orrs	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	019b      	lsls	r3, r3, #6
 8002150:	431a      	orrs	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002156:	085b      	lsrs	r3, r3, #1
 8002158:	3b01      	subs	r3, #1
 800215a:	041b      	lsls	r3, r3, #16
 800215c:	431a      	orrs	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	061b      	lsls	r3, r3, #24
 8002164:	4933      	ldr	r1, [pc, #204]	; (8002234 <HAL_RCC_OscConfig+0x4d8>)
 8002166:	4313      	orrs	r3, r2
 8002168:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800216a:	4b33      	ldr	r3, [pc, #204]	; (8002238 <HAL_RCC_OscConfig+0x4dc>)
 800216c:	2201      	movs	r2, #1
 800216e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7ff faac 	bl	80016cc <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002178:	f7ff faa8 	bl	80016cc <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e04d      	b.n	8002226 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800218a:	4b2a      	ldr	r3, [pc, #168]	; (8002234 <HAL_RCC_OscConfig+0x4d8>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f0      	beq.n	8002178 <HAL_RCC_OscConfig+0x41c>
 8002196:	e045      	b.n	8002224 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002198:	4b27      	ldr	r3, [pc, #156]	; (8002238 <HAL_RCC_OscConfig+0x4dc>)
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219e:	f7ff fa95 	bl	80016cc <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a6:	f7ff fa91 	bl	80016cc <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e036      	b.n	8002226 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b8:	4b1e      	ldr	r3, [pc, #120]	; (8002234 <HAL_RCC_OscConfig+0x4d8>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f0      	bne.n	80021a6 <HAL_RCC_OscConfig+0x44a>
 80021c4:	e02e      	b.n	8002224 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e029      	b.n	8002226 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021d2:	4b18      	ldr	r3, [pc, #96]	; (8002234 <HAL_RCC_OscConfig+0x4d8>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d11c      	bne.n	8002220 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d115      	bne.n	8002220 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021fa:	4013      	ands	r3, r2
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002200:	4293      	cmp	r3, r2
 8002202:	d10d      	bne.n	8002220 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800220e:	429a      	cmp	r2, r3
 8002210:	d106      	bne.n	8002220 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800221c:	429a      	cmp	r2, r3
 800221e:	d001      	beq.n	8002224 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e000      	b.n	8002226 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40007000 	.word	0x40007000
 8002234:	40023800 	.word	0x40023800
 8002238:	42470060 	.word	0x42470060

0800223c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0cc      	b.n	80023ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002250:	4b68      	ldr	r3, [pc, #416]	; (80023f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 030f 	and.w	r3, r3, #15
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d90c      	bls.n	8002278 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225e:	4b65      	ldr	r3, [pc, #404]	; (80023f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002266:	4b63      	ldr	r3, [pc, #396]	; (80023f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	429a      	cmp	r2, r3
 8002272:	d001      	beq.n	8002278 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e0b8      	b.n	80023ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d020      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002290:	4b59      	ldr	r3, [pc, #356]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	4a58      	ldr	r2, [pc, #352]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800229a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022a8:	4b53      	ldr	r3, [pc, #332]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	4a52      	ldr	r2, [pc, #328]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b4:	4b50      	ldr	r3, [pc, #320]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	494d      	ldr	r1, [pc, #308]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d044      	beq.n	800235c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d107      	bne.n	80022ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022da:	4b47      	ldr	r3, [pc, #284]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d119      	bne.n	800231a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e07f      	b.n	80023ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d003      	beq.n	80022fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d107      	bne.n	800230a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fa:	4b3f      	ldr	r3, [pc, #252]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d109      	bne.n	800231a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e06f      	b.n	80023ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230a:	4b3b      	ldr	r3, [pc, #236]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e067      	b.n	80023ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800231a:	4b37      	ldr	r3, [pc, #220]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f023 0203 	bic.w	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4934      	ldr	r1, [pc, #208]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002328:	4313      	orrs	r3, r2
 800232a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800232c:	f7ff f9ce 	bl	80016cc <HAL_GetTick>
 8002330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002332:	e00a      	b.n	800234a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002334:	f7ff f9ca 	bl	80016cc <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e04f      	b.n	80023ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234a:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 020c 	and.w	r2, r3, #12
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	429a      	cmp	r2, r3
 800235a:	d1eb      	bne.n	8002334 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800235c:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <HAL_RCC_ClockConfig+0x1b8>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 030f 	and.w	r3, r3, #15
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d20c      	bcs.n	8002384 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236a:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <HAL_RCC_ClockConfig+0x1b8>)
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002372:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d001      	beq.n	8002384 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e032      	b.n	80023ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d008      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	4916      	ldr	r1, [pc, #88]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d009      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ae:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	490e      	ldr	r1, [pc, #56]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023c2:	f000 f821 	bl	8002408 <HAL_RCC_GetSysClockFreq>
 80023c6:	4601      	mov	r1, r0
 80023c8:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	091b      	lsrs	r3, r3, #4
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 80023d4:	5cd3      	ldrb	r3, [r2, r3]
 80023d6:	fa21 f303 	lsr.w	r3, r1, r3
 80023da:	4a09      	ldr	r2, [pc, #36]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff f92e 	bl	8001644 <HAL_InitTick>

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40023c00 	.word	0x40023c00
 80023f8:	40023800 	.word	0x40023800
 80023fc:	08005590 	.word	0x08005590
 8002400:	20000000 	.word	0x20000000
 8002404:	20000004 	.word	0x20000004

08002408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800240e:	2300      	movs	r3, #0
 8002410:	607b      	str	r3, [r7, #4]
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	2300      	movs	r3, #0
 8002418:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800241e:	4b63      	ldr	r3, [pc, #396]	; (80025ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 030c 	and.w	r3, r3, #12
 8002426:	2b04      	cmp	r3, #4
 8002428:	d007      	beq.n	800243a <HAL_RCC_GetSysClockFreq+0x32>
 800242a:	2b08      	cmp	r3, #8
 800242c:	d008      	beq.n	8002440 <HAL_RCC_GetSysClockFreq+0x38>
 800242e:	2b00      	cmp	r3, #0
 8002430:	f040 80b4 	bne.w	800259c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002434:	4b5e      	ldr	r3, [pc, #376]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002436:	60bb      	str	r3, [r7, #8]
       break;
 8002438:	e0b3      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800243a:	4b5e      	ldr	r3, [pc, #376]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800243c:	60bb      	str	r3, [r7, #8]
      break;
 800243e:	e0b0      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002440:	4b5a      	ldr	r3, [pc, #360]	; (80025ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002448:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800244a:	4b58      	ldr	r3, [pc, #352]	; (80025ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d04a      	beq.n	80024ec <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002456:	4b55      	ldr	r3, [pc, #340]	; (80025ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	099b      	lsrs	r3, r3, #6
 800245c:	f04f 0400 	mov.w	r4, #0
 8002460:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	ea03 0501 	and.w	r5, r3, r1
 800246c:	ea04 0602 	and.w	r6, r4, r2
 8002470:	4629      	mov	r1, r5
 8002472:	4632      	mov	r2, r6
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	f04f 0400 	mov.w	r4, #0
 800247c:	0154      	lsls	r4, r2, #5
 800247e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002482:	014b      	lsls	r3, r1, #5
 8002484:	4619      	mov	r1, r3
 8002486:	4622      	mov	r2, r4
 8002488:	1b49      	subs	r1, r1, r5
 800248a:	eb62 0206 	sbc.w	r2, r2, r6
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	f04f 0400 	mov.w	r4, #0
 8002496:	0194      	lsls	r4, r2, #6
 8002498:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800249c:	018b      	lsls	r3, r1, #6
 800249e:	1a5b      	subs	r3, r3, r1
 80024a0:	eb64 0402 	sbc.w	r4, r4, r2
 80024a4:	f04f 0100 	mov.w	r1, #0
 80024a8:	f04f 0200 	mov.w	r2, #0
 80024ac:	00e2      	lsls	r2, r4, #3
 80024ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80024b2:	00d9      	lsls	r1, r3, #3
 80024b4:	460b      	mov	r3, r1
 80024b6:	4614      	mov	r4, r2
 80024b8:	195b      	adds	r3, r3, r5
 80024ba:	eb44 0406 	adc.w	r4, r4, r6
 80024be:	f04f 0100 	mov.w	r1, #0
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	0262      	lsls	r2, r4, #9
 80024c8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80024cc:	0259      	lsls	r1, r3, #9
 80024ce:	460b      	mov	r3, r1
 80024d0:	4614      	mov	r4, r2
 80024d2:	4618      	mov	r0, r3
 80024d4:	4621      	mov	r1, r4
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f04f 0400 	mov.w	r4, #0
 80024dc:	461a      	mov	r2, r3
 80024de:	4623      	mov	r3, r4
 80024e0:	f7fe fb2e 	bl	8000b40 <__aeabi_uldivmod>
 80024e4:	4603      	mov	r3, r0
 80024e6:	460c      	mov	r4, r1
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	e049      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ec:	4b2f      	ldr	r3, [pc, #188]	; (80025ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	099b      	lsrs	r3, r3, #6
 80024f2:	f04f 0400 	mov.w	r4, #0
 80024f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	ea03 0501 	and.w	r5, r3, r1
 8002502:	ea04 0602 	and.w	r6, r4, r2
 8002506:	4629      	mov	r1, r5
 8002508:	4632      	mov	r2, r6
 800250a:	f04f 0300 	mov.w	r3, #0
 800250e:	f04f 0400 	mov.w	r4, #0
 8002512:	0154      	lsls	r4, r2, #5
 8002514:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002518:	014b      	lsls	r3, r1, #5
 800251a:	4619      	mov	r1, r3
 800251c:	4622      	mov	r2, r4
 800251e:	1b49      	subs	r1, r1, r5
 8002520:	eb62 0206 	sbc.w	r2, r2, r6
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	f04f 0400 	mov.w	r4, #0
 800252c:	0194      	lsls	r4, r2, #6
 800252e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002532:	018b      	lsls	r3, r1, #6
 8002534:	1a5b      	subs	r3, r3, r1
 8002536:	eb64 0402 	sbc.w	r4, r4, r2
 800253a:	f04f 0100 	mov.w	r1, #0
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	00e2      	lsls	r2, r4, #3
 8002544:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002548:	00d9      	lsls	r1, r3, #3
 800254a:	460b      	mov	r3, r1
 800254c:	4614      	mov	r4, r2
 800254e:	195b      	adds	r3, r3, r5
 8002550:	eb44 0406 	adc.w	r4, r4, r6
 8002554:	f04f 0100 	mov.w	r1, #0
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	02a2      	lsls	r2, r4, #10
 800255e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002562:	0299      	lsls	r1, r3, #10
 8002564:	460b      	mov	r3, r1
 8002566:	4614      	mov	r4, r2
 8002568:	4618      	mov	r0, r3
 800256a:	4621      	mov	r1, r4
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f04f 0400 	mov.w	r4, #0
 8002572:	461a      	mov	r2, r3
 8002574:	4623      	mov	r3, r4
 8002576:	f7fe fae3 	bl	8000b40 <__aeabi_uldivmod>
 800257a:	4603      	mov	r3, r0
 800257c:	460c      	mov	r4, r1
 800257e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002580:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	0c1b      	lsrs	r3, r3, #16
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	3301      	adds	r3, #1
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	fbb2 f3f3 	udiv	r3, r2, r3
 8002598:	60bb      	str	r3, [r7, #8]
      break;
 800259a:	e002      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800259c:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800259e:	60bb      	str	r3, [r7, #8]
      break;
 80025a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025a2:	68bb      	ldr	r3, [r7, #8]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ac:	40023800 	.word	0x40023800
 80025b0:	00f42400 	.word	0x00f42400
 80025b4:	007a1200 	.word	0x007a1200

080025b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025bc:	4b03      	ldr	r3, [pc, #12]	; (80025cc <HAL_RCC_GetHCLKFreq+0x14>)
 80025be:	681b      	ldr	r3, [r3, #0]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	20000000 	.word	0x20000000

080025d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025d4:	f7ff fff0 	bl	80025b8 <HAL_RCC_GetHCLKFreq>
 80025d8:	4601      	mov	r1, r0
 80025da:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	0a9b      	lsrs	r3, r3, #10
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	4a03      	ldr	r2, [pc, #12]	; (80025f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025e6:	5cd3      	ldrb	r3, [r2, r3]
 80025e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40023800 	.word	0x40023800
 80025f4:	080055a0 	.word	0x080055a0

080025f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025fc:	f7ff ffdc 	bl	80025b8 <HAL_RCC_GetHCLKFreq>
 8002600:	4601      	mov	r1, r0
 8002602:	4b05      	ldr	r3, [pc, #20]	; (8002618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	0b5b      	lsrs	r3, r3, #13
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	4a03      	ldr	r2, [pc, #12]	; (800261c <HAL_RCC_GetPCLK2Freq+0x24>)
 800260e:	5cd3      	ldrb	r3, [r2, r3]
 8002610:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002614:	4618      	mov	r0, r3
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40023800 	.word	0x40023800
 800261c:	080055a0 	.word	0x080055a0

08002620 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e01d      	b.n	800266e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d106      	bne.n	800264c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7fe feb4 	bl	80013b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2202      	movs	r2, #2
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3304      	adds	r3, #4
 800265c:	4619      	mov	r1, r3
 800265e:	4610      	mov	r0, r2
 8002660:	f000 fa14 	bl	8002a8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002676:	b480      	push	{r7}
 8002678:	b085      	sub	sp, #20
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68da      	ldr	r2, [r3, #12]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 0201 	orr.w	r2, r2, #1
 800268c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2b06      	cmp	r3, #6
 800269e:	d007      	beq.n	80026b0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0201 	orr.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d122      	bne.n	800271a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d11b      	bne.n	800271a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f06f 0202 	mvn.w	r2, #2
 80026ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	f003 0303 	and.w	r3, r3, #3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 f9a5 	bl	8002a50 <HAL_TIM_IC_CaptureCallback>
 8002706:	e005      	b.n	8002714 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f997 	bl	8002a3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f9a8 	bl	8002a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b04      	cmp	r3, #4
 8002726:	d122      	bne.n	800276e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	2b04      	cmp	r3, #4
 8002734:	d11b      	bne.n	800276e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f06f 0204 	mvn.w	r2, #4
 800273e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2202      	movs	r2, #2
 8002744:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f97b 	bl	8002a50 <HAL_TIM_IC_CaptureCallback>
 800275a:	e005      	b.n	8002768 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 f96d 	bl	8002a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f97e 	bl	8002a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b08      	cmp	r3, #8
 800277a:	d122      	bne.n	80027c2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b08      	cmp	r3, #8
 8002788:	d11b      	bne.n	80027c2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f06f 0208 	mvn.w	r2, #8
 8002792:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2204      	movs	r2, #4
 8002798:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 f951 	bl	8002a50 <HAL_TIM_IC_CaptureCallback>
 80027ae:	e005      	b.n	80027bc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f943 	bl	8002a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f954 	bl	8002a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	f003 0310 	and.w	r3, r3, #16
 80027cc:	2b10      	cmp	r3, #16
 80027ce:	d122      	bne.n	8002816 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f003 0310 	and.w	r3, r3, #16
 80027da:	2b10      	cmp	r3, #16
 80027dc:	d11b      	bne.n	8002816 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f06f 0210 	mvn.w	r2, #16
 80027e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2208      	movs	r2, #8
 80027ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f927 	bl	8002a50 <HAL_TIM_IC_CaptureCallback>
 8002802:	e005      	b.n	8002810 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 f919 	bl	8002a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f92a 	bl	8002a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b01      	cmp	r3, #1
 8002822:	d10e      	bne.n	8002842 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b01      	cmp	r3, #1
 8002830:	d107      	bne.n	8002842 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f06f 0201 	mvn.w	r2, #1
 800283a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7fe fb81 	bl	8000f44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284c:	2b80      	cmp	r3, #128	; 0x80
 800284e:	d10e      	bne.n	800286e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285a:	2b80      	cmp	r3, #128	; 0x80
 800285c:	d107      	bne.n	800286e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 facf 	bl	8002e0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002878:	2b40      	cmp	r3, #64	; 0x40
 800287a:	d10e      	bne.n	800289a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002886:	2b40      	cmp	r3, #64	; 0x40
 8002888:	d107      	bne.n	800289a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f8ef 	bl	8002a78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	f003 0320 	and.w	r3, r3, #32
 80028a4:	2b20      	cmp	r3, #32
 80028a6:	d10e      	bne.n	80028c6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f003 0320 	and.w	r3, r3, #32
 80028b2:	2b20      	cmp	r3, #32
 80028b4:	d107      	bne.n	80028c6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f06f 0220 	mvn.w	r2, #32
 80028be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 fa99 	bl	8002df8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b084      	sub	sp, #16
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
 80028d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <HAL_TIM_ConfigClockSource+0x18>
 80028e2:	2302      	movs	r3, #2
 80028e4:	e0a6      	b.n	8002a34 <HAL_TIM_ConfigClockSource+0x166>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2202      	movs	r2, #2
 80028f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002904:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800290c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b40      	cmp	r3, #64	; 0x40
 800291c:	d067      	beq.n	80029ee <HAL_TIM_ConfigClockSource+0x120>
 800291e:	2b40      	cmp	r3, #64	; 0x40
 8002920:	d80b      	bhi.n	800293a <HAL_TIM_ConfigClockSource+0x6c>
 8002922:	2b10      	cmp	r3, #16
 8002924:	d073      	beq.n	8002a0e <HAL_TIM_ConfigClockSource+0x140>
 8002926:	2b10      	cmp	r3, #16
 8002928:	d802      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x62>
 800292a:	2b00      	cmp	r3, #0
 800292c:	d06f      	beq.n	8002a0e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800292e:	e078      	b.n	8002a22 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002930:	2b20      	cmp	r3, #32
 8002932:	d06c      	beq.n	8002a0e <HAL_TIM_ConfigClockSource+0x140>
 8002934:	2b30      	cmp	r3, #48	; 0x30
 8002936:	d06a      	beq.n	8002a0e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002938:	e073      	b.n	8002a22 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800293a:	2b70      	cmp	r3, #112	; 0x70
 800293c:	d00d      	beq.n	800295a <HAL_TIM_ConfigClockSource+0x8c>
 800293e:	2b70      	cmp	r3, #112	; 0x70
 8002940:	d804      	bhi.n	800294c <HAL_TIM_ConfigClockSource+0x7e>
 8002942:	2b50      	cmp	r3, #80	; 0x50
 8002944:	d033      	beq.n	80029ae <HAL_TIM_ConfigClockSource+0xe0>
 8002946:	2b60      	cmp	r3, #96	; 0x60
 8002948:	d041      	beq.n	80029ce <HAL_TIM_ConfigClockSource+0x100>
      break;
 800294a:	e06a      	b.n	8002a22 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800294c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002950:	d066      	beq.n	8002a20 <HAL_TIM_ConfigClockSource+0x152>
 8002952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002956:	d017      	beq.n	8002988 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002958:	e063      	b.n	8002a22 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6818      	ldr	r0, [r3, #0]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	6899      	ldr	r1, [r3, #8]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f000 f9a9 	bl	8002cc0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800297c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	609a      	str	r2, [r3, #8]
      break;
 8002986:	e04c      	b.n	8002a22 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6818      	ldr	r0, [r3, #0]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	6899      	ldr	r1, [r3, #8]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f000 f992 	bl	8002cc0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029aa:	609a      	str	r2, [r3, #8]
      break;
 80029ac:	e039      	b.n	8002a22 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6818      	ldr	r0, [r3, #0]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6859      	ldr	r1, [r3, #4]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	461a      	mov	r2, r3
 80029bc:	f000 f906 	bl	8002bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2150      	movs	r1, #80	; 0x50
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 f95f 	bl	8002c8a <TIM_ITRx_SetConfig>
      break;
 80029cc:	e029      	b.n	8002a22 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	6859      	ldr	r1, [r3, #4]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	461a      	mov	r2, r3
 80029dc:	f000 f925 	bl	8002c2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2160      	movs	r1, #96	; 0x60
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 f94f 	bl	8002c8a <TIM_ITRx_SetConfig>
      break;
 80029ec:	e019      	b.n	8002a22 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	6859      	ldr	r1, [r3, #4]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	461a      	mov	r2, r3
 80029fc:	f000 f8e6 	bl	8002bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2140      	movs	r1, #64	; 0x40
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 f93f 	bl	8002c8a <TIM_ITRx_SetConfig>
      break;
 8002a0c:	e009      	b.n	8002a22 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4619      	mov	r1, r3
 8002a18:	4610      	mov	r0, r2
 8002a1a:	f000 f936 	bl	8002c8a <TIM_ITRx_SetConfig>
      break;
 8002a1e:	e000      	b.n	8002a22 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002a20:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a40      	ldr	r2, [pc, #256]	; (8002ba0 <TIM_Base_SetConfig+0x114>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d013      	beq.n	8002acc <TIM_Base_SetConfig+0x40>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aaa:	d00f      	beq.n	8002acc <TIM_Base_SetConfig+0x40>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a3d      	ldr	r2, [pc, #244]	; (8002ba4 <TIM_Base_SetConfig+0x118>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d00b      	beq.n	8002acc <TIM_Base_SetConfig+0x40>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a3c      	ldr	r2, [pc, #240]	; (8002ba8 <TIM_Base_SetConfig+0x11c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d007      	beq.n	8002acc <TIM_Base_SetConfig+0x40>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a3b      	ldr	r2, [pc, #236]	; (8002bac <TIM_Base_SetConfig+0x120>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d003      	beq.n	8002acc <TIM_Base_SetConfig+0x40>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a3a      	ldr	r2, [pc, #232]	; (8002bb0 <TIM_Base_SetConfig+0x124>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d108      	bne.n	8002ade <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a2f      	ldr	r2, [pc, #188]	; (8002ba0 <TIM_Base_SetConfig+0x114>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d02b      	beq.n	8002b3e <TIM_Base_SetConfig+0xb2>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aec:	d027      	beq.n	8002b3e <TIM_Base_SetConfig+0xb2>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a2c      	ldr	r2, [pc, #176]	; (8002ba4 <TIM_Base_SetConfig+0x118>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d023      	beq.n	8002b3e <TIM_Base_SetConfig+0xb2>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a2b      	ldr	r2, [pc, #172]	; (8002ba8 <TIM_Base_SetConfig+0x11c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d01f      	beq.n	8002b3e <TIM_Base_SetConfig+0xb2>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a2a      	ldr	r2, [pc, #168]	; (8002bac <TIM_Base_SetConfig+0x120>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d01b      	beq.n	8002b3e <TIM_Base_SetConfig+0xb2>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a29      	ldr	r2, [pc, #164]	; (8002bb0 <TIM_Base_SetConfig+0x124>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d017      	beq.n	8002b3e <TIM_Base_SetConfig+0xb2>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a28      	ldr	r2, [pc, #160]	; (8002bb4 <TIM_Base_SetConfig+0x128>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d013      	beq.n	8002b3e <TIM_Base_SetConfig+0xb2>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a27      	ldr	r2, [pc, #156]	; (8002bb8 <TIM_Base_SetConfig+0x12c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00f      	beq.n	8002b3e <TIM_Base_SetConfig+0xb2>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a26      	ldr	r2, [pc, #152]	; (8002bbc <TIM_Base_SetConfig+0x130>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d00b      	beq.n	8002b3e <TIM_Base_SetConfig+0xb2>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a25      	ldr	r2, [pc, #148]	; (8002bc0 <TIM_Base_SetConfig+0x134>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d007      	beq.n	8002b3e <TIM_Base_SetConfig+0xb2>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a24      	ldr	r2, [pc, #144]	; (8002bc4 <TIM_Base_SetConfig+0x138>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d003      	beq.n	8002b3e <TIM_Base_SetConfig+0xb2>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a23      	ldr	r2, [pc, #140]	; (8002bc8 <TIM_Base_SetConfig+0x13c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d108      	bne.n	8002b50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a0a      	ldr	r2, [pc, #40]	; (8002ba0 <TIM_Base_SetConfig+0x114>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d003      	beq.n	8002b84 <TIM_Base_SetConfig+0xf8>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a0c      	ldr	r2, [pc, #48]	; (8002bb0 <TIM_Base_SetConfig+0x124>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d103      	bne.n	8002b8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	615a      	str	r2, [r3, #20]
}
 8002b92:	bf00      	nop
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	40010000 	.word	0x40010000
 8002ba4:	40000400 	.word	0x40000400
 8002ba8:	40000800 	.word	0x40000800
 8002bac:	40000c00 	.word	0x40000c00
 8002bb0:	40010400 	.word	0x40010400
 8002bb4:	40014000 	.word	0x40014000
 8002bb8:	40014400 	.word	0x40014400
 8002bbc:	40014800 	.word	0x40014800
 8002bc0:	40001800 	.word	0x40001800
 8002bc4:	40001c00 	.word	0x40001c00
 8002bc8:	40002000 	.word	0x40002000

08002bcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	f023 0201 	bic.w	r2, r3, #1
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f023 030a 	bic.w	r3, r3, #10
 8002c08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	621a      	str	r2, [r3, #32]
}
 8002c1e:	bf00      	nop
 8002c20:	371c      	adds	r7, #28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b087      	sub	sp, #28
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	f023 0210 	bic.w	r2, r3, #16
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	031b      	lsls	r3, r3, #12
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	621a      	str	r2, [r3, #32]
}
 8002c7e:	bf00      	nop
 8002c80:	371c      	adds	r7, #28
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b085      	sub	sp, #20
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f043 0307 	orr.w	r3, r3, #7
 8002cac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	609a      	str	r2, [r3, #8]
}
 8002cb4:	bf00      	nop
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	021a      	lsls	r2, r3, #8
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	609a      	str	r2, [r3, #8]
}
 8002cf4:	bf00      	nop
 8002cf6:	371c      	adds	r7, #28
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d14:	2302      	movs	r3, #2
 8002d16:	e05a      	b.n	8002dce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a21      	ldr	r2, [pc, #132]	; (8002ddc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d022      	beq.n	8002da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d64:	d01d      	beq.n	8002da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a1d      	ldr	r2, [pc, #116]	; (8002de0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d018      	beq.n	8002da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a1b      	ldr	r2, [pc, #108]	; (8002de4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d013      	beq.n	8002da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a1a      	ldr	r2, [pc, #104]	; (8002de8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d00e      	beq.n	8002da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a18      	ldr	r2, [pc, #96]	; (8002dec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d009      	beq.n	8002da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a17      	ldr	r2, [pc, #92]	; (8002df0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d004      	beq.n	8002da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a15      	ldr	r2, [pc, #84]	; (8002df4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d10c      	bne.n	8002dbc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002da8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	40010000 	.word	0x40010000
 8002de0:	40000400 	.word	0x40000400
 8002de4:	40000800 	.word	0x40000800
 8002de8:	40000c00 	.word	0x40000c00
 8002dec:	40010400 	.word	0x40010400
 8002df0:	40014000 	.word	0x40014000
 8002df4:	40001800 	.word	0x40001800

08002df8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e03f      	b.n	8002eb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d106      	bne.n	8002e4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7fe fadc 	bl	8001404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2224      	movs	r2, #36	; 0x24
 8002e50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 fab3 	bl	80033d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	691a      	ldr	r2, [r3, #16]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695a      	ldr	r2, [r3, #20]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b085      	sub	sp, #20
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b20      	cmp	r3, #32
 8002ed2:	d140      	bne.n	8002f56 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <HAL_UART_Receive_IT+0x26>
 8002eda:	88fb      	ldrh	r3, [r7, #6]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e039      	b.n	8002f58 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d101      	bne.n	8002ef2 <HAL_UART_Receive_IT+0x38>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e032      	b.n	8002f58 <HAL_UART_Receive_IT+0x9e>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	88fa      	ldrh	r2, [r7, #6]
 8002f04:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	88fa      	ldrh	r2, [r7, #6]
 8002f0a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2222      	movs	r2, #34	; 0x22
 8002f16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f30:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695a      	ldr	r2, [r3, #20]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 0201 	orr.w	r2, r2, #1
 8002f40:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0220 	orr.w	r2, r2, #32
 8002f50:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	e000      	b.n	8002f58 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002f56:	2302      	movs	r3, #2
  }
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10d      	bne.n	8002fb6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	f003 0320 	and.w	r3, r3, #32
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_UART_IRQHandler+0x52>
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	f003 0320 	and.w	r3, r3, #32
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f98c 	bl	80032cc <UART_Receive_IT>
      return;
 8002fb4:	e0d1      	b.n	800315a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 80b0 	beq.w	800311e <HAL_UART_IRQHandler+0x1ba>
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d105      	bne.n	8002fd4 <HAL_UART_IRQHandler+0x70>
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 80a5 	beq.w	800311e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <HAL_UART_IRQHandler+0x90>
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fec:	f043 0201 	orr.w	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <HAL_UART_IRQHandler+0xb0>
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300c:	f043 0202 	orr.w	r2, r3, #2
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00a      	beq.n	8003034 <HAL_UART_IRQHandler+0xd0>
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302c:	f043 0204 	orr.w	r2, r3, #4
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00f      	beq.n	800305e <HAL_UART_IRQHandler+0xfa>
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	f003 0320 	and.w	r3, r3, #32
 8003044:	2b00      	cmp	r3, #0
 8003046:	d104      	bne.n	8003052 <HAL_UART_IRQHandler+0xee>
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d005      	beq.n	800305e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003056:	f043 0208 	orr.w	r2, r3, #8
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003062:	2b00      	cmp	r3, #0
 8003064:	d078      	beq.n	8003158 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	f003 0320 	and.w	r3, r3, #32
 800306c:	2b00      	cmp	r3, #0
 800306e:	d007      	beq.n	8003080 <HAL_UART_IRQHandler+0x11c>
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	f003 0320 	and.w	r3, r3, #32
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f926 	bl	80032cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308a:	2b40      	cmp	r3, #64	; 0x40
 800308c:	bf0c      	ite	eq
 800308e:	2301      	moveq	r3, #1
 8003090:	2300      	movne	r3, #0
 8003092:	b2db      	uxtb	r3, r3
 8003094:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d102      	bne.n	80030a8 <HAL_UART_IRQHandler+0x144>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d031      	beq.n	800310c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f86f 	bl	800318c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b8:	2b40      	cmp	r3, #64	; 0x40
 80030ba:	d123      	bne.n	8003104 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695a      	ldr	r2, [r3, #20]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030ca:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d013      	beq.n	80030fc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d8:	4a21      	ldr	r2, [pc, #132]	; (8003160 <HAL_UART_IRQHandler+0x1fc>)
 80030da:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fe fc32 	bl	800194a <HAL_DMA_Abort_IT>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d016      	beq.n	800311a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030f6:	4610      	mov	r0, r2
 80030f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030fa:	e00e      	b.n	800311a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f83b 	bl	8003178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003102:	e00a      	b.n	800311a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f837 	bl	8003178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800310a:	e006      	b.n	800311a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f833 	bl	8003178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003118:	e01e      	b.n	8003158 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800311a:	bf00      	nop
    return;
 800311c:	e01c      	b.n	8003158 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003124:	2b00      	cmp	r3, #0
 8003126:	d008      	beq.n	800313a <HAL_UART_IRQHandler+0x1d6>
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f85c 	bl	80031f0 <UART_Transmit_IT>
    return;
 8003138:	e00f      	b.n	800315a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <HAL_UART_IRQHandler+0x1f6>
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314a:	2b00      	cmp	r3, #0
 800314c:	d005      	beq.n	800315a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f8a4 	bl	800329c <UART_EndTransmit_IT>
    return;
 8003154:	bf00      	nop
 8003156:	e000      	b.n	800315a <HAL_UART_IRQHandler+0x1f6>
    return;
 8003158:	bf00      	nop
  }
}
 800315a:	3720      	adds	r7, #32
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	080031c9 	.word	0x080031c9

08003164 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80031a2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695a      	ldr	r2, [r3, #20]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0201 	bic.w	r2, r2, #1
 80031b2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f7ff ffc8 	bl	8003178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031e8:	bf00      	nop
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b21      	cmp	r3, #33	; 0x21
 8003202:	d144      	bne.n	800328e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800320c:	d11a      	bne.n	8003244 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	461a      	mov	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003222:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d105      	bne.n	8003238 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	1c9a      	adds	r2, r3, #2
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	621a      	str	r2, [r3, #32]
 8003236:	e00e      	b.n	8003256 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	621a      	str	r2, [r3, #32]
 8003242:	e008      	b.n	8003256 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	1c59      	adds	r1, r3, #1
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6211      	str	r1, [r2, #32]
 800324e:	781a      	ldrb	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800325a:	b29b      	uxth	r3, r3
 800325c:	3b01      	subs	r3, #1
 800325e:	b29b      	uxth	r3, r3
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	4619      	mov	r1, r3
 8003264:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10f      	bne.n	800328a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003278:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003288:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	e000      	b.n	8003290 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800328e:	2302      	movs	r3, #2
  }
}
 8003290:	4618      	mov	r0, r3
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7ff ff51 	bl	8003164 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b22      	cmp	r3, #34	; 0x22
 80032de:	d171      	bne.n	80033c4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e8:	d123      	bne.n	8003332 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ee:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10e      	bne.n	8003316 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330e:	1c9a      	adds	r2, r3, #2
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	629a      	str	r2, [r3, #40]	; 0x28
 8003314:	e029      	b.n	800336a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	b29b      	uxth	r3, r3
 800331e:	b2db      	uxtb	r3, r3
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332a:	1c5a      	adds	r2, r3, #1
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	629a      	str	r2, [r3, #40]	; 0x28
 8003330:	e01b      	b.n	800336a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10a      	bne.n	8003350 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6858      	ldr	r0, [r3, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	1c59      	adds	r1, r3, #1
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6291      	str	r1, [r2, #40]	; 0x28
 800334a:	b2c2      	uxtb	r2, r0
 800334c:	701a      	strb	r2, [r3, #0]
 800334e:	e00c      	b.n	800336a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	b2da      	uxtb	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335c:	1c58      	adds	r0, r3, #1
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	6288      	str	r0, [r1, #40]	; 0x28
 8003362:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800336e:	b29b      	uxth	r3, r3
 8003370:	3b01      	subs	r3, #1
 8003372:	b29b      	uxth	r3, r3
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	4619      	mov	r1, r3
 8003378:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800337a:	2b00      	cmp	r3, #0
 800337c:	d120      	bne.n	80033c0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68da      	ldr	r2, [r3, #12]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0220 	bic.w	r2, r2, #32
 800338c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800339c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695a      	ldr	r2, [r3, #20]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0201 	bic.w	r2, r2, #1
 80033ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7fd fdda 	bl	8000f70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	e002      	b.n	80033c6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80033c0:	2300      	movs	r3, #0
 80033c2:	e000      	b.n	80033c6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80033c4:	2302      	movs	r3, #2
  }
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033d4:	b085      	sub	sp, #20
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68da      	ldr	r2, [r3, #12]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	4313      	orrs	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003412:	f023 030c 	bic.w	r3, r3, #12
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6812      	ldr	r2, [r2, #0]
 800341a:	68f9      	ldr	r1, [r7, #12]
 800341c:	430b      	orrs	r3, r1
 800341e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	699a      	ldr	r2, [r3, #24]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800343e:	f040 818b 	bne.w	8003758 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4ac1      	ldr	r2, [pc, #772]	; (800374c <UART_SetConfig+0x37c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d005      	beq.n	8003458 <UART_SetConfig+0x88>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4abf      	ldr	r2, [pc, #764]	; (8003750 <UART_SetConfig+0x380>)
 8003452:	4293      	cmp	r3, r2
 8003454:	f040 80bd 	bne.w	80035d2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003458:	f7ff f8ce 	bl	80025f8 <HAL_RCC_GetPCLK2Freq>
 800345c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	461d      	mov	r5, r3
 8003462:	f04f 0600 	mov.w	r6, #0
 8003466:	46a8      	mov	r8, r5
 8003468:	46b1      	mov	r9, r6
 800346a:	eb18 0308 	adds.w	r3, r8, r8
 800346e:	eb49 0409 	adc.w	r4, r9, r9
 8003472:	4698      	mov	r8, r3
 8003474:	46a1      	mov	r9, r4
 8003476:	eb18 0805 	adds.w	r8, r8, r5
 800347a:	eb49 0906 	adc.w	r9, r9, r6
 800347e:	f04f 0100 	mov.w	r1, #0
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800348a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800348e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003492:	4688      	mov	r8, r1
 8003494:	4691      	mov	r9, r2
 8003496:	eb18 0005 	adds.w	r0, r8, r5
 800349a:	eb49 0106 	adc.w	r1, r9, r6
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	461d      	mov	r5, r3
 80034a4:	f04f 0600 	mov.w	r6, #0
 80034a8:	196b      	adds	r3, r5, r5
 80034aa:	eb46 0406 	adc.w	r4, r6, r6
 80034ae:	461a      	mov	r2, r3
 80034b0:	4623      	mov	r3, r4
 80034b2:	f7fd fb45 	bl	8000b40 <__aeabi_uldivmod>
 80034b6:	4603      	mov	r3, r0
 80034b8:	460c      	mov	r4, r1
 80034ba:	461a      	mov	r2, r3
 80034bc:	4ba5      	ldr	r3, [pc, #660]	; (8003754 <UART_SetConfig+0x384>)
 80034be:	fba3 2302 	umull	r2, r3, r3, r2
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	461d      	mov	r5, r3
 80034cc:	f04f 0600 	mov.w	r6, #0
 80034d0:	46a9      	mov	r9, r5
 80034d2:	46b2      	mov	sl, r6
 80034d4:	eb19 0309 	adds.w	r3, r9, r9
 80034d8:	eb4a 040a 	adc.w	r4, sl, sl
 80034dc:	4699      	mov	r9, r3
 80034de:	46a2      	mov	sl, r4
 80034e0:	eb19 0905 	adds.w	r9, r9, r5
 80034e4:	eb4a 0a06 	adc.w	sl, sl, r6
 80034e8:	f04f 0100 	mov.w	r1, #0
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034fc:	4689      	mov	r9, r1
 80034fe:	4692      	mov	sl, r2
 8003500:	eb19 0005 	adds.w	r0, r9, r5
 8003504:	eb4a 0106 	adc.w	r1, sl, r6
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	461d      	mov	r5, r3
 800350e:	f04f 0600 	mov.w	r6, #0
 8003512:	196b      	adds	r3, r5, r5
 8003514:	eb46 0406 	adc.w	r4, r6, r6
 8003518:	461a      	mov	r2, r3
 800351a:	4623      	mov	r3, r4
 800351c:	f7fd fb10 	bl	8000b40 <__aeabi_uldivmod>
 8003520:	4603      	mov	r3, r0
 8003522:	460c      	mov	r4, r1
 8003524:	461a      	mov	r2, r3
 8003526:	4b8b      	ldr	r3, [pc, #556]	; (8003754 <UART_SetConfig+0x384>)
 8003528:	fba3 1302 	umull	r1, r3, r3, r2
 800352c:	095b      	lsrs	r3, r3, #5
 800352e:	2164      	movs	r1, #100	; 0x64
 8003530:	fb01 f303 	mul.w	r3, r1, r3
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	3332      	adds	r3, #50	; 0x32
 800353a:	4a86      	ldr	r2, [pc, #536]	; (8003754 <UART_SetConfig+0x384>)
 800353c:	fba2 2303 	umull	r2, r3, r2, r3
 8003540:	095b      	lsrs	r3, r3, #5
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003548:	4498      	add	r8, r3
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	461d      	mov	r5, r3
 800354e:	f04f 0600 	mov.w	r6, #0
 8003552:	46a9      	mov	r9, r5
 8003554:	46b2      	mov	sl, r6
 8003556:	eb19 0309 	adds.w	r3, r9, r9
 800355a:	eb4a 040a 	adc.w	r4, sl, sl
 800355e:	4699      	mov	r9, r3
 8003560:	46a2      	mov	sl, r4
 8003562:	eb19 0905 	adds.w	r9, r9, r5
 8003566:	eb4a 0a06 	adc.w	sl, sl, r6
 800356a:	f04f 0100 	mov.w	r1, #0
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003576:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800357a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800357e:	4689      	mov	r9, r1
 8003580:	4692      	mov	sl, r2
 8003582:	eb19 0005 	adds.w	r0, r9, r5
 8003586:	eb4a 0106 	adc.w	r1, sl, r6
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	461d      	mov	r5, r3
 8003590:	f04f 0600 	mov.w	r6, #0
 8003594:	196b      	adds	r3, r5, r5
 8003596:	eb46 0406 	adc.w	r4, r6, r6
 800359a:	461a      	mov	r2, r3
 800359c:	4623      	mov	r3, r4
 800359e:	f7fd facf 	bl	8000b40 <__aeabi_uldivmod>
 80035a2:	4603      	mov	r3, r0
 80035a4:	460c      	mov	r4, r1
 80035a6:	461a      	mov	r2, r3
 80035a8:	4b6a      	ldr	r3, [pc, #424]	; (8003754 <UART_SetConfig+0x384>)
 80035aa:	fba3 1302 	umull	r1, r3, r3, r2
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	2164      	movs	r1, #100	; 0x64
 80035b2:	fb01 f303 	mul.w	r3, r1, r3
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	3332      	adds	r3, #50	; 0x32
 80035bc:	4a65      	ldr	r2, [pc, #404]	; (8003754 <UART_SetConfig+0x384>)
 80035be:	fba2 2303 	umull	r2, r3, r2, r3
 80035c2:	095b      	lsrs	r3, r3, #5
 80035c4:	f003 0207 	and.w	r2, r3, #7
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4442      	add	r2, r8
 80035ce:	609a      	str	r2, [r3, #8]
 80035d0:	e26f      	b.n	8003ab2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035d2:	f7fe fffd 	bl	80025d0 <HAL_RCC_GetPCLK1Freq>
 80035d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	461d      	mov	r5, r3
 80035dc:	f04f 0600 	mov.w	r6, #0
 80035e0:	46a8      	mov	r8, r5
 80035e2:	46b1      	mov	r9, r6
 80035e4:	eb18 0308 	adds.w	r3, r8, r8
 80035e8:	eb49 0409 	adc.w	r4, r9, r9
 80035ec:	4698      	mov	r8, r3
 80035ee:	46a1      	mov	r9, r4
 80035f0:	eb18 0805 	adds.w	r8, r8, r5
 80035f4:	eb49 0906 	adc.w	r9, r9, r6
 80035f8:	f04f 0100 	mov.w	r1, #0
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003604:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003608:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800360c:	4688      	mov	r8, r1
 800360e:	4691      	mov	r9, r2
 8003610:	eb18 0005 	adds.w	r0, r8, r5
 8003614:	eb49 0106 	adc.w	r1, r9, r6
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	461d      	mov	r5, r3
 800361e:	f04f 0600 	mov.w	r6, #0
 8003622:	196b      	adds	r3, r5, r5
 8003624:	eb46 0406 	adc.w	r4, r6, r6
 8003628:	461a      	mov	r2, r3
 800362a:	4623      	mov	r3, r4
 800362c:	f7fd fa88 	bl	8000b40 <__aeabi_uldivmod>
 8003630:	4603      	mov	r3, r0
 8003632:	460c      	mov	r4, r1
 8003634:	461a      	mov	r2, r3
 8003636:	4b47      	ldr	r3, [pc, #284]	; (8003754 <UART_SetConfig+0x384>)
 8003638:	fba3 2302 	umull	r2, r3, r3, r2
 800363c:	095b      	lsrs	r3, r3, #5
 800363e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	461d      	mov	r5, r3
 8003646:	f04f 0600 	mov.w	r6, #0
 800364a:	46a9      	mov	r9, r5
 800364c:	46b2      	mov	sl, r6
 800364e:	eb19 0309 	adds.w	r3, r9, r9
 8003652:	eb4a 040a 	adc.w	r4, sl, sl
 8003656:	4699      	mov	r9, r3
 8003658:	46a2      	mov	sl, r4
 800365a:	eb19 0905 	adds.w	r9, r9, r5
 800365e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003662:	f04f 0100 	mov.w	r1, #0
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800366e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003672:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003676:	4689      	mov	r9, r1
 8003678:	4692      	mov	sl, r2
 800367a:	eb19 0005 	adds.w	r0, r9, r5
 800367e:	eb4a 0106 	adc.w	r1, sl, r6
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	461d      	mov	r5, r3
 8003688:	f04f 0600 	mov.w	r6, #0
 800368c:	196b      	adds	r3, r5, r5
 800368e:	eb46 0406 	adc.w	r4, r6, r6
 8003692:	461a      	mov	r2, r3
 8003694:	4623      	mov	r3, r4
 8003696:	f7fd fa53 	bl	8000b40 <__aeabi_uldivmod>
 800369a:	4603      	mov	r3, r0
 800369c:	460c      	mov	r4, r1
 800369e:	461a      	mov	r2, r3
 80036a0:	4b2c      	ldr	r3, [pc, #176]	; (8003754 <UART_SetConfig+0x384>)
 80036a2:	fba3 1302 	umull	r1, r3, r3, r2
 80036a6:	095b      	lsrs	r3, r3, #5
 80036a8:	2164      	movs	r1, #100	; 0x64
 80036aa:	fb01 f303 	mul.w	r3, r1, r3
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	3332      	adds	r3, #50	; 0x32
 80036b4:	4a27      	ldr	r2, [pc, #156]	; (8003754 <UART_SetConfig+0x384>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	095b      	lsrs	r3, r3, #5
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036c2:	4498      	add	r8, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	461d      	mov	r5, r3
 80036c8:	f04f 0600 	mov.w	r6, #0
 80036cc:	46a9      	mov	r9, r5
 80036ce:	46b2      	mov	sl, r6
 80036d0:	eb19 0309 	adds.w	r3, r9, r9
 80036d4:	eb4a 040a 	adc.w	r4, sl, sl
 80036d8:	4699      	mov	r9, r3
 80036da:	46a2      	mov	sl, r4
 80036dc:	eb19 0905 	adds.w	r9, r9, r5
 80036e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80036e4:	f04f 0100 	mov.w	r1, #0
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036f8:	4689      	mov	r9, r1
 80036fa:	4692      	mov	sl, r2
 80036fc:	eb19 0005 	adds.w	r0, r9, r5
 8003700:	eb4a 0106 	adc.w	r1, sl, r6
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	461d      	mov	r5, r3
 800370a:	f04f 0600 	mov.w	r6, #0
 800370e:	196b      	adds	r3, r5, r5
 8003710:	eb46 0406 	adc.w	r4, r6, r6
 8003714:	461a      	mov	r2, r3
 8003716:	4623      	mov	r3, r4
 8003718:	f7fd fa12 	bl	8000b40 <__aeabi_uldivmod>
 800371c:	4603      	mov	r3, r0
 800371e:	460c      	mov	r4, r1
 8003720:	461a      	mov	r2, r3
 8003722:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <UART_SetConfig+0x384>)
 8003724:	fba3 1302 	umull	r1, r3, r3, r2
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	2164      	movs	r1, #100	; 0x64
 800372c:	fb01 f303 	mul.w	r3, r1, r3
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	3332      	adds	r3, #50	; 0x32
 8003736:	4a07      	ldr	r2, [pc, #28]	; (8003754 <UART_SetConfig+0x384>)
 8003738:	fba2 2303 	umull	r2, r3, r2, r3
 800373c:	095b      	lsrs	r3, r3, #5
 800373e:	f003 0207 	and.w	r2, r3, #7
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4442      	add	r2, r8
 8003748:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800374a:	e1b2      	b.n	8003ab2 <UART_SetConfig+0x6e2>
 800374c:	40011000 	.word	0x40011000
 8003750:	40011400 	.word	0x40011400
 8003754:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4ad7      	ldr	r2, [pc, #860]	; (8003abc <UART_SetConfig+0x6ec>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d005      	beq.n	800376e <UART_SetConfig+0x39e>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4ad6      	ldr	r2, [pc, #856]	; (8003ac0 <UART_SetConfig+0x6f0>)
 8003768:	4293      	cmp	r3, r2
 800376a:	f040 80d1 	bne.w	8003910 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800376e:	f7fe ff43 	bl	80025f8 <HAL_RCC_GetPCLK2Freq>
 8003772:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	469a      	mov	sl, r3
 8003778:	f04f 0b00 	mov.w	fp, #0
 800377c:	46d0      	mov	r8, sl
 800377e:	46d9      	mov	r9, fp
 8003780:	eb18 0308 	adds.w	r3, r8, r8
 8003784:	eb49 0409 	adc.w	r4, r9, r9
 8003788:	4698      	mov	r8, r3
 800378a:	46a1      	mov	r9, r4
 800378c:	eb18 080a 	adds.w	r8, r8, sl
 8003790:	eb49 090b 	adc.w	r9, r9, fp
 8003794:	f04f 0100 	mov.w	r1, #0
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80037a0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80037a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80037a8:	4688      	mov	r8, r1
 80037aa:	4691      	mov	r9, r2
 80037ac:	eb1a 0508 	adds.w	r5, sl, r8
 80037b0:	eb4b 0609 	adc.w	r6, fp, r9
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	4619      	mov	r1, r3
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	f04f 0300 	mov.w	r3, #0
 80037c2:	f04f 0400 	mov.w	r4, #0
 80037c6:	0094      	lsls	r4, r2, #2
 80037c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037cc:	008b      	lsls	r3, r1, #2
 80037ce:	461a      	mov	r2, r3
 80037d0:	4623      	mov	r3, r4
 80037d2:	4628      	mov	r0, r5
 80037d4:	4631      	mov	r1, r6
 80037d6:	f7fd f9b3 	bl	8000b40 <__aeabi_uldivmod>
 80037da:	4603      	mov	r3, r0
 80037dc:	460c      	mov	r4, r1
 80037de:	461a      	mov	r2, r3
 80037e0:	4bb8      	ldr	r3, [pc, #736]	; (8003ac4 <UART_SetConfig+0x6f4>)
 80037e2:	fba3 2302 	umull	r2, r3, r3, r2
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	469b      	mov	fp, r3
 80037f0:	f04f 0c00 	mov.w	ip, #0
 80037f4:	46d9      	mov	r9, fp
 80037f6:	46e2      	mov	sl, ip
 80037f8:	eb19 0309 	adds.w	r3, r9, r9
 80037fc:	eb4a 040a 	adc.w	r4, sl, sl
 8003800:	4699      	mov	r9, r3
 8003802:	46a2      	mov	sl, r4
 8003804:	eb19 090b 	adds.w	r9, r9, fp
 8003808:	eb4a 0a0c 	adc.w	sl, sl, ip
 800380c:	f04f 0100 	mov.w	r1, #0
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003818:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800381c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003820:	4689      	mov	r9, r1
 8003822:	4692      	mov	sl, r2
 8003824:	eb1b 0509 	adds.w	r5, fp, r9
 8003828:	eb4c 060a 	adc.w	r6, ip, sl
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	4619      	mov	r1, r3
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	f04f 0400 	mov.w	r4, #0
 800383e:	0094      	lsls	r4, r2, #2
 8003840:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003844:	008b      	lsls	r3, r1, #2
 8003846:	461a      	mov	r2, r3
 8003848:	4623      	mov	r3, r4
 800384a:	4628      	mov	r0, r5
 800384c:	4631      	mov	r1, r6
 800384e:	f7fd f977 	bl	8000b40 <__aeabi_uldivmod>
 8003852:	4603      	mov	r3, r0
 8003854:	460c      	mov	r4, r1
 8003856:	461a      	mov	r2, r3
 8003858:	4b9a      	ldr	r3, [pc, #616]	; (8003ac4 <UART_SetConfig+0x6f4>)
 800385a:	fba3 1302 	umull	r1, r3, r3, r2
 800385e:	095b      	lsrs	r3, r3, #5
 8003860:	2164      	movs	r1, #100	; 0x64
 8003862:	fb01 f303 	mul.w	r3, r1, r3
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	3332      	adds	r3, #50	; 0x32
 800386c:	4a95      	ldr	r2, [pc, #596]	; (8003ac4 <UART_SetConfig+0x6f4>)
 800386e:	fba2 2303 	umull	r2, r3, r2, r3
 8003872:	095b      	lsrs	r3, r3, #5
 8003874:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003878:	4498      	add	r8, r3
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	469b      	mov	fp, r3
 800387e:	f04f 0c00 	mov.w	ip, #0
 8003882:	46d9      	mov	r9, fp
 8003884:	46e2      	mov	sl, ip
 8003886:	eb19 0309 	adds.w	r3, r9, r9
 800388a:	eb4a 040a 	adc.w	r4, sl, sl
 800388e:	4699      	mov	r9, r3
 8003890:	46a2      	mov	sl, r4
 8003892:	eb19 090b 	adds.w	r9, r9, fp
 8003896:	eb4a 0a0c 	adc.w	sl, sl, ip
 800389a:	f04f 0100 	mov.w	r1, #0
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038ae:	4689      	mov	r9, r1
 80038b0:	4692      	mov	sl, r2
 80038b2:	eb1b 0509 	adds.w	r5, fp, r9
 80038b6:	eb4c 060a 	adc.w	r6, ip, sl
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	4619      	mov	r1, r3
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	f04f 0400 	mov.w	r4, #0
 80038cc:	0094      	lsls	r4, r2, #2
 80038ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038d2:	008b      	lsls	r3, r1, #2
 80038d4:	461a      	mov	r2, r3
 80038d6:	4623      	mov	r3, r4
 80038d8:	4628      	mov	r0, r5
 80038da:	4631      	mov	r1, r6
 80038dc:	f7fd f930 	bl	8000b40 <__aeabi_uldivmod>
 80038e0:	4603      	mov	r3, r0
 80038e2:	460c      	mov	r4, r1
 80038e4:	461a      	mov	r2, r3
 80038e6:	4b77      	ldr	r3, [pc, #476]	; (8003ac4 <UART_SetConfig+0x6f4>)
 80038e8:	fba3 1302 	umull	r1, r3, r3, r2
 80038ec:	095b      	lsrs	r3, r3, #5
 80038ee:	2164      	movs	r1, #100	; 0x64
 80038f0:	fb01 f303 	mul.w	r3, r1, r3
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	3332      	adds	r3, #50	; 0x32
 80038fa:	4a72      	ldr	r2, [pc, #456]	; (8003ac4 <UART_SetConfig+0x6f4>)
 80038fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003900:	095b      	lsrs	r3, r3, #5
 8003902:	f003 020f 	and.w	r2, r3, #15
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4442      	add	r2, r8
 800390c:	609a      	str	r2, [r3, #8]
 800390e:	e0d0      	b.n	8003ab2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003910:	f7fe fe5e 	bl	80025d0 <HAL_RCC_GetPCLK1Freq>
 8003914:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	469a      	mov	sl, r3
 800391a:	f04f 0b00 	mov.w	fp, #0
 800391e:	46d0      	mov	r8, sl
 8003920:	46d9      	mov	r9, fp
 8003922:	eb18 0308 	adds.w	r3, r8, r8
 8003926:	eb49 0409 	adc.w	r4, r9, r9
 800392a:	4698      	mov	r8, r3
 800392c:	46a1      	mov	r9, r4
 800392e:	eb18 080a 	adds.w	r8, r8, sl
 8003932:	eb49 090b 	adc.w	r9, r9, fp
 8003936:	f04f 0100 	mov.w	r1, #0
 800393a:	f04f 0200 	mov.w	r2, #0
 800393e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003942:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003946:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800394a:	4688      	mov	r8, r1
 800394c:	4691      	mov	r9, r2
 800394e:	eb1a 0508 	adds.w	r5, sl, r8
 8003952:	eb4b 0609 	adc.w	r6, fp, r9
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	4619      	mov	r1, r3
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	f04f 0300 	mov.w	r3, #0
 8003964:	f04f 0400 	mov.w	r4, #0
 8003968:	0094      	lsls	r4, r2, #2
 800396a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800396e:	008b      	lsls	r3, r1, #2
 8003970:	461a      	mov	r2, r3
 8003972:	4623      	mov	r3, r4
 8003974:	4628      	mov	r0, r5
 8003976:	4631      	mov	r1, r6
 8003978:	f7fd f8e2 	bl	8000b40 <__aeabi_uldivmod>
 800397c:	4603      	mov	r3, r0
 800397e:	460c      	mov	r4, r1
 8003980:	461a      	mov	r2, r3
 8003982:	4b50      	ldr	r3, [pc, #320]	; (8003ac4 <UART_SetConfig+0x6f4>)
 8003984:	fba3 2302 	umull	r2, r3, r3, r2
 8003988:	095b      	lsrs	r3, r3, #5
 800398a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	469b      	mov	fp, r3
 8003992:	f04f 0c00 	mov.w	ip, #0
 8003996:	46d9      	mov	r9, fp
 8003998:	46e2      	mov	sl, ip
 800399a:	eb19 0309 	adds.w	r3, r9, r9
 800399e:	eb4a 040a 	adc.w	r4, sl, sl
 80039a2:	4699      	mov	r9, r3
 80039a4:	46a2      	mov	sl, r4
 80039a6:	eb19 090b 	adds.w	r9, r9, fp
 80039aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80039ae:	f04f 0100 	mov.w	r1, #0
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039c2:	4689      	mov	r9, r1
 80039c4:	4692      	mov	sl, r2
 80039c6:	eb1b 0509 	adds.w	r5, fp, r9
 80039ca:	eb4c 060a 	adc.w	r6, ip, sl
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	4619      	mov	r1, r3
 80039d4:	f04f 0200 	mov.w	r2, #0
 80039d8:	f04f 0300 	mov.w	r3, #0
 80039dc:	f04f 0400 	mov.w	r4, #0
 80039e0:	0094      	lsls	r4, r2, #2
 80039e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80039e6:	008b      	lsls	r3, r1, #2
 80039e8:	461a      	mov	r2, r3
 80039ea:	4623      	mov	r3, r4
 80039ec:	4628      	mov	r0, r5
 80039ee:	4631      	mov	r1, r6
 80039f0:	f7fd f8a6 	bl	8000b40 <__aeabi_uldivmod>
 80039f4:	4603      	mov	r3, r0
 80039f6:	460c      	mov	r4, r1
 80039f8:	461a      	mov	r2, r3
 80039fa:	4b32      	ldr	r3, [pc, #200]	; (8003ac4 <UART_SetConfig+0x6f4>)
 80039fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003a00:	095b      	lsrs	r3, r3, #5
 8003a02:	2164      	movs	r1, #100	; 0x64
 8003a04:	fb01 f303 	mul.w	r3, r1, r3
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	3332      	adds	r3, #50	; 0x32
 8003a0e:	4a2d      	ldr	r2, [pc, #180]	; (8003ac4 <UART_SetConfig+0x6f4>)
 8003a10:	fba2 2303 	umull	r2, r3, r2, r3
 8003a14:	095b      	lsrs	r3, r3, #5
 8003a16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a1a:	4498      	add	r8, r3
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	469b      	mov	fp, r3
 8003a20:	f04f 0c00 	mov.w	ip, #0
 8003a24:	46d9      	mov	r9, fp
 8003a26:	46e2      	mov	sl, ip
 8003a28:	eb19 0309 	adds.w	r3, r9, r9
 8003a2c:	eb4a 040a 	adc.w	r4, sl, sl
 8003a30:	4699      	mov	r9, r3
 8003a32:	46a2      	mov	sl, r4
 8003a34:	eb19 090b 	adds.w	r9, r9, fp
 8003a38:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a3c:	f04f 0100 	mov.w	r1, #0
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a48:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a4c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a50:	4689      	mov	r9, r1
 8003a52:	4692      	mov	sl, r2
 8003a54:	eb1b 0509 	adds.w	r5, fp, r9
 8003a58:	eb4c 060a 	adc.w	r6, ip, sl
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	4619      	mov	r1, r3
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	f04f 0300 	mov.w	r3, #0
 8003a6a:	f04f 0400 	mov.w	r4, #0
 8003a6e:	0094      	lsls	r4, r2, #2
 8003a70:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a74:	008b      	lsls	r3, r1, #2
 8003a76:	461a      	mov	r2, r3
 8003a78:	4623      	mov	r3, r4
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	4631      	mov	r1, r6
 8003a7e:	f7fd f85f 	bl	8000b40 <__aeabi_uldivmod>
 8003a82:	4603      	mov	r3, r0
 8003a84:	460c      	mov	r4, r1
 8003a86:	461a      	mov	r2, r3
 8003a88:	4b0e      	ldr	r3, [pc, #56]	; (8003ac4 <UART_SetConfig+0x6f4>)
 8003a8a:	fba3 1302 	umull	r1, r3, r3, r2
 8003a8e:	095b      	lsrs	r3, r3, #5
 8003a90:	2164      	movs	r1, #100	; 0x64
 8003a92:	fb01 f303 	mul.w	r3, r1, r3
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	3332      	adds	r3, #50	; 0x32
 8003a9c:	4a09      	ldr	r2, [pc, #36]	; (8003ac4 <UART_SetConfig+0x6f4>)
 8003a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	f003 020f 	and.w	r2, r3, #15
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4442      	add	r2, r8
 8003aae:	609a      	str	r2, [r3, #8]
}
 8003ab0:	e7ff      	b.n	8003ab2 <UART_SetConfig+0x6e2>
 8003ab2:	bf00      	nop
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003abc:	40011000 	.word	0x40011000
 8003ac0:	40011400 	.word	0x40011400
 8003ac4:	51eb851f 	.word	0x51eb851f

08003ac8 <__errno>:
 8003ac8:	4b01      	ldr	r3, [pc, #4]	; (8003ad0 <__errno+0x8>)
 8003aca:	6818      	ldr	r0, [r3, #0]
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	2000000c 	.word	0x2000000c

08003ad4 <__libc_init_array>:
 8003ad4:	b570      	push	{r4, r5, r6, lr}
 8003ad6:	4e0d      	ldr	r6, [pc, #52]	; (8003b0c <__libc_init_array+0x38>)
 8003ad8:	4c0d      	ldr	r4, [pc, #52]	; (8003b10 <__libc_init_array+0x3c>)
 8003ada:	1ba4      	subs	r4, r4, r6
 8003adc:	10a4      	asrs	r4, r4, #2
 8003ade:	2500      	movs	r5, #0
 8003ae0:	42a5      	cmp	r5, r4
 8003ae2:	d109      	bne.n	8003af8 <__libc_init_array+0x24>
 8003ae4:	4e0b      	ldr	r6, [pc, #44]	; (8003b14 <__libc_init_array+0x40>)
 8003ae6:	4c0c      	ldr	r4, [pc, #48]	; (8003b18 <__libc_init_array+0x44>)
 8003ae8:	f001 fd44 	bl	8005574 <_init>
 8003aec:	1ba4      	subs	r4, r4, r6
 8003aee:	10a4      	asrs	r4, r4, #2
 8003af0:	2500      	movs	r5, #0
 8003af2:	42a5      	cmp	r5, r4
 8003af4:	d105      	bne.n	8003b02 <__libc_init_array+0x2e>
 8003af6:	bd70      	pop	{r4, r5, r6, pc}
 8003af8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003afc:	4798      	blx	r3
 8003afe:	3501      	adds	r5, #1
 8003b00:	e7ee      	b.n	8003ae0 <__libc_init_array+0xc>
 8003b02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b06:	4798      	blx	r3
 8003b08:	3501      	adds	r5, #1
 8003b0a:	e7f2      	b.n	8003af2 <__libc_init_array+0x1e>
 8003b0c:	080057d8 	.word	0x080057d8
 8003b10:	080057d8 	.word	0x080057d8
 8003b14:	080057d8 	.word	0x080057d8
 8003b18:	080057dc 	.word	0x080057dc

08003b1c <memset>:
 8003b1c:	4402      	add	r2, r0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d100      	bne.n	8003b26 <memset+0xa>
 8003b24:	4770      	bx	lr
 8003b26:	f803 1b01 	strb.w	r1, [r3], #1
 8003b2a:	e7f9      	b.n	8003b20 <memset+0x4>

08003b2c <__cvt>:
 8003b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b30:	ec55 4b10 	vmov	r4, r5, d0
 8003b34:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003b36:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003b3a:	2d00      	cmp	r5, #0
 8003b3c:	460e      	mov	r6, r1
 8003b3e:	4691      	mov	r9, r2
 8003b40:	4619      	mov	r1, r3
 8003b42:	bfb8      	it	lt
 8003b44:	4622      	movlt	r2, r4
 8003b46:	462b      	mov	r3, r5
 8003b48:	f027 0720 	bic.w	r7, r7, #32
 8003b4c:	bfbb      	ittet	lt
 8003b4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003b52:	461d      	movlt	r5, r3
 8003b54:	2300      	movge	r3, #0
 8003b56:	232d      	movlt	r3, #45	; 0x2d
 8003b58:	bfb8      	it	lt
 8003b5a:	4614      	movlt	r4, r2
 8003b5c:	2f46      	cmp	r7, #70	; 0x46
 8003b5e:	700b      	strb	r3, [r1, #0]
 8003b60:	d004      	beq.n	8003b6c <__cvt+0x40>
 8003b62:	2f45      	cmp	r7, #69	; 0x45
 8003b64:	d100      	bne.n	8003b68 <__cvt+0x3c>
 8003b66:	3601      	adds	r6, #1
 8003b68:	2102      	movs	r1, #2
 8003b6a:	e000      	b.n	8003b6e <__cvt+0x42>
 8003b6c:	2103      	movs	r1, #3
 8003b6e:	ab03      	add	r3, sp, #12
 8003b70:	9301      	str	r3, [sp, #4]
 8003b72:	ab02      	add	r3, sp, #8
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	4632      	mov	r2, r6
 8003b78:	4653      	mov	r3, sl
 8003b7a:	ec45 4b10 	vmov	d0, r4, r5
 8003b7e:	f000 fbab 	bl	80042d8 <_dtoa_r>
 8003b82:	2f47      	cmp	r7, #71	; 0x47
 8003b84:	4680      	mov	r8, r0
 8003b86:	d102      	bne.n	8003b8e <__cvt+0x62>
 8003b88:	f019 0f01 	tst.w	r9, #1
 8003b8c:	d026      	beq.n	8003bdc <__cvt+0xb0>
 8003b8e:	2f46      	cmp	r7, #70	; 0x46
 8003b90:	eb08 0906 	add.w	r9, r8, r6
 8003b94:	d111      	bne.n	8003bba <__cvt+0x8e>
 8003b96:	f898 3000 	ldrb.w	r3, [r8]
 8003b9a:	2b30      	cmp	r3, #48	; 0x30
 8003b9c:	d10a      	bne.n	8003bb4 <__cvt+0x88>
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	4629      	mov	r1, r5
 8003ba6:	f7fc ff3b 	bl	8000a20 <__aeabi_dcmpeq>
 8003baa:	b918      	cbnz	r0, 8003bb4 <__cvt+0x88>
 8003bac:	f1c6 0601 	rsb	r6, r6, #1
 8003bb0:	f8ca 6000 	str.w	r6, [sl]
 8003bb4:	f8da 3000 	ldr.w	r3, [sl]
 8003bb8:	4499      	add	r9, r3
 8003bba:	2200      	movs	r2, #0
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	4629      	mov	r1, r5
 8003bc2:	f7fc ff2d 	bl	8000a20 <__aeabi_dcmpeq>
 8003bc6:	b938      	cbnz	r0, 8003bd8 <__cvt+0xac>
 8003bc8:	2230      	movs	r2, #48	; 0x30
 8003bca:	9b03      	ldr	r3, [sp, #12]
 8003bcc:	454b      	cmp	r3, r9
 8003bce:	d205      	bcs.n	8003bdc <__cvt+0xb0>
 8003bd0:	1c59      	adds	r1, r3, #1
 8003bd2:	9103      	str	r1, [sp, #12]
 8003bd4:	701a      	strb	r2, [r3, #0]
 8003bd6:	e7f8      	b.n	8003bca <__cvt+0x9e>
 8003bd8:	f8cd 900c 	str.w	r9, [sp, #12]
 8003bdc:	9b03      	ldr	r3, [sp, #12]
 8003bde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003be0:	eba3 0308 	sub.w	r3, r3, r8
 8003be4:	4640      	mov	r0, r8
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	b004      	add	sp, #16
 8003bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003bee <__exponent>:
 8003bee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bf0:	2900      	cmp	r1, #0
 8003bf2:	4604      	mov	r4, r0
 8003bf4:	bfba      	itte	lt
 8003bf6:	4249      	neglt	r1, r1
 8003bf8:	232d      	movlt	r3, #45	; 0x2d
 8003bfa:	232b      	movge	r3, #43	; 0x2b
 8003bfc:	2909      	cmp	r1, #9
 8003bfe:	f804 2b02 	strb.w	r2, [r4], #2
 8003c02:	7043      	strb	r3, [r0, #1]
 8003c04:	dd20      	ble.n	8003c48 <__exponent+0x5a>
 8003c06:	f10d 0307 	add.w	r3, sp, #7
 8003c0a:	461f      	mov	r7, r3
 8003c0c:	260a      	movs	r6, #10
 8003c0e:	fb91 f5f6 	sdiv	r5, r1, r6
 8003c12:	fb06 1115 	mls	r1, r6, r5, r1
 8003c16:	3130      	adds	r1, #48	; 0x30
 8003c18:	2d09      	cmp	r5, #9
 8003c1a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003c1e:	f103 32ff 	add.w	r2, r3, #4294967295
 8003c22:	4629      	mov	r1, r5
 8003c24:	dc09      	bgt.n	8003c3a <__exponent+0x4c>
 8003c26:	3130      	adds	r1, #48	; 0x30
 8003c28:	3b02      	subs	r3, #2
 8003c2a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003c2e:	42bb      	cmp	r3, r7
 8003c30:	4622      	mov	r2, r4
 8003c32:	d304      	bcc.n	8003c3e <__exponent+0x50>
 8003c34:	1a10      	subs	r0, r2, r0
 8003c36:	b003      	add	sp, #12
 8003c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	e7e7      	b.n	8003c0e <__exponent+0x20>
 8003c3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c42:	f804 2b01 	strb.w	r2, [r4], #1
 8003c46:	e7f2      	b.n	8003c2e <__exponent+0x40>
 8003c48:	2330      	movs	r3, #48	; 0x30
 8003c4a:	4419      	add	r1, r3
 8003c4c:	7083      	strb	r3, [r0, #2]
 8003c4e:	1d02      	adds	r2, r0, #4
 8003c50:	70c1      	strb	r1, [r0, #3]
 8003c52:	e7ef      	b.n	8003c34 <__exponent+0x46>

08003c54 <_printf_float>:
 8003c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c58:	b08d      	sub	sp, #52	; 0x34
 8003c5a:	460c      	mov	r4, r1
 8003c5c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003c60:	4616      	mov	r6, r2
 8003c62:	461f      	mov	r7, r3
 8003c64:	4605      	mov	r5, r0
 8003c66:	f001 f8ef 	bl	8004e48 <_localeconv_r>
 8003c6a:	6803      	ldr	r3, [r0, #0]
 8003c6c:	9304      	str	r3, [sp, #16]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fc faaa 	bl	80001c8 <strlen>
 8003c74:	2300      	movs	r3, #0
 8003c76:	930a      	str	r3, [sp, #40]	; 0x28
 8003c78:	f8d8 3000 	ldr.w	r3, [r8]
 8003c7c:	9005      	str	r0, [sp, #20]
 8003c7e:	3307      	adds	r3, #7
 8003c80:	f023 0307 	bic.w	r3, r3, #7
 8003c84:	f103 0208 	add.w	r2, r3, #8
 8003c88:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003c8c:	f8d4 b000 	ldr.w	fp, [r4]
 8003c90:	f8c8 2000 	str.w	r2, [r8]
 8003c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c98:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003c9c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003ca0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003ca4:	9307      	str	r3, [sp, #28]
 8003ca6:	f8cd 8018 	str.w	r8, [sp, #24]
 8003caa:	f04f 32ff 	mov.w	r2, #4294967295
 8003cae:	4ba7      	ldr	r3, [pc, #668]	; (8003f4c <_printf_float+0x2f8>)
 8003cb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003cb4:	f7fc fee6 	bl	8000a84 <__aeabi_dcmpun>
 8003cb8:	bb70      	cbnz	r0, 8003d18 <_printf_float+0xc4>
 8003cba:	f04f 32ff 	mov.w	r2, #4294967295
 8003cbe:	4ba3      	ldr	r3, [pc, #652]	; (8003f4c <_printf_float+0x2f8>)
 8003cc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003cc4:	f7fc fec0 	bl	8000a48 <__aeabi_dcmple>
 8003cc8:	bb30      	cbnz	r0, 8003d18 <_printf_float+0xc4>
 8003cca:	2200      	movs	r2, #0
 8003ccc:	2300      	movs	r3, #0
 8003cce:	4640      	mov	r0, r8
 8003cd0:	4649      	mov	r1, r9
 8003cd2:	f7fc feaf 	bl	8000a34 <__aeabi_dcmplt>
 8003cd6:	b110      	cbz	r0, 8003cde <_printf_float+0x8a>
 8003cd8:	232d      	movs	r3, #45	; 0x2d
 8003cda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cde:	4a9c      	ldr	r2, [pc, #624]	; (8003f50 <_printf_float+0x2fc>)
 8003ce0:	4b9c      	ldr	r3, [pc, #624]	; (8003f54 <_printf_float+0x300>)
 8003ce2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003ce6:	bf8c      	ite	hi
 8003ce8:	4690      	movhi	r8, r2
 8003cea:	4698      	movls	r8, r3
 8003cec:	2303      	movs	r3, #3
 8003cee:	f02b 0204 	bic.w	r2, fp, #4
 8003cf2:	6123      	str	r3, [r4, #16]
 8003cf4:	6022      	str	r2, [r4, #0]
 8003cf6:	f04f 0900 	mov.w	r9, #0
 8003cfa:	9700      	str	r7, [sp, #0]
 8003cfc:	4633      	mov	r3, r6
 8003cfe:	aa0b      	add	r2, sp, #44	; 0x2c
 8003d00:	4621      	mov	r1, r4
 8003d02:	4628      	mov	r0, r5
 8003d04:	f000 f9e6 	bl	80040d4 <_printf_common>
 8003d08:	3001      	adds	r0, #1
 8003d0a:	f040 808d 	bne.w	8003e28 <_printf_float+0x1d4>
 8003d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d12:	b00d      	add	sp, #52	; 0x34
 8003d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d18:	4642      	mov	r2, r8
 8003d1a:	464b      	mov	r3, r9
 8003d1c:	4640      	mov	r0, r8
 8003d1e:	4649      	mov	r1, r9
 8003d20:	f7fc feb0 	bl	8000a84 <__aeabi_dcmpun>
 8003d24:	b110      	cbz	r0, 8003d2c <_printf_float+0xd8>
 8003d26:	4a8c      	ldr	r2, [pc, #560]	; (8003f58 <_printf_float+0x304>)
 8003d28:	4b8c      	ldr	r3, [pc, #560]	; (8003f5c <_printf_float+0x308>)
 8003d2a:	e7da      	b.n	8003ce2 <_printf_float+0x8e>
 8003d2c:	6861      	ldr	r1, [r4, #4]
 8003d2e:	1c4b      	adds	r3, r1, #1
 8003d30:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8003d34:	a80a      	add	r0, sp, #40	; 0x28
 8003d36:	d13e      	bne.n	8003db6 <_printf_float+0x162>
 8003d38:	2306      	movs	r3, #6
 8003d3a:	6063      	str	r3, [r4, #4]
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003d42:	ab09      	add	r3, sp, #36	; 0x24
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	ec49 8b10 	vmov	d0, r8, r9
 8003d4a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003d4e:	6022      	str	r2, [r4, #0]
 8003d50:	f8cd a004 	str.w	sl, [sp, #4]
 8003d54:	6861      	ldr	r1, [r4, #4]
 8003d56:	4628      	mov	r0, r5
 8003d58:	f7ff fee8 	bl	8003b2c <__cvt>
 8003d5c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003d60:	2b47      	cmp	r3, #71	; 0x47
 8003d62:	4680      	mov	r8, r0
 8003d64:	d109      	bne.n	8003d7a <_printf_float+0x126>
 8003d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d68:	1cd8      	adds	r0, r3, #3
 8003d6a:	db02      	blt.n	8003d72 <_printf_float+0x11e>
 8003d6c:	6862      	ldr	r2, [r4, #4]
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	dd47      	ble.n	8003e02 <_printf_float+0x1ae>
 8003d72:	f1aa 0a02 	sub.w	sl, sl, #2
 8003d76:	fa5f fa8a 	uxtb.w	sl, sl
 8003d7a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003d7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003d80:	d824      	bhi.n	8003dcc <_printf_float+0x178>
 8003d82:	3901      	subs	r1, #1
 8003d84:	4652      	mov	r2, sl
 8003d86:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003d8a:	9109      	str	r1, [sp, #36]	; 0x24
 8003d8c:	f7ff ff2f 	bl	8003bee <__exponent>
 8003d90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d92:	1813      	adds	r3, r2, r0
 8003d94:	2a01      	cmp	r2, #1
 8003d96:	4681      	mov	r9, r0
 8003d98:	6123      	str	r3, [r4, #16]
 8003d9a:	dc02      	bgt.n	8003da2 <_printf_float+0x14e>
 8003d9c:	6822      	ldr	r2, [r4, #0]
 8003d9e:	07d1      	lsls	r1, r2, #31
 8003da0:	d501      	bpl.n	8003da6 <_printf_float+0x152>
 8003da2:	3301      	adds	r3, #1
 8003da4:	6123      	str	r3, [r4, #16]
 8003da6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0a5      	beq.n	8003cfa <_printf_float+0xa6>
 8003dae:	232d      	movs	r3, #45	; 0x2d
 8003db0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003db4:	e7a1      	b.n	8003cfa <_printf_float+0xa6>
 8003db6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8003dba:	f000 8177 	beq.w	80040ac <_printf_float+0x458>
 8003dbe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003dc2:	d1bb      	bne.n	8003d3c <_printf_float+0xe8>
 8003dc4:	2900      	cmp	r1, #0
 8003dc6:	d1b9      	bne.n	8003d3c <_printf_float+0xe8>
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e7b6      	b.n	8003d3a <_printf_float+0xe6>
 8003dcc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8003dd0:	d119      	bne.n	8003e06 <_printf_float+0x1b2>
 8003dd2:	2900      	cmp	r1, #0
 8003dd4:	6863      	ldr	r3, [r4, #4]
 8003dd6:	dd0c      	ble.n	8003df2 <_printf_float+0x19e>
 8003dd8:	6121      	str	r1, [r4, #16]
 8003dda:	b913      	cbnz	r3, 8003de2 <_printf_float+0x18e>
 8003ddc:	6822      	ldr	r2, [r4, #0]
 8003dde:	07d2      	lsls	r2, r2, #31
 8003de0:	d502      	bpl.n	8003de8 <_printf_float+0x194>
 8003de2:	3301      	adds	r3, #1
 8003de4:	440b      	add	r3, r1
 8003de6:	6123      	str	r3, [r4, #16]
 8003de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dea:	65a3      	str	r3, [r4, #88]	; 0x58
 8003dec:	f04f 0900 	mov.w	r9, #0
 8003df0:	e7d9      	b.n	8003da6 <_printf_float+0x152>
 8003df2:	b913      	cbnz	r3, 8003dfa <_printf_float+0x1a6>
 8003df4:	6822      	ldr	r2, [r4, #0]
 8003df6:	07d0      	lsls	r0, r2, #31
 8003df8:	d501      	bpl.n	8003dfe <_printf_float+0x1aa>
 8003dfa:	3302      	adds	r3, #2
 8003dfc:	e7f3      	b.n	8003de6 <_printf_float+0x192>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e7f1      	b.n	8003de6 <_printf_float+0x192>
 8003e02:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8003e06:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	db05      	blt.n	8003e1a <_printf_float+0x1c6>
 8003e0e:	6822      	ldr	r2, [r4, #0]
 8003e10:	6123      	str	r3, [r4, #16]
 8003e12:	07d1      	lsls	r1, r2, #31
 8003e14:	d5e8      	bpl.n	8003de8 <_printf_float+0x194>
 8003e16:	3301      	adds	r3, #1
 8003e18:	e7e5      	b.n	8003de6 <_printf_float+0x192>
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	bfd4      	ite	le
 8003e1e:	f1c3 0302 	rsble	r3, r3, #2
 8003e22:	2301      	movgt	r3, #1
 8003e24:	4413      	add	r3, r2
 8003e26:	e7de      	b.n	8003de6 <_printf_float+0x192>
 8003e28:	6823      	ldr	r3, [r4, #0]
 8003e2a:	055a      	lsls	r2, r3, #21
 8003e2c:	d407      	bmi.n	8003e3e <_printf_float+0x1ea>
 8003e2e:	6923      	ldr	r3, [r4, #16]
 8003e30:	4642      	mov	r2, r8
 8003e32:	4631      	mov	r1, r6
 8003e34:	4628      	mov	r0, r5
 8003e36:	47b8      	blx	r7
 8003e38:	3001      	adds	r0, #1
 8003e3a:	d12b      	bne.n	8003e94 <_printf_float+0x240>
 8003e3c:	e767      	b.n	8003d0e <_printf_float+0xba>
 8003e3e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003e42:	f240 80dc 	bls.w	8003ffe <_printf_float+0x3aa>
 8003e46:	2200      	movs	r2, #0
 8003e48:	2300      	movs	r3, #0
 8003e4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e4e:	f7fc fde7 	bl	8000a20 <__aeabi_dcmpeq>
 8003e52:	2800      	cmp	r0, #0
 8003e54:	d033      	beq.n	8003ebe <_printf_float+0x26a>
 8003e56:	2301      	movs	r3, #1
 8003e58:	4a41      	ldr	r2, [pc, #260]	; (8003f60 <_printf_float+0x30c>)
 8003e5a:	4631      	mov	r1, r6
 8003e5c:	4628      	mov	r0, r5
 8003e5e:	47b8      	blx	r7
 8003e60:	3001      	adds	r0, #1
 8003e62:	f43f af54 	beq.w	8003d0e <_printf_float+0xba>
 8003e66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	db02      	blt.n	8003e74 <_printf_float+0x220>
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	07d8      	lsls	r0, r3, #31
 8003e72:	d50f      	bpl.n	8003e94 <_printf_float+0x240>
 8003e74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e78:	4631      	mov	r1, r6
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	47b8      	blx	r7
 8003e7e:	3001      	adds	r0, #1
 8003e80:	f43f af45 	beq.w	8003d0e <_printf_float+0xba>
 8003e84:	f04f 0800 	mov.w	r8, #0
 8003e88:	f104 091a 	add.w	r9, r4, #26
 8003e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	4543      	cmp	r3, r8
 8003e92:	dc09      	bgt.n	8003ea8 <_printf_float+0x254>
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	079b      	lsls	r3, r3, #30
 8003e98:	f100 8103 	bmi.w	80040a2 <_printf_float+0x44e>
 8003e9c:	68e0      	ldr	r0, [r4, #12]
 8003e9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ea0:	4298      	cmp	r0, r3
 8003ea2:	bfb8      	it	lt
 8003ea4:	4618      	movlt	r0, r3
 8003ea6:	e734      	b.n	8003d12 <_printf_float+0xbe>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	464a      	mov	r2, r9
 8003eac:	4631      	mov	r1, r6
 8003eae:	4628      	mov	r0, r5
 8003eb0:	47b8      	blx	r7
 8003eb2:	3001      	adds	r0, #1
 8003eb4:	f43f af2b 	beq.w	8003d0e <_printf_float+0xba>
 8003eb8:	f108 0801 	add.w	r8, r8, #1
 8003ebc:	e7e6      	b.n	8003e8c <_printf_float+0x238>
 8003ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	dc2b      	bgt.n	8003f1c <_printf_float+0x2c8>
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	4a26      	ldr	r2, [pc, #152]	; (8003f60 <_printf_float+0x30c>)
 8003ec8:	4631      	mov	r1, r6
 8003eca:	4628      	mov	r0, r5
 8003ecc:	47b8      	blx	r7
 8003ece:	3001      	adds	r0, #1
 8003ed0:	f43f af1d 	beq.w	8003d0e <_printf_float+0xba>
 8003ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ed6:	b923      	cbnz	r3, 8003ee2 <_printf_float+0x28e>
 8003ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003eda:	b913      	cbnz	r3, 8003ee2 <_printf_float+0x28e>
 8003edc:	6823      	ldr	r3, [r4, #0]
 8003ede:	07d9      	lsls	r1, r3, #31
 8003ee0:	d5d8      	bpl.n	8003e94 <_printf_float+0x240>
 8003ee2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ee6:	4631      	mov	r1, r6
 8003ee8:	4628      	mov	r0, r5
 8003eea:	47b8      	blx	r7
 8003eec:	3001      	adds	r0, #1
 8003eee:	f43f af0e 	beq.w	8003d0e <_printf_float+0xba>
 8003ef2:	f04f 0900 	mov.w	r9, #0
 8003ef6:	f104 0a1a 	add.w	sl, r4, #26
 8003efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003efc:	425b      	negs	r3, r3
 8003efe:	454b      	cmp	r3, r9
 8003f00:	dc01      	bgt.n	8003f06 <_printf_float+0x2b2>
 8003f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f04:	e794      	b.n	8003e30 <_printf_float+0x1dc>
 8003f06:	2301      	movs	r3, #1
 8003f08:	4652      	mov	r2, sl
 8003f0a:	4631      	mov	r1, r6
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	47b8      	blx	r7
 8003f10:	3001      	adds	r0, #1
 8003f12:	f43f aefc 	beq.w	8003d0e <_printf_float+0xba>
 8003f16:	f109 0901 	add.w	r9, r9, #1
 8003f1a:	e7ee      	b.n	8003efa <_printf_float+0x2a6>
 8003f1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f20:	429a      	cmp	r2, r3
 8003f22:	bfa8      	it	ge
 8003f24:	461a      	movge	r2, r3
 8003f26:	2a00      	cmp	r2, #0
 8003f28:	4691      	mov	r9, r2
 8003f2a:	dd07      	ble.n	8003f3c <_printf_float+0x2e8>
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	4631      	mov	r1, r6
 8003f30:	4642      	mov	r2, r8
 8003f32:	4628      	mov	r0, r5
 8003f34:	47b8      	blx	r7
 8003f36:	3001      	adds	r0, #1
 8003f38:	f43f aee9 	beq.w	8003d0e <_printf_float+0xba>
 8003f3c:	f104 031a 	add.w	r3, r4, #26
 8003f40:	f04f 0b00 	mov.w	fp, #0
 8003f44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f48:	9306      	str	r3, [sp, #24]
 8003f4a:	e015      	b.n	8003f78 <_printf_float+0x324>
 8003f4c:	7fefffff 	.word	0x7fefffff
 8003f50:	080055ac 	.word	0x080055ac
 8003f54:	080055a8 	.word	0x080055a8
 8003f58:	080055b4 	.word	0x080055b4
 8003f5c:	080055b0 	.word	0x080055b0
 8003f60:	080055b8 	.word	0x080055b8
 8003f64:	2301      	movs	r3, #1
 8003f66:	9a06      	ldr	r2, [sp, #24]
 8003f68:	4631      	mov	r1, r6
 8003f6a:	4628      	mov	r0, r5
 8003f6c:	47b8      	blx	r7
 8003f6e:	3001      	adds	r0, #1
 8003f70:	f43f aecd 	beq.w	8003d0e <_printf_float+0xba>
 8003f74:	f10b 0b01 	add.w	fp, fp, #1
 8003f78:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003f7c:	ebaa 0309 	sub.w	r3, sl, r9
 8003f80:	455b      	cmp	r3, fp
 8003f82:	dcef      	bgt.n	8003f64 <_printf_float+0x310>
 8003f84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	44d0      	add	r8, sl
 8003f8c:	db15      	blt.n	8003fba <_printf_float+0x366>
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	07da      	lsls	r2, r3, #31
 8003f92:	d412      	bmi.n	8003fba <_printf_float+0x366>
 8003f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003f98:	eba3 020a 	sub.w	r2, r3, sl
 8003f9c:	eba3 0a01 	sub.w	sl, r3, r1
 8003fa0:	4592      	cmp	sl, r2
 8003fa2:	bfa8      	it	ge
 8003fa4:	4692      	movge	sl, r2
 8003fa6:	f1ba 0f00 	cmp.w	sl, #0
 8003faa:	dc0e      	bgt.n	8003fca <_printf_float+0x376>
 8003fac:	f04f 0800 	mov.w	r8, #0
 8003fb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003fb4:	f104 091a 	add.w	r9, r4, #26
 8003fb8:	e019      	b.n	8003fee <_printf_float+0x39a>
 8003fba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fbe:	4631      	mov	r1, r6
 8003fc0:	4628      	mov	r0, r5
 8003fc2:	47b8      	blx	r7
 8003fc4:	3001      	adds	r0, #1
 8003fc6:	d1e5      	bne.n	8003f94 <_printf_float+0x340>
 8003fc8:	e6a1      	b.n	8003d0e <_printf_float+0xba>
 8003fca:	4653      	mov	r3, sl
 8003fcc:	4642      	mov	r2, r8
 8003fce:	4631      	mov	r1, r6
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	47b8      	blx	r7
 8003fd4:	3001      	adds	r0, #1
 8003fd6:	d1e9      	bne.n	8003fac <_printf_float+0x358>
 8003fd8:	e699      	b.n	8003d0e <_printf_float+0xba>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	464a      	mov	r2, r9
 8003fde:	4631      	mov	r1, r6
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	47b8      	blx	r7
 8003fe4:	3001      	adds	r0, #1
 8003fe6:	f43f ae92 	beq.w	8003d0e <_printf_float+0xba>
 8003fea:	f108 0801 	add.w	r8, r8, #1
 8003fee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ff2:	1a9b      	subs	r3, r3, r2
 8003ff4:	eba3 030a 	sub.w	r3, r3, sl
 8003ff8:	4543      	cmp	r3, r8
 8003ffa:	dcee      	bgt.n	8003fda <_printf_float+0x386>
 8003ffc:	e74a      	b.n	8003e94 <_printf_float+0x240>
 8003ffe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004000:	2a01      	cmp	r2, #1
 8004002:	dc01      	bgt.n	8004008 <_printf_float+0x3b4>
 8004004:	07db      	lsls	r3, r3, #31
 8004006:	d53a      	bpl.n	800407e <_printf_float+0x42a>
 8004008:	2301      	movs	r3, #1
 800400a:	4642      	mov	r2, r8
 800400c:	4631      	mov	r1, r6
 800400e:	4628      	mov	r0, r5
 8004010:	47b8      	blx	r7
 8004012:	3001      	adds	r0, #1
 8004014:	f43f ae7b 	beq.w	8003d0e <_printf_float+0xba>
 8004018:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800401c:	4631      	mov	r1, r6
 800401e:	4628      	mov	r0, r5
 8004020:	47b8      	blx	r7
 8004022:	3001      	adds	r0, #1
 8004024:	f108 0801 	add.w	r8, r8, #1
 8004028:	f43f ae71 	beq.w	8003d0e <_printf_float+0xba>
 800402c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800402e:	2200      	movs	r2, #0
 8004030:	f103 3aff 	add.w	sl, r3, #4294967295
 8004034:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004038:	2300      	movs	r3, #0
 800403a:	f7fc fcf1 	bl	8000a20 <__aeabi_dcmpeq>
 800403e:	b9c8      	cbnz	r0, 8004074 <_printf_float+0x420>
 8004040:	4653      	mov	r3, sl
 8004042:	4642      	mov	r2, r8
 8004044:	4631      	mov	r1, r6
 8004046:	4628      	mov	r0, r5
 8004048:	47b8      	blx	r7
 800404a:	3001      	adds	r0, #1
 800404c:	d10e      	bne.n	800406c <_printf_float+0x418>
 800404e:	e65e      	b.n	8003d0e <_printf_float+0xba>
 8004050:	2301      	movs	r3, #1
 8004052:	4652      	mov	r2, sl
 8004054:	4631      	mov	r1, r6
 8004056:	4628      	mov	r0, r5
 8004058:	47b8      	blx	r7
 800405a:	3001      	adds	r0, #1
 800405c:	f43f ae57 	beq.w	8003d0e <_printf_float+0xba>
 8004060:	f108 0801 	add.w	r8, r8, #1
 8004064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004066:	3b01      	subs	r3, #1
 8004068:	4543      	cmp	r3, r8
 800406a:	dcf1      	bgt.n	8004050 <_printf_float+0x3fc>
 800406c:	464b      	mov	r3, r9
 800406e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004072:	e6de      	b.n	8003e32 <_printf_float+0x1de>
 8004074:	f04f 0800 	mov.w	r8, #0
 8004078:	f104 0a1a 	add.w	sl, r4, #26
 800407c:	e7f2      	b.n	8004064 <_printf_float+0x410>
 800407e:	2301      	movs	r3, #1
 8004080:	e7df      	b.n	8004042 <_printf_float+0x3ee>
 8004082:	2301      	movs	r3, #1
 8004084:	464a      	mov	r2, r9
 8004086:	4631      	mov	r1, r6
 8004088:	4628      	mov	r0, r5
 800408a:	47b8      	blx	r7
 800408c:	3001      	adds	r0, #1
 800408e:	f43f ae3e 	beq.w	8003d0e <_printf_float+0xba>
 8004092:	f108 0801 	add.w	r8, r8, #1
 8004096:	68e3      	ldr	r3, [r4, #12]
 8004098:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800409a:	1a9b      	subs	r3, r3, r2
 800409c:	4543      	cmp	r3, r8
 800409e:	dcf0      	bgt.n	8004082 <_printf_float+0x42e>
 80040a0:	e6fc      	b.n	8003e9c <_printf_float+0x248>
 80040a2:	f04f 0800 	mov.w	r8, #0
 80040a6:	f104 0919 	add.w	r9, r4, #25
 80040aa:	e7f4      	b.n	8004096 <_printf_float+0x442>
 80040ac:	2900      	cmp	r1, #0
 80040ae:	f43f ae8b 	beq.w	8003dc8 <_printf_float+0x174>
 80040b2:	2300      	movs	r3, #0
 80040b4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80040b8:	ab09      	add	r3, sp, #36	; 0x24
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	ec49 8b10 	vmov	d0, r8, r9
 80040c0:	6022      	str	r2, [r4, #0]
 80040c2:	f8cd a004 	str.w	sl, [sp, #4]
 80040c6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80040ca:	4628      	mov	r0, r5
 80040cc:	f7ff fd2e 	bl	8003b2c <__cvt>
 80040d0:	4680      	mov	r8, r0
 80040d2:	e648      	b.n	8003d66 <_printf_float+0x112>

080040d4 <_printf_common>:
 80040d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040d8:	4691      	mov	r9, r2
 80040da:	461f      	mov	r7, r3
 80040dc:	688a      	ldr	r2, [r1, #8]
 80040de:	690b      	ldr	r3, [r1, #16]
 80040e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040e4:	4293      	cmp	r3, r2
 80040e6:	bfb8      	it	lt
 80040e8:	4613      	movlt	r3, r2
 80040ea:	f8c9 3000 	str.w	r3, [r9]
 80040ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040f2:	4606      	mov	r6, r0
 80040f4:	460c      	mov	r4, r1
 80040f6:	b112      	cbz	r2, 80040fe <_printf_common+0x2a>
 80040f8:	3301      	adds	r3, #1
 80040fa:	f8c9 3000 	str.w	r3, [r9]
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	0699      	lsls	r1, r3, #26
 8004102:	bf42      	ittt	mi
 8004104:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004108:	3302      	addmi	r3, #2
 800410a:	f8c9 3000 	strmi.w	r3, [r9]
 800410e:	6825      	ldr	r5, [r4, #0]
 8004110:	f015 0506 	ands.w	r5, r5, #6
 8004114:	d107      	bne.n	8004126 <_printf_common+0x52>
 8004116:	f104 0a19 	add.w	sl, r4, #25
 800411a:	68e3      	ldr	r3, [r4, #12]
 800411c:	f8d9 2000 	ldr.w	r2, [r9]
 8004120:	1a9b      	subs	r3, r3, r2
 8004122:	42ab      	cmp	r3, r5
 8004124:	dc28      	bgt.n	8004178 <_printf_common+0xa4>
 8004126:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800412a:	6822      	ldr	r2, [r4, #0]
 800412c:	3300      	adds	r3, #0
 800412e:	bf18      	it	ne
 8004130:	2301      	movne	r3, #1
 8004132:	0692      	lsls	r2, r2, #26
 8004134:	d42d      	bmi.n	8004192 <_printf_common+0xbe>
 8004136:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800413a:	4639      	mov	r1, r7
 800413c:	4630      	mov	r0, r6
 800413e:	47c0      	blx	r8
 8004140:	3001      	adds	r0, #1
 8004142:	d020      	beq.n	8004186 <_printf_common+0xb2>
 8004144:	6823      	ldr	r3, [r4, #0]
 8004146:	68e5      	ldr	r5, [r4, #12]
 8004148:	f8d9 2000 	ldr.w	r2, [r9]
 800414c:	f003 0306 	and.w	r3, r3, #6
 8004150:	2b04      	cmp	r3, #4
 8004152:	bf08      	it	eq
 8004154:	1aad      	subeq	r5, r5, r2
 8004156:	68a3      	ldr	r3, [r4, #8]
 8004158:	6922      	ldr	r2, [r4, #16]
 800415a:	bf0c      	ite	eq
 800415c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004160:	2500      	movne	r5, #0
 8004162:	4293      	cmp	r3, r2
 8004164:	bfc4      	itt	gt
 8004166:	1a9b      	subgt	r3, r3, r2
 8004168:	18ed      	addgt	r5, r5, r3
 800416a:	f04f 0900 	mov.w	r9, #0
 800416e:	341a      	adds	r4, #26
 8004170:	454d      	cmp	r5, r9
 8004172:	d11a      	bne.n	80041aa <_printf_common+0xd6>
 8004174:	2000      	movs	r0, #0
 8004176:	e008      	b.n	800418a <_printf_common+0xb6>
 8004178:	2301      	movs	r3, #1
 800417a:	4652      	mov	r2, sl
 800417c:	4639      	mov	r1, r7
 800417e:	4630      	mov	r0, r6
 8004180:	47c0      	blx	r8
 8004182:	3001      	adds	r0, #1
 8004184:	d103      	bne.n	800418e <_printf_common+0xba>
 8004186:	f04f 30ff 	mov.w	r0, #4294967295
 800418a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800418e:	3501      	adds	r5, #1
 8004190:	e7c3      	b.n	800411a <_printf_common+0x46>
 8004192:	18e1      	adds	r1, r4, r3
 8004194:	1c5a      	adds	r2, r3, #1
 8004196:	2030      	movs	r0, #48	; 0x30
 8004198:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800419c:	4422      	add	r2, r4
 800419e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041a6:	3302      	adds	r3, #2
 80041a8:	e7c5      	b.n	8004136 <_printf_common+0x62>
 80041aa:	2301      	movs	r3, #1
 80041ac:	4622      	mov	r2, r4
 80041ae:	4639      	mov	r1, r7
 80041b0:	4630      	mov	r0, r6
 80041b2:	47c0      	blx	r8
 80041b4:	3001      	adds	r0, #1
 80041b6:	d0e6      	beq.n	8004186 <_printf_common+0xb2>
 80041b8:	f109 0901 	add.w	r9, r9, #1
 80041bc:	e7d8      	b.n	8004170 <_printf_common+0x9c>

080041be <quorem>:
 80041be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c2:	6903      	ldr	r3, [r0, #16]
 80041c4:	690c      	ldr	r4, [r1, #16]
 80041c6:	42a3      	cmp	r3, r4
 80041c8:	4680      	mov	r8, r0
 80041ca:	f2c0 8082 	blt.w	80042d2 <quorem+0x114>
 80041ce:	3c01      	subs	r4, #1
 80041d0:	f101 0714 	add.w	r7, r1, #20
 80041d4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80041d8:	f100 0614 	add.w	r6, r0, #20
 80041dc:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80041e0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80041e4:	eb06 030c 	add.w	r3, r6, ip
 80041e8:	3501      	adds	r5, #1
 80041ea:	eb07 090c 	add.w	r9, r7, ip
 80041ee:	9301      	str	r3, [sp, #4]
 80041f0:	fbb0 f5f5 	udiv	r5, r0, r5
 80041f4:	b395      	cbz	r5, 800425c <quorem+0x9e>
 80041f6:	f04f 0a00 	mov.w	sl, #0
 80041fa:	4638      	mov	r0, r7
 80041fc:	46b6      	mov	lr, r6
 80041fe:	46d3      	mov	fp, sl
 8004200:	f850 2b04 	ldr.w	r2, [r0], #4
 8004204:	b293      	uxth	r3, r2
 8004206:	fb05 a303 	mla	r3, r5, r3, sl
 800420a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800420e:	b29b      	uxth	r3, r3
 8004210:	ebab 0303 	sub.w	r3, fp, r3
 8004214:	0c12      	lsrs	r2, r2, #16
 8004216:	f8de b000 	ldr.w	fp, [lr]
 800421a:	fb05 a202 	mla	r2, r5, r2, sl
 800421e:	fa13 f38b 	uxtah	r3, r3, fp
 8004222:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004226:	fa1f fb82 	uxth.w	fp, r2
 800422a:	f8de 2000 	ldr.w	r2, [lr]
 800422e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004232:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004236:	b29b      	uxth	r3, r3
 8004238:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800423c:	4581      	cmp	r9, r0
 800423e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004242:	f84e 3b04 	str.w	r3, [lr], #4
 8004246:	d2db      	bcs.n	8004200 <quorem+0x42>
 8004248:	f856 300c 	ldr.w	r3, [r6, ip]
 800424c:	b933      	cbnz	r3, 800425c <quorem+0x9e>
 800424e:	9b01      	ldr	r3, [sp, #4]
 8004250:	3b04      	subs	r3, #4
 8004252:	429e      	cmp	r6, r3
 8004254:	461a      	mov	r2, r3
 8004256:	d330      	bcc.n	80042ba <quorem+0xfc>
 8004258:	f8c8 4010 	str.w	r4, [r8, #16]
 800425c:	4640      	mov	r0, r8
 800425e:	f001 f829 	bl	80052b4 <__mcmp>
 8004262:	2800      	cmp	r0, #0
 8004264:	db25      	blt.n	80042b2 <quorem+0xf4>
 8004266:	3501      	adds	r5, #1
 8004268:	4630      	mov	r0, r6
 800426a:	f04f 0c00 	mov.w	ip, #0
 800426e:	f857 2b04 	ldr.w	r2, [r7], #4
 8004272:	f8d0 e000 	ldr.w	lr, [r0]
 8004276:	b293      	uxth	r3, r2
 8004278:	ebac 0303 	sub.w	r3, ip, r3
 800427c:	0c12      	lsrs	r2, r2, #16
 800427e:	fa13 f38e 	uxtah	r3, r3, lr
 8004282:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004286:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800428a:	b29b      	uxth	r3, r3
 800428c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004290:	45b9      	cmp	r9, r7
 8004292:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004296:	f840 3b04 	str.w	r3, [r0], #4
 800429a:	d2e8      	bcs.n	800426e <quorem+0xb0>
 800429c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80042a0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80042a4:	b92a      	cbnz	r2, 80042b2 <quorem+0xf4>
 80042a6:	3b04      	subs	r3, #4
 80042a8:	429e      	cmp	r6, r3
 80042aa:	461a      	mov	r2, r3
 80042ac:	d30b      	bcc.n	80042c6 <quorem+0x108>
 80042ae:	f8c8 4010 	str.w	r4, [r8, #16]
 80042b2:	4628      	mov	r0, r5
 80042b4:	b003      	add	sp, #12
 80042b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ba:	6812      	ldr	r2, [r2, #0]
 80042bc:	3b04      	subs	r3, #4
 80042be:	2a00      	cmp	r2, #0
 80042c0:	d1ca      	bne.n	8004258 <quorem+0x9a>
 80042c2:	3c01      	subs	r4, #1
 80042c4:	e7c5      	b.n	8004252 <quorem+0x94>
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	3b04      	subs	r3, #4
 80042ca:	2a00      	cmp	r2, #0
 80042cc:	d1ef      	bne.n	80042ae <quorem+0xf0>
 80042ce:	3c01      	subs	r4, #1
 80042d0:	e7ea      	b.n	80042a8 <quorem+0xea>
 80042d2:	2000      	movs	r0, #0
 80042d4:	e7ee      	b.n	80042b4 <quorem+0xf6>
	...

080042d8 <_dtoa_r>:
 80042d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042dc:	ec57 6b10 	vmov	r6, r7, d0
 80042e0:	b097      	sub	sp, #92	; 0x5c
 80042e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80042e4:	9106      	str	r1, [sp, #24]
 80042e6:	4604      	mov	r4, r0
 80042e8:	920b      	str	r2, [sp, #44]	; 0x2c
 80042ea:	9312      	str	r3, [sp, #72]	; 0x48
 80042ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80042f0:	e9cd 6700 	strd	r6, r7, [sp]
 80042f4:	b93d      	cbnz	r5, 8004306 <_dtoa_r+0x2e>
 80042f6:	2010      	movs	r0, #16
 80042f8:	f000 fdb4 	bl	8004e64 <malloc>
 80042fc:	6260      	str	r0, [r4, #36]	; 0x24
 80042fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004302:	6005      	str	r5, [r0, #0]
 8004304:	60c5      	str	r5, [r0, #12]
 8004306:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004308:	6819      	ldr	r1, [r3, #0]
 800430a:	b151      	cbz	r1, 8004322 <_dtoa_r+0x4a>
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	604a      	str	r2, [r1, #4]
 8004310:	2301      	movs	r3, #1
 8004312:	4093      	lsls	r3, r2
 8004314:	608b      	str	r3, [r1, #8]
 8004316:	4620      	mov	r0, r4
 8004318:	f000 fdeb 	bl	8004ef2 <_Bfree>
 800431c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	1e3b      	subs	r3, r7, #0
 8004324:	bfbb      	ittet	lt
 8004326:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800432a:	9301      	strlt	r3, [sp, #4]
 800432c:	2300      	movge	r3, #0
 800432e:	2201      	movlt	r2, #1
 8004330:	bfac      	ite	ge
 8004332:	f8c8 3000 	strge.w	r3, [r8]
 8004336:	f8c8 2000 	strlt.w	r2, [r8]
 800433a:	4baf      	ldr	r3, [pc, #700]	; (80045f8 <_dtoa_r+0x320>)
 800433c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004340:	ea33 0308 	bics.w	r3, r3, r8
 8004344:	d114      	bne.n	8004370 <_dtoa_r+0x98>
 8004346:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004348:	f242 730f 	movw	r3, #9999	; 0x270f
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	9b00      	ldr	r3, [sp, #0]
 8004350:	b923      	cbnz	r3, 800435c <_dtoa_r+0x84>
 8004352:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004356:	2800      	cmp	r0, #0
 8004358:	f000 8542 	beq.w	8004de0 <_dtoa_r+0xb08>
 800435c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800435e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800460c <_dtoa_r+0x334>
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 8544 	beq.w	8004df0 <_dtoa_r+0xb18>
 8004368:	f10b 0303 	add.w	r3, fp, #3
 800436c:	f000 bd3e 	b.w	8004dec <_dtoa_r+0xb14>
 8004370:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004374:	2200      	movs	r2, #0
 8004376:	2300      	movs	r3, #0
 8004378:	4630      	mov	r0, r6
 800437a:	4639      	mov	r1, r7
 800437c:	f7fc fb50 	bl	8000a20 <__aeabi_dcmpeq>
 8004380:	4681      	mov	r9, r0
 8004382:	b168      	cbz	r0, 80043a0 <_dtoa_r+0xc8>
 8004384:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004386:	2301      	movs	r3, #1
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 8524 	beq.w	8004dda <_dtoa_r+0xb02>
 8004392:	4b9a      	ldr	r3, [pc, #616]	; (80045fc <_dtoa_r+0x324>)
 8004394:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004396:	f103 3bff 	add.w	fp, r3, #4294967295
 800439a:	6013      	str	r3, [r2, #0]
 800439c:	f000 bd28 	b.w	8004df0 <_dtoa_r+0xb18>
 80043a0:	aa14      	add	r2, sp, #80	; 0x50
 80043a2:	a915      	add	r1, sp, #84	; 0x54
 80043a4:	ec47 6b10 	vmov	d0, r6, r7
 80043a8:	4620      	mov	r0, r4
 80043aa:	f000 fffa 	bl	80053a2 <__d2b>
 80043ae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80043b2:	9004      	str	r0, [sp, #16]
 80043b4:	2d00      	cmp	r5, #0
 80043b6:	d07c      	beq.n	80044b2 <_dtoa_r+0x1da>
 80043b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80043bc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80043c0:	46b2      	mov	sl, r6
 80043c2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80043c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80043ca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80043ce:	2200      	movs	r2, #0
 80043d0:	4b8b      	ldr	r3, [pc, #556]	; (8004600 <_dtoa_r+0x328>)
 80043d2:	4650      	mov	r0, sl
 80043d4:	4659      	mov	r1, fp
 80043d6:	f7fb ff03 	bl	80001e0 <__aeabi_dsub>
 80043da:	a381      	add	r3, pc, #516	; (adr r3, 80045e0 <_dtoa_r+0x308>)
 80043dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e0:	f7fc f8b6 	bl	8000550 <__aeabi_dmul>
 80043e4:	a380      	add	r3, pc, #512	; (adr r3, 80045e8 <_dtoa_r+0x310>)
 80043e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ea:	f7fb fefb 	bl	80001e4 <__adddf3>
 80043ee:	4606      	mov	r6, r0
 80043f0:	4628      	mov	r0, r5
 80043f2:	460f      	mov	r7, r1
 80043f4:	f7fc f842 	bl	800047c <__aeabi_i2d>
 80043f8:	a37d      	add	r3, pc, #500	; (adr r3, 80045f0 <_dtoa_r+0x318>)
 80043fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fe:	f7fc f8a7 	bl	8000550 <__aeabi_dmul>
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	4630      	mov	r0, r6
 8004408:	4639      	mov	r1, r7
 800440a:	f7fb feeb 	bl	80001e4 <__adddf3>
 800440e:	4606      	mov	r6, r0
 8004410:	460f      	mov	r7, r1
 8004412:	f7fc fb4d 	bl	8000ab0 <__aeabi_d2iz>
 8004416:	2200      	movs	r2, #0
 8004418:	4682      	mov	sl, r0
 800441a:	2300      	movs	r3, #0
 800441c:	4630      	mov	r0, r6
 800441e:	4639      	mov	r1, r7
 8004420:	f7fc fb08 	bl	8000a34 <__aeabi_dcmplt>
 8004424:	b148      	cbz	r0, 800443a <_dtoa_r+0x162>
 8004426:	4650      	mov	r0, sl
 8004428:	f7fc f828 	bl	800047c <__aeabi_i2d>
 800442c:	4632      	mov	r2, r6
 800442e:	463b      	mov	r3, r7
 8004430:	f7fc faf6 	bl	8000a20 <__aeabi_dcmpeq>
 8004434:	b908      	cbnz	r0, 800443a <_dtoa_r+0x162>
 8004436:	f10a 3aff 	add.w	sl, sl, #4294967295
 800443a:	f1ba 0f16 	cmp.w	sl, #22
 800443e:	d859      	bhi.n	80044f4 <_dtoa_r+0x21c>
 8004440:	4970      	ldr	r1, [pc, #448]	; (8004604 <_dtoa_r+0x32c>)
 8004442:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004446:	e9dd 2300 	ldrd	r2, r3, [sp]
 800444a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800444e:	f7fc fb0f 	bl	8000a70 <__aeabi_dcmpgt>
 8004452:	2800      	cmp	r0, #0
 8004454:	d050      	beq.n	80044f8 <_dtoa_r+0x220>
 8004456:	f10a 3aff 	add.w	sl, sl, #4294967295
 800445a:	2300      	movs	r3, #0
 800445c:	930f      	str	r3, [sp, #60]	; 0x3c
 800445e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004460:	1b5d      	subs	r5, r3, r5
 8004462:	f1b5 0801 	subs.w	r8, r5, #1
 8004466:	bf49      	itett	mi
 8004468:	f1c5 0301 	rsbmi	r3, r5, #1
 800446c:	2300      	movpl	r3, #0
 800446e:	9305      	strmi	r3, [sp, #20]
 8004470:	f04f 0800 	movmi.w	r8, #0
 8004474:	bf58      	it	pl
 8004476:	9305      	strpl	r3, [sp, #20]
 8004478:	f1ba 0f00 	cmp.w	sl, #0
 800447c:	db3e      	blt.n	80044fc <_dtoa_r+0x224>
 800447e:	2300      	movs	r3, #0
 8004480:	44d0      	add	r8, sl
 8004482:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004486:	9307      	str	r3, [sp, #28]
 8004488:	9b06      	ldr	r3, [sp, #24]
 800448a:	2b09      	cmp	r3, #9
 800448c:	f200 8090 	bhi.w	80045b0 <_dtoa_r+0x2d8>
 8004490:	2b05      	cmp	r3, #5
 8004492:	bfc4      	itt	gt
 8004494:	3b04      	subgt	r3, #4
 8004496:	9306      	strgt	r3, [sp, #24]
 8004498:	9b06      	ldr	r3, [sp, #24]
 800449a:	f1a3 0302 	sub.w	r3, r3, #2
 800449e:	bfcc      	ite	gt
 80044a0:	2500      	movgt	r5, #0
 80044a2:	2501      	movle	r5, #1
 80044a4:	2b03      	cmp	r3, #3
 80044a6:	f200 808f 	bhi.w	80045c8 <_dtoa_r+0x2f0>
 80044aa:	e8df f003 	tbb	[pc, r3]
 80044ae:	7f7d      	.short	0x7f7d
 80044b0:	7131      	.short	0x7131
 80044b2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80044b6:	441d      	add	r5, r3
 80044b8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80044bc:	2820      	cmp	r0, #32
 80044be:	dd13      	ble.n	80044e8 <_dtoa_r+0x210>
 80044c0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80044c4:	9b00      	ldr	r3, [sp, #0]
 80044c6:	fa08 f800 	lsl.w	r8, r8, r0
 80044ca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80044ce:	fa23 f000 	lsr.w	r0, r3, r0
 80044d2:	ea48 0000 	orr.w	r0, r8, r0
 80044d6:	f7fb ffc1 	bl	800045c <__aeabi_ui2d>
 80044da:	2301      	movs	r3, #1
 80044dc:	4682      	mov	sl, r0
 80044de:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80044e2:	3d01      	subs	r5, #1
 80044e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80044e6:	e772      	b.n	80043ce <_dtoa_r+0xf6>
 80044e8:	9b00      	ldr	r3, [sp, #0]
 80044ea:	f1c0 0020 	rsb	r0, r0, #32
 80044ee:	fa03 f000 	lsl.w	r0, r3, r0
 80044f2:	e7f0      	b.n	80044d6 <_dtoa_r+0x1fe>
 80044f4:	2301      	movs	r3, #1
 80044f6:	e7b1      	b.n	800445c <_dtoa_r+0x184>
 80044f8:	900f      	str	r0, [sp, #60]	; 0x3c
 80044fa:	e7b0      	b.n	800445e <_dtoa_r+0x186>
 80044fc:	9b05      	ldr	r3, [sp, #20]
 80044fe:	eba3 030a 	sub.w	r3, r3, sl
 8004502:	9305      	str	r3, [sp, #20]
 8004504:	f1ca 0300 	rsb	r3, sl, #0
 8004508:	9307      	str	r3, [sp, #28]
 800450a:	2300      	movs	r3, #0
 800450c:	930e      	str	r3, [sp, #56]	; 0x38
 800450e:	e7bb      	b.n	8004488 <_dtoa_r+0x1b0>
 8004510:	2301      	movs	r3, #1
 8004512:	930a      	str	r3, [sp, #40]	; 0x28
 8004514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004516:	2b00      	cmp	r3, #0
 8004518:	dd59      	ble.n	80045ce <_dtoa_r+0x2f6>
 800451a:	9302      	str	r3, [sp, #8]
 800451c:	4699      	mov	r9, r3
 800451e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004520:	2200      	movs	r2, #0
 8004522:	6072      	str	r2, [r6, #4]
 8004524:	2204      	movs	r2, #4
 8004526:	f102 0014 	add.w	r0, r2, #20
 800452a:	4298      	cmp	r0, r3
 800452c:	6871      	ldr	r1, [r6, #4]
 800452e:	d953      	bls.n	80045d8 <_dtoa_r+0x300>
 8004530:	4620      	mov	r0, r4
 8004532:	f000 fcaa 	bl	8004e8a <_Balloc>
 8004536:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004538:	6030      	str	r0, [r6, #0]
 800453a:	f1b9 0f0e 	cmp.w	r9, #14
 800453e:	f8d3 b000 	ldr.w	fp, [r3]
 8004542:	f200 80e6 	bhi.w	8004712 <_dtoa_r+0x43a>
 8004546:	2d00      	cmp	r5, #0
 8004548:	f000 80e3 	beq.w	8004712 <_dtoa_r+0x43a>
 800454c:	ed9d 7b00 	vldr	d7, [sp]
 8004550:	f1ba 0f00 	cmp.w	sl, #0
 8004554:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004558:	dd74      	ble.n	8004644 <_dtoa_r+0x36c>
 800455a:	4a2a      	ldr	r2, [pc, #168]	; (8004604 <_dtoa_r+0x32c>)
 800455c:	f00a 030f 	and.w	r3, sl, #15
 8004560:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004564:	ed93 7b00 	vldr	d7, [r3]
 8004568:	ea4f 162a 	mov.w	r6, sl, asr #4
 800456c:	06f0      	lsls	r0, r6, #27
 800456e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004572:	d565      	bpl.n	8004640 <_dtoa_r+0x368>
 8004574:	4b24      	ldr	r3, [pc, #144]	; (8004608 <_dtoa_r+0x330>)
 8004576:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800457a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800457e:	f7fc f911 	bl	80007a4 <__aeabi_ddiv>
 8004582:	e9cd 0100 	strd	r0, r1, [sp]
 8004586:	f006 060f 	and.w	r6, r6, #15
 800458a:	2503      	movs	r5, #3
 800458c:	4f1e      	ldr	r7, [pc, #120]	; (8004608 <_dtoa_r+0x330>)
 800458e:	e04c      	b.n	800462a <_dtoa_r+0x352>
 8004590:	2301      	movs	r3, #1
 8004592:	930a      	str	r3, [sp, #40]	; 0x28
 8004594:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004596:	4453      	add	r3, sl
 8004598:	f103 0901 	add.w	r9, r3, #1
 800459c:	9302      	str	r3, [sp, #8]
 800459e:	464b      	mov	r3, r9
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	bfb8      	it	lt
 80045a4:	2301      	movlt	r3, #1
 80045a6:	e7ba      	b.n	800451e <_dtoa_r+0x246>
 80045a8:	2300      	movs	r3, #0
 80045aa:	e7b2      	b.n	8004512 <_dtoa_r+0x23a>
 80045ac:	2300      	movs	r3, #0
 80045ae:	e7f0      	b.n	8004592 <_dtoa_r+0x2ba>
 80045b0:	2501      	movs	r5, #1
 80045b2:	2300      	movs	r3, #0
 80045b4:	9306      	str	r3, [sp, #24]
 80045b6:	950a      	str	r5, [sp, #40]	; 0x28
 80045b8:	f04f 33ff 	mov.w	r3, #4294967295
 80045bc:	9302      	str	r3, [sp, #8]
 80045be:	4699      	mov	r9, r3
 80045c0:	2200      	movs	r2, #0
 80045c2:	2312      	movs	r3, #18
 80045c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80045c6:	e7aa      	b.n	800451e <_dtoa_r+0x246>
 80045c8:	2301      	movs	r3, #1
 80045ca:	930a      	str	r3, [sp, #40]	; 0x28
 80045cc:	e7f4      	b.n	80045b8 <_dtoa_r+0x2e0>
 80045ce:	2301      	movs	r3, #1
 80045d0:	9302      	str	r3, [sp, #8]
 80045d2:	4699      	mov	r9, r3
 80045d4:	461a      	mov	r2, r3
 80045d6:	e7f5      	b.n	80045c4 <_dtoa_r+0x2ec>
 80045d8:	3101      	adds	r1, #1
 80045da:	6071      	str	r1, [r6, #4]
 80045dc:	0052      	lsls	r2, r2, #1
 80045de:	e7a2      	b.n	8004526 <_dtoa_r+0x24e>
 80045e0:	636f4361 	.word	0x636f4361
 80045e4:	3fd287a7 	.word	0x3fd287a7
 80045e8:	8b60c8b3 	.word	0x8b60c8b3
 80045ec:	3fc68a28 	.word	0x3fc68a28
 80045f0:	509f79fb 	.word	0x509f79fb
 80045f4:	3fd34413 	.word	0x3fd34413
 80045f8:	7ff00000 	.word	0x7ff00000
 80045fc:	080055b9 	.word	0x080055b9
 8004600:	3ff80000 	.word	0x3ff80000
 8004604:	080055f0 	.word	0x080055f0
 8004608:	080055c8 	.word	0x080055c8
 800460c:	080055c3 	.word	0x080055c3
 8004610:	07f1      	lsls	r1, r6, #31
 8004612:	d508      	bpl.n	8004626 <_dtoa_r+0x34e>
 8004614:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004618:	e9d7 2300 	ldrd	r2, r3, [r7]
 800461c:	f7fb ff98 	bl	8000550 <__aeabi_dmul>
 8004620:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004624:	3501      	adds	r5, #1
 8004626:	1076      	asrs	r6, r6, #1
 8004628:	3708      	adds	r7, #8
 800462a:	2e00      	cmp	r6, #0
 800462c:	d1f0      	bne.n	8004610 <_dtoa_r+0x338>
 800462e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004632:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004636:	f7fc f8b5 	bl	80007a4 <__aeabi_ddiv>
 800463a:	e9cd 0100 	strd	r0, r1, [sp]
 800463e:	e01a      	b.n	8004676 <_dtoa_r+0x39e>
 8004640:	2502      	movs	r5, #2
 8004642:	e7a3      	b.n	800458c <_dtoa_r+0x2b4>
 8004644:	f000 80a0 	beq.w	8004788 <_dtoa_r+0x4b0>
 8004648:	f1ca 0600 	rsb	r6, sl, #0
 800464c:	4b9f      	ldr	r3, [pc, #636]	; (80048cc <_dtoa_r+0x5f4>)
 800464e:	4fa0      	ldr	r7, [pc, #640]	; (80048d0 <_dtoa_r+0x5f8>)
 8004650:	f006 020f 	and.w	r2, r6, #15
 8004654:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004660:	f7fb ff76 	bl	8000550 <__aeabi_dmul>
 8004664:	e9cd 0100 	strd	r0, r1, [sp]
 8004668:	1136      	asrs	r6, r6, #4
 800466a:	2300      	movs	r3, #0
 800466c:	2502      	movs	r5, #2
 800466e:	2e00      	cmp	r6, #0
 8004670:	d17f      	bne.n	8004772 <_dtoa_r+0x49a>
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1e1      	bne.n	800463a <_dtoa_r+0x362>
 8004676:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 8087 	beq.w	800478c <_dtoa_r+0x4b4>
 800467e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004682:	2200      	movs	r2, #0
 8004684:	4b93      	ldr	r3, [pc, #588]	; (80048d4 <_dtoa_r+0x5fc>)
 8004686:	4630      	mov	r0, r6
 8004688:	4639      	mov	r1, r7
 800468a:	f7fc f9d3 	bl	8000a34 <__aeabi_dcmplt>
 800468e:	2800      	cmp	r0, #0
 8004690:	d07c      	beq.n	800478c <_dtoa_r+0x4b4>
 8004692:	f1b9 0f00 	cmp.w	r9, #0
 8004696:	d079      	beq.n	800478c <_dtoa_r+0x4b4>
 8004698:	9b02      	ldr	r3, [sp, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	dd35      	ble.n	800470a <_dtoa_r+0x432>
 800469e:	f10a 33ff 	add.w	r3, sl, #4294967295
 80046a2:	9308      	str	r3, [sp, #32]
 80046a4:	4639      	mov	r1, r7
 80046a6:	2200      	movs	r2, #0
 80046a8:	4b8b      	ldr	r3, [pc, #556]	; (80048d8 <_dtoa_r+0x600>)
 80046aa:	4630      	mov	r0, r6
 80046ac:	f7fb ff50 	bl	8000550 <__aeabi_dmul>
 80046b0:	e9cd 0100 	strd	r0, r1, [sp]
 80046b4:	9f02      	ldr	r7, [sp, #8]
 80046b6:	3501      	adds	r5, #1
 80046b8:	4628      	mov	r0, r5
 80046ba:	f7fb fedf 	bl	800047c <__aeabi_i2d>
 80046be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80046c2:	f7fb ff45 	bl	8000550 <__aeabi_dmul>
 80046c6:	2200      	movs	r2, #0
 80046c8:	4b84      	ldr	r3, [pc, #528]	; (80048dc <_dtoa_r+0x604>)
 80046ca:	f7fb fd8b 	bl	80001e4 <__adddf3>
 80046ce:	4605      	mov	r5, r0
 80046d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80046d4:	2f00      	cmp	r7, #0
 80046d6:	d15d      	bne.n	8004794 <_dtoa_r+0x4bc>
 80046d8:	2200      	movs	r2, #0
 80046da:	4b81      	ldr	r3, [pc, #516]	; (80048e0 <_dtoa_r+0x608>)
 80046dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80046e0:	f7fb fd7e 	bl	80001e0 <__aeabi_dsub>
 80046e4:	462a      	mov	r2, r5
 80046e6:	4633      	mov	r3, r6
 80046e8:	e9cd 0100 	strd	r0, r1, [sp]
 80046ec:	f7fc f9c0 	bl	8000a70 <__aeabi_dcmpgt>
 80046f0:	2800      	cmp	r0, #0
 80046f2:	f040 8288 	bne.w	8004c06 <_dtoa_r+0x92e>
 80046f6:	462a      	mov	r2, r5
 80046f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80046fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004700:	f7fc f998 	bl	8000a34 <__aeabi_dcmplt>
 8004704:	2800      	cmp	r0, #0
 8004706:	f040 827c 	bne.w	8004c02 <_dtoa_r+0x92a>
 800470a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800470e:	e9cd 2300 	strd	r2, r3, [sp]
 8004712:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004714:	2b00      	cmp	r3, #0
 8004716:	f2c0 8150 	blt.w	80049ba <_dtoa_r+0x6e2>
 800471a:	f1ba 0f0e 	cmp.w	sl, #14
 800471e:	f300 814c 	bgt.w	80049ba <_dtoa_r+0x6e2>
 8004722:	4b6a      	ldr	r3, [pc, #424]	; (80048cc <_dtoa_r+0x5f4>)
 8004724:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004728:	ed93 7b00 	vldr	d7, [r3]
 800472c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800472e:	2b00      	cmp	r3, #0
 8004730:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004734:	f280 80d8 	bge.w	80048e8 <_dtoa_r+0x610>
 8004738:	f1b9 0f00 	cmp.w	r9, #0
 800473c:	f300 80d4 	bgt.w	80048e8 <_dtoa_r+0x610>
 8004740:	f040 825e 	bne.w	8004c00 <_dtoa_r+0x928>
 8004744:	2200      	movs	r2, #0
 8004746:	4b66      	ldr	r3, [pc, #408]	; (80048e0 <_dtoa_r+0x608>)
 8004748:	ec51 0b17 	vmov	r0, r1, d7
 800474c:	f7fb ff00 	bl	8000550 <__aeabi_dmul>
 8004750:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004754:	f7fc f982 	bl	8000a5c <__aeabi_dcmpge>
 8004758:	464f      	mov	r7, r9
 800475a:	464e      	mov	r6, r9
 800475c:	2800      	cmp	r0, #0
 800475e:	f040 8234 	bne.w	8004bca <_dtoa_r+0x8f2>
 8004762:	2331      	movs	r3, #49	; 0x31
 8004764:	f10b 0501 	add.w	r5, fp, #1
 8004768:	f88b 3000 	strb.w	r3, [fp]
 800476c:	f10a 0a01 	add.w	sl, sl, #1
 8004770:	e22f      	b.n	8004bd2 <_dtoa_r+0x8fa>
 8004772:	07f2      	lsls	r2, r6, #31
 8004774:	d505      	bpl.n	8004782 <_dtoa_r+0x4aa>
 8004776:	e9d7 2300 	ldrd	r2, r3, [r7]
 800477a:	f7fb fee9 	bl	8000550 <__aeabi_dmul>
 800477e:	3501      	adds	r5, #1
 8004780:	2301      	movs	r3, #1
 8004782:	1076      	asrs	r6, r6, #1
 8004784:	3708      	adds	r7, #8
 8004786:	e772      	b.n	800466e <_dtoa_r+0x396>
 8004788:	2502      	movs	r5, #2
 800478a:	e774      	b.n	8004676 <_dtoa_r+0x39e>
 800478c:	f8cd a020 	str.w	sl, [sp, #32]
 8004790:	464f      	mov	r7, r9
 8004792:	e791      	b.n	80046b8 <_dtoa_r+0x3e0>
 8004794:	4b4d      	ldr	r3, [pc, #308]	; (80048cc <_dtoa_r+0x5f4>)
 8004796:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800479a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800479e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d047      	beq.n	8004834 <_dtoa_r+0x55c>
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	2000      	movs	r0, #0
 80047aa:	494e      	ldr	r1, [pc, #312]	; (80048e4 <_dtoa_r+0x60c>)
 80047ac:	f7fb fffa 	bl	80007a4 <__aeabi_ddiv>
 80047b0:	462a      	mov	r2, r5
 80047b2:	4633      	mov	r3, r6
 80047b4:	f7fb fd14 	bl	80001e0 <__aeabi_dsub>
 80047b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80047bc:	465d      	mov	r5, fp
 80047be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047c2:	f7fc f975 	bl	8000ab0 <__aeabi_d2iz>
 80047c6:	4606      	mov	r6, r0
 80047c8:	f7fb fe58 	bl	800047c <__aeabi_i2d>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047d4:	f7fb fd04 	bl	80001e0 <__aeabi_dsub>
 80047d8:	3630      	adds	r6, #48	; 0x30
 80047da:	f805 6b01 	strb.w	r6, [r5], #1
 80047de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80047e2:	e9cd 0100 	strd	r0, r1, [sp]
 80047e6:	f7fc f925 	bl	8000a34 <__aeabi_dcmplt>
 80047ea:	2800      	cmp	r0, #0
 80047ec:	d163      	bne.n	80048b6 <_dtoa_r+0x5de>
 80047ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80047f2:	2000      	movs	r0, #0
 80047f4:	4937      	ldr	r1, [pc, #220]	; (80048d4 <_dtoa_r+0x5fc>)
 80047f6:	f7fb fcf3 	bl	80001e0 <__aeabi_dsub>
 80047fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80047fe:	f7fc f919 	bl	8000a34 <__aeabi_dcmplt>
 8004802:	2800      	cmp	r0, #0
 8004804:	f040 80b7 	bne.w	8004976 <_dtoa_r+0x69e>
 8004808:	eba5 030b 	sub.w	r3, r5, fp
 800480c:	429f      	cmp	r7, r3
 800480e:	f77f af7c 	ble.w	800470a <_dtoa_r+0x432>
 8004812:	2200      	movs	r2, #0
 8004814:	4b30      	ldr	r3, [pc, #192]	; (80048d8 <_dtoa_r+0x600>)
 8004816:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800481a:	f7fb fe99 	bl	8000550 <__aeabi_dmul>
 800481e:	2200      	movs	r2, #0
 8004820:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004824:	4b2c      	ldr	r3, [pc, #176]	; (80048d8 <_dtoa_r+0x600>)
 8004826:	e9dd 0100 	ldrd	r0, r1, [sp]
 800482a:	f7fb fe91 	bl	8000550 <__aeabi_dmul>
 800482e:	e9cd 0100 	strd	r0, r1, [sp]
 8004832:	e7c4      	b.n	80047be <_dtoa_r+0x4e6>
 8004834:	462a      	mov	r2, r5
 8004836:	4633      	mov	r3, r6
 8004838:	f7fb fe8a 	bl	8000550 <__aeabi_dmul>
 800483c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004840:	eb0b 0507 	add.w	r5, fp, r7
 8004844:	465e      	mov	r6, fp
 8004846:	e9dd 0100 	ldrd	r0, r1, [sp]
 800484a:	f7fc f931 	bl	8000ab0 <__aeabi_d2iz>
 800484e:	4607      	mov	r7, r0
 8004850:	f7fb fe14 	bl	800047c <__aeabi_i2d>
 8004854:	3730      	adds	r7, #48	; 0x30
 8004856:	4602      	mov	r2, r0
 8004858:	460b      	mov	r3, r1
 800485a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800485e:	f7fb fcbf 	bl	80001e0 <__aeabi_dsub>
 8004862:	f806 7b01 	strb.w	r7, [r6], #1
 8004866:	42ae      	cmp	r6, r5
 8004868:	e9cd 0100 	strd	r0, r1, [sp]
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	d126      	bne.n	80048c0 <_dtoa_r+0x5e8>
 8004872:	4b1c      	ldr	r3, [pc, #112]	; (80048e4 <_dtoa_r+0x60c>)
 8004874:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004878:	f7fb fcb4 	bl	80001e4 <__adddf3>
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004884:	f7fc f8f4 	bl	8000a70 <__aeabi_dcmpgt>
 8004888:	2800      	cmp	r0, #0
 800488a:	d174      	bne.n	8004976 <_dtoa_r+0x69e>
 800488c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004890:	2000      	movs	r0, #0
 8004892:	4914      	ldr	r1, [pc, #80]	; (80048e4 <_dtoa_r+0x60c>)
 8004894:	f7fb fca4 	bl	80001e0 <__aeabi_dsub>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048a0:	f7fc f8c8 	bl	8000a34 <__aeabi_dcmplt>
 80048a4:	2800      	cmp	r0, #0
 80048a6:	f43f af30 	beq.w	800470a <_dtoa_r+0x432>
 80048aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80048ae:	2b30      	cmp	r3, #48	; 0x30
 80048b0:	f105 32ff 	add.w	r2, r5, #4294967295
 80048b4:	d002      	beq.n	80048bc <_dtoa_r+0x5e4>
 80048b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80048ba:	e04a      	b.n	8004952 <_dtoa_r+0x67a>
 80048bc:	4615      	mov	r5, r2
 80048be:	e7f4      	b.n	80048aa <_dtoa_r+0x5d2>
 80048c0:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <_dtoa_r+0x600>)
 80048c2:	f7fb fe45 	bl	8000550 <__aeabi_dmul>
 80048c6:	e9cd 0100 	strd	r0, r1, [sp]
 80048ca:	e7bc      	b.n	8004846 <_dtoa_r+0x56e>
 80048cc:	080055f0 	.word	0x080055f0
 80048d0:	080055c8 	.word	0x080055c8
 80048d4:	3ff00000 	.word	0x3ff00000
 80048d8:	40240000 	.word	0x40240000
 80048dc:	401c0000 	.word	0x401c0000
 80048e0:	40140000 	.word	0x40140000
 80048e4:	3fe00000 	.word	0x3fe00000
 80048e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80048ec:	465d      	mov	r5, fp
 80048ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80048f2:	4630      	mov	r0, r6
 80048f4:	4639      	mov	r1, r7
 80048f6:	f7fb ff55 	bl	80007a4 <__aeabi_ddiv>
 80048fa:	f7fc f8d9 	bl	8000ab0 <__aeabi_d2iz>
 80048fe:	4680      	mov	r8, r0
 8004900:	f7fb fdbc 	bl	800047c <__aeabi_i2d>
 8004904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004908:	f7fb fe22 	bl	8000550 <__aeabi_dmul>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	4630      	mov	r0, r6
 8004912:	4639      	mov	r1, r7
 8004914:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8004918:	f7fb fc62 	bl	80001e0 <__aeabi_dsub>
 800491c:	f805 6b01 	strb.w	r6, [r5], #1
 8004920:	eba5 060b 	sub.w	r6, r5, fp
 8004924:	45b1      	cmp	r9, r6
 8004926:	4602      	mov	r2, r0
 8004928:	460b      	mov	r3, r1
 800492a:	d139      	bne.n	80049a0 <_dtoa_r+0x6c8>
 800492c:	f7fb fc5a 	bl	80001e4 <__adddf3>
 8004930:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004934:	4606      	mov	r6, r0
 8004936:	460f      	mov	r7, r1
 8004938:	f7fc f89a 	bl	8000a70 <__aeabi_dcmpgt>
 800493c:	b9c8      	cbnz	r0, 8004972 <_dtoa_r+0x69a>
 800493e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004942:	4630      	mov	r0, r6
 8004944:	4639      	mov	r1, r7
 8004946:	f7fc f86b 	bl	8000a20 <__aeabi_dcmpeq>
 800494a:	b110      	cbz	r0, 8004952 <_dtoa_r+0x67a>
 800494c:	f018 0f01 	tst.w	r8, #1
 8004950:	d10f      	bne.n	8004972 <_dtoa_r+0x69a>
 8004952:	9904      	ldr	r1, [sp, #16]
 8004954:	4620      	mov	r0, r4
 8004956:	f000 facc 	bl	8004ef2 <_Bfree>
 800495a:	2300      	movs	r3, #0
 800495c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800495e:	702b      	strb	r3, [r5, #0]
 8004960:	f10a 0301 	add.w	r3, sl, #1
 8004964:	6013      	str	r3, [r2, #0]
 8004966:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 8241 	beq.w	8004df0 <_dtoa_r+0xb18>
 800496e:	601d      	str	r5, [r3, #0]
 8004970:	e23e      	b.n	8004df0 <_dtoa_r+0xb18>
 8004972:	f8cd a020 	str.w	sl, [sp, #32]
 8004976:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800497a:	2a39      	cmp	r2, #57	; 0x39
 800497c:	f105 33ff 	add.w	r3, r5, #4294967295
 8004980:	d108      	bne.n	8004994 <_dtoa_r+0x6bc>
 8004982:	459b      	cmp	fp, r3
 8004984:	d10a      	bne.n	800499c <_dtoa_r+0x6c4>
 8004986:	9b08      	ldr	r3, [sp, #32]
 8004988:	3301      	adds	r3, #1
 800498a:	9308      	str	r3, [sp, #32]
 800498c:	2330      	movs	r3, #48	; 0x30
 800498e:	f88b 3000 	strb.w	r3, [fp]
 8004992:	465b      	mov	r3, fp
 8004994:	781a      	ldrb	r2, [r3, #0]
 8004996:	3201      	adds	r2, #1
 8004998:	701a      	strb	r2, [r3, #0]
 800499a:	e78c      	b.n	80048b6 <_dtoa_r+0x5de>
 800499c:	461d      	mov	r5, r3
 800499e:	e7ea      	b.n	8004976 <_dtoa_r+0x69e>
 80049a0:	2200      	movs	r2, #0
 80049a2:	4b9b      	ldr	r3, [pc, #620]	; (8004c10 <_dtoa_r+0x938>)
 80049a4:	f7fb fdd4 	bl	8000550 <__aeabi_dmul>
 80049a8:	2200      	movs	r2, #0
 80049aa:	2300      	movs	r3, #0
 80049ac:	4606      	mov	r6, r0
 80049ae:	460f      	mov	r7, r1
 80049b0:	f7fc f836 	bl	8000a20 <__aeabi_dcmpeq>
 80049b4:	2800      	cmp	r0, #0
 80049b6:	d09a      	beq.n	80048ee <_dtoa_r+0x616>
 80049b8:	e7cb      	b.n	8004952 <_dtoa_r+0x67a>
 80049ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049bc:	2a00      	cmp	r2, #0
 80049be:	f000 808b 	beq.w	8004ad8 <_dtoa_r+0x800>
 80049c2:	9a06      	ldr	r2, [sp, #24]
 80049c4:	2a01      	cmp	r2, #1
 80049c6:	dc6e      	bgt.n	8004aa6 <_dtoa_r+0x7ce>
 80049c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80049ca:	2a00      	cmp	r2, #0
 80049cc:	d067      	beq.n	8004a9e <_dtoa_r+0x7c6>
 80049ce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80049d2:	9f07      	ldr	r7, [sp, #28]
 80049d4:	9d05      	ldr	r5, [sp, #20]
 80049d6:	9a05      	ldr	r2, [sp, #20]
 80049d8:	2101      	movs	r1, #1
 80049da:	441a      	add	r2, r3
 80049dc:	4620      	mov	r0, r4
 80049de:	9205      	str	r2, [sp, #20]
 80049e0:	4498      	add	r8, r3
 80049e2:	f000 fb26 	bl	8005032 <__i2b>
 80049e6:	4606      	mov	r6, r0
 80049e8:	2d00      	cmp	r5, #0
 80049ea:	dd0c      	ble.n	8004a06 <_dtoa_r+0x72e>
 80049ec:	f1b8 0f00 	cmp.w	r8, #0
 80049f0:	dd09      	ble.n	8004a06 <_dtoa_r+0x72e>
 80049f2:	4545      	cmp	r5, r8
 80049f4:	9a05      	ldr	r2, [sp, #20]
 80049f6:	462b      	mov	r3, r5
 80049f8:	bfa8      	it	ge
 80049fa:	4643      	movge	r3, r8
 80049fc:	1ad2      	subs	r2, r2, r3
 80049fe:	9205      	str	r2, [sp, #20]
 8004a00:	1aed      	subs	r5, r5, r3
 8004a02:	eba8 0803 	sub.w	r8, r8, r3
 8004a06:	9b07      	ldr	r3, [sp, #28]
 8004a08:	b1eb      	cbz	r3, 8004a46 <_dtoa_r+0x76e>
 8004a0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d067      	beq.n	8004ae0 <_dtoa_r+0x808>
 8004a10:	b18f      	cbz	r7, 8004a36 <_dtoa_r+0x75e>
 8004a12:	4631      	mov	r1, r6
 8004a14:	463a      	mov	r2, r7
 8004a16:	4620      	mov	r0, r4
 8004a18:	f000 fbaa 	bl	8005170 <__pow5mult>
 8004a1c:	9a04      	ldr	r2, [sp, #16]
 8004a1e:	4601      	mov	r1, r0
 8004a20:	4606      	mov	r6, r0
 8004a22:	4620      	mov	r0, r4
 8004a24:	f000 fb0e 	bl	8005044 <__multiply>
 8004a28:	9904      	ldr	r1, [sp, #16]
 8004a2a:	9008      	str	r0, [sp, #32]
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	f000 fa60 	bl	8004ef2 <_Bfree>
 8004a32:	9b08      	ldr	r3, [sp, #32]
 8004a34:	9304      	str	r3, [sp, #16]
 8004a36:	9b07      	ldr	r3, [sp, #28]
 8004a38:	1bda      	subs	r2, r3, r7
 8004a3a:	d004      	beq.n	8004a46 <_dtoa_r+0x76e>
 8004a3c:	9904      	ldr	r1, [sp, #16]
 8004a3e:	4620      	mov	r0, r4
 8004a40:	f000 fb96 	bl	8005170 <__pow5mult>
 8004a44:	9004      	str	r0, [sp, #16]
 8004a46:	2101      	movs	r1, #1
 8004a48:	4620      	mov	r0, r4
 8004a4a:	f000 faf2 	bl	8005032 <__i2b>
 8004a4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a50:	4607      	mov	r7, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f000 81d0 	beq.w	8004df8 <_dtoa_r+0xb20>
 8004a58:	461a      	mov	r2, r3
 8004a5a:	4601      	mov	r1, r0
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	f000 fb87 	bl	8005170 <__pow5mult>
 8004a62:	9b06      	ldr	r3, [sp, #24]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	4607      	mov	r7, r0
 8004a68:	dc40      	bgt.n	8004aec <_dtoa_r+0x814>
 8004a6a:	9b00      	ldr	r3, [sp, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d139      	bne.n	8004ae4 <_dtoa_r+0x80c>
 8004a70:	9b01      	ldr	r3, [sp, #4]
 8004a72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d136      	bne.n	8004ae8 <_dtoa_r+0x810>
 8004a7a:	9b01      	ldr	r3, [sp, #4]
 8004a7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a80:	0d1b      	lsrs	r3, r3, #20
 8004a82:	051b      	lsls	r3, r3, #20
 8004a84:	b12b      	cbz	r3, 8004a92 <_dtoa_r+0x7ba>
 8004a86:	9b05      	ldr	r3, [sp, #20]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	9305      	str	r3, [sp, #20]
 8004a8c:	f108 0801 	add.w	r8, r8, #1
 8004a90:	2301      	movs	r3, #1
 8004a92:	9307      	str	r3, [sp, #28]
 8004a94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d12a      	bne.n	8004af0 <_dtoa_r+0x818>
 8004a9a:	2001      	movs	r0, #1
 8004a9c:	e030      	b.n	8004b00 <_dtoa_r+0x828>
 8004a9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004aa0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004aa4:	e795      	b.n	80049d2 <_dtoa_r+0x6fa>
 8004aa6:	9b07      	ldr	r3, [sp, #28]
 8004aa8:	f109 37ff 	add.w	r7, r9, #4294967295
 8004aac:	42bb      	cmp	r3, r7
 8004aae:	bfbf      	itttt	lt
 8004ab0:	9b07      	ldrlt	r3, [sp, #28]
 8004ab2:	9707      	strlt	r7, [sp, #28]
 8004ab4:	1afa      	sublt	r2, r7, r3
 8004ab6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004ab8:	bfbb      	ittet	lt
 8004aba:	189b      	addlt	r3, r3, r2
 8004abc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004abe:	1bdf      	subge	r7, r3, r7
 8004ac0:	2700      	movlt	r7, #0
 8004ac2:	f1b9 0f00 	cmp.w	r9, #0
 8004ac6:	bfb5      	itete	lt
 8004ac8:	9b05      	ldrlt	r3, [sp, #20]
 8004aca:	9d05      	ldrge	r5, [sp, #20]
 8004acc:	eba3 0509 	sublt.w	r5, r3, r9
 8004ad0:	464b      	movge	r3, r9
 8004ad2:	bfb8      	it	lt
 8004ad4:	2300      	movlt	r3, #0
 8004ad6:	e77e      	b.n	80049d6 <_dtoa_r+0x6fe>
 8004ad8:	9f07      	ldr	r7, [sp, #28]
 8004ada:	9d05      	ldr	r5, [sp, #20]
 8004adc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004ade:	e783      	b.n	80049e8 <_dtoa_r+0x710>
 8004ae0:	9a07      	ldr	r2, [sp, #28]
 8004ae2:	e7ab      	b.n	8004a3c <_dtoa_r+0x764>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	e7d4      	b.n	8004a92 <_dtoa_r+0x7ba>
 8004ae8:	9b00      	ldr	r3, [sp, #0]
 8004aea:	e7d2      	b.n	8004a92 <_dtoa_r+0x7ba>
 8004aec:	2300      	movs	r3, #0
 8004aee:	9307      	str	r3, [sp, #28]
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8004af6:	6918      	ldr	r0, [r3, #16]
 8004af8:	f000 fa4d 	bl	8004f96 <__hi0bits>
 8004afc:	f1c0 0020 	rsb	r0, r0, #32
 8004b00:	4440      	add	r0, r8
 8004b02:	f010 001f 	ands.w	r0, r0, #31
 8004b06:	d047      	beq.n	8004b98 <_dtoa_r+0x8c0>
 8004b08:	f1c0 0320 	rsb	r3, r0, #32
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	dd3b      	ble.n	8004b88 <_dtoa_r+0x8b0>
 8004b10:	9b05      	ldr	r3, [sp, #20]
 8004b12:	f1c0 001c 	rsb	r0, r0, #28
 8004b16:	4403      	add	r3, r0
 8004b18:	9305      	str	r3, [sp, #20]
 8004b1a:	4405      	add	r5, r0
 8004b1c:	4480      	add	r8, r0
 8004b1e:	9b05      	ldr	r3, [sp, #20]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	dd05      	ble.n	8004b30 <_dtoa_r+0x858>
 8004b24:	461a      	mov	r2, r3
 8004b26:	9904      	ldr	r1, [sp, #16]
 8004b28:	4620      	mov	r0, r4
 8004b2a:	f000 fb6f 	bl	800520c <__lshift>
 8004b2e:	9004      	str	r0, [sp, #16]
 8004b30:	f1b8 0f00 	cmp.w	r8, #0
 8004b34:	dd05      	ble.n	8004b42 <_dtoa_r+0x86a>
 8004b36:	4639      	mov	r1, r7
 8004b38:	4642      	mov	r2, r8
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	f000 fb66 	bl	800520c <__lshift>
 8004b40:	4607      	mov	r7, r0
 8004b42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b44:	b353      	cbz	r3, 8004b9c <_dtoa_r+0x8c4>
 8004b46:	4639      	mov	r1, r7
 8004b48:	9804      	ldr	r0, [sp, #16]
 8004b4a:	f000 fbb3 	bl	80052b4 <__mcmp>
 8004b4e:	2800      	cmp	r0, #0
 8004b50:	da24      	bge.n	8004b9c <_dtoa_r+0x8c4>
 8004b52:	2300      	movs	r3, #0
 8004b54:	220a      	movs	r2, #10
 8004b56:	9904      	ldr	r1, [sp, #16]
 8004b58:	4620      	mov	r0, r4
 8004b5a:	f000 f9e1 	bl	8004f20 <__multadd>
 8004b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b60:	9004      	str	r0, [sp, #16]
 8004b62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f000 814d 	beq.w	8004e06 <_dtoa_r+0xb2e>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	4631      	mov	r1, r6
 8004b70:	220a      	movs	r2, #10
 8004b72:	4620      	mov	r0, r4
 8004b74:	f000 f9d4 	bl	8004f20 <__multadd>
 8004b78:	9b02      	ldr	r3, [sp, #8]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	4606      	mov	r6, r0
 8004b7e:	dc4f      	bgt.n	8004c20 <_dtoa_r+0x948>
 8004b80:	9b06      	ldr	r3, [sp, #24]
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	dd4c      	ble.n	8004c20 <_dtoa_r+0x948>
 8004b86:	e011      	b.n	8004bac <_dtoa_r+0x8d4>
 8004b88:	d0c9      	beq.n	8004b1e <_dtoa_r+0x846>
 8004b8a:	9a05      	ldr	r2, [sp, #20]
 8004b8c:	331c      	adds	r3, #28
 8004b8e:	441a      	add	r2, r3
 8004b90:	9205      	str	r2, [sp, #20]
 8004b92:	441d      	add	r5, r3
 8004b94:	4498      	add	r8, r3
 8004b96:	e7c2      	b.n	8004b1e <_dtoa_r+0x846>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	e7f6      	b.n	8004b8a <_dtoa_r+0x8b2>
 8004b9c:	f1b9 0f00 	cmp.w	r9, #0
 8004ba0:	dc38      	bgt.n	8004c14 <_dtoa_r+0x93c>
 8004ba2:	9b06      	ldr	r3, [sp, #24]
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	dd35      	ble.n	8004c14 <_dtoa_r+0x93c>
 8004ba8:	f8cd 9008 	str.w	r9, [sp, #8]
 8004bac:	9b02      	ldr	r3, [sp, #8]
 8004bae:	b963      	cbnz	r3, 8004bca <_dtoa_r+0x8f2>
 8004bb0:	4639      	mov	r1, r7
 8004bb2:	2205      	movs	r2, #5
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	f000 f9b3 	bl	8004f20 <__multadd>
 8004bba:	4601      	mov	r1, r0
 8004bbc:	4607      	mov	r7, r0
 8004bbe:	9804      	ldr	r0, [sp, #16]
 8004bc0:	f000 fb78 	bl	80052b4 <__mcmp>
 8004bc4:	2800      	cmp	r0, #0
 8004bc6:	f73f adcc 	bgt.w	8004762 <_dtoa_r+0x48a>
 8004bca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bcc:	465d      	mov	r5, fp
 8004bce:	ea6f 0a03 	mvn.w	sl, r3
 8004bd2:	f04f 0900 	mov.w	r9, #0
 8004bd6:	4639      	mov	r1, r7
 8004bd8:	4620      	mov	r0, r4
 8004bda:	f000 f98a 	bl	8004ef2 <_Bfree>
 8004bde:	2e00      	cmp	r6, #0
 8004be0:	f43f aeb7 	beq.w	8004952 <_dtoa_r+0x67a>
 8004be4:	f1b9 0f00 	cmp.w	r9, #0
 8004be8:	d005      	beq.n	8004bf6 <_dtoa_r+0x91e>
 8004bea:	45b1      	cmp	r9, r6
 8004bec:	d003      	beq.n	8004bf6 <_dtoa_r+0x91e>
 8004bee:	4649      	mov	r1, r9
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	f000 f97e 	bl	8004ef2 <_Bfree>
 8004bf6:	4631      	mov	r1, r6
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	f000 f97a 	bl	8004ef2 <_Bfree>
 8004bfe:	e6a8      	b.n	8004952 <_dtoa_r+0x67a>
 8004c00:	2700      	movs	r7, #0
 8004c02:	463e      	mov	r6, r7
 8004c04:	e7e1      	b.n	8004bca <_dtoa_r+0x8f2>
 8004c06:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004c0a:	463e      	mov	r6, r7
 8004c0c:	e5a9      	b.n	8004762 <_dtoa_r+0x48a>
 8004c0e:	bf00      	nop
 8004c10:	40240000 	.word	0x40240000
 8004c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c16:	f8cd 9008 	str.w	r9, [sp, #8]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 80fa 	beq.w	8004e14 <_dtoa_r+0xb3c>
 8004c20:	2d00      	cmp	r5, #0
 8004c22:	dd05      	ble.n	8004c30 <_dtoa_r+0x958>
 8004c24:	4631      	mov	r1, r6
 8004c26:	462a      	mov	r2, r5
 8004c28:	4620      	mov	r0, r4
 8004c2a:	f000 faef 	bl	800520c <__lshift>
 8004c2e:	4606      	mov	r6, r0
 8004c30:	9b07      	ldr	r3, [sp, #28]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d04c      	beq.n	8004cd0 <_dtoa_r+0x9f8>
 8004c36:	6871      	ldr	r1, [r6, #4]
 8004c38:	4620      	mov	r0, r4
 8004c3a:	f000 f926 	bl	8004e8a <_Balloc>
 8004c3e:	6932      	ldr	r2, [r6, #16]
 8004c40:	3202      	adds	r2, #2
 8004c42:	4605      	mov	r5, r0
 8004c44:	0092      	lsls	r2, r2, #2
 8004c46:	f106 010c 	add.w	r1, r6, #12
 8004c4a:	300c      	adds	r0, #12
 8004c4c:	f000 f912 	bl	8004e74 <memcpy>
 8004c50:	2201      	movs	r2, #1
 8004c52:	4629      	mov	r1, r5
 8004c54:	4620      	mov	r0, r4
 8004c56:	f000 fad9 	bl	800520c <__lshift>
 8004c5a:	9b00      	ldr	r3, [sp, #0]
 8004c5c:	f8cd b014 	str.w	fp, [sp, #20]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	46b1      	mov	r9, r6
 8004c66:	9307      	str	r3, [sp, #28]
 8004c68:	4606      	mov	r6, r0
 8004c6a:	4639      	mov	r1, r7
 8004c6c:	9804      	ldr	r0, [sp, #16]
 8004c6e:	f7ff faa6 	bl	80041be <quorem>
 8004c72:	4649      	mov	r1, r9
 8004c74:	4605      	mov	r5, r0
 8004c76:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004c7a:	9804      	ldr	r0, [sp, #16]
 8004c7c:	f000 fb1a 	bl	80052b4 <__mcmp>
 8004c80:	4632      	mov	r2, r6
 8004c82:	9000      	str	r0, [sp, #0]
 8004c84:	4639      	mov	r1, r7
 8004c86:	4620      	mov	r0, r4
 8004c88:	f000 fb2e 	bl	80052e8 <__mdiff>
 8004c8c:	68c3      	ldr	r3, [r0, #12]
 8004c8e:	4602      	mov	r2, r0
 8004c90:	bb03      	cbnz	r3, 8004cd4 <_dtoa_r+0x9fc>
 8004c92:	4601      	mov	r1, r0
 8004c94:	9008      	str	r0, [sp, #32]
 8004c96:	9804      	ldr	r0, [sp, #16]
 8004c98:	f000 fb0c 	bl	80052b4 <__mcmp>
 8004c9c:	9a08      	ldr	r2, [sp, #32]
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	4611      	mov	r1, r2
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	9308      	str	r3, [sp, #32]
 8004ca6:	f000 f924 	bl	8004ef2 <_Bfree>
 8004caa:	9b08      	ldr	r3, [sp, #32]
 8004cac:	b9a3      	cbnz	r3, 8004cd8 <_dtoa_r+0xa00>
 8004cae:	9a06      	ldr	r2, [sp, #24]
 8004cb0:	b992      	cbnz	r2, 8004cd8 <_dtoa_r+0xa00>
 8004cb2:	9a07      	ldr	r2, [sp, #28]
 8004cb4:	b982      	cbnz	r2, 8004cd8 <_dtoa_r+0xa00>
 8004cb6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004cba:	d029      	beq.n	8004d10 <_dtoa_r+0xa38>
 8004cbc:	9b00      	ldr	r3, [sp, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	dd01      	ble.n	8004cc6 <_dtoa_r+0x9ee>
 8004cc2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004cc6:	9b05      	ldr	r3, [sp, #20]
 8004cc8:	1c5d      	adds	r5, r3, #1
 8004cca:	f883 8000 	strb.w	r8, [r3]
 8004cce:	e782      	b.n	8004bd6 <_dtoa_r+0x8fe>
 8004cd0:	4630      	mov	r0, r6
 8004cd2:	e7c2      	b.n	8004c5a <_dtoa_r+0x982>
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e7e3      	b.n	8004ca0 <_dtoa_r+0x9c8>
 8004cd8:	9a00      	ldr	r2, [sp, #0]
 8004cda:	2a00      	cmp	r2, #0
 8004cdc:	db04      	blt.n	8004ce8 <_dtoa_r+0xa10>
 8004cde:	d125      	bne.n	8004d2c <_dtoa_r+0xa54>
 8004ce0:	9a06      	ldr	r2, [sp, #24]
 8004ce2:	bb1a      	cbnz	r2, 8004d2c <_dtoa_r+0xa54>
 8004ce4:	9a07      	ldr	r2, [sp, #28]
 8004ce6:	bb0a      	cbnz	r2, 8004d2c <_dtoa_r+0xa54>
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	ddec      	ble.n	8004cc6 <_dtoa_r+0x9ee>
 8004cec:	2201      	movs	r2, #1
 8004cee:	9904      	ldr	r1, [sp, #16]
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	f000 fa8b 	bl	800520c <__lshift>
 8004cf6:	4639      	mov	r1, r7
 8004cf8:	9004      	str	r0, [sp, #16]
 8004cfa:	f000 fadb 	bl	80052b4 <__mcmp>
 8004cfe:	2800      	cmp	r0, #0
 8004d00:	dc03      	bgt.n	8004d0a <_dtoa_r+0xa32>
 8004d02:	d1e0      	bne.n	8004cc6 <_dtoa_r+0x9ee>
 8004d04:	f018 0f01 	tst.w	r8, #1
 8004d08:	d0dd      	beq.n	8004cc6 <_dtoa_r+0x9ee>
 8004d0a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004d0e:	d1d8      	bne.n	8004cc2 <_dtoa_r+0x9ea>
 8004d10:	9b05      	ldr	r3, [sp, #20]
 8004d12:	9a05      	ldr	r2, [sp, #20]
 8004d14:	1c5d      	adds	r5, r3, #1
 8004d16:	2339      	movs	r3, #57	; 0x39
 8004d18:	7013      	strb	r3, [r2, #0]
 8004d1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004d1e:	2b39      	cmp	r3, #57	; 0x39
 8004d20:	f105 32ff 	add.w	r2, r5, #4294967295
 8004d24:	d04f      	beq.n	8004dc6 <_dtoa_r+0xaee>
 8004d26:	3301      	adds	r3, #1
 8004d28:	7013      	strb	r3, [r2, #0]
 8004d2a:	e754      	b.n	8004bd6 <_dtoa_r+0x8fe>
 8004d2c:	9a05      	ldr	r2, [sp, #20]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f102 0501 	add.w	r5, r2, #1
 8004d34:	dd06      	ble.n	8004d44 <_dtoa_r+0xa6c>
 8004d36:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004d3a:	d0e9      	beq.n	8004d10 <_dtoa_r+0xa38>
 8004d3c:	f108 0801 	add.w	r8, r8, #1
 8004d40:	9b05      	ldr	r3, [sp, #20]
 8004d42:	e7c2      	b.n	8004cca <_dtoa_r+0x9f2>
 8004d44:	9a02      	ldr	r2, [sp, #8]
 8004d46:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004d4a:	eba5 030b 	sub.w	r3, r5, fp
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d021      	beq.n	8004d96 <_dtoa_r+0xabe>
 8004d52:	2300      	movs	r3, #0
 8004d54:	220a      	movs	r2, #10
 8004d56:	9904      	ldr	r1, [sp, #16]
 8004d58:	4620      	mov	r0, r4
 8004d5a:	f000 f8e1 	bl	8004f20 <__multadd>
 8004d5e:	45b1      	cmp	r9, r6
 8004d60:	9004      	str	r0, [sp, #16]
 8004d62:	f04f 0300 	mov.w	r3, #0
 8004d66:	f04f 020a 	mov.w	r2, #10
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	d105      	bne.n	8004d7c <_dtoa_r+0xaa4>
 8004d70:	f000 f8d6 	bl	8004f20 <__multadd>
 8004d74:	4681      	mov	r9, r0
 8004d76:	4606      	mov	r6, r0
 8004d78:	9505      	str	r5, [sp, #20]
 8004d7a:	e776      	b.n	8004c6a <_dtoa_r+0x992>
 8004d7c:	f000 f8d0 	bl	8004f20 <__multadd>
 8004d80:	4631      	mov	r1, r6
 8004d82:	4681      	mov	r9, r0
 8004d84:	2300      	movs	r3, #0
 8004d86:	220a      	movs	r2, #10
 8004d88:	4620      	mov	r0, r4
 8004d8a:	f000 f8c9 	bl	8004f20 <__multadd>
 8004d8e:	4606      	mov	r6, r0
 8004d90:	e7f2      	b.n	8004d78 <_dtoa_r+0xaa0>
 8004d92:	f04f 0900 	mov.w	r9, #0
 8004d96:	2201      	movs	r2, #1
 8004d98:	9904      	ldr	r1, [sp, #16]
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	f000 fa36 	bl	800520c <__lshift>
 8004da0:	4639      	mov	r1, r7
 8004da2:	9004      	str	r0, [sp, #16]
 8004da4:	f000 fa86 	bl	80052b4 <__mcmp>
 8004da8:	2800      	cmp	r0, #0
 8004daa:	dcb6      	bgt.n	8004d1a <_dtoa_r+0xa42>
 8004dac:	d102      	bne.n	8004db4 <_dtoa_r+0xadc>
 8004dae:	f018 0f01 	tst.w	r8, #1
 8004db2:	d1b2      	bne.n	8004d1a <_dtoa_r+0xa42>
 8004db4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004db8:	2b30      	cmp	r3, #48	; 0x30
 8004dba:	f105 32ff 	add.w	r2, r5, #4294967295
 8004dbe:	f47f af0a 	bne.w	8004bd6 <_dtoa_r+0x8fe>
 8004dc2:	4615      	mov	r5, r2
 8004dc4:	e7f6      	b.n	8004db4 <_dtoa_r+0xadc>
 8004dc6:	4593      	cmp	fp, r2
 8004dc8:	d105      	bne.n	8004dd6 <_dtoa_r+0xafe>
 8004dca:	2331      	movs	r3, #49	; 0x31
 8004dcc:	f10a 0a01 	add.w	sl, sl, #1
 8004dd0:	f88b 3000 	strb.w	r3, [fp]
 8004dd4:	e6ff      	b.n	8004bd6 <_dtoa_r+0x8fe>
 8004dd6:	4615      	mov	r5, r2
 8004dd8:	e79f      	b.n	8004d1a <_dtoa_r+0xa42>
 8004dda:	f8df b064 	ldr.w	fp, [pc, #100]	; 8004e40 <_dtoa_r+0xb68>
 8004dde:	e007      	b.n	8004df0 <_dtoa_r+0xb18>
 8004de0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004de2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8004e44 <_dtoa_r+0xb6c>
 8004de6:	b11b      	cbz	r3, 8004df0 <_dtoa_r+0xb18>
 8004de8:	f10b 0308 	add.w	r3, fp, #8
 8004dec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	4658      	mov	r0, fp
 8004df2:	b017      	add	sp, #92	; 0x5c
 8004df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004df8:	9b06      	ldr	r3, [sp, #24]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	f77f ae35 	ble.w	8004a6a <_dtoa_r+0x792>
 8004e00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e02:	9307      	str	r3, [sp, #28]
 8004e04:	e649      	b.n	8004a9a <_dtoa_r+0x7c2>
 8004e06:	9b02      	ldr	r3, [sp, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	dc03      	bgt.n	8004e14 <_dtoa_r+0xb3c>
 8004e0c:	9b06      	ldr	r3, [sp, #24]
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	f73f aecc 	bgt.w	8004bac <_dtoa_r+0x8d4>
 8004e14:	465d      	mov	r5, fp
 8004e16:	4639      	mov	r1, r7
 8004e18:	9804      	ldr	r0, [sp, #16]
 8004e1a:	f7ff f9d0 	bl	80041be <quorem>
 8004e1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004e22:	f805 8b01 	strb.w	r8, [r5], #1
 8004e26:	9a02      	ldr	r2, [sp, #8]
 8004e28:	eba5 030b 	sub.w	r3, r5, fp
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	ddb0      	ble.n	8004d92 <_dtoa_r+0xaba>
 8004e30:	2300      	movs	r3, #0
 8004e32:	220a      	movs	r2, #10
 8004e34:	9904      	ldr	r1, [sp, #16]
 8004e36:	4620      	mov	r0, r4
 8004e38:	f000 f872 	bl	8004f20 <__multadd>
 8004e3c:	9004      	str	r0, [sp, #16]
 8004e3e:	e7ea      	b.n	8004e16 <_dtoa_r+0xb3e>
 8004e40:	080055b8 	.word	0x080055b8
 8004e44:	080055ba 	.word	0x080055ba

08004e48 <_localeconv_r>:
 8004e48:	4b04      	ldr	r3, [pc, #16]	; (8004e5c <_localeconv_r+0x14>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6a18      	ldr	r0, [r3, #32]
 8004e4e:	4b04      	ldr	r3, [pc, #16]	; (8004e60 <_localeconv_r+0x18>)
 8004e50:	2800      	cmp	r0, #0
 8004e52:	bf08      	it	eq
 8004e54:	4618      	moveq	r0, r3
 8004e56:	30f0      	adds	r0, #240	; 0xf0
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	2000000c 	.word	0x2000000c
 8004e60:	20000070 	.word	0x20000070

08004e64 <malloc>:
 8004e64:	4b02      	ldr	r3, [pc, #8]	; (8004e70 <malloc+0xc>)
 8004e66:	4601      	mov	r1, r0
 8004e68:	6818      	ldr	r0, [r3, #0]
 8004e6a:	f000 baf7 	b.w	800545c <_malloc_r>
 8004e6e:	bf00      	nop
 8004e70:	2000000c 	.word	0x2000000c

08004e74 <memcpy>:
 8004e74:	b510      	push	{r4, lr}
 8004e76:	1e43      	subs	r3, r0, #1
 8004e78:	440a      	add	r2, r1
 8004e7a:	4291      	cmp	r1, r2
 8004e7c:	d100      	bne.n	8004e80 <memcpy+0xc>
 8004e7e:	bd10      	pop	{r4, pc}
 8004e80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e88:	e7f7      	b.n	8004e7a <memcpy+0x6>

08004e8a <_Balloc>:
 8004e8a:	b570      	push	{r4, r5, r6, lr}
 8004e8c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004e8e:	4604      	mov	r4, r0
 8004e90:	460e      	mov	r6, r1
 8004e92:	b93d      	cbnz	r5, 8004ea4 <_Balloc+0x1a>
 8004e94:	2010      	movs	r0, #16
 8004e96:	f7ff ffe5 	bl	8004e64 <malloc>
 8004e9a:	6260      	str	r0, [r4, #36]	; 0x24
 8004e9c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004ea0:	6005      	str	r5, [r0, #0]
 8004ea2:	60c5      	str	r5, [r0, #12]
 8004ea4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004ea6:	68eb      	ldr	r3, [r5, #12]
 8004ea8:	b183      	cbz	r3, 8004ecc <_Balloc+0x42>
 8004eaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004eb2:	b9b8      	cbnz	r0, 8004ee4 <_Balloc+0x5a>
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	fa01 f506 	lsl.w	r5, r1, r6
 8004eba:	1d6a      	adds	r2, r5, #5
 8004ebc:	0092      	lsls	r2, r2, #2
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	f000 fabe 	bl	8005440 <_calloc_r>
 8004ec4:	b160      	cbz	r0, 8004ee0 <_Balloc+0x56>
 8004ec6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8004eca:	e00e      	b.n	8004eea <_Balloc+0x60>
 8004ecc:	2221      	movs	r2, #33	; 0x21
 8004ece:	2104      	movs	r1, #4
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	f000 fab5 	bl	8005440 <_calloc_r>
 8004ed6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ed8:	60e8      	str	r0, [r5, #12]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1e4      	bne.n	8004eaa <_Balloc+0x20>
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	bd70      	pop	{r4, r5, r6, pc}
 8004ee4:	6802      	ldr	r2, [r0, #0]
 8004ee6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004eea:	2300      	movs	r3, #0
 8004eec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004ef0:	e7f7      	b.n	8004ee2 <_Balloc+0x58>

08004ef2 <_Bfree>:
 8004ef2:	b570      	push	{r4, r5, r6, lr}
 8004ef4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004ef6:	4606      	mov	r6, r0
 8004ef8:	460d      	mov	r5, r1
 8004efa:	b93c      	cbnz	r4, 8004f0c <_Bfree+0x1a>
 8004efc:	2010      	movs	r0, #16
 8004efe:	f7ff ffb1 	bl	8004e64 <malloc>
 8004f02:	6270      	str	r0, [r6, #36]	; 0x24
 8004f04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004f08:	6004      	str	r4, [r0, #0]
 8004f0a:	60c4      	str	r4, [r0, #12]
 8004f0c:	b13d      	cbz	r5, 8004f1e <_Bfree+0x2c>
 8004f0e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004f10:	686a      	ldr	r2, [r5, #4]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f18:	6029      	str	r1, [r5, #0]
 8004f1a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004f1e:	bd70      	pop	{r4, r5, r6, pc}

08004f20 <__multadd>:
 8004f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f24:	690d      	ldr	r5, [r1, #16]
 8004f26:	461f      	mov	r7, r3
 8004f28:	4606      	mov	r6, r0
 8004f2a:	460c      	mov	r4, r1
 8004f2c:	f101 0c14 	add.w	ip, r1, #20
 8004f30:	2300      	movs	r3, #0
 8004f32:	f8dc 0000 	ldr.w	r0, [ip]
 8004f36:	b281      	uxth	r1, r0
 8004f38:	fb02 7101 	mla	r1, r2, r1, r7
 8004f3c:	0c0f      	lsrs	r7, r1, #16
 8004f3e:	0c00      	lsrs	r0, r0, #16
 8004f40:	fb02 7000 	mla	r0, r2, r0, r7
 8004f44:	b289      	uxth	r1, r1
 8004f46:	3301      	adds	r3, #1
 8004f48:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004f4c:	429d      	cmp	r5, r3
 8004f4e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004f52:	f84c 1b04 	str.w	r1, [ip], #4
 8004f56:	dcec      	bgt.n	8004f32 <__multadd+0x12>
 8004f58:	b1d7      	cbz	r7, 8004f90 <__multadd+0x70>
 8004f5a:	68a3      	ldr	r3, [r4, #8]
 8004f5c:	42ab      	cmp	r3, r5
 8004f5e:	dc12      	bgt.n	8004f86 <__multadd+0x66>
 8004f60:	6861      	ldr	r1, [r4, #4]
 8004f62:	4630      	mov	r0, r6
 8004f64:	3101      	adds	r1, #1
 8004f66:	f7ff ff90 	bl	8004e8a <_Balloc>
 8004f6a:	6922      	ldr	r2, [r4, #16]
 8004f6c:	3202      	adds	r2, #2
 8004f6e:	f104 010c 	add.w	r1, r4, #12
 8004f72:	4680      	mov	r8, r0
 8004f74:	0092      	lsls	r2, r2, #2
 8004f76:	300c      	adds	r0, #12
 8004f78:	f7ff ff7c 	bl	8004e74 <memcpy>
 8004f7c:	4621      	mov	r1, r4
 8004f7e:	4630      	mov	r0, r6
 8004f80:	f7ff ffb7 	bl	8004ef2 <_Bfree>
 8004f84:	4644      	mov	r4, r8
 8004f86:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004f8a:	3501      	adds	r5, #1
 8004f8c:	615f      	str	r7, [r3, #20]
 8004f8e:	6125      	str	r5, [r4, #16]
 8004f90:	4620      	mov	r0, r4
 8004f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004f96 <__hi0bits>:
 8004f96:	0c02      	lsrs	r2, r0, #16
 8004f98:	0412      	lsls	r2, r2, #16
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	b9b2      	cbnz	r2, 8004fcc <__hi0bits+0x36>
 8004f9e:	0403      	lsls	r3, r0, #16
 8004fa0:	2010      	movs	r0, #16
 8004fa2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004fa6:	bf04      	itt	eq
 8004fa8:	021b      	lsleq	r3, r3, #8
 8004faa:	3008      	addeq	r0, #8
 8004fac:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004fb0:	bf04      	itt	eq
 8004fb2:	011b      	lsleq	r3, r3, #4
 8004fb4:	3004      	addeq	r0, #4
 8004fb6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004fba:	bf04      	itt	eq
 8004fbc:	009b      	lsleq	r3, r3, #2
 8004fbe:	3002      	addeq	r0, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	db06      	blt.n	8004fd2 <__hi0bits+0x3c>
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	d503      	bpl.n	8004fd0 <__hi0bits+0x3a>
 8004fc8:	3001      	adds	r0, #1
 8004fca:	4770      	bx	lr
 8004fcc:	2000      	movs	r0, #0
 8004fce:	e7e8      	b.n	8004fa2 <__hi0bits+0xc>
 8004fd0:	2020      	movs	r0, #32
 8004fd2:	4770      	bx	lr

08004fd4 <__lo0bits>:
 8004fd4:	6803      	ldr	r3, [r0, #0]
 8004fd6:	f013 0207 	ands.w	r2, r3, #7
 8004fda:	4601      	mov	r1, r0
 8004fdc:	d00b      	beq.n	8004ff6 <__lo0bits+0x22>
 8004fde:	07da      	lsls	r2, r3, #31
 8004fe0:	d423      	bmi.n	800502a <__lo0bits+0x56>
 8004fe2:	0798      	lsls	r0, r3, #30
 8004fe4:	bf49      	itett	mi
 8004fe6:	085b      	lsrmi	r3, r3, #1
 8004fe8:	089b      	lsrpl	r3, r3, #2
 8004fea:	2001      	movmi	r0, #1
 8004fec:	600b      	strmi	r3, [r1, #0]
 8004fee:	bf5c      	itt	pl
 8004ff0:	600b      	strpl	r3, [r1, #0]
 8004ff2:	2002      	movpl	r0, #2
 8004ff4:	4770      	bx	lr
 8004ff6:	b298      	uxth	r0, r3
 8004ff8:	b9a8      	cbnz	r0, 8005026 <__lo0bits+0x52>
 8004ffa:	0c1b      	lsrs	r3, r3, #16
 8004ffc:	2010      	movs	r0, #16
 8004ffe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005002:	bf04      	itt	eq
 8005004:	0a1b      	lsreq	r3, r3, #8
 8005006:	3008      	addeq	r0, #8
 8005008:	071a      	lsls	r2, r3, #28
 800500a:	bf04      	itt	eq
 800500c:	091b      	lsreq	r3, r3, #4
 800500e:	3004      	addeq	r0, #4
 8005010:	079a      	lsls	r2, r3, #30
 8005012:	bf04      	itt	eq
 8005014:	089b      	lsreq	r3, r3, #2
 8005016:	3002      	addeq	r0, #2
 8005018:	07da      	lsls	r2, r3, #31
 800501a:	d402      	bmi.n	8005022 <__lo0bits+0x4e>
 800501c:	085b      	lsrs	r3, r3, #1
 800501e:	d006      	beq.n	800502e <__lo0bits+0x5a>
 8005020:	3001      	adds	r0, #1
 8005022:	600b      	str	r3, [r1, #0]
 8005024:	4770      	bx	lr
 8005026:	4610      	mov	r0, r2
 8005028:	e7e9      	b.n	8004ffe <__lo0bits+0x2a>
 800502a:	2000      	movs	r0, #0
 800502c:	4770      	bx	lr
 800502e:	2020      	movs	r0, #32
 8005030:	4770      	bx	lr

08005032 <__i2b>:
 8005032:	b510      	push	{r4, lr}
 8005034:	460c      	mov	r4, r1
 8005036:	2101      	movs	r1, #1
 8005038:	f7ff ff27 	bl	8004e8a <_Balloc>
 800503c:	2201      	movs	r2, #1
 800503e:	6144      	str	r4, [r0, #20]
 8005040:	6102      	str	r2, [r0, #16]
 8005042:	bd10      	pop	{r4, pc}

08005044 <__multiply>:
 8005044:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005048:	4614      	mov	r4, r2
 800504a:	690a      	ldr	r2, [r1, #16]
 800504c:	6923      	ldr	r3, [r4, #16]
 800504e:	429a      	cmp	r2, r3
 8005050:	bfb8      	it	lt
 8005052:	460b      	movlt	r3, r1
 8005054:	4688      	mov	r8, r1
 8005056:	bfbc      	itt	lt
 8005058:	46a0      	movlt	r8, r4
 800505a:	461c      	movlt	r4, r3
 800505c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005060:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005064:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005068:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800506c:	eb07 0609 	add.w	r6, r7, r9
 8005070:	42b3      	cmp	r3, r6
 8005072:	bfb8      	it	lt
 8005074:	3101      	addlt	r1, #1
 8005076:	f7ff ff08 	bl	8004e8a <_Balloc>
 800507a:	f100 0514 	add.w	r5, r0, #20
 800507e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005082:	462b      	mov	r3, r5
 8005084:	2200      	movs	r2, #0
 8005086:	4573      	cmp	r3, lr
 8005088:	d316      	bcc.n	80050b8 <__multiply+0x74>
 800508a:	f104 0214 	add.w	r2, r4, #20
 800508e:	f108 0114 	add.w	r1, r8, #20
 8005092:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005096:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	9b00      	ldr	r3, [sp, #0]
 800509e:	9201      	str	r2, [sp, #4]
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d80c      	bhi.n	80050be <__multiply+0x7a>
 80050a4:	2e00      	cmp	r6, #0
 80050a6:	dd03      	ble.n	80050b0 <__multiply+0x6c>
 80050a8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d05d      	beq.n	800516c <__multiply+0x128>
 80050b0:	6106      	str	r6, [r0, #16]
 80050b2:	b003      	add	sp, #12
 80050b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050b8:	f843 2b04 	str.w	r2, [r3], #4
 80050bc:	e7e3      	b.n	8005086 <__multiply+0x42>
 80050be:	f8b2 b000 	ldrh.w	fp, [r2]
 80050c2:	f1bb 0f00 	cmp.w	fp, #0
 80050c6:	d023      	beq.n	8005110 <__multiply+0xcc>
 80050c8:	4689      	mov	r9, r1
 80050ca:	46ac      	mov	ip, r5
 80050cc:	f04f 0800 	mov.w	r8, #0
 80050d0:	f859 4b04 	ldr.w	r4, [r9], #4
 80050d4:	f8dc a000 	ldr.w	sl, [ip]
 80050d8:	b2a3      	uxth	r3, r4
 80050da:	fa1f fa8a 	uxth.w	sl, sl
 80050de:	fb0b a303 	mla	r3, fp, r3, sl
 80050e2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80050e6:	f8dc 4000 	ldr.w	r4, [ip]
 80050ea:	4443      	add	r3, r8
 80050ec:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80050f0:	fb0b 840a 	mla	r4, fp, sl, r8
 80050f4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80050f8:	46e2      	mov	sl, ip
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005100:	454f      	cmp	r7, r9
 8005102:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005106:	f84a 3b04 	str.w	r3, [sl], #4
 800510a:	d82b      	bhi.n	8005164 <__multiply+0x120>
 800510c:	f8cc 8004 	str.w	r8, [ip, #4]
 8005110:	9b01      	ldr	r3, [sp, #4]
 8005112:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005116:	3204      	adds	r2, #4
 8005118:	f1ba 0f00 	cmp.w	sl, #0
 800511c:	d020      	beq.n	8005160 <__multiply+0x11c>
 800511e:	682b      	ldr	r3, [r5, #0]
 8005120:	4689      	mov	r9, r1
 8005122:	46a8      	mov	r8, r5
 8005124:	f04f 0b00 	mov.w	fp, #0
 8005128:	f8b9 c000 	ldrh.w	ip, [r9]
 800512c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005130:	fb0a 440c 	mla	r4, sl, ip, r4
 8005134:	445c      	add	r4, fp
 8005136:	46c4      	mov	ip, r8
 8005138:	b29b      	uxth	r3, r3
 800513a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800513e:	f84c 3b04 	str.w	r3, [ip], #4
 8005142:	f859 3b04 	ldr.w	r3, [r9], #4
 8005146:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800514a:	0c1b      	lsrs	r3, r3, #16
 800514c:	fb0a b303 	mla	r3, sl, r3, fp
 8005150:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005154:	454f      	cmp	r7, r9
 8005156:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800515a:	d805      	bhi.n	8005168 <__multiply+0x124>
 800515c:	f8c8 3004 	str.w	r3, [r8, #4]
 8005160:	3504      	adds	r5, #4
 8005162:	e79b      	b.n	800509c <__multiply+0x58>
 8005164:	46d4      	mov	ip, sl
 8005166:	e7b3      	b.n	80050d0 <__multiply+0x8c>
 8005168:	46e0      	mov	r8, ip
 800516a:	e7dd      	b.n	8005128 <__multiply+0xe4>
 800516c:	3e01      	subs	r6, #1
 800516e:	e799      	b.n	80050a4 <__multiply+0x60>

08005170 <__pow5mult>:
 8005170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005174:	4615      	mov	r5, r2
 8005176:	f012 0203 	ands.w	r2, r2, #3
 800517a:	4606      	mov	r6, r0
 800517c:	460f      	mov	r7, r1
 800517e:	d007      	beq.n	8005190 <__pow5mult+0x20>
 8005180:	3a01      	subs	r2, #1
 8005182:	4c21      	ldr	r4, [pc, #132]	; (8005208 <__pow5mult+0x98>)
 8005184:	2300      	movs	r3, #0
 8005186:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800518a:	f7ff fec9 	bl	8004f20 <__multadd>
 800518e:	4607      	mov	r7, r0
 8005190:	10ad      	asrs	r5, r5, #2
 8005192:	d035      	beq.n	8005200 <__pow5mult+0x90>
 8005194:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005196:	b93c      	cbnz	r4, 80051a8 <__pow5mult+0x38>
 8005198:	2010      	movs	r0, #16
 800519a:	f7ff fe63 	bl	8004e64 <malloc>
 800519e:	6270      	str	r0, [r6, #36]	; 0x24
 80051a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80051a4:	6004      	str	r4, [r0, #0]
 80051a6:	60c4      	str	r4, [r0, #12]
 80051a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80051ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80051b0:	b94c      	cbnz	r4, 80051c6 <__pow5mult+0x56>
 80051b2:	f240 2171 	movw	r1, #625	; 0x271
 80051b6:	4630      	mov	r0, r6
 80051b8:	f7ff ff3b 	bl	8005032 <__i2b>
 80051bc:	2300      	movs	r3, #0
 80051be:	f8c8 0008 	str.w	r0, [r8, #8]
 80051c2:	4604      	mov	r4, r0
 80051c4:	6003      	str	r3, [r0, #0]
 80051c6:	f04f 0800 	mov.w	r8, #0
 80051ca:	07eb      	lsls	r3, r5, #31
 80051cc:	d50a      	bpl.n	80051e4 <__pow5mult+0x74>
 80051ce:	4639      	mov	r1, r7
 80051d0:	4622      	mov	r2, r4
 80051d2:	4630      	mov	r0, r6
 80051d4:	f7ff ff36 	bl	8005044 <__multiply>
 80051d8:	4639      	mov	r1, r7
 80051da:	4681      	mov	r9, r0
 80051dc:	4630      	mov	r0, r6
 80051de:	f7ff fe88 	bl	8004ef2 <_Bfree>
 80051e2:	464f      	mov	r7, r9
 80051e4:	106d      	asrs	r5, r5, #1
 80051e6:	d00b      	beq.n	8005200 <__pow5mult+0x90>
 80051e8:	6820      	ldr	r0, [r4, #0]
 80051ea:	b938      	cbnz	r0, 80051fc <__pow5mult+0x8c>
 80051ec:	4622      	mov	r2, r4
 80051ee:	4621      	mov	r1, r4
 80051f0:	4630      	mov	r0, r6
 80051f2:	f7ff ff27 	bl	8005044 <__multiply>
 80051f6:	6020      	str	r0, [r4, #0]
 80051f8:	f8c0 8000 	str.w	r8, [r0]
 80051fc:	4604      	mov	r4, r0
 80051fe:	e7e4      	b.n	80051ca <__pow5mult+0x5a>
 8005200:	4638      	mov	r0, r7
 8005202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005206:	bf00      	nop
 8005208:	080056b8 	.word	0x080056b8

0800520c <__lshift>:
 800520c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005210:	460c      	mov	r4, r1
 8005212:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005216:	6923      	ldr	r3, [r4, #16]
 8005218:	6849      	ldr	r1, [r1, #4]
 800521a:	eb0a 0903 	add.w	r9, sl, r3
 800521e:	68a3      	ldr	r3, [r4, #8]
 8005220:	4607      	mov	r7, r0
 8005222:	4616      	mov	r6, r2
 8005224:	f109 0501 	add.w	r5, r9, #1
 8005228:	42ab      	cmp	r3, r5
 800522a:	db32      	blt.n	8005292 <__lshift+0x86>
 800522c:	4638      	mov	r0, r7
 800522e:	f7ff fe2c 	bl	8004e8a <_Balloc>
 8005232:	2300      	movs	r3, #0
 8005234:	4680      	mov	r8, r0
 8005236:	f100 0114 	add.w	r1, r0, #20
 800523a:	461a      	mov	r2, r3
 800523c:	4553      	cmp	r3, sl
 800523e:	db2b      	blt.n	8005298 <__lshift+0x8c>
 8005240:	6920      	ldr	r0, [r4, #16]
 8005242:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005246:	f104 0314 	add.w	r3, r4, #20
 800524a:	f016 021f 	ands.w	r2, r6, #31
 800524e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005252:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005256:	d025      	beq.n	80052a4 <__lshift+0x98>
 8005258:	f1c2 0e20 	rsb	lr, r2, #32
 800525c:	2000      	movs	r0, #0
 800525e:	681e      	ldr	r6, [r3, #0]
 8005260:	468a      	mov	sl, r1
 8005262:	4096      	lsls	r6, r2
 8005264:	4330      	orrs	r0, r6
 8005266:	f84a 0b04 	str.w	r0, [sl], #4
 800526a:	f853 0b04 	ldr.w	r0, [r3], #4
 800526e:	459c      	cmp	ip, r3
 8005270:	fa20 f00e 	lsr.w	r0, r0, lr
 8005274:	d814      	bhi.n	80052a0 <__lshift+0x94>
 8005276:	6048      	str	r0, [r1, #4]
 8005278:	b108      	cbz	r0, 800527e <__lshift+0x72>
 800527a:	f109 0502 	add.w	r5, r9, #2
 800527e:	3d01      	subs	r5, #1
 8005280:	4638      	mov	r0, r7
 8005282:	f8c8 5010 	str.w	r5, [r8, #16]
 8005286:	4621      	mov	r1, r4
 8005288:	f7ff fe33 	bl	8004ef2 <_Bfree>
 800528c:	4640      	mov	r0, r8
 800528e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005292:	3101      	adds	r1, #1
 8005294:	005b      	lsls	r3, r3, #1
 8005296:	e7c7      	b.n	8005228 <__lshift+0x1c>
 8005298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800529c:	3301      	adds	r3, #1
 800529e:	e7cd      	b.n	800523c <__lshift+0x30>
 80052a0:	4651      	mov	r1, sl
 80052a2:	e7dc      	b.n	800525e <__lshift+0x52>
 80052a4:	3904      	subs	r1, #4
 80052a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80052aa:	f841 2f04 	str.w	r2, [r1, #4]!
 80052ae:	459c      	cmp	ip, r3
 80052b0:	d8f9      	bhi.n	80052a6 <__lshift+0x9a>
 80052b2:	e7e4      	b.n	800527e <__lshift+0x72>

080052b4 <__mcmp>:
 80052b4:	6903      	ldr	r3, [r0, #16]
 80052b6:	690a      	ldr	r2, [r1, #16]
 80052b8:	1a9b      	subs	r3, r3, r2
 80052ba:	b530      	push	{r4, r5, lr}
 80052bc:	d10c      	bne.n	80052d8 <__mcmp+0x24>
 80052be:	0092      	lsls	r2, r2, #2
 80052c0:	3014      	adds	r0, #20
 80052c2:	3114      	adds	r1, #20
 80052c4:	1884      	adds	r4, r0, r2
 80052c6:	4411      	add	r1, r2
 80052c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80052cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80052d0:	4295      	cmp	r5, r2
 80052d2:	d003      	beq.n	80052dc <__mcmp+0x28>
 80052d4:	d305      	bcc.n	80052e2 <__mcmp+0x2e>
 80052d6:	2301      	movs	r3, #1
 80052d8:	4618      	mov	r0, r3
 80052da:	bd30      	pop	{r4, r5, pc}
 80052dc:	42a0      	cmp	r0, r4
 80052de:	d3f3      	bcc.n	80052c8 <__mcmp+0x14>
 80052e0:	e7fa      	b.n	80052d8 <__mcmp+0x24>
 80052e2:	f04f 33ff 	mov.w	r3, #4294967295
 80052e6:	e7f7      	b.n	80052d8 <__mcmp+0x24>

080052e8 <__mdiff>:
 80052e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052ec:	460d      	mov	r5, r1
 80052ee:	4607      	mov	r7, r0
 80052f0:	4611      	mov	r1, r2
 80052f2:	4628      	mov	r0, r5
 80052f4:	4614      	mov	r4, r2
 80052f6:	f7ff ffdd 	bl	80052b4 <__mcmp>
 80052fa:	1e06      	subs	r6, r0, #0
 80052fc:	d108      	bne.n	8005310 <__mdiff+0x28>
 80052fe:	4631      	mov	r1, r6
 8005300:	4638      	mov	r0, r7
 8005302:	f7ff fdc2 	bl	8004e8a <_Balloc>
 8005306:	2301      	movs	r3, #1
 8005308:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800530c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005310:	bfa4      	itt	ge
 8005312:	4623      	movge	r3, r4
 8005314:	462c      	movge	r4, r5
 8005316:	4638      	mov	r0, r7
 8005318:	6861      	ldr	r1, [r4, #4]
 800531a:	bfa6      	itte	ge
 800531c:	461d      	movge	r5, r3
 800531e:	2600      	movge	r6, #0
 8005320:	2601      	movlt	r6, #1
 8005322:	f7ff fdb2 	bl	8004e8a <_Balloc>
 8005326:	692b      	ldr	r3, [r5, #16]
 8005328:	60c6      	str	r6, [r0, #12]
 800532a:	6926      	ldr	r6, [r4, #16]
 800532c:	f105 0914 	add.w	r9, r5, #20
 8005330:	f104 0214 	add.w	r2, r4, #20
 8005334:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005338:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800533c:	f100 0514 	add.w	r5, r0, #20
 8005340:	f04f 0e00 	mov.w	lr, #0
 8005344:	f852 ab04 	ldr.w	sl, [r2], #4
 8005348:	f859 4b04 	ldr.w	r4, [r9], #4
 800534c:	fa1e f18a 	uxtah	r1, lr, sl
 8005350:	b2a3      	uxth	r3, r4
 8005352:	1ac9      	subs	r1, r1, r3
 8005354:	0c23      	lsrs	r3, r4, #16
 8005356:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800535a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800535e:	b289      	uxth	r1, r1
 8005360:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005364:	45c8      	cmp	r8, r9
 8005366:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800536a:	4694      	mov	ip, r2
 800536c:	f845 3b04 	str.w	r3, [r5], #4
 8005370:	d8e8      	bhi.n	8005344 <__mdiff+0x5c>
 8005372:	45bc      	cmp	ip, r7
 8005374:	d304      	bcc.n	8005380 <__mdiff+0x98>
 8005376:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800537a:	b183      	cbz	r3, 800539e <__mdiff+0xb6>
 800537c:	6106      	str	r6, [r0, #16]
 800537e:	e7c5      	b.n	800530c <__mdiff+0x24>
 8005380:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005384:	fa1e f381 	uxtah	r3, lr, r1
 8005388:	141a      	asrs	r2, r3, #16
 800538a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800538e:	b29b      	uxth	r3, r3
 8005390:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005394:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005398:	f845 3b04 	str.w	r3, [r5], #4
 800539c:	e7e9      	b.n	8005372 <__mdiff+0x8a>
 800539e:	3e01      	subs	r6, #1
 80053a0:	e7e9      	b.n	8005376 <__mdiff+0x8e>

080053a2 <__d2b>:
 80053a2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80053a6:	460e      	mov	r6, r1
 80053a8:	2101      	movs	r1, #1
 80053aa:	ec59 8b10 	vmov	r8, r9, d0
 80053ae:	4615      	mov	r5, r2
 80053b0:	f7ff fd6b 	bl	8004e8a <_Balloc>
 80053b4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80053b8:	4607      	mov	r7, r0
 80053ba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80053be:	bb34      	cbnz	r4, 800540e <__d2b+0x6c>
 80053c0:	9301      	str	r3, [sp, #4]
 80053c2:	f1b8 0300 	subs.w	r3, r8, #0
 80053c6:	d027      	beq.n	8005418 <__d2b+0x76>
 80053c8:	a802      	add	r0, sp, #8
 80053ca:	f840 3d08 	str.w	r3, [r0, #-8]!
 80053ce:	f7ff fe01 	bl	8004fd4 <__lo0bits>
 80053d2:	9900      	ldr	r1, [sp, #0]
 80053d4:	b1f0      	cbz	r0, 8005414 <__d2b+0x72>
 80053d6:	9a01      	ldr	r2, [sp, #4]
 80053d8:	f1c0 0320 	rsb	r3, r0, #32
 80053dc:	fa02 f303 	lsl.w	r3, r2, r3
 80053e0:	430b      	orrs	r3, r1
 80053e2:	40c2      	lsrs	r2, r0
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	9201      	str	r2, [sp, #4]
 80053e8:	9b01      	ldr	r3, [sp, #4]
 80053ea:	61bb      	str	r3, [r7, #24]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	bf14      	ite	ne
 80053f0:	2102      	movne	r1, #2
 80053f2:	2101      	moveq	r1, #1
 80053f4:	6139      	str	r1, [r7, #16]
 80053f6:	b1c4      	cbz	r4, 800542a <__d2b+0x88>
 80053f8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80053fc:	4404      	add	r4, r0
 80053fe:	6034      	str	r4, [r6, #0]
 8005400:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005404:	6028      	str	r0, [r5, #0]
 8005406:	4638      	mov	r0, r7
 8005408:	b003      	add	sp, #12
 800540a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800540e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005412:	e7d5      	b.n	80053c0 <__d2b+0x1e>
 8005414:	6179      	str	r1, [r7, #20]
 8005416:	e7e7      	b.n	80053e8 <__d2b+0x46>
 8005418:	a801      	add	r0, sp, #4
 800541a:	f7ff fddb 	bl	8004fd4 <__lo0bits>
 800541e:	9b01      	ldr	r3, [sp, #4]
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	2101      	movs	r1, #1
 8005424:	6139      	str	r1, [r7, #16]
 8005426:	3020      	adds	r0, #32
 8005428:	e7e5      	b.n	80053f6 <__d2b+0x54>
 800542a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800542e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005432:	6030      	str	r0, [r6, #0]
 8005434:	6918      	ldr	r0, [r3, #16]
 8005436:	f7ff fdae 	bl	8004f96 <__hi0bits>
 800543a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800543e:	e7e1      	b.n	8005404 <__d2b+0x62>

08005440 <_calloc_r>:
 8005440:	b538      	push	{r3, r4, r5, lr}
 8005442:	fb02 f401 	mul.w	r4, r2, r1
 8005446:	4621      	mov	r1, r4
 8005448:	f000 f808 	bl	800545c <_malloc_r>
 800544c:	4605      	mov	r5, r0
 800544e:	b118      	cbz	r0, 8005458 <_calloc_r+0x18>
 8005450:	4622      	mov	r2, r4
 8005452:	2100      	movs	r1, #0
 8005454:	f7fe fb62 	bl	8003b1c <memset>
 8005458:	4628      	mov	r0, r5
 800545a:	bd38      	pop	{r3, r4, r5, pc}

0800545c <_malloc_r>:
 800545c:	b570      	push	{r4, r5, r6, lr}
 800545e:	1ccd      	adds	r5, r1, #3
 8005460:	f025 0503 	bic.w	r5, r5, #3
 8005464:	3508      	adds	r5, #8
 8005466:	2d0c      	cmp	r5, #12
 8005468:	bf38      	it	cc
 800546a:	250c      	movcc	r5, #12
 800546c:	2d00      	cmp	r5, #0
 800546e:	4606      	mov	r6, r0
 8005470:	db01      	blt.n	8005476 <_malloc_r+0x1a>
 8005472:	42a9      	cmp	r1, r5
 8005474:	d903      	bls.n	800547e <_malloc_r+0x22>
 8005476:	230c      	movs	r3, #12
 8005478:	6033      	str	r3, [r6, #0]
 800547a:	2000      	movs	r0, #0
 800547c:	bd70      	pop	{r4, r5, r6, pc}
 800547e:	f000 f869 	bl	8005554 <__malloc_lock>
 8005482:	4a21      	ldr	r2, [pc, #132]	; (8005508 <_malloc_r+0xac>)
 8005484:	6814      	ldr	r4, [r2, #0]
 8005486:	4621      	mov	r1, r4
 8005488:	b991      	cbnz	r1, 80054b0 <_malloc_r+0x54>
 800548a:	4c20      	ldr	r4, [pc, #128]	; (800550c <_malloc_r+0xb0>)
 800548c:	6823      	ldr	r3, [r4, #0]
 800548e:	b91b      	cbnz	r3, 8005498 <_malloc_r+0x3c>
 8005490:	4630      	mov	r0, r6
 8005492:	f000 f83d 	bl	8005510 <_sbrk_r>
 8005496:	6020      	str	r0, [r4, #0]
 8005498:	4629      	mov	r1, r5
 800549a:	4630      	mov	r0, r6
 800549c:	f000 f838 	bl	8005510 <_sbrk_r>
 80054a0:	1c43      	adds	r3, r0, #1
 80054a2:	d124      	bne.n	80054ee <_malloc_r+0x92>
 80054a4:	230c      	movs	r3, #12
 80054a6:	6033      	str	r3, [r6, #0]
 80054a8:	4630      	mov	r0, r6
 80054aa:	f000 f854 	bl	8005556 <__malloc_unlock>
 80054ae:	e7e4      	b.n	800547a <_malloc_r+0x1e>
 80054b0:	680b      	ldr	r3, [r1, #0]
 80054b2:	1b5b      	subs	r3, r3, r5
 80054b4:	d418      	bmi.n	80054e8 <_malloc_r+0x8c>
 80054b6:	2b0b      	cmp	r3, #11
 80054b8:	d90f      	bls.n	80054da <_malloc_r+0x7e>
 80054ba:	600b      	str	r3, [r1, #0]
 80054bc:	50cd      	str	r5, [r1, r3]
 80054be:	18cc      	adds	r4, r1, r3
 80054c0:	4630      	mov	r0, r6
 80054c2:	f000 f848 	bl	8005556 <__malloc_unlock>
 80054c6:	f104 000b 	add.w	r0, r4, #11
 80054ca:	1d23      	adds	r3, r4, #4
 80054cc:	f020 0007 	bic.w	r0, r0, #7
 80054d0:	1ac3      	subs	r3, r0, r3
 80054d2:	d0d3      	beq.n	800547c <_malloc_r+0x20>
 80054d4:	425a      	negs	r2, r3
 80054d6:	50e2      	str	r2, [r4, r3]
 80054d8:	e7d0      	b.n	800547c <_malloc_r+0x20>
 80054da:	428c      	cmp	r4, r1
 80054dc:	684b      	ldr	r3, [r1, #4]
 80054de:	bf16      	itet	ne
 80054e0:	6063      	strne	r3, [r4, #4]
 80054e2:	6013      	streq	r3, [r2, #0]
 80054e4:	460c      	movne	r4, r1
 80054e6:	e7eb      	b.n	80054c0 <_malloc_r+0x64>
 80054e8:	460c      	mov	r4, r1
 80054ea:	6849      	ldr	r1, [r1, #4]
 80054ec:	e7cc      	b.n	8005488 <_malloc_r+0x2c>
 80054ee:	1cc4      	adds	r4, r0, #3
 80054f0:	f024 0403 	bic.w	r4, r4, #3
 80054f4:	42a0      	cmp	r0, r4
 80054f6:	d005      	beq.n	8005504 <_malloc_r+0xa8>
 80054f8:	1a21      	subs	r1, r4, r0
 80054fa:	4630      	mov	r0, r6
 80054fc:	f000 f808 	bl	8005510 <_sbrk_r>
 8005500:	3001      	adds	r0, #1
 8005502:	d0cf      	beq.n	80054a4 <_malloc_r+0x48>
 8005504:	6025      	str	r5, [r4, #0]
 8005506:	e7db      	b.n	80054c0 <_malloc_r+0x64>
 8005508:	200001fc 	.word	0x200001fc
 800550c:	20000200 	.word	0x20000200

08005510 <_sbrk_r>:
 8005510:	b538      	push	{r3, r4, r5, lr}
 8005512:	4c06      	ldr	r4, [pc, #24]	; (800552c <_sbrk_r+0x1c>)
 8005514:	2300      	movs	r3, #0
 8005516:	4605      	mov	r5, r0
 8005518:	4608      	mov	r0, r1
 800551a:	6023      	str	r3, [r4, #0]
 800551c:	f7fc f804 	bl	8001528 <_sbrk>
 8005520:	1c43      	adds	r3, r0, #1
 8005522:	d102      	bne.n	800552a <_sbrk_r+0x1a>
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	b103      	cbz	r3, 800552a <_sbrk_r+0x1a>
 8005528:	602b      	str	r3, [r5, #0]
 800552a:	bd38      	pop	{r3, r4, r5, pc}
 800552c:	2000029c 	.word	0x2000029c

08005530 <__ascii_mbtowc>:
 8005530:	b082      	sub	sp, #8
 8005532:	b901      	cbnz	r1, 8005536 <__ascii_mbtowc+0x6>
 8005534:	a901      	add	r1, sp, #4
 8005536:	b142      	cbz	r2, 800554a <__ascii_mbtowc+0x1a>
 8005538:	b14b      	cbz	r3, 800554e <__ascii_mbtowc+0x1e>
 800553a:	7813      	ldrb	r3, [r2, #0]
 800553c:	600b      	str	r3, [r1, #0]
 800553e:	7812      	ldrb	r2, [r2, #0]
 8005540:	1c10      	adds	r0, r2, #0
 8005542:	bf18      	it	ne
 8005544:	2001      	movne	r0, #1
 8005546:	b002      	add	sp, #8
 8005548:	4770      	bx	lr
 800554a:	4610      	mov	r0, r2
 800554c:	e7fb      	b.n	8005546 <__ascii_mbtowc+0x16>
 800554e:	f06f 0001 	mvn.w	r0, #1
 8005552:	e7f8      	b.n	8005546 <__ascii_mbtowc+0x16>

08005554 <__malloc_lock>:
 8005554:	4770      	bx	lr

08005556 <__malloc_unlock>:
 8005556:	4770      	bx	lr

08005558 <__ascii_wctomb>:
 8005558:	b149      	cbz	r1, 800556e <__ascii_wctomb+0x16>
 800555a:	2aff      	cmp	r2, #255	; 0xff
 800555c:	bf85      	ittet	hi
 800555e:	238a      	movhi	r3, #138	; 0x8a
 8005560:	6003      	strhi	r3, [r0, #0]
 8005562:	700a      	strbls	r2, [r1, #0]
 8005564:	f04f 30ff 	movhi.w	r0, #4294967295
 8005568:	bf98      	it	ls
 800556a:	2001      	movls	r0, #1
 800556c:	4770      	bx	lr
 800556e:	4608      	mov	r0, r1
 8005570:	4770      	bx	lr
	...

08005574 <_init>:
 8005574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005576:	bf00      	nop
 8005578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800557a:	bc08      	pop	{r3}
 800557c:	469e      	mov	lr, r3
 800557e:	4770      	bx	lr

08005580 <_fini>:
 8005580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005582:	bf00      	nop
 8005584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005586:	bc08      	pop	{r3}
 8005588:	469e      	mov	lr, r3
 800558a:	4770      	bx	lr
