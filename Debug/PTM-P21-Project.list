
PTM-P21-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d390  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  0800d520  0800d520  0001d520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d8f0  0800d8f0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d8f0  0800d8f0  0001d8f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d8f8  0800d8f8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d8f8  0800d8f8  0001d8f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d8fc  0800d8fc  0001d8fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800d900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000135e8  200001e8  0800dae8  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200137d0  0800dae8  000237d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018078  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003097  00000000  00000000  00038290  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001588  00000000  00000000  0003b328  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001420  00000000  00000000  0003c8b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000248f6  00000000  00000000  0003dcd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014bd4  00000000  00000000  000625c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d49b8  00000000  00000000  0007719a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014bb52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a90  00000000  00000000  0014bbd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d508 	.word	0x0800d508

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800d508 	.word	0x0800d508

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b972 	b.w	8000ee4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4688      	mov	r8, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14b      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4615      	mov	r5, r2
 8000c2a:	d967      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0720 	rsb	r7, r2, #32
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3e:	4095      	lsls	r5, r2
 8000c40:	ea47 0803 	orr.w	r8, r7, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c50:	fa1f fc85 	uxth.w	ip, r5
 8000c54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c6a:	f080 811b 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8118 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000c74:	3f02      	subs	r7, #2
 8000c76:	442b      	add	r3, r5
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8c:	45a4      	cmp	ip, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	442c      	add	r4, r5
 8000ca4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca8:	eba4 040c 	sub.w	r4, r4, ip
 8000cac:	2700      	movs	r7, #0
 8000cae:	b11e      	cbz	r6, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xbe>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80eb 	beq.w	8000e9e <__udivmoddi4+0x286>
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e9c6 0100 	strd	r0, r1, [r6]
 8000cce:	4638      	mov	r0, r7
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f783 	clz	r7, r3
 8000cda:	2f00      	cmp	r7, #0
 8000cdc:	d147      	bne.n	8000d6e <__udivmoddi4+0x156>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd0>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80fa 	bhi.w	8000edc <__udivmoddi4+0x2c4>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000cf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xe8>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 808f 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d0a:	1b49      	subs	r1, r1, r5
 8000d0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d10:	fa1f f885 	uxth.w	r8, r5
 8000d14:	2701      	movs	r7, #1
 8000d16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb08 f10c 	mul.w	r1, r8, ip
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2c:	18eb      	adds	r3, r5, r3
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x14c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x14a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80b6 	bhi.w	8000ece <__udivmoddi4+0x2b6>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e79f      	b.n	8000cae <__udivmoddi4+0x96>
 8000d6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d8c:	4325      	orrs	r5, r4
 8000d8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d92:	0c2c      	lsrs	r4, r5, #16
 8000d94:	fb08 3319 	mls	r3, r8, r9, r3
 8000d98:	fa1f fa8e 	uxth.w	sl, lr
 8000d9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000da0:	fb09 f40a 	mul.w	r4, r9, sl
 8000da4:	429c      	cmp	r4, r3
 8000da6:	fa02 f207 	lsl.w	r2, r2, r7
 8000daa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1e 0303 	adds.w	r3, lr, r3
 8000db4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db8:	f080 8087 	bcs.w	8000eca <__udivmoddi4+0x2b2>
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	f240 8084 	bls.w	8000eca <__udivmoddi4+0x2b2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4473      	add	r3, lr
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	b2ad      	uxth	r5, r5
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ddc:	45a2      	cmp	sl, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1e 0404 	adds.w	r4, lr, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	d26b      	bcs.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dea:	45a2      	cmp	sl, r4
 8000dec:	d969      	bls.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4474      	add	r4, lr
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	eba4 040a 	sub.w	r4, r4, sl
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c2      	mov	sl, r8
 8000e02:	464b      	mov	r3, r9
 8000e04:	d354      	bcc.n	8000eb0 <__udivmoddi4+0x298>
 8000e06:	d051      	beq.n	8000eac <__udivmoddi4+0x294>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d069      	beq.n	8000ee0 <__udivmoddi4+0x2c8>
 8000e0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e10:	eb64 0403 	sbc.w	r4, r4, r3
 8000e14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	40fc      	lsrs	r4, r7
 8000e1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e20:	e9c6 5400 	strd	r5, r4, [r6]
 8000e24:	2700      	movs	r7, #0
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e30:	4095      	lsls	r5, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3e:	4338      	orrs	r0, r7
 8000e40:	0c01      	lsrs	r1, r0, #16
 8000e42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e46:	fa1f f885 	uxth.w	r8, r5
 8000e4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb07 f308 	mul.w	r3, r7, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x256>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e64:	d22f      	bcs.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d92d      	bls.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e6a:	3f02      	subs	r7, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1acb      	subs	r3, r1, r3
 8000e70:	b281      	uxth	r1, r0
 8000e72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb00 f308 	mul.w	r3, r0, r8
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x27e>
 8000e86:	1869      	adds	r1, r5, r1
 8000e88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e8c:	d217      	bcs.n	8000ebe <__udivmoddi4+0x2a6>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d915      	bls.n	8000ebe <__udivmoddi4+0x2a6>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4429      	add	r1, r5
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e9c:	e73b      	b.n	8000d16 <__udivmoddi4+0xfe>
 8000e9e:	4637      	mov	r7, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e709      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	e6e7      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000eac:	4541      	cmp	r1, r8
 8000eae:	d2ab      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb8:	3801      	subs	r0, #1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	e7a4      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ebe:	4660      	mov	r0, ip
 8000ec0:	e7e9      	b.n	8000e96 <__udivmoddi4+0x27e>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	e795      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec6:	4667      	mov	r7, ip
 8000ec8:	e7d1      	b.n	8000e6e <__udivmoddi4+0x256>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e77c      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	442c      	add	r4, r5
 8000ed2:	e747      	b.n	8000d64 <__udivmoddi4+0x14c>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	442b      	add	r3, r5
 8000eda:	e72f      	b.n	8000d3c <__udivmoddi4+0x124>
 8000edc:	4638      	mov	r0, r7
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xda>
 8000ee0:	4637      	mov	r7, r6
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0xa0>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <camera_init>:
/*** Internal Static Variables ***/
/*** Internal Function Declarations ***/

/*** External Function Defines ***/
RET camera_init()
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  return ov7670_init(&hdcmi, &hdma_dcmi, &hi2c2);
 8000eec:	4a03      	ldr	r2, [pc, #12]	; (8000efc <camera_init+0x14>)
 8000eee:	4904      	ldr	r1, [pc, #16]	; (8000f00 <camera_init+0x18>)
 8000ef0:	4804      	ldr	r0, [pc, #16]	; (8000f04 <camera_init+0x1c>)
 8000ef2:	f003 f95b 	bl	80041ac <ov7670_init>
 8000ef6:	4603      	mov	r3, r0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20013298 	.word	0x20013298
 8000f00:	200132f0 	.word	0x200132f0
 8000f04:	200135d8 	.word	0x200135d8

08000f08 <camera_config>:
{
  return ov7670_read(regAddr, data);
}

RET camera_config(uint32_t mode)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t ov7670Mode;
  switch (mode){
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d002      	beq.n	8000f1c <camera_config+0x14>
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d003      	beq.n	8000f22 <camera_config+0x1a>
 8000f1a:	e005      	b.n	8000f28 <camera_config+0x20>
  case CAMERA_MODE_QVGA_RGB565:
    ov7670Mode = OV7670_MODE_QVGA_RGB565;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
    break;
 8000f20:	e008      	b.n	8000f34 <camera_config+0x2c>
  case CAMERA_MODE_QVGA_YUV:
    ov7670Mode = OV7670_MODE_QVGA_YUV;
 8000f22:	2301      	movs	r3, #1
 8000f24:	60fb      	str	r3, [r7, #12]
    break;
 8000f26:	e005      	b.n	8000f34 <camera_config+0x2c>
  default:
    printf("camera mode %d is not supported\n", mode);
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	4806      	ldr	r0, [pc, #24]	; (8000f44 <camera_config+0x3c>)
 8000f2c:	f00a fb00 	bl	800b530 <iprintf>
    return RET_ERR;
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <camera_config+0x40>)
 8000f32:	e003      	b.n	8000f3c <camera_config+0x34>
  }
  return ov7670_config(ov7670Mode);
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f003 f981 	bl	800423c <ov7670_config>
 8000f3a:	4603      	mov	r3, r0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	0800d520 	.word	0x0800d520
 8000f48:	80000001 	.word	0x80000001

08000f4c <camera_startCap>:

RET camera_startCap(uint32_t capMode, void* destHandle)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  uint32_t ov7670CapMode;

  switch (capMode){
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d002      	beq.n	8000f62 <camera_startCap+0x16>
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d003      	beq.n	8000f68 <camera_startCap+0x1c>
 8000f60:	e005      	b.n	8000f6e <camera_startCap+0x22>
  case CAMERA_CAP_CONTINUOUS:
    ov7670CapMode = OV7670_CAP_CONTINUOUS;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
    break;
 8000f66:	e008      	b.n	8000f7a <camera_startCap+0x2e>
  case CAMERA_CAP_SINGLE_FRAME:
    ov7670CapMode = OV7670_CAP_SINGLE_FRAME;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
    break;
 8000f6c:	e005      	b.n	8000f7a <camera_startCap+0x2e>
  default:
    printf("cap mode %d is not supported\n", capMode);
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	4807      	ldr	r0, [pc, #28]	; (8000f90 <camera_startCap+0x44>)
 8000f72:	f00a fadd 	bl	800b530 <iprintf>
    return RET_ERR;
 8000f76:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <camera_startCap+0x48>)
 8000f78:	e005      	b.n	8000f86 <camera_startCap+0x3a>
  }
  return ov7670_startCap(ov7670CapMode, (uint32_t)destHandle);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	68f8      	ldr	r0, [r7, #12]
 8000f80:	f003 f98c 	bl	800429c <ov7670_startCap>
 8000f84:	4603      	mov	r3, r0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	0800d544 	.word	0x0800d544
 8000f94:	80000001 	.word	0x80000001

08000f98 <camera_stopCap>:

RET camera_stopCap()
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  return ov7670_stopCap();
 8000f9c:	f003 f9ac 	bl	80042f8 <ov7670_stopCap>
 8000fa0:	4603      	mov	r3, r0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <DESELECT>:

static
inline void DESELECT(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <xmit_spi>:

extern SPI_HandleTypeDef hspi1;

static
void xmit_spi(BYTE Data)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000fce:	bf00      	nop
 8000fd0:	4808      	ldr	r0, [pc, #32]	; (8000ff4 <xmit_spi+0x30>)
 8000fd2:	f008 fa1b 	bl	800940c <HAL_SPI_GetState>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d1f9      	bne.n	8000fd0 <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 5000);
 8000fdc:	1df9      	adds	r1, r7, #7
 8000fde:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <xmit_spi+0x30>)
 8000fe6:	f007 ff3b 	bl	8008e60 <HAL_SPI_Transmit>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2001372c 	.word	0x2001372c

08000ff8 <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 8000ffe:	23ff      	movs	r3, #255	; 0xff
 8001000:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8001006:	bf00      	nop
 8001008:	4809      	ldr	r0, [pc, #36]	; (8001030 <rcvr_spi+0x38>)
 800100a:	f008 f9ff 	bl	800940c <HAL_SPI_GetState>
 800100e:	4603      	mov	r3, r0
 8001010:	2b01      	cmp	r3, #1
 8001012:	d1f9      	bne.n	8001008 <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi1, &Dummy, &Data, 1, 5000);
 8001014:	1dba      	adds	r2, r7, #6
 8001016:	1df9      	adds	r1, r7, #7
 8001018:	f241 3388 	movw	r3, #5000	; 0x1388
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	2301      	movs	r3, #1
 8001020:	4803      	ldr	r0, [pc, #12]	; (8001030 <rcvr_spi+0x38>)
 8001022:	f008 f851 	bl	80090c8 <HAL_SPI_TransmitReceive>

	return Data;
 8001026:	79bb      	ldrb	r3, [r7, #6]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	2001372c 	.word	0x2001372c

08001034 <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 800103c:	f7ff ffdc 	bl	8000ff8 <rcvr_spi>
 8001040:	4603      	mov	r3, r0
 8001042:	461a      	mov	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	701a      	strb	r2, [r3, #0]
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <wait_ready+0x34>)
 8001058:	2232      	movs	r2, #50	; 0x32
 800105a:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 800105c:	f7ff ffcc 	bl	8000ff8 <rcvr_spi>
	do
		res = rcvr_spi();
 8001060:	f7ff ffca 	bl	8000ff8 <rcvr_spi>
 8001064:	4603      	mov	r3, r0
 8001066:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	2bff      	cmp	r3, #255	; 0xff
 800106c:	d004      	beq.n	8001078 <wait_ready+0x28>
 800106e:	4b05      	ldr	r3, [pc, #20]	; (8001084 <wait_ready+0x34>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1f3      	bne.n	8001060 <wait_ready+0x10>

	return res;
 8001078:	79fb      	ldrb	r3, [r7, #7]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000205 	.word	0x20000205

08001088 <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 800108e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001092:	60bb      	str	r3, [r7, #8]

	DESELECT();
 8001094:	f7ff ff8e 	bl	8000fb4 <DESELECT>

	for (i = 0; i < 10; i++)
 8001098:	2300      	movs	r3, #0
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	e005      	b.n	80010aa <power_on+0x22>
		xmit_spi(0xFF);
 800109e:	20ff      	movs	r0, #255	; 0xff
 80010a0:	f7ff ff90 	bl	8000fc4 <xmit_spi>
	for (i = 0; i < 10; i++)
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	3301      	adds	r3, #1
 80010a8:	73fb      	strb	r3, [r7, #15]
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	2b09      	cmp	r3, #9
 80010ae:	d9f6      	bls.n	800109e <power_on+0x16>

	SELECT();
 80010b0:	f7ff ff79 	bl	8000fa6 <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 80010b4:	2340      	movs	r3, #64	; 0x40
 80010b6:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 80010c8:	2395      	movs	r3, #149	; 0x95
 80010ca:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 80010cc:	2300      	movs	r3, #0
 80010ce:	73fb      	strb	r3, [r7, #15]
 80010d0:	e00b      	b.n	80010ea <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	f107 0210 	add.w	r2, r7, #16
 80010d8:	4413      	add	r3, r2
 80010da:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff ff70 	bl	8000fc4 <xmit_spi>
	for (i = 0; i < 6; i++)
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	3301      	adds	r3, #1
 80010e8:	73fb      	strb	r3, [r7, #15]
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	2b05      	cmp	r3, #5
 80010ee:	d9f0      	bls.n	80010d2 <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 80010f0:	e002      	b.n	80010f8 <power_on+0x70>
		Count--;
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 80010f8:	f7ff ff7e 	bl	8000ff8 <rcvr_spi>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d002      	beq.n	8001108 <power_on+0x80>
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1f4      	bne.n	80010f2 <power_on+0x6a>

	DESELECT();
 8001108:	f7ff ff54 	bl	8000fb4 <DESELECT>
	xmit_spi(0XFF);
 800110c:	20ff      	movs	r0, #255	; 0xff
 800110e:	f7ff ff59 	bl	8000fc4 <xmit_spi>

	PowerFlag = 1;
 8001112:	4b03      	ldr	r3, [pc, #12]	; (8001120 <power_on+0x98>)
 8001114:	2201      	movs	r2, #1
 8001116:	701a      	strb	r2, [r3, #0]
}
 8001118:	bf00      	nop
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000207 	.word	0x20000207

08001124 <power_off>:

static
void power_off(void) {
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <power_off+0x14>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	20000207 	.word	0x20000207

0800113c <chk_power>:

static
int chk_power(void) /* Socket power state: 0=off, 1=on */
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <chk_power+0x14>)
 8001142:	781b      	ldrb	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000207 	.word	0x20000207

08001154 <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <rcvr_datablock+0x68>)
 8001160:	220a      	movs	r2, #10
 8001162:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 8001164:	f7ff ff48 	bl	8000ff8 <rcvr_spi>
 8001168:	4603      	mov	r3, r0
 800116a:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	2bff      	cmp	r3, #255	; 0xff
 8001170:	d104      	bne.n	800117c <rcvr_datablock+0x28>
 8001172:	4b12      	ldr	r3, [pc, #72]	; (80011bc <rcvr_datablock+0x68>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1f3      	bne.n	8001164 <rcvr_datablock+0x10>
	if (token != 0xFE)
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	2bfe      	cmp	r3, #254	; 0xfe
 8001180:	d001      	beq.n	8001186 <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 8001182:	2300      	movs	r3, #0
 8001184:	e016      	b.n	80011b4 <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	1c5a      	adds	r2, r3, #1
 800118a:	607a      	str	r2, [r7, #4]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff51 	bl	8001034 <rcvr_spi_m>
		rcvr_spi_m(buff++);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	1c5a      	adds	r2, r3, #1
 8001196:	607a      	str	r2, [r7, #4]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff4b 	bl	8001034 <rcvr_spi_m>
	} while (btr -= 2);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	3b02      	subs	r3, #2
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1ed      	bne.n	8001186 <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 80011aa:	f7ff ff25 	bl	8000ff8 <rcvr_spi>
	rcvr_spi();
 80011ae:	f7ff ff23 	bl	8000ff8 <rcvr_spi>

	return TRUE; /* Return with success */
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000204 	.word	0x20000204

080011c0 <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 80011d0:	f7ff ff3e 	bl	8001050 <wait_ready>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2bff      	cmp	r3, #255	; 0xff
 80011d8:	d001      	beq.n	80011de <xmit_datablock+0x1e>
		return FALSE;
 80011da:	2300      	movs	r3, #0
 80011dc:	e040      	b.n	8001260 <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 80011de:	78fb      	ldrb	r3, [r7, #3]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff feef 	bl	8000fc4 <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 80011e6:	78fb      	ldrb	r3, [r7, #3]
 80011e8:	2bfd      	cmp	r3, #253	; 0xfd
 80011ea:	d031      	beq.n	8001250 <xmit_datablock+0x90>
		wc = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	607a      	str	r2, [r7, #4]
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fee3 	bl	8000fc4 <xmit_spi>
			xmit_spi(*buff++);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	1c5a      	adds	r2, r3, #1
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fedc 	bl	8000fc4 <xmit_spi>
		} while (--wc);
 800120c:	7bbb      	ldrb	r3, [r7, #14]
 800120e:	3b01      	subs	r3, #1
 8001210:	73bb      	strb	r3, [r7, #14]
 8001212:	7bbb      	ldrb	r3, [r7, #14]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1eb      	bne.n	80011f0 <xmit_datablock+0x30>

		rcvr_spi();
 8001218:	f7ff feee 	bl	8000ff8 <rcvr_spi>
		rcvr_spi();
 800121c:	f7ff feec 	bl	8000ff8 <rcvr_spi>

		while (i <= 64) {
 8001220:	e00b      	b.n	800123a <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 8001222:	f7ff fee9 	bl	8000ff8 <rcvr_spi>
 8001226:	4603      	mov	r3, r0
 8001228:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	f003 031f 	and.w	r3, r3, #31
 8001230:	2b05      	cmp	r3, #5
 8001232:	d006      	beq.n	8001242 <xmit_datablock+0x82>
				break;
			i++;
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	3301      	adds	r3, #1
 8001238:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	2b40      	cmp	r3, #64	; 0x40
 800123e:	d9f0      	bls.n	8001222 <xmit_datablock+0x62>
 8001240:	e000      	b.n	8001244 <xmit_datablock+0x84>
				break;
 8001242:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 8001244:	bf00      	nop
 8001246:	f7ff fed7 	bl	8000ff8 <rcvr_spi>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0fa      	beq.n	8001246 <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	f003 031f 	and.w	r3, r3, #31
 8001256:	2b05      	cmp	r3, #5
 8001258:	d101      	bne.n	800125e <xmit_datablock+0x9e>
		return TRUE;
 800125a:	2301      	movs	r3, #1
 800125c:	e000      	b.n	8001260 <xmit_datablock+0xa0>
	else
		return FALSE;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 8001274:	f7ff feec 	bl	8001050 <wait_ready>
 8001278:	4603      	mov	r3, r0
 800127a:	2bff      	cmp	r3, #255	; 0xff
 800127c:	d001      	beq.n	8001282 <send_cmd+0x1a>
		return 0xFF;
 800127e:	23ff      	movs	r3, #255	; 0xff
 8001280:	e040      	b.n	8001304 <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fe9d 	bl	8000fc4 <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	0e1b      	lsrs	r3, r3, #24
 800128e:	b2db      	uxtb	r3, r3
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fe97 	bl	8000fc4 <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	0c1b      	lsrs	r3, r3, #16
 800129a:	b2db      	uxtb	r3, r3
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fe91 	bl	8000fc4 <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	0a1b      	lsrs	r3, r3, #8
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fe8b 	bl	8000fc4 <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fe86 	bl	8000fc4 <xmit_spi>
	n = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	2b40      	cmp	r3, #64	; 0x40
 80012c0:	d101      	bne.n	80012c6 <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 80012c2:	2395      	movs	r3, #149	; 0x95
 80012c4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b48      	cmp	r3, #72	; 0x48
 80012ca:	d101      	bne.n	80012d0 <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 80012cc:	2387      	movs	r3, #135	; 0x87
 80012ce:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fe76 	bl	8000fc4 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	2b4c      	cmp	r3, #76	; 0x4c
 80012dc:	d101      	bne.n	80012e2 <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 80012de:	f7ff fe8b 	bl	8000ff8 <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 80012e2:	230a      	movs	r3, #10
 80012e4:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 80012e6:	f7ff fe87 	bl	8000ff8 <rcvr_spi>
 80012ea:	4603      	mov	r3, r0
 80012ec:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 80012ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	da05      	bge.n	8001302 <send_cmd+0x9a>
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	3b01      	subs	r3, #1
 80012fa:	73fb      	strb	r3, [r7, #15]
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f1      	bne.n	80012e6 <send_cmd+0x7e>

	return res; /* Return with the response value */
 8001302:	7bbb      	ldrb	r3, [r7, #14]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 800130c:	b590      	push	{r4, r7, lr}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 800131c:	2301      	movs	r3, #1
 800131e:	e0d5      	b.n	80014cc <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 8001320:	4b6c      	ldr	r3, [pc, #432]	; (80014d4 <disk_initialize+0x1c8>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 800132e:	4b69      	ldr	r3, [pc, #420]	; (80014d4 <disk_initialize+0x1c8>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	b2db      	uxtb	r3, r3
 8001334:	e0ca      	b.n	80014cc <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 8001336:	f7ff fea7 	bl	8001088 <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 800133a:	f7ff fe34 	bl	8000fa6 <SELECT>
	ty = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 8001342:	2100      	movs	r1, #0
 8001344:	2040      	movs	r0, #64	; 0x40
 8001346:	f7ff ff8f 	bl	8001268 <send_cmd>
 800134a:	4603      	mov	r3, r0
 800134c:	2b01      	cmp	r3, #1
 800134e:	f040 80a5 	bne.w	800149c <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 8001352:	4b61      	ldr	r3, [pc, #388]	; (80014d8 <disk_initialize+0x1cc>)
 8001354:	2264      	movs	r2, #100	; 0x64
 8001356:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 8001358:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800135c:	2048      	movs	r0, #72	; 0x48
 800135e:	f7ff ff83 	bl	8001268 <send_cmd>
 8001362:	4603      	mov	r3, r0
 8001364:	2b01      	cmp	r3, #1
 8001366:	d158      	bne.n	800141a <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	e00c      	b.n	8001388 <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 800136e:	7bfc      	ldrb	r4, [r7, #15]
 8001370:	f7ff fe42 	bl	8000ff8 <rcvr_spi>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	4423      	add	r3, r4
 800137e:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	3301      	adds	r3, #1
 8001386:	73fb      	strb	r3, [r7, #15]
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	2b03      	cmp	r3, #3
 800138c:	d9ef      	bls.n	800136e <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 800138e:	7abb      	ldrb	r3, [r7, #10]
 8001390:	2b01      	cmp	r3, #1
 8001392:	f040 8083 	bne.w	800149c <disk_initialize+0x190>
 8001396:	7afb      	ldrb	r3, [r7, #11]
 8001398:	2baa      	cmp	r3, #170	; 0xaa
 800139a:	d17f      	bne.n	800149c <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 800139c:	2100      	movs	r1, #0
 800139e:	2077      	movs	r0, #119	; 0x77
 80013a0:	f7ff ff62 	bl	8001268 <send_cmd>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d807      	bhi.n	80013ba <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 80013aa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80013ae:	2069      	movs	r0, #105	; 0x69
 80013b0:	f7ff ff5a 	bl	8001268 <send_cmd>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d005      	beq.n	80013c6 <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 80013ba:	4b47      	ldr	r3, [pc, #284]	; (80014d8 <disk_initialize+0x1cc>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1eb      	bne.n	800139c <disk_initialize+0x90>
 80013c4:	e000      	b.n	80013c8 <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 80013c6:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 80013c8:	4b43      	ldr	r3, [pc, #268]	; (80014d8 <disk_initialize+0x1cc>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d064      	beq.n	800149c <disk_initialize+0x190>
 80013d2:	2100      	movs	r1, #0
 80013d4:	207a      	movs	r0, #122	; 0x7a
 80013d6:	f7ff ff47 	bl	8001268 <send_cmd>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d15d      	bne.n	800149c <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 80013e0:	2300      	movs	r3, #0
 80013e2:	73fb      	strb	r3, [r7, #15]
 80013e4:	e00c      	b.n	8001400 <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 80013e6:	7bfc      	ldrb	r4, [r7, #15]
 80013e8:	f7ff fe06 	bl	8000ff8 <rcvr_spi>
 80013ec:	4603      	mov	r3, r0
 80013ee:	461a      	mov	r2, r3
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	4423      	add	r3, r4
 80013f6:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	3301      	adds	r3, #1
 80013fe:	73fb      	strb	r3, [r7, #15]
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	2b03      	cmp	r3, #3
 8001404:	d9ef      	bls.n	80013e6 <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 8001406:	7a3b      	ldrb	r3, [r7, #8]
 8001408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <disk_initialize+0x108>
 8001410:	2306      	movs	r3, #6
 8001412:	e000      	b.n	8001416 <disk_initialize+0x10a>
 8001414:	2302      	movs	r3, #2
 8001416:	73bb      	strb	r3, [r7, #14]
 8001418:	e040      	b.n	800149c <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800141a:	2100      	movs	r1, #0
 800141c:	2077      	movs	r0, #119	; 0x77
 800141e:	f7ff ff23 	bl	8001268 <send_cmd>
 8001422:	4603      	mov	r3, r0
 8001424:	2b01      	cmp	r3, #1
 8001426:	d808      	bhi.n	800143a <disk_initialize+0x12e>
 8001428:	2100      	movs	r1, #0
 800142a:	2069      	movs	r0, #105	; 0x69
 800142c:	f7ff ff1c 	bl	8001268 <send_cmd>
 8001430:	4603      	mov	r3, r0
 8001432:	2b01      	cmp	r3, #1
 8001434:	d801      	bhi.n	800143a <disk_initialize+0x12e>
 8001436:	2302      	movs	r3, #2
 8001438:	e000      	b.n	800143c <disk_initialize+0x130>
 800143a:	2301      	movs	r3, #1
 800143c:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 800143e:	7bbb      	ldrb	r3, [r7, #14]
 8001440:	2b02      	cmp	r3, #2
 8001442:	d10e      	bne.n	8001462 <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 8001444:	2100      	movs	r1, #0
 8001446:	2077      	movs	r0, #119	; 0x77
 8001448:	f7ff ff0e 	bl	8001268 <send_cmd>
 800144c:	4603      	mov	r3, r0
 800144e:	2b01      	cmp	r3, #1
 8001450:	d80e      	bhi.n	8001470 <disk_initialize+0x164>
 8001452:	2100      	movs	r1, #0
 8001454:	2069      	movs	r0, #105	; 0x69
 8001456:	f7ff ff07 	bl	8001268 <send_cmd>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d107      	bne.n	8001470 <disk_initialize+0x164>
						break; /* ACMD41 */
 8001460:	e00d      	b.n	800147e <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 8001462:	2100      	movs	r1, #0
 8001464:	2041      	movs	r0, #65	; 0x41
 8001466:	f7ff feff 	bl	8001268 <send_cmd>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 8001470:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <disk_initialize+0x1cc>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1e1      	bne.n	800143e <disk_initialize+0x132>
 800147a:	e000      	b.n	800147e <disk_initialize+0x172>
						break; /* CMD1 */
 800147c:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <disk_initialize+0x1cc>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b00      	cmp	r3, #0
 8001486:	d007      	beq.n	8001498 <disk_initialize+0x18c>
 8001488:	f44f 7100 	mov.w	r1, #512	; 0x200
 800148c:	2050      	movs	r0, #80	; 0x50
 800148e:	f7ff feeb 	bl	8001268 <send_cmd>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <disk_initialize+0x190>
				ty = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 800149c:	4a0f      	ldr	r2, [pc, #60]	; (80014dc <disk_initialize+0x1d0>)
 800149e:	7bbb      	ldrb	r3, [r7, #14]
 80014a0:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 80014a2:	f7ff fd87 	bl	8000fb4 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80014a6:	f7ff fda7 	bl	8000ff8 <rcvr_spi>

	if (ty) /* Initialization succeded */
 80014aa:	7bbb      	ldrb	r3, [r7, #14]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d008      	beq.n	80014c2 <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <disk_initialize+0x1c8>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	f023 0301 	bic.w	r3, r3, #1
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <disk_initialize+0x1c8>)
 80014be:	701a      	strb	r2, [r3, #0]
 80014c0:	e001      	b.n	80014c6 <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 80014c2:	f7ff fe2f 	bl	8001124 <power_off>

	return Stat;
 80014c6:	4b03      	ldr	r3, [pc, #12]	; (80014d4 <disk_initialize+0x1c8>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	b2db      	uxtb	r3, r3
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd90      	pop	{r4, r7, pc}
 80014d4:	20000000 	.word	0x20000000
 80014d8:	20000204 	.word	0x20000204
 80014dc:	20000206 	.word	0x20000206

080014e0 <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
	if (drv)
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 80014f0:	2301      	movs	r3, #1
 80014f2:	e002      	b.n	80014fa <disk_status+0x1a>
	return Stat;
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <disk_status+0x28>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b2db      	uxtb	r3, r3
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000000 	.word	0x20000000

0800150c <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	4603      	mov	r3, r0
 800151a:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d102      	bne.n	8001528 <disk_read+0x1c>
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <disk_read+0x20>
		return RES_PARERR;
 8001528:	2304      	movs	r3, #4
 800152a:	e051      	b.n	80015d0 <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 800152c:	4b2a      	ldr	r3, [pc, #168]	; (80015d8 <disk_read+0xcc>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <disk_read+0x32>
		return RES_NOTRDY;
 800153a:	2303      	movs	r3, #3
 800153c:	e048      	b.n	80015d0 <disk_read+0xc4>

	if (!(CardType & 4))
 800153e:	4b27      	ldr	r3, [pc, #156]	; (80015dc <disk_read+0xd0>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	2b00      	cmp	r3, #0
 8001548:	d102      	bne.n	8001550 <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	025b      	lsls	r3, r3, #9
 800154e:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8001550:	f7ff fd29 	bl	8000fa6 <SELECT>

	if (count == 1) { /* Single block read */
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d111      	bne.n	800157e <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	2051      	movs	r0, #81	; 0x51
 800155e:	f7ff fe83 	bl	8001268 <send_cmd>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d129      	bne.n	80015bc <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 8001568:	f44f 7100 	mov.w	r1, #512	; 0x200
 800156c:	68b8      	ldr	r0, [r7, #8]
 800156e:	f7ff fdf1 	bl	8001154 <rcvr_datablock>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d021      	beq.n	80015bc <disk_read+0xb0>
			count = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	e01e      	b.n	80015bc <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	2052      	movs	r0, #82	; 0x52
 8001582:	f7ff fe71 	bl	8001268 <send_cmd>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d117      	bne.n	80015bc <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 800158c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001590:	68b8      	ldr	r0, [r7, #8]
 8001592:	f7ff fddf 	bl	8001154 <rcvr_datablock>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00a      	beq.n	80015b2 <disk_read+0xa6>
					break;
				buff += 512;
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80015a2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1ed      	bne.n	800158c <disk_read+0x80>
 80015b0:	e000      	b.n	80015b4 <disk_read+0xa8>
					break;
 80015b2:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 80015b4:	2100      	movs	r1, #0
 80015b6:	204c      	movs	r0, #76	; 0x4c
 80015b8:	f7ff fe56 	bl	8001268 <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 80015bc:	f7ff fcfa 	bl	8000fb4 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80015c0:	f7ff fd1a 	bl	8000ff8 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	bf14      	ite	ne
 80015ca:	2301      	movne	r3, #1
 80015cc:	2300      	moveq	r3, #0
 80015ce:	b2db      	uxtb	r3, r3
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000000 	.word	0x20000000
 80015dc:	20000206 	.word	0x20000206

080015e0 <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	4603      	mov	r3, r0
 80015ee:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d102      	bne.n	80015fc <disk_write+0x1c>
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <disk_write+0x20>
		return RES_PARERR;
 80015fc:	2304      	movs	r3, #4
 80015fe:	e06b      	b.n	80016d8 <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 8001600:	4b37      	ldr	r3, [pc, #220]	; (80016e0 <disk_write+0x100>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <disk_write+0x32>
		return RES_NOTRDY;
 800160e:	2303      	movs	r3, #3
 8001610:	e062      	b.n	80016d8 <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 8001612:	4b33      	ldr	r3, [pc, #204]	; (80016e0 <disk_write+0x100>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <disk_write+0x44>
		return RES_WRPRT;
 8001620:	2302      	movs	r3, #2
 8001622:	e059      	b.n	80016d8 <disk_write+0xf8>

	if (!(CardType & 4))
 8001624:	4b2f      	ldr	r3, [pc, #188]	; (80016e4 <disk_write+0x104>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	d102      	bne.n	8001636 <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	025b      	lsls	r3, r3, #9
 8001634:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8001636:	f7ff fcb6 	bl	8000fa6 <SELECT>

	if (count == 1) { /* Single block write */
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d110      	bne.n	8001662 <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	2058      	movs	r0, #88	; 0x58
 8001644:	f7ff fe10 	bl	8001268 <send_cmd>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d13a      	bne.n	80016c4 <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 800164e:	21fe      	movs	r1, #254	; 0xfe
 8001650:	68b8      	ldr	r0, [r7, #8]
 8001652:	f7ff fdb5 	bl	80011c0 <xmit_datablock>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d033      	beq.n	80016c4 <disk_write+0xe4>
			count = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	e030      	b.n	80016c4 <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 8001662:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <disk_write+0x104>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d007      	beq.n	800167e <disk_write+0x9e>
			send_cmd(CMD55, 0);
 800166e:	2100      	movs	r1, #0
 8001670:	2077      	movs	r0, #119	; 0x77
 8001672:	f7ff fdf9 	bl	8001268 <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 8001676:	6839      	ldr	r1, [r7, #0]
 8001678:	2057      	movs	r0, #87	; 0x57
 800167a:	f7ff fdf5 	bl	8001268 <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	2059      	movs	r0, #89	; 0x59
 8001682:	f7ff fdf1 	bl	8001268 <send_cmd>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d11b      	bne.n	80016c4 <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 800168c:	21fc      	movs	r1, #252	; 0xfc
 800168e:	68b8      	ldr	r0, [r7, #8]
 8001690:	f7ff fd96 	bl	80011c0 <xmit_datablock>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00a      	beq.n	80016b0 <disk_write+0xd0>
					break;
				buff += 512;
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80016a0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1ee      	bne.n	800168c <disk_write+0xac>
 80016ae:	e000      	b.n	80016b2 <disk_write+0xd2>
					break;
 80016b0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 80016b2:	21fd      	movs	r1, #253	; 0xfd
 80016b4:	2000      	movs	r0, #0
 80016b6:	f7ff fd83 	bl	80011c0 <xmit_datablock>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <disk_write+0xe4>
				count = 1;
 80016c0:	2301      	movs	r3, #1
 80016c2:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 80016c4:	f7ff fc76 	bl	8000fb4 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80016c8:	f7ff fc96 	bl	8000ff8 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	bf14      	ite	ne
 80016d2:	2301      	movne	r3, #1
 80016d4:	2300      	moveq	r3, #0
 80016d6:	b2db      	uxtb	r3, r3
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000000 	.word	0x20000000
 80016e4:	20000206 	.word	0x20000206

080016e8 <disk_ioctl>:
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE drv, /* Physical drive nmuber (0) */
BYTE ctrl, /* Control code */
void *buff /* Buffer to send/receive control data */
) {
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b08b      	sub	sp, #44	; 0x2c
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	603a      	str	r2, [r7, #0]
 80016f2:	71fb      	strb	r3, [r7, #7]
 80016f4:	460b      	mov	r3, r1
 80016f6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (drv)
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <disk_ioctl+0x1e>
		return RES_PARERR;
 8001702:	2304      	movs	r3, #4
 8001704:	e16a      	b.n	80019dc <disk_ioctl+0x2f4>

	res = RES_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER_OFF) {
 800170c:	79bb      	ldrb	r3, [r7, #6]
 800170e:	2b07      	cmp	r3, #7
 8001710:	d127      	bne.n	8001762 <disk_ioctl+0x7a>
		switch (*ptr) {
 8001712:	6a3b      	ldr	r3, [r7, #32]
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d00e      	beq.n	8001738 <disk_ioctl+0x50>
 800171a:	2b02      	cmp	r3, #2
 800171c:	d012      	beq.n	8001744 <disk_ioctl+0x5c>
 800171e:	2b00      	cmp	r3, #0
 8001720:	d11b      	bne.n	800175a <disk_ioctl+0x72>
		case 0: /* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
 8001722:	f7ff fd0b 	bl	800113c <chk_power>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <disk_ioctl+0x48>
				power_off(); /* Power off */
 800172c:	f7ff fcfa 	bl	8001124 <power_off>
			res = RES_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001736:	e14f      	b.n	80019d8 <disk_ioctl+0x2f0>
		case 1: /* Sub control code == 1 (POWER_ON) */
			power_on(); /* Power on */
 8001738:	f7ff fca6 	bl	8001088 <power_on>
			res = RES_OK;
 800173c:	2300      	movs	r3, #0
 800173e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001742:	e149      	b.n	80019d8 <disk_ioctl+0x2f0>
		case 2: /* Sub control code == 2 (POWER_GET) */
			*(ptr + 1) = (BYTE) chk_power();
 8001744:	f7ff fcfa 	bl	800113c <chk_power>
 8001748:	4602      	mov	r2, r0
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	3301      	adds	r3, #1
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 8001752:	2300      	movs	r3, #0
 8001754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001758:	e13e      	b.n	80019d8 <disk_ioctl+0x2f0>
		default:
			res = RES_PARERR;
 800175a:	2304      	movs	r3, #4
 800175c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001760:	e13a      	b.n	80019d8 <disk_ioctl+0x2f0>
		}
	} else {
		if (Stat & STA_NOINIT)
 8001762:	4ba0      	ldr	r3, [pc, #640]	; (80019e4 <disk_ioctl+0x2fc>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <disk_ioctl+0x8c>
			return RES_NOTRDY;
 8001770:	2303      	movs	r3, #3
 8001772:	e133      	b.n	80019dc <disk_ioctl+0x2f4>

		SELECT(); /* CS = L */
 8001774:	f7ff fc17 	bl	8000fa6 <SELECT>

		switch (ctrl) {
 8001778:	79bb      	ldrb	r3, [r7, #6]
 800177a:	2b35      	cmp	r3, #53	; 0x35
 800177c:	f200 811d 	bhi.w	80019ba <disk_ioctl+0x2d2>
 8001780:	a201      	add	r2, pc, #4	; (adr r2, 8001788 <disk_ioctl+0xa0>)
 8001782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001786:	bf00      	nop
 8001788:	08001923 	.word	0x08001923
 800178c:	08001861 	.word	0x08001861
 8001790:	08001913 	.word	0x08001913
 8001794:	080019bb 	.word	0x080019bb
 8001798:	080019bb 	.word	0x080019bb
 800179c:	080019bb 	.word	0x080019bb
 80017a0:	080019bb 	.word	0x080019bb
 80017a4:	080019bb 	.word	0x080019bb
 80017a8:	080019bb 	.word	0x080019bb
 80017ac:	080019bb 	.word	0x080019bb
 80017b0:	080019bb 	.word	0x080019bb
 80017b4:	080019bb 	.word	0x080019bb
 80017b8:	080019bb 	.word	0x080019bb
 80017bc:	080019bb 	.word	0x080019bb
 80017c0:	080019bb 	.word	0x080019bb
 80017c4:	080019bb 	.word	0x080019bb
 80017c8:	080019bb 	.word	0x080019bb
 80017cc:	080019bb 	.word	0x080019bb
 80017d0:	080019bb 	.word	0x080019bb
 80017d4:	080019bb 	.word	0x080019bb
 80017d8:	080019bb 	.word	0x080019bb
 80017dc:	080019bb 	.word	0x080019bb
 80017e0:	080019bb 	.word	0x080019bb
 80017e4:	080019bb 	.word	0x080019bb
 80017e8:	080019bb 	.word	0x080019bb
 80017ec:	080019bb 	.word	0x080019bb
 80017f0:	080019bb 	.word	0x080019bb
 80017f4:	080019bb 	.word	0x080019bb
 80017f8:	080019bb 	.word	0x080019bb
 80017fc:	080019bb 	.word	0x080019bb
 8001800:	080019bb 	.word	0x080019bb
 8001804:	080019bb 	.word	0x080019bb
 8001808:	080019bb 	.word	0x080019bb
 800180c:	080019bb 	.word	0x080019bb
 8001810:	080019bb 	.word	0x080019bb
 8001814:	080019bb 	.word	0x080019bb
 8001818:	080019bb 	.word	0x080019bb
 800181c:	080019bb 	.word	0x080019bb
 8001820:	080019bb 	.word	0x080019bb
 8001824:	080019bb 	.word	0x080019bb
 8001828:	080019bb 	.word	0x080019bb
 800182c:	080019bb 	.word	0x080019bb
 8001830:	080019bb 	.word	0x080019bb
 8001834:	080019bb 	.word	0x080019bb
 8001838:	080019bb 	.word	0x080019bb
 800183c:	080019bb 	.word	0x080019bb
 8001840:	080019bb 	.word	0x080019bb
 8001844:	080019bb 	.word	0x080019bb
 8001848:	080019bb 	.word	0x080019bb
 800184c:	080019bb 	.word	0x080019bb
 8001850:	080019bb 	.word	0x080019bb
 8001854:	08001935 	.word	0x08001935
 8001858:	08001959 	.word	0x08001959
 800185c:	0800197d 	.word	0x0800197d
		case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8001860:	2100      	movs	r1, #0
 8001862:	2049      	movs	r0, #73	; 0x49
 8001864:	f7ff fd00 	bl	8001268 <send_cmd>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	f040 80a9 	bne.w	80019c2 <disk_ioctl+0x2da>
 8001870:	f107 030c 	add.w	r3, r7, #12
 8001874:	2110      	movs	r1, #16
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fc6c 	bl	8001154 <rcvr_datablock>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 809f 	beq.w	80019c2 <disk_ioctl+0x2da>
				if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 8001884:	7b3b      	ldrb	r3, [r7, #12]
 8001886:	099b      	lsrs	r3, r3, #6
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b01      	cmp	r3, #1
 800188c:	d10e      	bne.n	80018ac <disk_ioctl+0x1c4>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800188e:	7d7b      	ldrb	r3, [r7, #21]
 8001890:	b29a      	uxth	r2, r3
 8001892:	7d3b      	ldrb	r3, [r7, #20]
 8001894:	b29b      	uxth	r3, r3
 8001896:	021b      	lsls	r3, r3, #8
 8001898:	b29b      	uxth	r3, r3
 800189a:	4413      	add	r3, r2
 800189c:	b29b      	uxth	r3, r3
 800189e:	3301      	adds	r3, #1
 80018a0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80018a2:	8bfb      	ldrh	r3, [r7, #30]
 80018a4:	029a      	lsls	r2, r3, #10
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	e02e      	b.n	800190a <disk_ioctl+0x222>
				} else { /* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 80018ac:	7c7b      	ldrb	r3, [r7, #17]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	7dbb      	ldrb	r3, [r7, #22]
 80018b6:	09db      	lsrs	r3, r3, #7
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	4413      	add	r3, r2
 80018bc:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 80018be:	7d7b      	ldrb	r3, [r7, #21]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	f003 0306 	and.w	r3, r3, #6
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	4413      	add	r3, r2
 80018cc:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 80018ce:	3302      	adds	r3, #2
 80018d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 80018d4:	7d3b      	ldrb	r3, [r7, #20]
 80018d6:	099b      	lsrs	r3, r3, #6
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	b29a      	uxth	r2, r3
 80018dc:	7cfb      	ldrb	r3, [r7, #19]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	4413      	add	r3, r2
 80018e6:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 80018e8:	7cbb      	ldrb	r3, [r7, #18]
 80018ea:	029b      	lsls	r3, r3, #10
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	4413      	add	r3, r2
 80018f6:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 80018f8:	3301      	adds	r3, #1
 80018fa:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80018fc:	8bfa      	ldrh	r2, [r7, #30]
 80018fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001902:	3b09      	subs	r3, #9
 8001904:	409a      	lsls	r2, r3
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800190a:	2300      	movs	r3, #0
 800190c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001910:	e057      	b.n	80019c2 <disk_ioctl+0x2da>

		case GET_SECTOR_SIZE: /* Get sectors on the disk (WORD) */
			*(WORD*) buff = 512;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001918:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001920:	e056      	b.n	80019d0 <disk_ioctl+0x2e8>

		case CTRL_SYNC: /* Make sure that data has been written */
			if (wait_ready() == 0xFF)
 8001922:	f7ff fb95 	bl	8001050 <wait_ready>
 8001926:	4603      	mov	r3, r0
 8001928:	2bff      	cmp	r3, #255	; 0xff
 800192a:	d14c      	bne.n	80019c6 <disk_ioctl+0x2de>
				res = RES_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001932:	e048      	b.n	80019c6 <disk_ioctl+0x2de>

		case MMC_GET_CSD: /* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0 /* READ_CSD */
 8001934:	2100      	movs	r1, #0
 8001936:	2049      	movs	r0, #73	; 0x49
 8001938:	f7ff fc96 	bl	8001268 <send_cmd>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d143      	bne.n	80019ca <disk_ioctl+0x2e2>
			&& rcvr_datablock(ptr, 16))
 8001942:	2110      	movs	r1, #16
 8001944:	6a38      	ldr	r0, [r7, #32]
 8001946:	f7ff fc05 	bl	8001154 <rcvr_datablock>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d03c      	beq.n	80019ca <disk_ioctl+0x2e2>
				res = RES_OK;
 8001950:	2300      	movs	r3, #0
 8001952:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001956:	e038      	b.n	80019ca <disk_ioctl+0x2e2>

		case MMC_GET_CID: /* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0 /* READ_CID */
 8001958:	2100      	movs	r1, #0
 800195a:	204a      	movs	r0, #74	; 0x4a
 800195c:	f7ff fc84 	bl	8001268 <send_cmd>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d133      	bne.n	80019ce <disk_ioctl+0x2e6>
			&& rcvr_datablock(ptr, 16))
 8001966:	2110      	movs	r1, #16
 8001968:	6a38      	ldr	r0, [r7, #32]
 800196a:	f7ff fbf3 	bl	8001154 <rcvr_datablock>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d02c      	beq.n	80019ce <disk_ioctl+0x2e6>
				res = RES_OK;
 8001974:	2300      	movs	r3, #0
 8001976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800197a:	e028      	b.n	80019ce <disk_ioctl+0x2e6>

		case MMC_GET_OCR: /* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) { /* READ_OCR */
 800197c:	2100      	movs	r1, #0
 800197e:	207a      	movs	r0, #122	; 0x7a
 8001980:	f7ff fc72 	bl	8001268 <send_cmd>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d117      	bne.n	80019ba <disk_ioctl+0x2d2>
				for (n = 0; n < 4; n++)
 800198a:	2300      	movs	r3, #0
 800198c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001990:	e00b      	b.n	80019aa <disk_ioctl+0x2c2>
					*ptr++ = rcvr_spi();
 8001992:	6a3c      	ldr	r4, [r7, #32]
 8001994:	1c63      	adds	r3, r4, #1
 8001996:	623b      	str	r3, [r7, #32]
 8001998:	f7ff fb2e 	bl	8000ff8 <rcvr_spi>
 800199c:	4603      	mov	r3, r0
 800199e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80019a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80019a4:	3301      	adds	r3, #1
 80019a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80019aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d9ef      	bls.n	8001992 <disk_ioctl+0x2aa>
				res = RES_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 80019b8:	e00a      	b.n	80019d0 <disk_ioctl+0x2e8>
//            *ptr = CardType;
//            res = RES_OK;
//            break;

		default:
			res = RES_PARERR;
 80019ba:	2304      	movs	r3, #4
 80019bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80019c0:	e006      	b.n	80019d0 <disk_ioctl+0x2e8>
			break;
 80019c2:	bf00      	nop
 80019c4:	e004      	b.n	80019d0 <disk_ioctl+0x2e8>
			break;
 80019c6:	bf00      	nop
 80019c8:	e002      	b.n	80019d0 <disk_ioctl+0x2e8>
			break;
 80019ca:	bf00      	nop
 80019cc:	e000      	b.n	80019d0 <disk_ioctl+0x2e8>
			break;
 80019ce:	bf00      	nop
		}

		DESELECT(); /* CS = H */
 80019d0:	f7ff faf0 	bl	8000fb4 <DESELECT>
		rcvr_spi(); /* Idle (Release DO) */
 80019d4:	f7ff fb10 	bl	8000ff8 <rcvr_spi>
	}

	return res;
 80019d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80019dc:	4618      	mov	r0, r3
 80019de:	372c      	adds	r7, #44	; 0x2c
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd90      	pop	{r4, r7, pc}
 80019e4:	20000000 	.word	0x20000000

080019e8 <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 80019ee:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <disk_timerproc+0x44>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	71fb      	strb	r3, [r7, #7]
	if (n)
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d005      	beq.n	8001a06 <disk_timerproc+0x1e>
		Timer1 = --n;
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	3b01      	subs	r3, #1
 80019fe:	71fb      	strb	r3, [r7, #7]
 8001a00:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <disk_timerproc+0x44>)
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 8001a06:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <disk_timerproc+0x48>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	71fb      	strb	r3, [r7, #7]
	if (n)
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d005      	beq.n	8001a1e <disk_timerproc+0x36>
		Timer2 = --n;
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	71fb      	strb	r3, [r7, #7]
 8001a18:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <disk_timerproc+0x48>)
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	7013      	strb	r3, [r2, #0]

}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20000204 	.word	0x20000204
 8001a30:	20000205 	.word	0x20000205

08001a34 <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
	++sdcard_timer;
 8001a38:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <sdcard_systick_timerproc+0x2c>)
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	3301      	adds	r3, #1
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <sdcard_systick_timerproc+0x2c>)
 8001a44:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <sdcard_systick_timerproc+0x2c>)
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	2b09      	cmp	r3, #9
 8001a4e:	d904      	bls.n	8001a5a <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 8001a50:	4b03      	ldr	r3, [pc, #12]	; (8001a60 <sdcard_systick_timerproc+0x2c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 8001a56:	f7ff ffc7 	bl	80019e8 <disk_timerproc>
	}
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000468 	.word	0x20000468

08001a64 <get_fattime>:
/*---------------------------------------------------------*/
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime(void) {
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0

	return ((2007UL - 1980) << 25) // Year = 2007
 8001a68:	4b02      	ldr	r3, [pc, #8]	; (8001a74 <get_fattime+0x10>)
			| (11U << 11) // Hour = 11
			| (38U << 5) // Min = 38
			| (0U >> 1) // Sec = 0
	;

}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	36c55cc0 	.word	0x36c55cc0

08001a78 <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <DWT_Init+0x38>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10e      	bne.n	8001aa6 <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <DWT_Init+0x38>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	4a08      	ldr	r2, [pc, #32]	; (8001ab0 <DWT_Init+0x38>)
 8001a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a92:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <DWT_Init+0x3c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <DWT_Init+0x3c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a05      	ldr	r2, [pc, #20]	; (8001ab4 <DWT_Init+0x3c>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6013      	str	r3, [r2, #0]
    }
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000edf0 	.word	0xe000edf0
 8001ab4:	e0001000 	.word	0xe0001000

08001ab8 <DWT_Delay>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8001ac0:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <DWT_Delay+0x40>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <DWT_Delay+0x44>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a0d      	ldr	r2, [pc, #52]	; (8001b00 <DWT_Delay+0x48>)
 8001acc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad0:	0c9a      	lsrs	r2, r3, #18
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	fb02 f303 	mul.w	r3, r2, r3
 8001ad8:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8001ada:	bf00      	nop
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <DWT_Delay+0x40>)
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	68ba      	ldr	r2, [r7, #8]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d8f8      	bhi.n	8001adc <DWT_Delay+0x24>
}
 8001aea:	bf00      	nop
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	e0001000 	.word	0xe0001000
 8001afc:	2000000c 	.word	0x2000000c
 8001b00:	431bde83 	.word	0x431bde83

08001b04 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8001b14:	89fb      	ldrh	r3, [r7, #14]
 8001b16:	021b      	lsls	r3, r3, #8
 8001b18:	b21a      	sxth	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	b21b      	sxth	r3, r3
 8001b20:	4313      	orrs	r3, r2
 8001b22:	b21b      	sxth	r3, r3
 8001b24:	81fb      	strh	r3, [r7, #14]
	return rv;
 8001b26:	89fb      	ldrh	r3, [r7, #14]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3303      	adds	r3, #3
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	021b      	lsls	r3, r3, #8
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	3202      	adds	r2, #2
 8001b4c:	7812      	ldrb	r2, [r2, #0]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	021b      	lsls	r3, r3, #8
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	3201      	adds	r2, #1
 8001b5a:	7812      	ldrb	r2, [r2, #0]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	021b      	lsls	r3, r3, #8
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	7812      	ldrb	r2, [r2, #0]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	60fb      	str	r3, [r7, #12]
	return rv;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	460b      	mov	r3, r1
 8001b84:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	887a      	ldrh	r2, [r7, #2]
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	701a      	strb	r2, [r3, #0]
 8001b92:	887b      	ldrh	r3, [r7, #2]
 8001b94:	0a1b      	lsrs	r3, r3, #8
 8001b96:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	1c5a      	adds	r2, r3, #1
 8001b9c:	607a      	str	r2, [r7, #4]
 8001b9e:	887a      	ldrh	r2, [r7, #2]
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	701a      	strb	r2, [r3, #0]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	607a      	str	r2, [r7, #4]
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	701a      	strb	r2, [r3, #0]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	0a1b      	lsrs	r3, r3, #8
 8001bca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	607a      	str	r2, [r7, #4]
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	701a      	strb	r2, [r3, #0]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	701a      	strb	r2, [r3, #0]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	0a1b      	lsrs	r3, r3, #8
 8001bee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	607a      	str	r2, [r7, #4]
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	701a      	strb	r2, [r3, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	613b      	str	r3, [r7, #16]

	if (cnt != 0) {
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00d      	beq.n	8001c3e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	1c53      	adds	r3, r2, #1
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	1c59      	adds	r1, r3, #1
 8001c2c:	6179      	str	r1, [r7, #20]
 8001c2e:	7812      	ldrb	r2, [r2, #0]
 8001c30:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3b01      	subs	r3, #1
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f1      	bne.n	8001c22 <mem_cpy+0x1a>
	}
}
 8001c3e:	bf00      	nop
 8001c40:	371c      	adds	r7, #28
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <mem_set>:


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b087      	sub	sp, #28
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	60f8      	str	r0, [r7, #12]
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	1c5a      	adds	r2, r3, #1
 8001c5e:	617a      	str	r2, [r7, #20]
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f3      	bne.n	8001c5a <mem_set+0x10>
}
 8001c72:	bf00      	nop
 8001c74:	371c      	adds	r7, #28
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b089      	sub	sp, #36	; 0x24
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	60f8      	str	r0, [r7, #12]
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	61fb      	str	r3, [r7, #28]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	1c5a      	adds	r2, r3, #1
 8001c9a:	61fa      	str	r2, [r7, #28]
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	61ba      	str	r2, [r7, #24]
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	1acb      	subs	r3, r1, r3
 8001caa:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	607b      	str	r3, [r7, #4]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d002      	beq.n	8001cbe <mem_cmp+0x40>
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0eb      	beq.n	8001c96 <mem_cmp+0x18>

	return r;
 8001cbe:	697b      	ldr	r3, [r7, #20]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3724      	adds	r7, #36	; 0x24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8001cd6:	e002      	b.n	8001cde <chk_chr+0x12>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d005      	beq.n	8001cf2 <chk_chr+0x26>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d1f2      	bne.n	8001cd8 <chk_chr+0xc>
	return *str;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	781b      	ldrb	r3, [r3, #0]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <dbc_1st>:


/* Test if the character is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	4603      	mov	r3, r0
 8001d0a:	71fb      	strb	r3, [r7, #7]
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
 8001d0c:	2281      	movs	r2, #129	; 0x81
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d30f      	bcc.n	8001d34 <dbc_1st+0x32>
		if (c <= DbcTbl[1]) return 1;
 8001d14:	229f      	movs	r2, #159	; 0x9f
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d801      	bhi.n	8001d20 <dbc_1st+0x1e>
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e00a      	b.n	8001d36 <dbc_1st+0x34>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 8001d20:	22e0      	movs	r2, #224	; 0xe0
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d305      	bcc.n	8001d34 <dbc_1st+0x32>
 8001d28:	22fc      	movs	r2, #252	; 0xfc
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d801      	bhi.n	8001d34 <dbc_1st+0x32>
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <dbc_1st+0x34>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <dbc_2nd>:


/* Test if the character is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	4603      	mov	r3, r0
 8001d4a:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[4]) {
 8001d4c:	2240      	movs	r2, #64	; 0x40
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d319      	bcc.n	8001d88 <dbc_2nd+0x46>
		if (c <= DbcTbl[5]) return 1;
 8001d54:	227e      	movs	r2, #126	; 0x7e
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d801      	bhi.n	8001d60 <dbc_2nd+0x1e>
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e014      	b.n	8001d8a <dbc_2nd+0x48>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 8001d60:	2280      	movs	r2, #128	; 0x80
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d305      	bcc.n	8001d74 <dbc_2nd+0x32>
 8001d68:	22fc      	movs	r2, #252	; 0xfc
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d801      	bhi.n	8001d74 <dbc_2nd+0x32>
 8001d70:	2301      	movs	r3, #1
 8001d72:	e00a      	b.n	8001d8a <dbc_2nd+0x48>
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 8001d74:	2200      	movs	r2, #0
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d305      	bcc.n	8001d88 <dbc_2nd+0x46>
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d801      	bhi.n	8001d88 <dbc_2nd+0x46>
 8001d84:	2301      	movs	r3, #1
 8001d86:	e000      	b.n	8001d8a <dbc_2nd+0x48>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b084      	sub	sp, #16
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty */
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	78db      	ldrb	r3, [r3, #3]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d02c      	beq.n	8001e04 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	7858      	ldrb	r0, [r3, #1]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db8:	2301      	movs	r3, #1
 8001dba:	f7ff fc11 	bl	80015e0 <disk_write>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d11d      	bne.n	8001e00 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	70da      	strb	r2, [r3, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	1ad2      	subs	r2, r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d213      	bcs.n	8001e04 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	789b      	ldrb	r3, [r3, #2]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d10f      	bne.n	8001e04 <sync_window+0x6e>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	7858      	ldrb	r0, [r3, #1]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	441a      	add	r2, r3
 8001df8:	2301      	movs	r3, #1
 8001dfa:	f7ff fbf1 	bl	80015e0 <disk_write>
 8001dfe:	e001      	b.n	8001e04 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,			/* Filesystem object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d01b      	beq.n	8001e5e <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff ffb5 	bl	8001d96 <sync_window>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d113      	bne.n	8001e5e <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	7858      	ldrb	r0, [r3, #1]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001e40:	2301      	movs	r3, #1
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	f7ff fb62 	bl	800150c <disk_read>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d004      	beq.n	8001e58 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 8001e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e52:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f7ff ff90 	bl	8001d96 <sync_window>
 8001e76:	4603      	mov	r3, r0
 8001e78:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d158      	bne.n	8001f32 <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b03      	cmp	r3, #3
 8001e86:	d148      	bne.n	8001f1a <sync_fs+0xb2>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	791b      	ldrb	r3, [r3, #4]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d144      	bne.n	8001f1a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, sizeof fs->win);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3330      	adds	r3, #48	; 0x30
 8001e94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff fed5 	bl	8001c4a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3330      	adds	r3, #48	; 0x30
 8001ea4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8001ea8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fe64 	bl	8001b7a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3330      	adds	r3, #48	; 0x30
 8001eb6:	4921      	ldr	r1, [pc, #132]	; (8001f3c <sync_fs+0xd4>)
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff fe79 	bl	8001bb0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3330      	adds	r3, #48	; 0x30
 8001ec2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8001ec6:	491e      	ldr	r1, [pc, #120]	; (8001f40 <sync_fs+0xd8>)
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fe71 	bl	8001bb0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3330      	adds	r3, #48	; 0x30
 8001ed2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	4619      	mov	r1, r3
 8001edc:	4610      	mov	r0, r2
 8001ede:	f7ff fe67 	bl	8001bb0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3330      	adds	r3, #48	; 0x30
 8001ee6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	f7ff fe5d 	bl	8001bb0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	7858      	ldrb	r0, [r3, #1]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f0e:	2301      	movs	r3, #1
 8001f10:	f7ff fb66 	bl	80015e0 <disk_write>
			fs->fsi_flag = 0;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	785b      	ldrb	r3, [r3, #1]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fbe0 	bl	80016e8 <disk_ioctl>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <sync_fs+0xca>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	41615252 	.word	0x41615252
 8001f40:	61417272 	.word	0x61417272

08001f44 <clst2sect>:

static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	3b02      	subs	r3, #2
 8001f52:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	695b      	ldr	r3, [r3, #20]
 8001f58:	3b02      	subs	r3, #2
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d301      	bcc.n	8001f64 <clst2sect+0x20>
 8001f60:	2300      	movs	r3, #0
 8001f62:	e008      	b.n	8001f76 <clst2sect+0x32>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	895b      	ldrh	r3, [r3, #10]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	fb03 f301 	mul.w	r3, r3, r1
 8001f74:	4413      	add	r3, r2
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b086      	sub	sp, #24
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d904      	bls.n	8001fa2 <get_fat+0x20>
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d302      	bcc.n	8001fa8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	e08c      	b.n	80020c2 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8001fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d045      	beq.n	8002042 <get_fat+0xc0>
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d05d      	beq.n	8002076 <get_fat+0xf4>
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d177      	bne.n	80020ae <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	085b      	lsrs	r3, r3, #1
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	4413      	add	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	6a1a      	ldr	r2, [r3, #32]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	0a5b      	lsrs	r3, r3, #9
 8001fd4:	4413      	add	r3, r2
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	6938      	ldr	r0, [r7, #16]
 8001fda:	f7ff ff18 	bl	8001e0e <move_window>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d167      	bne.n	80020b4 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	1c5a      	adds	r2, r3, #1
 8001fe8:	60fa      	str	r2, [r7, #12]
 8001fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ff6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	6a1a      	ldr	r2, [r3, #32]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	0a5b      	lsrs	r3, r3, #9
 8002000:	4413      	add	r3, r2
 8002002:	4619      	mov	r1, r3
 8002004:	6938      	ldr	r0, [r7, #16]
 8002006:	f7ff ff02 	bl	8001e0e <move_window>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d153      	bne.n	80020b8 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4413      	add	r3, r2
 800201a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	461a      	mov	r2, r3
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	4313      	orrs	r3, r2
 8002026:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d002      	beq.n	8002038 <get_fat+0xb6>
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	e002      	b.n	800203e <get_fat+0xbc>
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800203e:	617b      	str	r3, [r7, #20]
			break;
 8002040:	e03f      	b.n	80020c2 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	6a1a      	ldr	r2, [r3, #32]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	0a1b      	lsrs	r3, r3, #8
 800204a:	4413      	add	r3, r2
 800204c:	4619      	mov	r1, r3
 800204e:	6938      	ldr	r0, [r7, #16]
 8002050:	f7ff fedd 	bl	8001e0e <move_window>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d130      	bne.n	80020bc <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8002068:	4413      	add	r3, r2
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fd4a 	bl	8001b04 <ld_word>
 8002070:	4603      	mov	r3, r0
 8002072:	617b      	str	r3, [r7, #20]
			break;
 8002074:	e025      	b.n	80020c2 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	6a1a      	ldr	r2, [r3, #32]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	09db      	lsrs	r3, r3, #7
 800207e:	4413      	add	r3, r2
 8002080:	4619      	mov	r1, r3
 8002082:	6938      	ldr	r0, [r7, #16]
 8002084:	f7ff fec3 	bl	8001e0e <move_window>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d118      	bne.n	80020c0 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800209c:	4413      	add	r3, r2
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fd48 	bl	8001b34 <ld_dword>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80020aa:	617b      	str	r3, [r7, #20]
			break;
 80020ac:	e009      	b.n	80020c2 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80020ae:	2301      	movs	r3, #1
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	e006      	b.n	80020c2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80020b4:	bf00      	nop
 80020b6:	e004      	b.n	80020c2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80020b8:	bf00      	nop
 80020ba:	e002      	b.n	80020c2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80020bc:	bf00      	nop
 80020be:	e000      	b.n	80020c2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80020c0:	bf00      	nop
		}
	}

	return val;
 80020c2:	697b      	ldr	r3, [r7, #20]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80020cc:	b590      	push	{r4, r7, lr}
 80020ce:	b089      	sub	sp, #36	; 0x24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80020d8:	2302      	movs	r3, #2
 80020da:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	f240 80d6 	bls.w	8002290 <put_fat+0x1c4>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	f080 80d0 	bcs.w	8002290 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d073      	beq.n	80021e0 <put_fat+0x114>
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	f000 8091 	beq.w	8002220 <put_fat+0x154>
 80020fe:	2b01      	cmp	r3, #1
 8002100:	f040 80c6 	bne.w	8002290 <put_fat+0x1c4>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	61bb      	str	r3, [r7, #24]
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	085b      	lsrs	r3, r3, #1
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4413      	add	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6a1a      	ldr	r2, [r3, #32]
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	0a5b      	lsrs	r3, r3, #9
 800211a:	4413      	add	r3, r2
 800211c:	4619      	mov	r1, r3
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f7ff fe75 	bl	8001e0e <move_window>
 8002124:	4603      	mov	r3, r0
 8002126:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002128:	7ffb      	ldrb	r3, [r7, #31]
 800212a:	2b00      	cmp	r3, #0
 800212c:	f040 80a9 	bne.w	8002282 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	1c59      	adds	r1, r3, #1
 800213a:	61b9      	str	r1, [r7, #24]
 800213c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002140:	4413      	add	r3, r2
 8002142:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00d      	beq.n	800216a <put_fat+0x9e>
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	b25b      	sxtb	r3, r3
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	b25a      	sxtb	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	b25b      	sxtb	r3, r3
 8002162:	4313      	orrs	r3, r2
 8002164:	b25b      	sxtb	r3, r3
 8002166:	b2db      	uxtb	r3, r3
 8002168:	e001      	b.n	800216e <put_fat+0xa2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2201      	movs	r2, #1
 8002176:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6a1a      	ldr	r2, [r3, #32]
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	0a5b      	lsrs	r3, r3, #9
 8002180:	4413      	add	r3, r2
 8002182:	4619      	mov	r1, r3
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f7ff fe42 	bl	8001e0e <move_window>
 800218a:	4603      	mov	r3, r0
 800218c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800218e:	7ffb      	ldrb	r3, [r7, #31]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d178      	bne.n	8002286 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021a0:	4413      	add	r3, r2
 80021a2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <put_fat+0xea>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	e00e      	b.n	80021d4 <put_fat+0x108>
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	b25b      	sxtb	r3, r3
 80021bc:	f023 030f 	bic.w	r3, r3, #15
 80021c0:	b25a      	sxtb	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	0a1b      	lsrs	r3, r3, #8
 80021c6:	b25b      	sxtb	r3, r3
 80021c8:	f003 030f 	and.w	r3, r3, #15
 80021cc:	b25b      	sxtb	r3, r3
 80021ce:	4313      	orrs	r3, r2
 80021d0:	b25b      	sxtb	r3, r3
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2201      	movs	r2, #1
 80021dc:	70da      	strb	r2, [r3, #3]
			break;
 80021de:	e057      	b.n	8002290 <put_fat+0x1c4>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6a1a      	ldr	r2, [r3, #32]
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	0a1b      	lsrs	r3, r3, #8
 80021e8:	4413      	add	r3, r2
 80021ea:	4619      	mov	r1, r3
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f7ff fe0e 	bl	8001e0e <move_window>
 80021f2:	4603      	mov	r3, r0
 80021f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80021f6:	7ffb      	ldrb	r3, [r7, #31]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d146      	bne.n	800228a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800220a:	4413      	add	r3, r2
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	b292      	uxth	r2, r2
 8002210:	4611      	mov	r1, r2
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fcb1 	bl	8001b7a <st_word>
			fs->wflag = 1;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2201      	movs	r2, #1
 800221c:	70da      	strb	r2, [r3, #3]
			break;
 800221e:	e037      	b.n	8002290 <put_fat+0x1c4>

		case FS_FAT32 :
#if FF_FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6a1a      	ldr	r2, [r3, #32]
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	09db      	lsrs	r3, r3, #7
 8002228:	4413      	add	r3, r2
 800222a:	4619      	mov	r1, r3
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f7ff fdee 	bl	8001e0e <move_window>
 8002232:	4603      	mov	r3, r0
 8002234:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002236:	7ffb      	ldrb	r3, [r7, #31]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d128      	bne.n	800228e <put_fat+0x1c2>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002250:	4413      	add	r3, r2
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fc6e 	bl	8001b34 <ld_dword>
 8002258:	4603      	mov	r3, r0
 800225a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800225e:	4323      	orrs	r3, r4
 8002260:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002270:	4413      	add	r3, r2
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fc9b 	bl	8001bb0 <st_dword>
			fs->wflag = 1;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2201      	movs	r2, #1
 800227e:	70da      	strb	r2, [r3, #3]
			break;
 8002280:	e006      	b.n	8002290 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8002282:	bf00      	nop
 8002284:	e004      	b.n	8002290 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8002286:	bf00      	nop
 8002288:	e002      	b.n	8002290 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800228a:	bf00      	nop
 800228c:	e000      	b.n	8002290 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800228e:	bf00      	nop
		}
	}
	return res;
 8002290:	7ffb      	ldrb	r3, [r7, #31]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3724      	adds	r7, #36	; 0x24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd90      	pop	{r4, r7, pc}

0800229a <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b088      	sub	sp, #32
 800229e:	af00      	add	r7, sp, #0
 80022a0:	60f8      	str	r0, [r7, #12]
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d904      	bls.n	80022c0 <remove_chain+0x26>
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d301      	bcc.n	80022c4 <remove_chain+0x2a>
 80022c0:	2302      	movs	r3, #2
 80022c2:	e04b      	b.n	800235c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00c      	beq.n	80022e4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80022ca:	f04f 32ff 	mov.w	r2, #4294967295
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	69b8      	ldr	r0, [r7, #24]
 80022d2:	f7ff fefb 	bl	80020cc <put_fat>
 80022d6:	4603      	mov	r3, r0
 80022d8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80022da:	7ffb      	ldrb	r3, [r7, #31]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <remove_chain+0x4a>
 80022e0:	7ffb      	ldrb	r3, [r7, #31]
 80022e2:	e03b      	b.n	800235c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f7ff fe4b 	bl	8001f82 <get_fat>
 80022ec:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d031      	beq.n	8002358 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <remove_chain+0x64>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e02e      	b.n	800235c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002304:	d101      	bne.n	800230a <remove_chain+0x70>
 8002306:	2301      	movs	r3, #1
 8002308:	e028      	b.n	800235c <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800230a:	2200      	movs	r2, #0
 800230c:	68b9      	ldr	r1, [r7, #8]
 800230e:	69b8      	ldr	r0, [r7, #24]
 8002310:	f7ff fedc 	bl	80020cc <put_fat>
 8002314:	4603      	mov	r3, r0
 8002316:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8002318:	7ffb      	ldrb	r3, [r7, #31]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <remove_chain+0x88>
 800231e:	7ffb      	ldrb	r3, [r7, #31]
 8002320:	e01c      	b.n	800235c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	691a      	ldr	r2, [r3, #16]
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	3b02      	subs	r3, #2
 800232c:	429a      	cmp	r2, r3
 800232e:	d20b      	bcs.n	8002348 <remove_chain+0xae>
			fs->free_clst++;
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	791b      	ldrb	r3, [r3, #4]
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	b2da      	uxtb	r2, r3
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform device the data in the block is no longer needed */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	429a      	cmp	r2, r3
 8002354:	d3c6      	bcc.n	80022e4 <remove_chain+0x4a>
 8002356:	e000      	b.n	800235a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8002358:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3720      	adds	r7, #32
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b088      	sub	sp, #32
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10d      	bne.n	8002396 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d004      	beq.n	8002390 <create_chain+0x2c>
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	429a      	cmp	r2, r3
 800238e:	d31b      	bcc.n	80023c8 <create_chain+0x64>
 8002390:	2301      	movs	r3, #1
 8002392:	61bb      	str	r3, [r7, #24]
 8002394:	e018      	b.n	80023c8 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8002396:	6839      	ldr	r1, [r7, #0]
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff fdf2 	bl	8001f82 <get_fat>
 800239e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d801      	bhi.n	80023aa <create_chain+0x46>
 80023a6:	2301      	movs	r3, #1
 80023a8:	e0a9      	b.n	80024fe <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b0:	d101      	bne.n	80023b6 <create_chain+0x52>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	e0a3      	b.n	80024fe <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d201      	bcs.n	80023c4 <create_chain+0x60>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	e09c      	b.n	80024fe <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <create_chain+0x70>
 80023d0:	2300      	movs	r3, #0
 80023d2:	e094      	b.n	80024fe <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d129      	bne.n	8002434 <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	3301      	adds	r3, #1
 80023e4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	69fa      	ldr	r2, [r7, #28]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d301      	bcc.n	80023f4 <create_chain+0x90>
 80023f0:	2302      	movs	r3, #2
 80023f2:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 80023f4:	69f9      	ldr	r1, [r7, #28]
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff fdc3 	bl	8001f82 <get_fat>
 80023fc:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d003      	beq.n	800240c <create_chain+0xa8>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800240a:	d101      	bne.n	8002410 <create_chain+0xac>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	e076      	b.n	80024fe <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00e      	beq.n	8002434 <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d906      	bls.n	8002430 <create_chain+0xcc>
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	429a      	cmp	r2, r3
 800242a:	d201      	bcs.n	8002430 <create_chain+0xcc>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d129      	bne.n	800248e <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3301      	adds	r3, #1
 8002442:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	69fa      	ldr	r2, [r7, #28]
 800244a:	429a      	cmp	r2, r3
 800244c:	d307      	bcc.n	800245e <create_chain+0xfa>
					ncl = 2;
 800244e:	2302      	movs	r3, #2
 8002450:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	429a      	cmp	r2, r3
 8002458:	d901      	bls.n	800245e <create_chain+0xfa>
 800245a:	2300      	movs	r3, #0
 800245c:	e04f      	b.n	80024fe <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 800245e:	69f9      	ldr	r1, [r7, #28]
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7ff fd8e 	bl	8001f82 <get_fat>
 8002466:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00e      	beq.n	800248c <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d003      	beq.n	800247c <create_chain+0x118>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247a:	d101      	bne.n	8002480 <create_chain+0x11c>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	e03e      	b.n	80024fe <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8002480:	69fa      	ldr	r2, [r7, #28]
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	429a      	cmp	r2, r3
 8002486:	d1da      	bne.n	800243e <create_chain+0xda>
 8002488:	2300      	movs	r3, #0
 800248a:	e038      	b.n	80024fe <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 800248c:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 800248e:	f04f 32ff 	mov.w	r2, #4294967295
 8002492:	69f9      	ldr	r1, [r7, #28]
 8002494:	6938      	ldr	r0, [r7, #16]
 8002496:	f7ff fe19 	bl	80020cc <put_fat>
 800249a:	4603      	mov	r3, r0
 800249c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800249e:	7dfb      	ldrb	r3, [r7, #23]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d109      	bne.n	80024b8 <create_chain+0x154>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d006      	beq.n	80024b8 <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 80024aa:	69fa      	ldr	r2, [r7, #28]
 80024ac:	6839      	ldr	r1, [r7, #0]
 80024ae:	6938      	ldr	r0, [r7, #16]
 80024b0:	f7ff fe0c 	bl	80020cc <put_fat>
 80024b4:	4603      	mov	r3, r0
 80024b6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80024b8:	7dfb      	ldrb	r3, [r7, #23]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d116      	bne.n	80024ec <create_chain+0x188>
		fs->last_clst = ncl;
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	69fa      	ldr	r2, [r7, #28]
 80024c2:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	691a      	ldr	r2, [r3, #16]
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	3b02      	subs	r3, #2
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d804      	bhi.n	80024dc <create_chain+0x178>
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	1e5a      	subs	r2, r3, #1
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	791b      	ldrb	r3, [r3, #4]
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	711a      	strb	r2, [r3, #4]
 80024ea:	e007      	b.n	80024fc <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80024ec:	7dfb      	ldrb	r3, [r7, #23]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d102      	bne.n	80024f8 <create_chain+0x194>
 80024f2:	f04f 33ff 	mov.w	r3, #4294967295
 80024f6:	e000      	b.n	80024fa <create_chain+0x196>
 80024f8:	2301      	movs	r3, #1
 80024fa:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80024fc:	69fb      	ldr	r3, [r7, #28]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3720      	adds	r7, #32
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b086      	sub	sp, #24
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	6039      	str	r1, [r7, #0]
	DWORD sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7ff fc40 	bl	8001d96 <sync_window>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <dir_clear+0x1a>
 800251c:	2301      	movs	r3, #1
 800251e:	e036      	b.n	800258e <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8002520:	6839      	ldr	r1, [r7, #0]
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff fd0e 	bl	8001f44 <clst2sect>
 8002528:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	62da      	str	r2, [r3, #44]	; 0x2c
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3330      	adds	r3, #48	; 0x30
 8002534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002538:	2100      	movs	r1, #0
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff fb85 	bl	8001c4a <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3330      	adds	r3, #48	; 0x30
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	2301      	movs	r3, #1
 8002548:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	e003      	b.n	8002558 <dir_clear+0x52>
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	4413      	add	r3, r2
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	895b      	ldrh	r3, [r3, #10]
 800255c:	461a      	mov	r2, r3
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	4293      	cmp	r3, r2
 8002562:	d20b      	bcs.n	800257c <dir_clear+0x76>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	7858      	ldrb	r0, [r3, #1]
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	441a      	add	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	68f9      	ldr	r1, [r7, #12]
 8002572:	f7ff f835 	bl	80015e0 <disk_write>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0e9      	beq.n	8002550 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	895b      	ldrh	r3, [r3, #10]
 8002580:	461a      	mov	r2, r3
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	4293      	cmp	r3, r2
 8002586:	bf14      	ite	ne
 8002588:	2301      	movne	r3, #1
 800258a:	2300      	moveq	r3, #0
 800258c:	b2db      	uxtb	r3, r3
}
 800258e:	4618      	mov	r0, r3
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b086      	sub	sp, #24
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
 800259e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025ac:	d204      	bcs.n	80025b8 <dir_sdi+0x22>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <dir_sdi+0x26>
		return FR_INT_ERR;
 80025b8:	2302      	movs	r3, #2
 80025ba:	e063      	b.n	8002684 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d106      	bne.n	80025dc <dir_sdi+0x46>
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d902      	bls.n	80025dc <dir_sdi+0x46>
		clst = fs->dirbase;
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10c      	bne.n	80025fc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	095b      	lsrs	r3, r3, #5
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	8912      	ldrh	r2, [r2, #8]
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d301      	bcc.n	80025f2 <dir_sdi+0x5c>
 80025ee:	2302      	movs	r3, #2
 80025f0:	e048      	b.n	8002684 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	619a      	str	r2, [r3, #24]
 80025fa:	e029      	b.n	8002650 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	895b      	ldrh	r3, [r3, #10]
 8002600:	025b      	lsls	r3, r3, #9
 8002602:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8002604:	e019      	b.n	800263a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6979      	ldr	r1, [r7, #20]
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff fcb9 	bl	8001f82 <get_fat>
 8002610:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002618:	d101      	bne.n	800261e <dir_sdi+0x88>
 800261a:	2301      	movs	r3, #1
 800261c:	e032      	b.n	8002684 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d904      	bls.n	800262e <dir_sdi+0x98>
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	429a      	cmp	r2, r3
 800262c:	d301      	bcc.n	8002632 <dir_sdi+0x9c>
 800262e:	2302      	movs	r3, #2
 8002630:	e028      	b.n	8002684 <dir_sdi+0xee>
			ofs -= csz;
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	429a      	cmp	r2, r3
 8002640:	d2e1      	bcs.n	8002606 <dir_sdi+0x70>
		}
		dp->sect = clst2sect(fs, clst);
 8002642:	6979      	ldr	r1, [r7, #20]
 8002644:	6938      	ldr	r0, [r7, #16]
 8002646:	f7ff fc7d 	bl	8001f44 <clst2sect>
 800264a:	4602      	mov	r2, r0
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <dir_sdi+0xcc>
 800265e:	2302      	movs	r3, #2
 8002660:	e010      	b.n	8002684 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699a      	ldr	r2, [r3, #24]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	0a5b      	lsrs	r3, r3, #9
 800266a:	441a      	add	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800267c:	441a      	add	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	3320      	adds	r3, #32
 80026a2:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026aa:	d302      	bcc.n	80026b2 <dir_next+0x26>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <dir_next+0x32>
 80026ba:	2304      	movs	r3, #4
 80026bc:	e078      	b.n	80027b0 <dir_next+0x124>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d166      	bne.n	8002796 <dir_next+0x10a>
		dp->sect++;				/* Next sector */
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10a      	bne.n	80026f0 <dir_next+0x64>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	095b      	lsrs	r3, r3, #5
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	8912      	ldrh	r2, [r2, #8]
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d357      	bcc.n	8002796 <dir_next+0x10a>
				dp->sect = 0; return FR_NO_FILE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	619a      	str	r2, [r3, #24]
 80026ec:	2304      	movs	r3, #4
 80026ee:	e05f      	b.n	80027b0 <dir_next+0x124>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	0a5b      	lsrs	r3, r3, #9
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	8952      	ldrh	r2, [r2, #10]
 80026f8:	3a01      	subs	r2, #1
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d14a      	bne.n	8002796 <dir_next+0x10a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	4619      	mov	r1, r3
 8002708:	4610      	mov	r0, r2
 800270a:	f7ff fc3a 	bl	8001f82 <get_fat>
 800270e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d801      	bhi.n	800271a <dir_next+0x8e>
 8002716:	2302      	movs	r3, #2
 8002718:	e04a      	b.n	80027b0 <dir_next+0x124>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002720:	d101      	bne.n	8002726 <dir_next+0x9a>
 8002722:	2301      	movs	r3, #1
 8002724:	e044      	b.n	80027b0 <dir_next+0x124>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	429a      	cmp	r2, r3
 800272e:	d328      	bcc.n	8002782 <dir_next+0xf6>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d104      	bne.n	8002740 <dir_next+0xb4>
						dp->sect = 0; return FR_NO_FILE;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	619a      	str	r2, [r3, #24]
 800273c:	2304      	movs	r3, #4
 800273e:	e037      	b.n	80027b0 <dir_next+0x124>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	4619      	mov	r1, r3
 8002748:	4610      	mov	r0, r2
 800274a:	f7ff fe0b 	bl	8002364 <create_chain>
 800274e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <dir_next+0xce>
 8002756:	2307      	movs	r3, #7
 8002758:	e02a      	b.n	80027b0 <dir_next+0x124>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d101      	bne.n	8002764 <dir_next+0xd8>
 8002760:	2302      	movs	r3, #2
 8002762:	e025      	b.n	80027b0 <dir_next+0x124>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276a:	d101      	bne.n	8002770 <dir_next+0xe4>
 800276c:	2301      	movs	r3, #1
 800276e:	e01f      	b.n	80027b0 <dir_next+0x124>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8002770:	6979      	ldr	r1, [r7, #20]
 8002772:	6938      	ldr	r0, [r7, #16]
 8002774:	f7ff fec7 	bl	8002506 <dir_clear>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <dir_next+0xf6>
 800277e:	2301      	movs	r3, #1
 8002780:	e016      	b.n	80027b0 <dir_next+0x124>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 8002788:	6979      	ldr	r1, [r7, #20]
 800278a:	6938      	ldr	r0, [r7, #16]
 800278c:	f7ff fbda 	bl	8001f44 <clst2sect>
 8002790:	4602      	mov	r2, r0
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027a8:	441a      	add	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	61da      	str	r2, [r3, #28]

	return FR_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT nent				/* Number of contiguous entries to allocate */
)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80027c8:	2100      	movs	r1, #0
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff fee3 	bl	8002596 <dir_sdi>
 80027d0:	4603      	mov	r3, r0
 80027d2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80027d4:	7dfb      	ldrb	r3, [r7, #23]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d12b      	bne.n	8002832 <dir_alloc+0x7a>
		n = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	4619      	mov	r1, r3
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f7ff fb12 	bl	8001e0e <move_window>
 80027ea:	4603      	mov	r3, r0
 80027ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80027ee:	7dfb      	ldrb	r3, [r7, #23]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d11d      	bne.n	8002830 <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2be5      	cmp	r3, #229	; 0xe5
 80027fc:	d004      	beq.n	8002808 <dir_alloc+0x50>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d107      	bne.n	8002818 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	3301      	adds	r3, #1
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d102      	bne.n	800281c <dir_alloc+0x64>
 8002816:	e00c      	b.n	8002832 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8002818:	2300      	movs	r3, #0
 800281a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800281c:	2101      	movs	r1, #1
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff ff34 	bl	800268c <dir_next>
 8002824:	4603      	mov	r3, r0
 8002826:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8002828:	7dfb      	ldrb	r3, [r7, #23]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0d7      	beq.n	80027de <dir_alloc+0x26>
 800282e:	e000      	b.n	8002832 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8002830:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8002832:	7dfb      	ldrb	r3, [r7, #23]
 8002834:	2b04      	cmp	r3, #4
 8002836:	d101      	bne.n	800283c <dir_alloc+0x84>
 8002838:	2307      	movs	r3, #7
 800283a:	75fb      	strb	r3, [r7, #23]
	return res;
 800283c:	7dfb      	ldrb	r3, [r7, #23]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b084      	sub	sp, #16
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	331a      	adds	r3, #26
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff f955 	bl	8001b04 <ld_word>
 800285a:	4603      	mov	r3, r0
 800285c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b03      	cmp	r3, #3
 8002864:	d109      	bne.n	800287a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	3314      	adds	r3, #20
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff f94a 	bl	8001b04 <ld_word>
 8002870:	4603      	mov	r3, r0
 8002872:	041b      	lsls	r3, r3, #16
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	4313      	orrs	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800287a:	68fb      	ldr	r3, [r7, #12]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	331a      	adds	r3, #26
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	b292      	uxth	r2, r2
 8002898:	4611      	mov	r1, r2
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff f96d 	bl	8001b7a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b03      	cmp	r3, #3
 80028a6:	d109      	bne.n	80028bc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f103 0214 	add.w	r2, r3, #20
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	0c1b      	lsrs	r3, r3, #16
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	4619      	mov	r1, r3
 80028b6:	4610      	mov	r0, r2
 80028b8:	f7ff f95f 	bl	8001b7a <st_word>
	}
}
 80028bc:	bf00      	nop
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80028d2:	2100      	movs	r1, #0
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff fe5e 	bl	8002596 <dir_sdi>
 80028da:	4603      	mov	r3, r0
 80028dc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80028de:	7dfb      	ldrb	r3, [r7, #23]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <dir_find+0x24>
 80028e4:	7dfb      	ldrb	r3, [r7, #23]
 80028e6:	e03e      	b.n	8002966 <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	4619      	mov	r1, r3
 80028ee:	6938      	ldr	r0, [r7, #16]
 80028f0:	f7ff fa8d 	bl	8001e0e <move_window>
 80028f4:	4603      	mov	r3, r0
 80028f6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80028f8:	7dfb      	ldrb	r3, [r7, #23]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d12f      	bne.n	800295e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002906:	7bfb      	ldrb	r3, [r7, #15]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d102      	bne.n	8002912 <dir_find+0x4e>
 800290c:	2304      	movs	r3, #4
 800290e:	75fb      	strb	r3, [r7, #23]
 8002910:	e028      	b.n	8002964 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	330b      	adds	r3, #11
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800291e:	b2da      	uxtb	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	330b      	adds	r3, #11
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10a      	bne.n	800294a <dir_find+0x86>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69d8      	ldr	r0, [r3, #28]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3320      	adds	r3, #32
 800293c:	220b      	movs	r2, #11
 800293e:	4619      	mov	r1, r3
 8002940:	f7ff f99d 	bl	8001c7e <mem_cmp>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00b      	beq.n	8002962 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800294a:	2100      	movs	r1, #0
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7ff fe9d 	bl	800268c <dir_next>
 8002952:	4603      	mov	r3, r0
 8002954:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8002956:	7dfb      	ldrb	r3, [r7, #23]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0c5      	beq.n	80028e8 <dir_find+0x24>
 800295c:	e002      	b.n	8002964 <dir_find+0xa0>
		if (res != FR_OK) break;
 800295e:	bf00      	nop
 8002960:	e000      	b.n	8002964 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8002962:	bf00      	nop

	return res;
 8002964:	7dfb      	ldrb	r3, [r7, #23]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800297c:	2101      	movs	r1, #1
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff ff1a 	bl	80027b8 <dir_alloc>
 8002984:	4603      	mov	r3, r0
 8002986:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8002988:	7bfb      	ldrb	r3, [r7, #15]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d11c      	bne.n	80029c8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	4619      	mov	r1, r3
 8002994:	68b8      	ldr	r0, [r7, #8]
 8002996:	f7ff fa3a 	bl	8001e0e <move_window>
 800299a:	4603      	mov	r3, r0
 800299c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d111      	bne.n	80029c8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	2220      	movs	r2, #32
 80029aa:	2100      	movs	r1, #0
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff f94c 	bl	8001c4a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69d8      	ldr	r0, [r3, #28]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3320      	adds	r3, #32
 80029ba:	220b      	movs	r2, #11
 80029bc:	4619      	mov	r1, r3
 80029be:	f7ff f923 	bl	8001c08 <mem_cpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2201      	movs	r2, #1
 80029c6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
	...

080029d4 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08a      	sub	sp, #40	; 0x28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3320      	adds	r3, #32
 80029e8:	613b      	str	r3, [r7, #16]
	mem_set(sfn, ' ', 11);
 80029ea:	220b      	movs	r2, #11
 80029ec:	2120      	movs	r1, #32
 80029ee:	6938      	ldr	r0, [r7, #16]
 80029f0:	f7ff f92b 	bl	8001c4a <mem_set>
	si = i = 0; ni = 8;
 80029f4:	2300      	movs	r3, #0
 80029f6:	61bb      	str	r3, [r7, #24]
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	61fb      	str	r3, [r7, #28]
 80029fc:	2308      	movs	r3, #8
 80029fe:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	1c5a      	adds	r2, r3, #1
 8002a04:	61fa      	str	r2, [r7, #28]
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	4413      	add	r3, r2
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 8002a10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a14:	2b20      	cmp	r3, #32
 8002a16:	d97c      	bls.n	8002b12 <create_name+0x13e>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8002a18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a1c:	2b2f      	cmp	r3, #47	; 0x2f
 8002a1e:	d007      	beq.n	8002a30 <create_name+0x5c>
 8002a20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a24:	2b5c      	cmp	r3, #92	; 0x5c
 8002a26:	d110      	bne.n	8002a4a <create_name+0x76>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8002a28:	e002      	b.n	8002a30 <create_name+0x5c>
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	61fb      	str	r3, [r7, #28]
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	4413      	add	r3, r2
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b2f      	cmp	r3, #47	; 0x2f
 8002a3a:	d0f6      	beq.n	8002a2a <create_name+0x56>
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	4413      	add	r3, r2
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b5c      	cmp	r3, #92	; 0x5c
 8002a46:	d0f0      	beq.n	8002a2a <create_name+0x56>
			break;
 8002a48:	e064      	b.n	8002b14 <create_name+0x140>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8002a4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a4e:	2b2e      	cmp	r3, #46	; 0x2e
 8002a50:	d003      	beq.n	8002a5a <create_name+0x86>
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d30d      	bcc.n	8002a76 <create_name+0xa2>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	2b0b      	cmp	r3, #11
 8002a5e:	d003      	beq.n	8002a68 <create_name+0x94>
 8002a60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a64:	2b2e      	cmp	r3, #46	; 0x2e
 8002a66:	d001      	beq.n	8002a6c <create_name+0x98>
 8002a68:	2306      	movs	r3, #6
 8002a6a:	e06f      	b.n	8002b4c <create_name+0x178>
			i = 8; ni = 11;				/* Enter file extension field */
 8002a6c:	2308      	movs	r3, #8
 8002a6e:	61bb      	str	r3, [r7, #24]
 8002a70:	230b      	movs	r3, #11
 8002a72:	623b      	str	r3, [r7, #32]
			continue;
 8002a74:	e04c      	b.n	8002b10 <create_name+0x13c>
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 8002a76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff f941 	bl	8001d02 <dbc_1st>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d024      	beq.n	8002ad0 <create_name+0xfc>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	61fa      	str	r2, [r7, #28]
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	4413      	add	r3, r2
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff f953 	bl	8001d42 <dbc_2nd>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d004      	beq.n	8002aac <create_name+0xd8>
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d301      	bcc.n	8002ab0 <create_name+0xdc>
 8002aac:	2306      	movs	r3, #6
 8002aae:	e04d      	b.n	8002b4c <create_name+0x178>
			sfn[i++] = c;
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	61ba      	str	r2, [r7, #24]
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002abe:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	61ba      	str	r2, [r7, #24]
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4413      	add	r3, r2
 8002aca:	7bfa      	ldrb	r2, [r7, #15]
 8002acc:	701a      	strb	r2, [r3, #0]
 8002ace:	e797      	b.n	8002a00 <create_name+0x2c>
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8002ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	481f      	ldr	r0, [pc, #124]	; (8002b54 <create_name+0x180>)
 8002ad8:	f7ff f8f8 	bl	8001ccc <chk_chr>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <create_name+0x112>
 8002ae2:	2306      	movs	r3, #6
 8002ae4:	e032      	b.n	8002b4c <create_name+0x178>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8002ae6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002aea:	2b60      	cmp	r3, #96	; 0x60
 8002aec:	d908      	bls.n	8002b00 <create_name+0x12c>
 8002aee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002af2:	2b7a      	cmp	r3, #122	; 0x7a
 8002af4:	d804      	bhi.n	8002b00 <create_name+0x12c>
 8002af6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002afa:	3b20      	subs	r3, #32
 8002afc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			sfn[i++] = c;
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	61ba      	str	r2, [r7, #24]
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4413      	add	r3, r2
 8002b0a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002b0e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 8002b10:	e776      	b.n	8002a00 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8002b12:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	441a      	add	r2, r3
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <create_name+0x154>
 8002b24:	2306      	movs	r3, #6
 8002b26:	e011      	b.n	8002b4c <create_name+0x178>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2be5      	cmp	r3, #229	; 0xe5
 8002b2e:	d102      	bne.n	8002b36 <create_name+0x162>
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	2205      	movs	r2, #5
 8002b34:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8002b36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b3a:	2b20      	cmp	r3, #32
 8002b3c:	d801      	bhi.n	8002b42 <create_name+0x16e>
 8002b3e:	2204      	movs	r2, #4
 8002b40:	e000      	b.n	8002b44 <create_name+0x170>
 8002b42:	2200      	movs	r2, #0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	330b      	adds	r3, #11
 8002b48:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8002b4a:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3728      	adds	r7, #40	; 0x28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	0800d564 	.word	0x0800d564

08002b58 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	613b      	str	r3, [r7, #16]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8002b68:	e002      	b.n	8002b70 <follow_path+0x18>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	603b      	str	r3, [r7, #0]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b2f      	cmp	r3, #47	; 0x2f
 8002b76:	d0f8      	beq.n	8002b6a <follow_path+0x12>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b5c      	cmp	r3, #92	; 0x5c
 8002b7e:	d0f4      	beq.n	8002b6a <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from root directory */
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b1f      	cmp	r3, #31
 8002b8c:	d80a      	bhi.n	8002ba4 <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2280      	movs	r2, #128	; 0x80
 8002b92:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 8002b96:	2100      	movs	r1, #0
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7ff fcfc 	bl	8002596 <dir_sdi>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	75fb      	strb	r3, [r7, #23]
 8002ba2:	e043      	b.n	8002c2c <follow_path+0xd4>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8002ba4:	463b      	mov	r3, r7
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7ff ff13 	bl	80029d4 <create_name>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8002bb2:	7dfb      	ldrb	r3, [r7, #23]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d134      	bne.n	8002c22 <follow_path+0xca>
			res = dir_find(dp);				/* Find an object with the segment name */
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7ff fe83 	bl	80028c4 <dir_find>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002bc8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 8002bca:	7dfb      	ldrb	r3, [r7, #23]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00a      	beq.n	8002be6 <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8002bd0:	7dfb      	ldrb	r3, [r7, #23]
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d127      	bne.n	8002c26 <follow_path+0xce>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d122      	bne.n	8002c26 <follow_path+0xce>
 8002be0:	2305      	movs	r3, #5
 8002be2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8002be4:	e01f      	b.n	8002c26 <follow_path+0xce>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d11c      	bne.n	8002c2a <follow_path+0xd2>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	799b      	ldrb	r3, [r3, #6]
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d102      	bne.n	8002c02 <follow_path+0xaa>
				res = FR_NO_PATH; break;
 8002bfc:	2305      	movs	r3, #5
 8002bfe:	75fb      	strb	r3, [r7, #23]
 8002c00:	e014      	b.n	8002c2c <follow_path+0xd4>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c10:	4413      	add	r3, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	6938      	ldr	r0, [r7, #16]
 8002c16:	f7ff fe16 	bl	8002846 <ld_clust>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8002c20:	e7c0      	b.n	8002ba4 <follow_path+0x4c>
			if (res != FR_OK) break;
 8002c22:	bf00      	nop
 8002c24:	e002      	b.n	8002c2c <follow_path+0xd4>
				break;
 8002c26:	bf00      	nop
 8002c28:	e000      	b.n	8002c2c <follow_path+0xd4>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8002c2a:	bf00      	nop
			}
		}
	}

	return res;
 8002c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b089      	sub	sp, #36	; 0x24
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	TCHAR tc;
	int i, vol = -1;
 8002c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c42:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <get_ldnumber+0x22>
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	e02d      	b.n	8002cb4 <get_ldnumber+0x7e>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	61fa      	str	r2, [r7, #28]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	73fb      	strb	r3, [r7, #15]
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
 8002c64:	2b20      	cmp	r3, #32
 8002c66:	d902      	bls.n	8002c6e <get_ldnumber+0x38>
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	2b3a      	cmp	r3, #58	; 0x3a
 8002c6c:	d1f4      	bne.n	8002c58 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
 8002c70:	2b3a      	cmp	r3, #58	; 0x3a
 8002c72:	d11c      	bne.n	8002cae <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8002c74:	2301      	movs	r3, #1
 8002c76:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b2f      	cmp	r3, #47	; 0x2f
 8002c7e:	d90c      	bls.n	8002c9a <get_ldnumber+0x64>
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b39      	cmp	r3, #57	; 0x39
 8002c86:	d808      	bhi.n	8002c9a <get_ldnumber+0x64>
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	69fa      	ldr	r2, [r7, #28]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d103      	bne.n	8002c9a <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	3b30      	subs	r3, #48	; 0x30
 8002c98:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	dc04      	bgt.n	8002caa <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69fa      	ldr	r2, [r7, #28]
 8002ca8:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	e002      	b.n	8002cb4 <get_ldnumber+0x7e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 8002cb2:	697b      	ldr	r3, [r7, #20]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3724      	adds	r7, #36	; 0x24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <check_fs>:

static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	70da      	strb	r2, [r3, #3]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8002cd6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002cd8:	6839      	ldr	r1, [r7, #0]
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7ff f897 	bl	8001e0e <move_window>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <check_fs+0x2a>
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	e038      	b.n	8002d5c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3330      	adds	r3, #48	; 0x30
 8002cee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe ff06 	bl	8001b04 <ld_word>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <check_fs+0x48>
 8002d04:	2303      	movs	r3, #3
 8002d06:	e029      	b.n	8002d5c <check_fs+0x9c>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d0e:	2be9      	cmp	r3, #233	; 0xe9
 8002d10:	d009      	beq.n	8002d26 <check_fs+0x66>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d18:	2beb      	cmp	r3, #235	; 0xeb
 8002d1a:	d004      	beq.n	8002d26 <check_fs+0x66>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d22:	2be8      	cmp	r3, #232	; 0xe8
 8002d24:	d119      	bne.n	8002d5a <check_fs+0x9a>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3330      	adds	r3, #48	; 0x30
 8002d2a:	3336      	adds	r3, #54	; 0x36
 8002d2c:	2203      	movs	r2, #3
 8002d2e:	490d      	ldr	r1, [pc, #52]	; (8002d64 <check_fs+0xa4>)
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fe ffa4 	bl	8001c7e <mem_cmp>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <check_fs+0x80>
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	e00d      	b.n	8002d5c <check_fs+0x9c>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3330      	adds	r3, #48	; 0x30
 8002d44:	3352      	adds	r3, #82	; 0x52
 8002d46:	2205      	movs	r2, #5
 8002d48:	4907      	ldr	r1, [pc, #28]	; (8002d68 <check_fs+0xa8>)
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe ff97 	bl	8001c7e <mem_cmp>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <check_fs+0x9a>
 8002d56:	2300      	movs	r3, #0
 8002d58:	e000      	b.n	8002d5c <check_fs+0x9c>
	}
	return 2;	/* Valid BS but not FAT */
 8002d5a:	2302      	movs	r3, #2
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	0800d574 	.word	0x0800d574
 8002d68:	0800d578 	.word	0x0800d578

08002d6c <find_volume>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b096      	sub	sp, #88	; 0x58
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	4613      	mov	r3, r2
 8002d78:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f7ff ff58 	bl	8002c36 <get_ldnumber>
 8002d86:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8002d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	da01      	bge.n	8002d92 <find_volume+0x26>
 8002d8e:	230b      	movs	r3, #11
 8002d90:	e238      	b.n	8003204 <find_volume+0x498>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8002d92:	4aa8      	ldr	r2, [pc, #672]	; (8003034 <find_volume+0x2c8>)
 8002d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d9a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8002d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <find_volume+0x3a>
 8002da2:	230c      	movs	r3, #12
 8002da4:	e22e      	b.n	8003204 <find_volume+0x498>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002daa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	f023 0301 	bic.w	r3, r3, #1
 8002db2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8002db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d01a      	beq.n	8002df2 <find_volume+0x86>
		stat = disk_status(fs->pdrv);
 8002dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dbe:	785b      	ldrb	r3, [r3, #1]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fe fb8d 	bl	80014e0 <disk_status>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8002dcc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10c      	bne.n	8002df2 <find_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d007      	beq.n	8002dee <find_volume+0x82>
 8002dde:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002de2:	f003 0304 	and.w	r3, r3, #4
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8002dea:	230a      	movs	r3, #10
 8002dec:	e20a      	b.n	8003204 <find_volume+0x498>
			}
			return FR_OK;				/* The filesystem object is valid */
 8002dee:	2300      	movs	r3, #0
 8002df0:	e208      	b.n	8003204 <find_volume+0x498>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
 8002df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df4:	2200      	movs	r2, #0
 8002df6:	701a      	strb	r2, [r3, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 8002e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e02:	785b      	ldrb	r3, [r3, #1]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fe fa81 	bl	800130c <disk_initialize>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8002e10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e1f1      	b.n	8003204 <find_volume+0x498>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d007      	beq.n	8002e36 <find_volume+0xca>
 8002e26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002e2a:	f003 0304 	and.w	r3, r3, #4
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8002e32:	230a      	movs	r3, #10
 8002e34:	e1e6      	b.n	8003204 <find_volume+0x498>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK (MBR) and SFD (w/o partition). */
	bsect = 0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8002e3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002e3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002e3e:	f7ff ff3f 	bl	8002cc0 <check_fs>
 8002e42:	4603      	mov	r3, r0
 8002e44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8002e48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d14b      	bne.n	8002ee8 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002e50:	2300      	movs	r3, #0
 8002e52:	643b      	str	r3, [r7, #64]	; 0x40
 8002e54:	e01f      	b.n	8002e96 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8002e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e58:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8002e64:	4413      	add	r3, r2
 8002e66:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8002e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d006      	beq.n	8002e80 <find_volume+0x114>
 8002e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e74:	3308      	adds	r3, #8
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fe fe5c 	bl	8001b34 <ld_dword>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	e000      	b.n	8002e82 <find_volume+0x116>
 8002e80:	2200      	movs	r2, #0
 8002e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002e8a:	440b      	add	r3, r1
 8002e8c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e92:	3301      	adds	r3, #1
 8002e94:	643b      	str	r3, [r7, #64]	; 0x40
 8002e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d9dc      	bls.n	8002e56 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i != 0) i--;
 8002ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d002      	beq.n	8002eac <find_volume+0x140>
 8002ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8002eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002eba:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8002ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d005      	beq.n	8002ece <find_volume+0x162>
 8002ec2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002ec4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002ec6:	f7ff fefb 	bl	8002cc0 <check_fs>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	e000      	b.n	8002ed0 <find_volume+0x164>
 8002ece:	2303      	movs	r3, #3
 8002ed0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8002ed4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d905      	bls.n	8002ee8 <find_volume+0x17c>
 8002edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ede:	3301      	adds	r3, #1
 8002ee0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d9e1      	bls.n	8002eac <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002ee8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d101      	bne.n	8002ef4 <find_volume+0x188>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e187      	b.n	8003204 <find_volume+0x498>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8002ef4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d901      	bls.n	8002f00 <find_volume+0x194>
 8002efc:	230d      	movs	r3, #13
 8002efe:	e181      	b.n	8003204 <find_volume+0x498>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f02:	3330      	adds	r3, #48	; 0x30
 8002f04:	330b      	adds	r3, #11
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fe fdfc 	bl	8001b04 <ld_word>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f12:	d001      	beq.n	8002f18 <find_volume+0x1ac>
 8002f14:	230d      	movs	r3, #13
 8002f16:	e175      	b.n	8003204 <find_volume+0x498>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8002f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1a:	3330      	adds	r3, #48	; 0x30
 8002f1c:	3316      	adds	r3, #22
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe fdf0 	bl	8001b04 <ld_word>
 8002f24:	4603      	mov	r3, r0
 8002f26:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8002f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d106      	bne.n	8002f3c <find_volume+0x1d0>
 8002f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f30:	3330      	adds	r3, #48	; 0x30
 8002f32:	3324      	adds	r3, #36	; 0x24
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe fdfd 	bl	8001b34 <ld_dword>
 8002f3a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8002f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f40:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8002f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f44:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8002f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4e:	789b      	ldrb	r3, [r3, #2]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d005      	beq.n	8002f60 <find_volume+0x1f4>
 8002f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f56:	789b      	ldrb	r3, [r3, #2]
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d001      	beq.n	8002f60 <find_volume+0x1f4>
 8002f5c:	230d      	movs	r3, #13
 8002f5e:	e151      	b.n	8003204 <find_volume+0x498>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8002f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f62:	789b      	ldrb	r3, [r3, #2]
 8002f64:	461a      	mov	r2, r3
 8002f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f68:	fb02 f303 	mul.w	r3, r2, r3
 8002f6c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8002f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f78:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8002f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7c:	895b      	ldrh	r3, [r3, #10]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d008      	beq.n	8002f94 <find_volume+0x228>
 8002f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f84:	895b      	ldrh	r3, [r3, #10]
 8002f86:	461a      	mov	r2, r3
 8002f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8a:	895b      	ldrh	r3, [r3, #10]
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	4013      	ands	r3, r2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <find_volume+0x22c>
 8002f94:	230d      	movs	r3, #13
 8002f96:	e135      	b.n	8003204 <find_volume+0x498>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8002f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9a:	3330      	adds	r3, #48	; 0x30
 8002f9c:	3311      	adds	r3, #17
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fe fdb0 	bl	8001b04 <ld_word>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002faa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8002fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fae:	891b      	ldrh	r3, [r3, #8]
 8002fb0:	f003 030f 	and.w	r3, r3, #15
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <find_volume+0x252>
 8002fba:	230d      	movs	r3, #13
 8002fbc:	e122      	b.n	8003204 <find_volume+0x498>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8002fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc0:	3330      	adds	r3, #48	; 0x30
 8002fc2:	3313      	adds	r3, #19
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fe fd9d 	bl	8001b04 <ld_word>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8002fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d106      	bne.n	8002fe2 <find_volume+0x276>
 8002fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd6:	3330      	adds	r3, #48	; 0x30
 8002fd8:	3320      	adds	r3, #32
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe fdaa 	bl	8001b34 <ld_dword>
 8002fe0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8002fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe4:	3330      	adds	r3, #48	; 0x30
 8002fe6:	330e      	adds	r3, #14
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fe fd8b 	bl	8001b04 <ld_word>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8002ff2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <find_volume+0x290>
 8002ff8:	230d      	movs	r3, #13
 8002ffa:	e103      	b.n	8003204 <find_volume+0x498>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8002ffc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003000:	4413      	add	r3, r2
 8003002:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003004:	8912      	ldrh	r2, [r2, #8]
 8003006:	0912      	lsrs	r2, r2, #4
 8003008:	b292      	uxth	r2, r2
 800300a:	4413      	add	r3, r2
 800300c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800300e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003012:	429a      	cmp	r2, r3
 8003014:	d201      	bcs.n	800301a <find_volume+0x2ae>
 8003016:	230d      	movs	r3, #13
 8003018:	e0f4      	b.n	8003204 <find_volume+0x498>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800301a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800301c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003022:	8952      	ldrh	r2, [r2, #10]
 8003024:	fbb3 f3f2 	udiv	r3, r3, r2
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	2b00      	cmp	r3, #0
 800302e:	d103      	bne.n	8003038 <find_volume+0x2cc>
 8003030:	230d      	movs	r3, #13
 8003032:	e0e7      	b.n	8003204 <find_volume+0x498>
 8003034:	20000208 	.word	0x20000208
		fmt = 0;
 8003038:	2300      	movs	r3, #0
 800303a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	4a72      	ldr	r2, [pc, #456]	; (800320c <find_volume+0x4a0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d802      	bhi.n	800304c <find_volume+0x2e0>
 8003046:	2303      	movs	r3, #3
 8003048:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8003052:	4293      	cmp	r3, r2
 8003054:	d802      	bhi.n	800305c <find_volume+0x2f0>
 8003056:	2302      	movs	r3, #2
 8003058:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8003062:	4293      	cmp	r3, r2
 8003064:	d802      	bhi.n	800306c <find_volume+0x300>
 8003066:	2301      	movs	r3, #1
 8003068:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (fmt == 0) return FR_NO_FILESYSTEM;
 800306c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <find_volume+0x30c>
 8003074:	230d      	movs	r3, #13
 8003076:	e0c5      	b.n	8003204 <find_volume+0x498>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	1c9a      	adds	r2, r3, #2
 800307c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8003080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003082:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003084:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8003086:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800308a:	441a      	add	r2, r3
 800308c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8003090:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003094:	441a      	add	r2, r3
 8003096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003098:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800309a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800309e:	2b03      	cmp	r3, #3
 80030a0:	d11e      	bne.n	80030e0 <find_volume+0x374>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80030a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a4:	3330      	adds	r3, #48	; 0x30
 80030a6:	332a      	adds	r3, #42	; 0x2a
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7fe fd2b 	bl	8001b04 <ld_word>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <find_volume+0x34c>
 80030b4:	230d      	movs	r3, #13
 80030b6:	e0a5      	b.n	8003204 <find_volume+0x498>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80030b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ba:	891b      	ldrh	r3, [r3, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <find_volume+0x358>
 80030c0:	230d      	movs	r3, #13
 80030c2:	e09f      	b.n	8003204 <find_volume+0x498>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80030c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c6:	3330      	adds	r3, #48	; 0x30
 80030c8:	332c      	adds	r3, #44	; 0x2c
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fe fd32 	bl	8001b34 <ld_dword>
 80030d0:	4602      	mov	r2, r0
 80030d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80030d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	647b      	str	r3, [r7, #68]	; 0x44
 80030de:	e01f      	b.n	8003120 <find_volume+0x3b4>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80030e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e2:	891b      	ldrh	r3, [r3, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <find_volume+0x380>
 80030e8:	230d      	movs	r3, #13
 80030ea:	e08b      	b.n	8003204 <find_volume+0x498>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80030ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ee:	6a1a      	ldr	r2, [r3, #32]
 80030f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030f2:	441a      	add	r2, r3
 80030f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80030f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d103      	bne.n	8003108 <find_volume+0x39c>
 8003100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	e00a      	b.n	800311e <find_volume+0x3b2>
 8003108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800310a:	695a      	ldr	r2, [r3, #20]
 800310c:	4613      	mov	r3, r2
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	4413      	add	r3, r2
 8003112:	085a      	lsrs	r2, r3, #1
 8003114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800311e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8003120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003122:	699a      	ldr	r2, [r3, #24]
 8003124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003126:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800312a:	0a5b      	lsrs	r3, r3, #9
 800312c:	429a      	cmp	r2, r3
 800312e:	d201      	bcs.n	8003134 <find_volume+0x3c8>
 8003130:	230d      	movs	r3, #13
 8003132:	e067      	b.n	8003204 <find_volume+0x498>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8003134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003136:	f04f 32ff 	mov.w	r2, #4294967295
 800313a:	611a      	str	r2, [r3, #16]
 800313c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313e:	691a      	ldr	r2, [r3, #16]
 8003140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003142:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8003144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003146:	2280      	movs	r2, #128	; 0x80
 8003148:	711a      	strb	r2, [r3, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 800314a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800314e:	2b03      	cmp	r3, #3
 8003150:	d149      	bne.n	80031e6 <find_volume+0x47a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8003152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003154:	3330      	adds	r3, #48	; 0x30
 8003156:	3330      	adds	r3, #48	; 0x30
 8003158:	4618      	mov	r0, r3
 800315a:	f7fe fcd3 	bl	8001b04 <ld_word>
 800315e:	4603      	mov	r3, r0
 8003160:	2b01      	cmp	r3, #1
 8003162:	d140      	bne.n	80031e6 <find_volume+0x47a>
			&& move_window(fs, bsect + 1) == FR_OK)
 8003164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003166:	3301      	adds	r3, #1
 8003168:	4619      	mov	r1, r3
 800316a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800316c:	f7fe fe4f 	bl	8001e0e <move_window>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d137      	bne.n	80031e6 <find_volume+0x47a>
		{
			fs->fsi_flag = 0;
 8003176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003178:	2200      	movs	r2, #0
 800317a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800317c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317e:	3330      	adds	r3, #48	; 0x30
 8003180:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003184:	4618      	mov	r0, r3
 8003186:	f7fe fcbd 	bl	8001b04 <ld_word>
 800318a:	4603      	mov	r3, r0
 800318c:	461a      	mov	r2, r3
 800318e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8003192:	429a      	cmp	r2, r3
 8003194:	d127      	bne.n	80031e6 <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8003196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003198:	3330      	adds	r3, #48	; 0x30
 800319a:	4618      	mov	r0, r3
 800319c:	f7fe fcca 	bl	8001b34 <ld_dword>
 80031a0:	4602      	mov	r2, r0
 80031a2:	4b1b      	ldr	r3, [pc, #108]	; (8003210 <find_volume+0x4a4>)
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d11e      	bne.n	80031e6 <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80031a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031aa:	3330      	adds	r3, #48	; 0x30
 80031ac:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fe fcbf 	bl	8001b34 <ld_dword>
 80031b6:	4602      	mov	r2, r0
 80031b8:	4b16      	ldr	r3, [pc, #88]	; (8003214 <find_volume+0x4a8>)
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d113      	bne.n	80031e6 <find_volume+0x47a>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80031be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c0:	3330      	adds	r3, #48	; 0x30
 80031c2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fe fcb4 	bl	8001b34 <ld_dword>
 80031cc:	4602      	mov	r2, r0
 80031ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d0:	611a      	str	r2, [r3, #16]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80031d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d4:	3330      	adds	r3, #48	; 0x30
 80031d6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fe fcaa 	bl	8001b34 <ld_dword>
 80031e0:	4602      	mov	r2, r0
 80031e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80031e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80031ec:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 80031ee:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <find_volume+0x4ac>)
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	3301      	adds	r3, #1
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	4b08      	ldr	r3, [pc, #32]	; (8003218 <find_volume+0x4ac>)
 80031f8:	801a      	strh	r2, [r3, #0]
 80031fa:	4b07      	ldr	r3, [pc, #28]	; (8003218 <find_volume+0x4ac>)
 80031fc:	881a      	ldrh	r2, [r3, #0]
 80031fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003200:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3758      	adds	r7, #88	; 0x58
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	0ffffff5 	.word	0x0ffffff5
 8003210:	41615252 	.word	0x41615252
 8003214:	61417272 	.word	0x61417272
 8003218:	2000020c 	.word	0x2000020c

0800321c <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8003226:	2309      	movs	r3, #9
 8003228:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d01c      	beq.n	800326a <validate+0x4e>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d018      	beq.n	800326a <validate+0x4e>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d013      	beq.n	800326a <validate+0x4e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	889a      	ldrh	r2, [r3, #4]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	88db      	ldrh	r3, [r3, #6]
 800324c:	429a      	cmp	r2, r3
 800324e:	d10c      	bne.n	800326a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	785b      	ldrb	r3, [r3, #1]
 8003256:	4618      	mov	r0, r3
 8003258:	f7fe f942 	bl	80014e0 <disk_status>
 800325c:	4603      	mov	r3, r0
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <validate+0x4e>
			res = FR_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800326a:	7bfb      	ldrb	r3, [r7, #15]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d102      	bne.n	8003276 <validate+0x5a>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	e000      	b.n	8003278 <validate+0x5c>
 8003276:	2300      	movs	r3, #0
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	6013      	str	r3, [r2, #0]
	return res;
 800327c:	7bfb      	ldrb	r3, [r7, #15]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	4613      	mov	r3, r2
 8003294:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800329a:	f107 0310 	add.w	r3, r7, #16
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff fcc9 	bl	8002c36 <get_ldnumber>
 80032a4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	da01      	bge.n	80032b0 <f_mount+0x28>
 80032ac:	230b      	movs	r3, #11
 80032ae:	e025      	b.n	80032fc <f_mount+0x74>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80032b0:	4a14      	ldr	r2, [pc, #80]	; (8003304 <f_mount+0x7c>)
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	2200      	movs	r2, #0
 80032c4:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	490b      	ldr	r1, [pc, #44]	; (8003304 <f_mount+0x7c>)
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 80032dc:	79fb      	ldrb	r3, [r7, #7]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <f_mount+0x5e>
 80032e2:	2300      	movs	r3, #0
 80032e4:	e00a      	b.n	80032fc <f_mount+0x74>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80032e6:	f107 010c 	add.w	r1, r7, #12
 80032ea:	f107 0308 	add.w	r3, r7, #8
 80032ee:	2200      	movs	r2, #0
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff fd3b 	bl	8002d6c <find_volume>
 80032f6:	4603      	mov	r3, r0
 80032f8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80032fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3720      	adds	r7, #32
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	20000208 	.word	0x20000208

08003308 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8003308:	b590      	push	{r4, r7, lr}
 800330a:	b099      	sub	sp, #100	; 0x64
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	4613      	mov	r3, r2
 8003314:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <f_open+0x18>
 800331c:	2309      	movs	r3, #9
 800331e:	e172      	b.n	8003606 <f_open+0x2fe>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8003320:	79fb      	ldrb	r3, [r7, #7]
 8003322:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003326:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8003328:	79fa      	ldrb	r2, [r7, #7]
 800332a:	f107 0114 	add.w	r1, r7, #20
 800332e:	f107 0308 	add.w	r3, r7, #8
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff fd1a 	bl	8002d6c <find_volume>
 8003338:	4603      	mov	r3, r0
 800333a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800333e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003342:	2b00      	cmp	r3, #0
 8003344:	f040 8156 	bne.w	80035f4 <f_open+0x2ec>
		dj.obj.fs = fs;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	f107 0318 	add.w	r3, r7, #24
 8003352:	4611      	mov	r1, r2
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff fbff 	bl	8002b58 <follow_path>
 800335a:	4603      	mov	r3, r0
 800335c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8003360:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003364:	2b00      	cmp	r3, #0
 8003366:	d107      	bne.n	8003378 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8003368:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800336c:	b25b      	sxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	da02      	bge.n	8003378 <f_open+0x70>
				res = FR_INVALID_NAME;
 8003372:	2306      	movs	r3, #6
 8003374:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8003378:	79fb      	ldrb	r3, [r7, #7]
 800337a:	f003 031c 	and.w	r3, r3, #28
 800337e:	2b00      	cmp	r3, #0
 8003380:	d073      	beq.n	800346a <f_open+0x162>
			if (res != FR_OK) {					/* No file, create new */
 8003382:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003386:	2b00      	cmp	r3, #0
 8003388:	d010      	beq.n	80033ac <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800338a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800338e:	2b04      	cmp	r3, #4
 8003390:	d107      	bne.n	80033a2 <f_open+0x9a>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8003392:	f107 0318 	add.w	r3, r7, #24
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff fae9 	bl	800296e <dir_register>
 800339c:	4603      	mov	r3, r0
 800339e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	f043 0308 	orr.w	r3, r3, #8
 80033a8:	71fb      	strb	r3, [r7, #7]
 80033aa:	e010      	b.n	80033ce <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80033ac:	7fbb      	ldrb	r3, [r7, #30]
 80033ae:	f003 0311 	and.w	r3, r3, #17
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <f_open+0xb6>
					res = FR_DENIED;
 80033b6:	2307      	movs	r3, #7
 80033b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80033bc:	e007      	b.n	80033ce <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d002      	beq.n	80033ce <f_open+0xc6>
 80033c8:	2308      	movs	r3, #8
 80033ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 80033ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d163      	bne.n	800349e <f_open+0x196>
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	f003 0308 	and.w	r3, r3, #8
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d05e      	beq.n	800349e <f_open+0x196>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033e4:	4611      	mov	r1, r2
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff fa2d 	bl	8002846 <ld_clust>
 80033ec:	6538      	str	r0, [r7, #80]	; 0x50
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 80033ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f0:	f103 040e 	add.w	r4, r3, #14
 80033f4:	f7fe fb36 	bl	8001a64 <get_fattime>
 80033f8:	4603      	mov	r3, r0
 80033fa:	4619      	mov	r1, r3
 80033fc:	4620      	mov	r0, r4
 80033fe:	f7fe fbd7 	bl	8001bb0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8003402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003404:	330b      	adds	r3, #11
 8003406:	2220      	movs	r2, #32
 8003408:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800340e:	2200      	movs	r2, #0
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff fa37 	bl	8002884 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8003416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003418:	331c      	adds	r3, #28
 800341a:	2100      	movs	r1, #0
 800341c:	4618      	mov	r0, r3
 800341e:	f7fe fbc7 	bl	8001bb0 <st_dword>
					fs->wflag = 1;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2201      	movs	r2, #1
 8003426:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8003428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800342a:	2b00      	cmp	r3, #0
 800342c:	d037      	beq.n	800349e <f_open+0x196>
						dw = fs->winsect;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003432:	64fb      	str	r3, [r7, #76]	; 0x4c
						res = remove_chain(&dj.obj, cl, 0);
 8003434:	f107 0318 	add.w	r3, r7, #24
 8003438:	2200      	movs	r2, #0
 800343a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800343c:	4618      	mov	r0, r3
 800343e:	f7fe ff2c 	bl	800229a <remove_chain>
 8003442:	4603      	mov	r3, r0
 8003444:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8003448:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800344c:	2b00      	cmp	r3, #0
 800344e:	d126      	bne.n	800349e <f_open+0x196>
							res = move_window(fs, dw);
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003454:	4618      	mov	r0, r3
 8003456:	f7fe fcda 	bl	8001e0e <move_window>
 800345a:	4603      	mov	r3, r0
 800345c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003464:	3a01      	subs	r2, #1
 8003466:	60da      	str	r2, [r3, #12]
 8003468:	e019      	b.n	800349e <f_open+0x196>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 800346a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800346e:	2b00      	cmp	r3, #0
 8003470:	d115      	bne.n	800349e <f_open+0x196>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8003472:	7fbb      	ldrb	r3, [r7, #30]
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <f_open+0x17c>
					res = FR_NO_FILE;
 800347c:	2304      	movs	r3, #4
 800347e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003482:	e00c      	b.n	800349e <f_open+0x196>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8003484:	79fb      	ldrb	r3, [r7, #7]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d007      	beq.n	800349e <f_open+0x196>
 800348e:	7fbb      	ldrb	r3, [r7, #30]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <f_open+0x196>
						res = FR_DENIED;
 8003498:	2307      	movs	r3, #7
 800349a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800349e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10f      	bne.n	80034c6 <f_open+0x1be>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 80034a6:	79fb      	ldrb	r3, [r7, #7]
 80034a8:	f003 0308 	and.w	r3, r3, #8
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <f_open+0x1b0>
 80034b0:	79fb      	ldrb	r3, [r7, #7]
 80034b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034b6:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 80034c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 80034c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f040 8092 	bne.w	80035f4 <f_open+0x2ec>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034d4:	4611      	mov	r1, r2
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff f9b5 	bl	8002846 <ld_clust>
 80034dc:	4602      	mov	r2, r0
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80034e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e4:	331c      	adds	r3, #28
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fe fb24 	bl	8001b34 <ld_dword>
 80034ec:	4602      	mov	r2, r0
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	88da      	ldrh	r2, [r3, #6]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	79fa      	ldrb	r2, [r7, #7]
 8003504:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	3328      	adds	r3, #40	; 0x28
 800351c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003520:	2100      	movs	r1, #0
 8003522:	4618      	mov	r0, r3
 8003524:	f7fe fb91 	bl	8001c4a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8003528:	79fb      	ldrb	r3, [r7, #7]
 800352a:	f003 0320 	and.w	r3, r3, #32
 800352e:	2b00      	cmp	r3, #0
 8003530:	d060      	beq.n	80035f4 <f_open+0x2ec>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d05c      	beq.n	80035f4 <f_open+0x2ec>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	895b      	ldrh	r3, [r3, #10]
 8003546:	025b      	lsls	r3, r3, #9
 8003548:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	657b      	str	r3, [r7, #84]	; 0x54
 8003556:	e016      	b.n	8003586 <f_open+0x27e>
					clst = get_fat(&fp->obj, clst);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800355c:	4618      	mov	r0, r3
 800355e:	f7fe fd10 	bl	8001f82 <get_fat>
 8003562:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8003564:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003566:	2b01      	cmp	r3, #1
 8003568:	d802      	bhi.n	8003570 <f_open+0x268>
 800356a:	2302      	movs	r3, #2
 800356c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8003570:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003576:	d102      	bne.n	800357e <f_open+0x276>
 8003578:	2301      	movs	r3, #1
 800357a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800357e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	657b      	str	r3, [r7, #84]	; 0x54
 8003586:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800358a:	2b00      	cmp	r3, #0
 800358c:	d103      	bne.n	8003596 <f_open+0x28e>
 800358e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003592:	429a      	cmp	r2, r3
 8003594:	d8e0      	bhi.n	8003558 <f_open+0x250>
				}
				fp->clust = clst;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800359a:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800359c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d127      	bne.n	80035f4 <f_open+0x2ec>
 80035a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d022      	beq.n	80035f4 <f_open+0x2ec>
					if ((sc = clst2sect(fs, clst)) == 0) {
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fe fcc6 	bl	8001f44 <clst2sect>
 80035b8:	6478      	str	r0, [r7, #68]	; 0x44
 80035ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d103      	bne.n	80035c8 <f_open+0x2c0>
						res = FR_INT_ERR;
 80035c0:	2302      	movs	r3, #2
 80035c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80035c6:	e015      	b.n	80035f4 <f_open+0x2ec>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80035c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ca:	0a5a      	lsrs	r2, r3, #9
 80035cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ce:	441a      	add	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	7858      	ldrb	r0, [r3, #1]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	69da      	ldr	r2, [r3, #28]
 80035e2:	2301      	movs	r3, #1
 80035e4:	f7fd ff92 	bl	800150c <disk_read>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <f_open+0x2ec>
 80035ee:	2301      	movs	r3, #1
 80035f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80035f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d002      	beq.n	8003602 <f_open+0x2fa>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8003602:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8003606:	4618      	mov	r0, r3
 8003608:	3764      	adds	r7, #100	; 0x64
 800360a:	46bd      	mov	sp, r7
 800360c:	bd90      	pop	{r4, r7, pc}

0800360e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b08c      	sub	sp, #48	; 0x30
 8003612:	af00      	add	r7, sp, #0
 8003614:	60f8      	str	r0, [r7, #12]
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	607a      	str	r2, [r7, #4]
 800361a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f107 0210 	add.w	r2, r7, #16
 800362c:	4611      	mov	r1, r2
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff fdf4 	bl	800321c <validate>
 8003634:	4603      	mov	r3, r0
 8003636:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800363a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800363e:	2b00      	cmp	r3, #0
 8003640:	d107      	bne.n	8003652 <f_write+0x44>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	7c5b      	ldrb	r3, [r3, #17]
 8003646:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800364a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800364e:	2b00      	cmp	r3, #0
 8003650:	d002      	beq.n	8003658 <f_write+0x4a>
 8003652:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003656:	e13f      	b.n	80038d8 <f_write+0x2ca>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	7c1b      	ldrb	r3, [r3, #16]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <f_write+0x5a>
 8003664:	2307      	movs	r3, #7
 8003666:	e137      	b.n	80038d8 <f_write+0x2ca>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	695a      	ldr	r2, [r3, #20]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	441a      	add	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	429a      	cmp	r2, r3
 8003676:	f080 8121 	bcs.w	80038bc <f_write+0x2ae>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	43db      	mvns	r3, r3
 8003680:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8003682:	e11b      	b.n	80038bc <f_write+0x2ae>
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800368c:	2b00      	cmp	r3, #0
 800368e:	f040 80d7 	bne.w	8003840 <f_write+0x232>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	0a5b      	lsrs	r3, r3, #9
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	8952      	ldrh	r2, [r2, #10]
 800369c:	3a01      	subs	r2, #1
 800369e:	4013      	ands	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d137      	bne.n	8003718 <f_write+0x10a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10c      	bne.n	80036ca <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80036b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10e      	bne.n	80036da <f_write+0xcc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2100      	movs	r1, #0
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fe fe4f 	bl	8002364 <create_chain>
 80036c6:	62b8      	str	r0, [r7, #40]	; 0x28
 80036c8:	e007      	b.n	80036da <f_write+0xcc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	4619      	mov	r1, r3
 80036d2:	4610      	mov	r0, r2
 80036d4:	f7fe fe46 	bl	8002364 <create_chain>
 80036d8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80036da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 80f2 	beq.w	80038c6 <f_write+0x2b8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80036e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d104      	bne.n	80036f2 <f_write+0xe4>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2202      	movs	r2, #2
 80036ec:	745a      	strb	r2, [r3, #17]
 80036ee:	2302      	movs	r3, #2
 80036f0:	e0f2      	b.n	80038d8 <f_write+0x2ca>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80036f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f8:	d104      	bne.n	8003704 <f_write+0xf6>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2201      	movs	r2, #1
 80036fe:	745a      	strb	r2, [r3, #17]
 8003700:	2301      	movs	r3, #1
 8003702:	e0e9      	b.n	80038d8 <f_write+0x2ca>
				fp->clust = clst;			/* Update current cluster */
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003708:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d102      	bne.n	8003718 <f_write+0x10a>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003716:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	7c1b      	ldrb	r3, [r3, #16]
 800371c:	b25b      	sxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	da18      	bge.n	8003754 <f_write+0x146>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	7858      	ldrb	r0, [r3, #1]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	69da      	ldr	r2, [r3, #28]
 8003730:	2301      	movs	r3, #1
 8003732:	f7fd ff55 	bl	80015e0 <disk_write>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d004      	beq.n	8003746 <f_write+0x138>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2201      	movs	r2, #1
 8003740:	745a      	strb	r2, [r3, #17]
 8003742:	2301      	movs	r3, #1
 8003744:	e0c8      	b.n	80038d8 <f_write+0x2ca>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	7c1b      	ldrb	r3, [r3, #16]
 800374a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800374e:	b2da      	uxtb	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	4619      	mov	r1, r3
 800375c:	4610      	mov	r0, r2
 800375e:	f7fe fbf1 	bl	8001f44 <clst2sect>
 8003762:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d104      	bne.n	8003774 <f_write+0x166>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2202      	movs	r2, #2
 800376e:	745a      	strb	r2, [r3, #17]
 8003770:	2302      	movs	r3, #2
 8003772:	e0b1      	b.n	80038d8 <f_write+0x2ca>
			sect += csect;
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	4413      	add	r3, r2
 800377a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	0a5b      	lsrs	r3, r3, #9
 8003780:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d03c      	beq.n	8003802 <f_write+0x1f4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	4413      	add	r3, r2
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	8952      	ldrh	r2, [r2, #10]
 8003792:	4293      	cmp	r3, r2
 8003794:	d905      	bls.n	80037a2 <f_write+0x194>
					cc = fs->csize - csect;
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	895b      	ldrh	r3, [r3, #10]
 800379a:	461a      	mov	r2, r3
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	7858      	ldrb	r0, [r3, #1]
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	69f9      	ldr	r1, [r7, #28]
 80037ac:	f7fd ff18 	bl	80015e0 <disk_write>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d004      	beq.n	80037c0 <f_write+0x1b2>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2201      	movs	r2, #1
 80037ba:	745a      	strb	r2, [r3, #17]
 80037bc:	2301      	movs	r3, #1
 80037be:	e08b      	b.n	80038d8 <f_write+0x2ca>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	69da      	ldr	r2, [r3, #28]
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	6a3a      	ldr	r2, [r7, #32]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d915      	bls.n	80037fa <f_write+0x1ec>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	69da      	ldr	r2, [r3, #28]
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	025b      	lsls	r3, r3, #9
 80037de:	69fa      	ldr	r2, [r7, #28]
 80037e0:	4413      	add	r3, r2
 80037e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037e6:	4619      	mov	r1, r3
 80037e8:	f7fe fa0e 	bl	8001c08 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	7c1b      	ldrb	r3, [r3, #16]
 80037f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	025b      	lsls	r3, r3, #9
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8003800:	e03f      	b.n	8003882 <f_write+0x274>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	429a      	cmp	r2, r3
 800380a:	d016      	beq.n	800383a <f_write+0x22c>
				fp->fptr < fp->obj.objsize &&
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	695a      	ldr	r2, [r3, #20]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8003814:	429a      	cmp	r2, r3
 8003816:	d210      	bcs.n	800383a <f_write+0x22c>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	7858      	ldrb	r0, [r3, #1]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003822:	2301      	movs	r3, #1
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	f7fd fe71 	bl	800150c <disk_read>
 800382a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800382c:	2b00      	cmp	r3, #0
 800382e:	d004      	beq.n	800383a <f_write+0x22c>
					ABORT(fs, FR_DISK_ERR);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2201      	movs	r2, #1
 8003834:	745a      	strb	r2, [r3, #17]
 8003836:	2301      	movs	r3, #1
 8003838:	e04e      	b.n	80038d8 <f_write+0x2ca>
			}
#endif
			fp->sect = sect;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003848:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800384e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	429a      	cmp	r2, r3
 8003854:	d901      	bls.n	800385a <f_write+0x24c>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003868:	4413      	add	r3, r2
 800386a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800386c:	69f9      	ldr	r1, [r7, #28]
 800386e:	4618      	mov	r0, r3
 8003870:	f7fe f9ca 	bl	8001c08 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	7c1b      	ldrb	r3, [r3, #16]
 8003878:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800387c:	b2da      	uxtb	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	741a      	strb	r2, [r3, #16]
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	607b      	str	r3, [r7, #4]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	441a      	add	r2, r3
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	69fa      	ldr	r2, [r7, #28]
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	4413      	add	r3, r2
 800389c:	61fb      	str	r3, [r7, #28]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	695a      	ldr	r2, [r3, #20]
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	441a      	add	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	615a      	str	r2, [r3, #20]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	bf38      	it	cc
 80038b6:	461a      	movcc	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	60da      	str	r2, [r3, #12]
	for ( ;  btw;							/* Repeat until all data written */
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f47f aee0 	bne.w	8003684 <f_write+0x76>
 80038c4:	e000      	b.n	80038c8 <f_write+0x2ba>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80038c6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	7c1b      	ldrb	r3, [r3, #16]
 80038cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3730      	adds	r7, #48	; 0x30
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f107 0208 	add.w	r2, r7, #8
 80038ee:	4611      	mov	r1, r2
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff fc93 	bl	800321c <validate>
 80038f6:	4603      	mov	r3, r0
 80038f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80038fa:	7dfb      	ldrb	r3, [r7, #23]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d168      	bne.n	80039d2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	7c1b      	ldrb	r3, [r3, #16]
 8003904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003908:	2b00      	cmp	r3, #0
 800390a:	d062      	beq.n	80039d2 <f_sync+0xf2>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	7c1b      	ldrb	r3, [r3, #16]
 8003910:	b25b      	sxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	da15      	bge.n	8003942 <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	7858      	ldrb	r0, [r3, #1]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	69da      	ldr	r2, [r3, #28]
 8003924:	2301      	movs	r3, #1
 8003926:	f7fd fe5b 	bl	80015e0 <disk_write>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <f_sync+0x54>
 8003930:	2301      	movs	r3, #1
 8003932:	e04f      	b.n	80039d4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	7c1b      	ldrb	r3, [r3, #16]
 8003938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800393c:	b2da      	uxtb	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8003942:	f7fe f88f 	bl	8001a64 <get_fattime>
 8003946:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	4619      	mov	r1, r3
 8003950:	4610      	mov	r0, r2
 8003952:	f7fe fa5c 	bl	8001e0e <move_window>
 8003956:	4603      	mov	r3, r0
 8003958:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800395a:	7dfb      	ldrb	r3, [r7, #23]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d138      	bne.n	80039d2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	330b      	adds	r3, #11
 800396a:	781a      	ldrb	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	330b      	adds	r3, #11
 8003970:	f042 0220 	orr.w	r2, r2, #32
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6818      	ldr	r0, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	461a      	mov	r2, r3
 8003982:	68f9      	ldr	r1, [r7, #12]
 8003984:	f7fe ff7e 	bl	8002884 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f103 021c 	add.w	r2, r3, #28
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	4619      	mov	r1, r3
 8003994:	4610      	mov	r0, r2
 8003996:	f7fe f90b 	bl	8001bb0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	3316      	adds	r3, #22
 800399e:	6939      	ldr	r1, [r7, #16]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fe f905 	bl	8001bb0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	3312      	adds	r3, #18
 80039aa:	2100      	movs	r1, #0
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fe f8e4 	bl	8001b7a <st_word>
					fs->wflag = 1;
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2201      	movs	r2, #1
 80039b6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fe fa54 	bl	8001e68 <sync_fs>
 80039c0:	4603      	mov	r3, r0
 80039c2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	7c1b      	ldrb	r3, [r3, #16]
 80039c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039cc:	b2da      	uxtb	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80039d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7ff ff7b 	bl	80038e0 <f_sync>
 80039ea:	4603      	mov	r3, r0
 80039ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10e      	bne.n	8003a12 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f107 0208 	add.w	r2, r7, #8
 80039fa:	4611      	mov	r1, r2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fc0d 	bl	800321c <validate>
 8003a02:	4603      	mov	r3, r0
 8003a04:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d102      	bne.n	8003a12 <f_close+0x36>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <concat>:
static void MX_SPI1_Init(void);

/* USER CODE BEGIN PFP */

char* concat(const char *s1, const char *s2)
{
 8003a1c:	b590      	push	{r4, r7, lr}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
    char *result = malloc(strlen(s1) + strlen(s2) + 1); // +1 for the null-terminator
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7fc fbd2 	bl	80001d0 <strlen>
 8003a2c:	4604      	mov	r4, r0
 8003a2e:	6838      	ldr	r0, [r7, #0]
 8003a30:	f7fc fbce 	bl	80001d0 <strlen>
 8003a34:	4603      	mov	r3, r0
 8003a36:	4423      	add	r3, r4
 8003a38:	3301      	adds	r3, #1
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f007 f864 	bl	800ab08 <malloc>
 8003a40:	4603      	mov	r3, r0
 8003a42:	60fb      	str	r3, [r7, #12]
    strcpy(result, s1);
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f007 fdc9 	bl	800b5de <strcpy>
    strcat(result, s2);
 8003a4c:	6839      	ldr	r1, [r7, #0]
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f007 fdb6 	bl	800b5c0 <strcat>
    return result;
 8003a54:	68fb      	ldr	r3, [r7, #12]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd90      	pop	{r4, r7, pc}
	...

08003a60 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a12      	ldr	r2, [pc, #72]	; (8003ab8 <HAL_UART_RxCpltCallback+0x58>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d11e      	bne.n	8003ab0 <HAL_UART_RxCpltCallback+0x50>
		{// tutaj umieszczamy kod wykonywany po otrzymaniu bajtu
			HAL_UART_Receive_IT(&huart2, receiveUART, sizeReceiveUART);
 8003a72:	4b12      	ldr	r3, [pc, #72]	; (8003abc <HAL_UART_RxCpltCallback+0x5c>)
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	4911      	ldr	r1, [pc, #68]	; (8003ac0 <HAL_UART_RxCpltCallback+0x60>)
 8003a7a:	4812      	ldr	r0, [pc, #72]	; (8003ac4 <HAL_UART_RxCpltCallback+0x64>)
 8003a7c:	f006 fa12 	bl	8009ea4 <HAL_UART_Receive_IT>
			if (receiveUART[0] == 100){
 8003a80:	4b0f      	ldr	r3, [pc, #60]	; (8003ac0 <HAL_UART_RxCpltCallback+0x60>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b64      	cmp	r3, #100	; 0x64
 8003a86:	d106      	bne.n	8003a96 <HAL_UART_RxCpltCallback+0x36>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a8e:	480e      	ldr	r0, [pc, #56]	; (8003ac8 <HAL_UART_RxCpltCallback+0x68>)
 8003a90:	f003 fb88 	bl	80071a4 <HAL_GPIO_WritePin>
 8003a94:	e005      	b.n	8003aa2 <HAL_UART_RxCpltCallback+0x42>
			}
			else{
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8003a96:	2200      	movs	r2, #0
 8003a98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a9c:	480a      	ldr	r0, [pc, #40]	; (8003ac8 <HAL_UART_RxCpltCallback+0x68>)
 8003a9e:	f003 fb81 	bl	80071a4 <HAL_GPIO_WritePin>
			}
			HAL_UART_Transmit_IT(&huart2, receiveUART, sizeSendUARTz2);
 8003aa2:	4b0a      	ldr	r3, [pc, #40]	; (8003acc <HAL_UART_RxCpltCallback+0x6c>)
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	4905      	ldr	r1, [pc, #20]	; (8003ac0 <HAL_UART_RxCpltCallback+0x60>)
 8003aaa:	4806      	ldr	r0, [pc, #24]	; (8003ac4 <HAL_UART_RxCpltCallback+0x64>)
 8003aac:	f006 f9b5 	bl	8009e1a <HAL_UART_Transmit_IT>
		}
}
 8003ab0:	bf00      	nop
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40004400 	.word	0x40004400
 8003abc:	20000004 	.word	0x20000004
 8003ac0:	20013720 	.word	0x20013720
 8003ac4:	20013784 	.word	0x20013784
 8003ac8:	40020c00 	.word	0x40020c00
 8003acc:	20000002 	.word	0x20000002

08003ad0 <hcsr04_read>:


uint32_t hcsr04_read (void)
{		// 6 echo_pin	 0 pin_trigger
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
	signal_time=0;			//BIBLIOTEKA DWT_DELAY DLA DELAYU W US A NIE MS
 8003ad4:	4b19      	ldr	r3, [pc, #100]	; (8003b3c <hcsr04_read+0x6c>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // reset pinu
 8003ada:	2200      	movs	r2, #0
 8003adc:	2101      	movs	r1, #1
 8003ade:	4818      	ldr	r0, [pc, #96]	; (8003b40 <hcsr04_read+0x70>)
 8003ae0:	f003 fb60 	bl	80071a4 <HAL_GPIO_WritePin>
	DWT_Delay(2);
 8003ae4:	2002      	movs	r0, #2
 8003ae6:	f7fd ffe7 	bl	8001ab8 <DWT_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // stan wysoki na pin
 8003aea:	2201      	movs	r2, #1
 8003aec:	2101      	movs	r1, #1
 8003aee:	4814      	ldr	r0, [pc, #80]	; (8003b40 <hcsr04_read+0x70>)
 8003af0:	f003 fb58 	bl	80071a4 <HAL_GPIO_WritePin>
	DWT_Delay(10);
 8003af4:	200a      	movs	r0, #10
 8003af6:	f7fd ffdf 	bl	8001ab8 <DWT_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // stan wysoki na pin
 8003afa:	2200      	movs	r2, #0
 8003afc:	2101      	movs	r1, #1
 8003afe:	4810      	ldr	r0, [pc, #64]	; (8003b40 <hcsr04_read+0x70>)
 8003b00:	f003 fb50 	bl	80071a4 <HAL_GPIO_WritePin>

	while (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)));  // petla az pin nie wejdzie w stan wysoki
 8003b04:	bf00      	nop
 8003b06:	2180      	movs	r1, #128	; 0x80
 8003b08:	480e      	ldr	r0, [pc, #56]	; (8003b44 <hcsr04_read+0x74>)
 8003b0a:	f003 fb33 	bl	8007174 <HAL_GPIO_ReadPin>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f8      	beq.n	8003b06 <hcsr04_read+0x36>
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))    // while jest wysoki mierz czas
 8003b14:	e007      	b.n	8003b26 <hcsr04_read+0x56>
	{
		signal_time++;
 8003b16:	4b09      	ldr	r3, [pc, #36]	; (8003b3c <hcsr04_read+0x6c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	4a07      	ldr	r2, [pc, #28]	; (8003b3c <hcsr04_read+0x6c>)
 8003b1e:	6013      	str	r3, [r2, #0]
		DWT_Delay(1);
 8003b20:	2001      	movs	r0, #1
 8003b22:	f7fd ffc9 	bl	8001ab8 <DWT_Delay>
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))    // while jest wysoki mierz czas
 8003b26:	2180      	movs	r1, #128	; 0x80
 8003b28:	4806      	ldr	r0, [pc, #24]	; (8003b44 <hcsr04_read+0x74>)
 8003b2a:	f003 fb23 	bl	8007174 <HAL_GPIO_ReadPin>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1f0      	bne.n	8003b16 <hcsr04_read+0x46>
	}

	return signal_time;
 8003b34:	4b01      	ldr	r3, [pc, #4]	; (8003b3c <hcsr04_read+0x6c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	200132ec 	.word	0x200132ec
 8003b40:	40020400 	.word	0x40020400
 8003b44:	40020000 	.word	0x40020000

08003b48 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
	if(htim->Instance== TIM3)
	{
		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
	}
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	0000      	movs	r0, r0
	...

08003b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b60:	b590      	push	{r4, r7, lr}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b66:	f000 ff9d 	bl	8004aa4 <HAL_Init>

  /* USER CODE BEGIN Init */
  DWT_Init();
 8003b6a:	f7fd ff85 	bl	8001a78 <DWT_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b6e:	f000 f8d1 	bl	8003d14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b72:	f000 fa63 	bl	800403c <MX_GPIO_Init>
  MX_TIM3_Init();
 8003b76:	f000 f9c9 	bl	8003f0c <MX_TIM3_Init>
  MX_DCMI_Init();
 8003b7a:	f000 f93b 	bl	8003df4 <MX_DCMI_Init>
  MX_I2C2_Init();
 8003b7e:	f000 f961 	bl	8003e44 <MX_I2C2_Init>
  MX_DMA_Init();
 8003b82:	f000 fa3b 	bl	8003ffc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003b86:	f000 fa0f 	bl	8003fa8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8003b8a:	f000 f989 	bl	8003ea0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  if (camera_init() == RET_OK)
 8003b8e:	f7fd f9ab 	bl	8000ee8 <camera_init>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10b      	bne.n	8003bb0 <main+0x50>
    {
  	  if (camera_config(CAMERA_MODE_QVGA_RGB565) == RET_OK) // CAMERA_MODE_QVGA_RGB565 -> ignored
 8003b98:	2000      	movs	r0, #0
 8003b9a:	f7fd f9b5 	bl	8000f08 <camera_config>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d105      	bne.n	8003bb0 <main+0x50>
  	  {
  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); // init OK
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003baa:	4849      	ldr	r0, [pc, #292]	; (8003cd0 <main+0x170>)
 8003bac:	f003 fafa 	bl	80071a4 <HAL_GPIO_WritePin>
  	  }
    }


  HAL_TIM_Base_Start_IT(&htim3);
 8003bb0:	4848      	ldr	r0, [pc, #288]	; (8003cd4 <main+0x174>)
 8003bb2:	f005 fd10 	bl	80095d6 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, receiveUART, sizeReceiveUART);
 8003bb6:	4b48      	ldr	r3, [pc, #288]	; (8003cd8 <main+0x178>)
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4947      	ldr	r1, [pc, #284]	; (8003cdc <main+0x17c>)
 8003bbe:	4848      	ldr	r0, [pc, #288]	; (8003ce0 <main+0x180>)
 8003bc0:	f006 f970 	bl	8009ea4 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sensor_time = hcsr04_read();
 8003bc4:	f7ff ff84 	bl	8003ad0 <hcsr04_read>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	4b46      	ldr	r3, [pc, #280]	; (8003ce4 <main+0x184>)
 8003bcc:	601a      	str	r2, [r3, #0]
	  distance  = sensor_time * .034/2;
 8003bce:	4b45      	ldr	r3, [pc, #276]	; (8003ce4 <main+0x184>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fc fc96 	bl	8000504 <__aeabi_ui2d>
 8003bd8:	a33b      	add	r3, pc, #236	; (adr r3, 8003cc8 <main+0x168>)
 8003bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bde:	f7fc fd0b 	bl	80005f8 <__aeabi_dmul>
 8003be2:	4603      	mov	r3, r0
 8003be4:	460c      	mov	r4, r1
 8003be6:	4618      	mov	r0, r3
 8003be8:	4621      	mov	r1, r4
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003bf2:	f7fc fe2b 	bl	800084c <__aeabi_ddiv>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	460c      	mov	r4, r1
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	4621      	mov	r1, r4
 8003bfe:	f7fc ffd3 	bl	8000ba8 <__aeabi_d2uiz>
 8003c02:	4602      	mov	r2, r0
 8003c04:	4b38      	ldr	r3, [pc, #224]	; (8003ce8 <main+0x188>)
 8003c06:	601a      	str	r2, [r3, #0]


	  if(distance < 30){
 8003c08:	4b37      	ldr	r3, [pc, #220]	; (8003ce8 <main+0x188>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b1d      	cmp	r3, #29
 8003c0e:	d8d9      	bhi.n	8003bc4 <main+0x64>
		  if (camera_startCap(CAMERA_CAP_SINGLE_FRAME, (uint32_t)cam_buf)  == RET_OK)
 8003c10:	4936      	ldr	r1, [pc, #216]	; (8003cec <main+0x18c>)
 8003c12:	2001      	movs	r0, #1
 8003c14:	f7fd f99a 	bl	8000f4c <camera_startCap>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d14d      	bne.n	8003cba <main+0x15a>
		  		  {
		  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c24:	482a      	ldr	r0, [pc, #168]	; (8003cd0 <main+0x170>)
 8003c26:	f003 fabd 	bl	80071a4 <HAL_GPIO_WritePin>
		  			  camera_stopCap();
 8003c2a:	f7fd f9b5 	bl	8000f98 <camera_stopCap>
		  			  f_mount(&FatFs, "", 0);
 8003c2e:	2200      	movs	r2, #0
 8003c30:	492f      	ldr	r1, [pc, #188]	; (8003cf0 <main+0x190>)
 8003c32:	4830      	ldr	r0, [pc, #192]	; (8003cf4 <main+0x194>)
 8003c34:	f7ff fb28 	bl	8003288 <f_mount>

		  			  char str[3];
		  			  sprintf(str, "%d", photo_num);
 8003c38:	4b2f      	ldr	r3, [pc, #188]	; (8003cf8 <main+0x198>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	1d3b      	adds	r3, r7, #4
 8003c3e:	492f      	ldr	r1, [pc, #188]	; (8003cfc <main+0x19c>)
 8003c40:	4618      	mov	r0, r3
 8003c42:	f007 fc9d 	bl	800b580 <siprintf>
		  			  char *file_result = concat(str, ".raw");
 8003c46:	1d3b      	adds	r3, r7, #4
 8003c48:	492d      	ldr	r1, [pc, #180]	; (8003d00 <main+0x1a0>)
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff fee6 	bl	8003a1c <concat>
 8003c50:	60b8      	str	r0, [r7, #8]
		  			  photo_num += 1;
 8003c52:	4b29      	ldr	r3, [pc, #164]	; (8003cf8 <main+0x198>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3301      	adds	r3, #1
 8003c58:	4a27      	ldr	r2, [pc, #156]	; (8003cf8 <main+0x198>)
 8003c5a:	6013      	str	r3, [r2, #0]

		  			  f_open(&file, "image.raw", FA_OPEN_ALWAYS | FA_CREATE_ALWAYS | FA_WRITE);
 8003c5c:	221a      	movs	r2, #26
 8003c5e:	4929      	ldr	r1, [pc, #164]	; (8003d04 <main+0x1a4>)
 8003c60:	4829      	ldr	r0, [pc, #164]	; (8003d08 <main+0x1a8>)
 8003c62:	f7ff fb51 	bl	8003308 <f_open>

		  			  HAL_Delay(50);
 8003c66:	2032      	movs	r0, #50	; 0x32
 8003c68:	f000 ff8e 	bl	8004b88 <HAL_Delay>

		  			  for (int i = 0; i < 320 * 120 * 2; i += 2)
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	e012      	b.n	8003c98 <main+0x138>
		  			  {
		  				  f_write(&file, &cam_buf[i], 2, &bw);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	4a1d      	ldr	r2, [pc, #116]	; (8003cec <main+0x18c>)
 8003c76:	1899      	adds	r1, r3, r2
 8003c78:	4b24      	ldr	r3, [pc, #144]	; (8003d0c <main+0x1ac>)
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	4822      	ldr	r0, [pc, #136]	; (8003d08 <main+0x1a8>)
 8003c7e:	f7ff fcc6 	bl	800360e <f_write>
		  				  HAL_UART_Transmit_IT(&huart2, &cam_buf[i], 2);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4a19      	ldr	r2, [pc, #100]	; (8003cec <main+0x18c>)
 8003c86:	4413      	add	r3, r2
 8003c88:	2202      	movs	r2, #2
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4814      	ldr	r0, [pc, #80]	; (8003ce0 <main+0x180>)
 8003c8e:	f006 f8c4 	bl	8009e1a <HAL_UART_Transmit_IT>
		  			  for (int i = 0; i < 320 * 120 * 2; i += 2)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	3302      	adds	r3, #2
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 8003c9e:	dbe8      	blt.n	8003c72 <main+0x112>
		  			  }

		  			  fresult = f_close (&file);
 8003ca0:	4819      	ldr	r0, [pc, #100]	; (8003d08 <main+0x1a8>)
 8003ca2:	f7ff fe9b 	bl	80039dc <f_close>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4b19      	ldr	r3, [pc, #100]	; (8003d10 <main+0x1b0>)
 8003cac:	701a      	strb	r2, [r3, #0]
		  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); // captured
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003cb4:	4806      	ldr	r0, [pc, #24]	; (8003cd0 <main+0x170>)
 8003cb6:	f003 fa75 	bl	80071a4 <HAL_GPIO_WritePin>
		  		  }
		  HAL_Delay(2000);
 8003cba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003cbe:	f000 ff63 	bl	8004b88 <HAL_Delay>
	  sensor_time = hcsr04_read();
 8003cc2:	e77f      	b.n	8003bc4 <main+0x64>
 8003cc4:	f3af 8000 	nop.w
 8003cc8:	b020c49c 	.word	0xb020c49c
 8003ccc:	3fa16872 	.word	0x3fa16872
 8003cd0:	40020c00 	.word	0x40020c00
 8003cd4:	20013370 	.word	0x20013370
 8003cd8:	20000004 	.word	0x20000004
 8003cdc:	20013720 	.word	0x20013720
 8003ce0:	20013784 	.word	0x20013784
 8003ce4:	20013294 	.word	0x20013294
 8003ce8:	20013350 	.word	0x20013350
 8003cec:	20000694 	.word	0x20000694
 8003cf0:	0800d580 	.word	0x0800d580
 8003cf4:	20000210 	.word	0x20000210
 8003cf8:	20000008 	.word	0x20000008
 8003cfc:	0800d584 	.word	0x0800d584
 8003d00:	0800d588 	.word	0x0800d588
 8003d04:	0800d590 	.word	0x0800d590
 8003d08:	200133b0 	.word	0x200133b0
 8003d0c:	20013724 	.word	0x20013724
 8003d10:	20013728 	.word	0x20013728

08003d14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b094      	sub	sp, #80	; 0x50
 8003d18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d1a:	f107 0320 	add.w	r3, r7, #32
 8003d1e:	2230      	movs	r2, #48	; 0x30
 8003d20:	2100      	movs	r1, #0
 8003d22:	4618      	mov	r0, r3
 8003d24:	f006 fef8 	bl	800ab18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d28:	f107 030c 	add.w	r3, r7, #12
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	605a      	str	r2, [r3, #4]
 8003d32:	609a      	str	r2, [r3, #8]
 8003d34:	60da      	str	r2, [r3, #12]
 8003d36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60bb      	str	r3, [r7, #8]
 8003d3c:	4b2b      	ldr	r3, [pc, #172]	; (8003dec <SystemClock_Config+0xd8>)
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d40:	4a2a      	ldr	r2, [pc, #168]	; (8003dec <SystemClock_Config+0xd8>)
 8003d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d46:	6413      	str	r3, [r2, #64]	; 0x40
 8003d48:	4b28      	ldr	r3, [pc, #160]	; (8003dec <SystemClock_Config+0xd8>)
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d50:	60bb      	str	r3, [r7, #8]
 8003d52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d54:	2300      	movs	r3, #0
 8003d56:	607b      	str	r3, [r7, #4]
 8003d58:	4b25      	ldr	r3, [pc, #148]	; (8003df0 <SystemClock_Config+0xdc>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a24      	ldr	r2, [pc, #144]	; (8003df0 <SystemClock_Config+0xdc>)
 8003d5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	4b22      	ldr	r3, [pc, #136]	; (8003df0 <SystemClock_Config+0xdc>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d6c:	607b      	str	r3, [r7, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003d70:	2301      	movs	r3, #1
 8003d72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003d84:	2304      	movs	r3, #4
 8003d86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003d88:	23a8      	movs	r3, #168	; 0xa8
 8003d8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003d90:	2304      	movs	r3, #4
 8003d92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d94:	f107 0320 	add.w	r3, r7, #32
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f004 fb33 	bl	8008404 <HAL_RCC_OscConfig>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003da4:	f000 f9fa 	bl	800419c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003da8:	230f      	movs	r3, #15
 8003daa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003dac:	2302      	movs	r3, #2
 8003dae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003db0:	2300      	movs	r3, #0
 8003db2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003db4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003db8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dbe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003dc0:	f107 030c 	add.w	r3, r7, #12
 8003dc4:	2105      	movs	r1, #5
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f004 fd8c 	bl	80088e4 <HAL_RCC_ClockConfig>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003dd2:	f000 f9e3 	bl	800419c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_4);
 8003dd6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003dda:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 8003dde:	2000      	movs	r0, #0
 8003de0:	f004 fe66 	bl	8008ab0 <HAL_RCC_MCOConfig>
}
 8003de4:	bf00      	nop
 8003de6:	3750      	adds	r7, #80	; 0x50
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40023800 	.word	0x40023800
 8003df0:	40007000 	.word	0x40007000

08003df4 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8003df8:	4b10      	ldr	r3, [pc, #64]	; (8003e3c <MX_DCMI_Init+0x48>)
 8003dfa:	4a11      	ldr	r2, [pc, #68]	; (8003e40 <MX_DCMI_Init+0x4c>)
 8003dfc:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8003dfe:	4b0f      	ldr	r3, [pc, #60]	; (8003e3c <MX_DCMI_Init+0x48>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8003e04:	4b0d      	ldr	r3, [pc, #52]	; (8003e3c <MX_DCMI_Init+0x48>)
 8003e06:	2220      	movs	r2, #32
 8003e08:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8003e0a:	4b0c      	ldr	r3, [pc, #48]	; (8003e3c <MX_DCMI_Init+0x48>)
 8003e0c:	2280      	movs	r2, #128	; 0x80
 8003e0e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8003e10:	4b0a      	ldr	r3, [pc, #40]	; (8003e3c <MX_DCMI_Init+0x48>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8003e16:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <MX_DCMI_Init+0x48>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8003e1c:	4b07      	ldr	r3, [pc, #28]	; (8003e3c <MX_DCMI_Init+0x48>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8003e22:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <MX_DCMI_Init+0x48>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8003e28:	4804      	ldr	r0, [pc, #16]	; (8003e3c <MX_DCMI_Init+0x48>)
 8003e2a:	f001 fa1b 	bl	8005264 <HAL_DCMI_Init>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 8003e34:	f000 f9b2 	bl	800419c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8003e38:	bf00      	nop
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	200135d8 	.word	0x200135d8
 8003e40:	50050000 	.word	0x50050000

08003e44 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003e48:	4b12      	ldr	r3, [pc, #72]	; (8003e94 <MX_I2C2_Init+0x50>)
 8003e4a:	4a13      	ldr	r2, [pc, #76]	; (8003e98 <MX_I2C2_Init+0x54>)
 8003e4c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003e4e:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <MX_I2C2_Init+0x50>)
 8003e50:	4a12      	ldr	r2, [pc, #72]	; (8003e9c <MX_I2C2_Init+0x58>)
 8003e52:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e54:	4b0f      	ldr	r3, [pc, #60]	; (8003e94 <MX_I2C2_Init+0x50>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003e5a:	4b0e      	ldr	r3, [pc, #56]	; (8003e94 <MX_I2C2_Init+0x50>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e60:	4b0c      	ldr	r3, [pc, #48]	; (8003e94 <MX_I2C2_Init+0x50>)
 8003e62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e66:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e68:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <MX_I2C2_Init+0x50>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003e6e:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <MX_I2C2_Init+0x50>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e74:	4b07      	ldr	r3, [pc, #28]	; (8003e94 <MX_I2C2_Init+0x50>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e7a:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <MX_I2C2_Init+0x50>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003e80:	4804      	ldr	r0, [pc, #16]	; (8003e94 <MX_I2C2_Init+0x50>)
 8003e82:	f003 f9a9 	bl	80071d8 <HAL_I2C_Init>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003e8c:	f000 f986 	bl	800419c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003e90:	bf00      	nop
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	20013298 	.word	0x20013298
 8003e98:	40005800 	.word	0x40005800
 8003e9c:	000186a0 	.word	0x000186a0

08003ea0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003ea4:	4b17      	ldr	r3, [pc, #92]	; (8003f04 <MX_SPI1_Init+0x64>)
 8003ea6:	4a18      	ldr	r2, [pc, #96]	; (8003f08 <MX_SPI1_Init+0x68>)
 8003ea8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003eaa:	4b16      	ldr	r3, [pc, #88]	; (8003f04 <MX_SPI1_Init+0x64>)
 8003eac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003eb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003eb2:	4b14      	ldr	r3, [pc, #80]	; (8003f04 <MX_SPI1_Init+0x64>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003eb8:	4b12      	ldr	r3, [pc, #72]	; (8003f04 <MX_SPI1_Init+0x64>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ebe:	4b11      	ldr	r3, [pc, #68]	; (8003f04 <MX_SPI1_Init+0x64>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ec4:	4b0f      	ldr	r3, [pc, #60]	; (8003f04 <MX_SPI1_Init+0x64>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003eca:	4b0e      	ldr	r3, [pc, #56]	; (8003f04 <MX_SPI1_Init+0x64>)
 8003ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ed0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003ed2:	4b0c      	ldr	r3, [pc, #48]	; (8003f04 <MX_SPI1_Init+0x64>)
 8003ed4:	2218      	movs	r2, #24
 8003ed6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ed8:	4b0a      	ldr	r3, [pc, #40]	; (8003f04 <MX_SPI1_Init+0x64>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ede:	4b09      	ldr	r3, [pc, #36]	; (8003f04 <MX_SPI1_Init+0x64>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ee4:	4b07      	ldr	r3, [pc, #28]	; (8003f04 <MX_SPI1_Init+0x64>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003eea:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <MX_SPI1_Init+0x64>)
 8003eec:	220a      	movs	r2, #10
 8003eee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003ef0:	4804      	ldr	r0, [pc, #16]	; (8003f04 <MX_SPI1_Init+0x64>)
 8003ef2:	f004 ff51 	bl	8008d98 <HAL_SPI_Init>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003efc:	f000 f94e 	bl	800419c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003f00:	bf00      	nop
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	2001372c 	.word	0x2001372c
 8003f08:	40013000 	.word	0x40013000

08003f0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f12:	f107 0308 	add.w	r3, r7, #8
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	605a      	str	r2, [r3, #4]
 8003f1c:	609a      	str	r2, [r3, #8]
 8003f1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f20:	463b      	mov	r3, r7
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f28:	4b1d      	ldr	r3, [pc, #116]	; (8003fa0 <MX_TIM3_Init+0x94>)
 8003f2a:	4a1e      	ldr	r2, [pc, #120]	; (8003fa4 <MX_TIM3_Init+0x98>)
 8003f2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 8003f2e:	4b1c      	ldr	r3, [pc, #112]	; (8003fa0 <MX_TIM3_Init+0x94>)
 8003f30:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003f34:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f36:	4b1a      	ldr	r3, [pc, #104]	; (8003fa0 <MX_TIM3_Init+0x94>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8003f3c:	4b18      	ldr	r3, [pc, #96]	; (8003fa0 <MX_TIM3_Init+0x94>)
 8003f3e:	f242 720f 	movw	r2, #9999	; 0x270f
 8003f42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f44:	4b16      	ldr	r3, [pc, #88]	; (8003fa0 <MX_TIM3_Init+0x94>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f4a:	4b15      	ldr	r3, [pc, #84]	; (8003fa0 <MX_TIM3_Init+0x94>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003f50:	4813      	ldr	r0, [pc, #76]	; (8003fa0 <MX_TIM3_Init+0x94>)
 8003f52:	f005 fb15 	bl	8009580 <HAL_TIM_Base_Init>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003f5c:	f000 f91e 	bl	800419c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003f66:	f107 0308 	add.w	r3, r7, #8
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	480c      	ldr	r0, [pc, #48]	; (8003fa0 <MX_TIM3_Init+0x94>)
 8003f6e:	f005 fc5e 	bl	800982e <HAL_TIM_ConfigClockSource>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003f78:	f000 f910 	bl	800419c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f80:	2300      	movs	r3, #0
 8003f82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003f84:	463b      	mov	r3, r7
 8003f86:	4619      	mov	r1, r3
 8003f88:	4805      	ldr	r0, [pc, #20]	; (8003fa0 <MX_TIM3_Init+0x94>)
 8003f8a:	f005 fe69 	bl	8009c60 <HAL_TIMEx_MasterConfigSynchronization>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003f94:	f000 f902 	bl	800419c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003f98:	bf00      	nop
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20013370 	.word	0x20013370
 8003fa4:	40000400 	.word	0x40000400

08003fa8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003fac:	4b11      	ldr	r3, [pc, #68]	; (8003ff4 <MX_USART2_UART_Init+0x4c>)
 8003fae:	4a12      	ldr	r2, [pc, #72]	; (8003ff8 <MX_USART2_UART_Init+0x50>)
 8003fb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003fb2:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <MX_USART2_UART_Init+0x4c>)
 8003fb4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003fb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003fba:	4b0e      	ldr	r3, [pc, #56]	; (8003ff4 <MX_USART2_UART_Init+0x4c>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003fc0:	4b0c      	ldr	r3, [pc, #48]	; (8003ff4 <MX_USART2_UART_Init+0x4c>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003fc6:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <MX_USART2_UART_Init+0x4c>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003fcc:	4b09      	ldr	r3, [pc, #36]	; (8003ff4 <MX_USART2_UART_Init+0x4c>)
 8003fce:	220c      	movs	r2, #12
 8003fd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fd2:	4b08      	ldr	r3, [pc, #32]	; (8003ff4 <MX_USART2_UART_Init+0x4c>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fd8:	4b06      	ldr	r3, [pc, #24]	; (8003ff4 <MX_USART2_UART_Init+0x4c>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003fde:	4805      	ldr	r0, [pc, #20]	; (8003ff4 <MX_USART2_UART_Init+0x4c>)
 8003fe0:	f005 fece 	bl	8009d80 <HAL_UART_Init>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003fea:	f000 f8d7 	bl	800419c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003fee:	bf00      	nop
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20013784 	.word	0x20013784
 8003ff8:	40004400 	.word	0x40004400

08003ffc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004002:	2300      	movs	r3, #0
 8004004:	607b      	str	r3, [r7, #4]
 8004006:	4b0c      	ldr	r3, [pc, #48]	; (8004038 <MX_DMA_Init+0x3c>)
 8004008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400a:	4a0b      	ldr	r2, [pc, #44]	; (8004038 <MX_DMA_Init+0x3c>)
 800400c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004010:	6313      	str	r3, [r2, #48]	; 0x30
 8004012:	4b09      	ldr	r3, [pc, #36]	; (8004038 <MX_DMA_Init+0x3c>)
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800401a:	607b      	str	r3, [r7, #4]
 800401c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800401e:	2200      	movs	r2, #0
 8004020:	2100      	movs	r1, #0
 8004022:	2039      	movs	r0, #57	; 0x39
 8004024:	f000 fead 	bl	8004d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8004028:	2039      	movs	r0, #57	; 0x39
 800402a:	f000 fec6 	bl	8004dba <HAL_NVIC_EnableIRQ>

}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40023800 	.word	0x40023800

0800403c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b08c      	sub	sp, #48	; 0x30
 8004040:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004042:	f107 031c 	add.w	r3, r7, #28
 8004046:	2200      	movs	r2, #0
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	605a      	str	r2, [r3, #4]
 800404c:	609a      	str	r2, [r3, #8]
 800404e:	60da      	str	r2, [r3, #12]
 8004050:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004052:	2300      	movs	r3, #0
 8004054:	61bb      	str	r3, [r7, #24]
 8004056:	4b4d      	ldr	r3, [pc, #308]	; (800418c <MX_GPIO_Init+0x150>)
 8004058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405a:	4a4c      	ldr	r2, [pc, #304]	; (800418c <MX_GPIO_Init+0x150>)
 800405c:	f043 0310 	orr.w	r3, r3, #16
 8004060:	6313      	str	r3, [r2, #48]	; 0x30
 8004062:	4b4a      	ldr	r3, [pc, #296]	; (800418c <MX_GPIO_Init+0x150>)
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	f003 0310 	and.w	r3, r3, #16
 800406a:	61bb      	str	r3, [r7, #24]
 800406c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800406e:	2300      	movs	r3, #0
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	4b46      	ldr	r3, [pc, #280]	; (800418c <MX_GPIO_Init+0x150>)
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	4a45      	ldr	r2, [pc, #276]	; (800418c <MX_GPIO_Init+0x150>)
 8004078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800407c:	6313      	str	r3, [r2, #48]	; 0x30
 800407e:	4b43      	ldr	r3, [pc, #268]	; (800418c <MX_GPIO_Init+0x150>)
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800408a:	2300      	movs	r3, #0
 800408c:	613b      	str	r3, [r7, #16]
 800408e:	4b3f      	ldr	r3, [pc, #252]	; (800418c <MX_GPIO_Init+0x150>)
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	4a3e      	ldr	r2, [pc, #248]	; (800418c <MX_GPIO_Init+0x150>)
 8004094:	f043 0301 	orr.w	r3, r3, #1
 8004098:	6313      	str	r3, [r2, #48]	; 0x30
 800409a:	4b3c      	ldr	r3, [pc, #240]	; (800418c <MX_GPIO_Init+0x150>)
 800409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	613b      	str	r3, [r7, #16]
 80040a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040a6:	2300      	movs	r3, #0
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	4b38      	ldr	r3, [pc, #224]	; (800418c <MX_GPIO_Init+0x150>)
 80040ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ae:	4a37      	ldr	r2, [pc, #220]	; (800418c <MX_GPIO_Init+0x150>)
 80040b0:	f043 0302 	orr.w	r3, r3, #2
 80040b4:	6313      	str	r3, [r2, #48]	; 0x30
 80040b6:	4b35      	ldr	r3, [pc, #212]	; (800418c <MX_GPIO_Init+0x150>)
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80040c2:	2300      	movs	r3, #0
 80040c4:	60bb      	str	r3, [r7, #8]
 80040c6:	4b31      	ldr	r3, [pc, #196]	; (800418c <MX_GPIO_Init+0x150>)
 80040c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ca:	4a30      	ldr	r2, [pc, #192]	; (800418c <MX_GPIO_Init+0x150>)
 80040cc:	f043 0308 	orr.w	r3, r3, #8
 80040d0:	6313      	str	r3, [r2, #48]	; 0x30
 80040d2:	4b2e      	ldr	r3, [pc, #184]	; (800418c <MX_GPIO_Init+0x150>)
 80040d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	60bb      	str	r3, [r7, #8]
 80040dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040de:	2300      	movs	r3, #0
 80040e0:	607b      	str	r3, [r7, #4]
 80040e2:	4b2a      	ldr	r3, [pc, #168]	; (800418c <MX_GPIO_Init+0x150>)
 80040e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e6:	4a29      	ldr	r2, [pc, #164]	; (800418c <MX_GPIO_Init+0x150>)
 80040e8:	f043 0304 	orr.w	r3, r3, #4
 80040ec:	6313      	str	r3, [r2, #48]	; 0x30
 80040ee:	4b27      	ldr	r3, [pc, #156]	; (800418c <MX_GPIO_Init+0x150>)
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	f003 0304 	and.w	r3, r3, #4
 80040f6:	607b      	str	r3, [r7, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80040fa:	2200      	movs	r2, #0
 80040fc:	2101      	movs	r1, #1
 80040fe:	4824      	ldr	r0, [pc, #144]	; (8004190 <MX_GPIO_Init+0x154>)
 8004100:	f003 f850 	bl	80071a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8004104:	2200      	movs	r2, #0
 8004106:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 800410a:	4822      	ldr	r0, [pc, #136]	; (8004194 <MX_GPIO_Init+0x158>)
 800410c:	f003 f84a 	bl	80071a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004110:	2380      	movs	r3, #128	; 0x80
 8004112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004114:	2300      	movs	r3, #0
 8004116:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004118:	2300      	movs	r3, #0
 800411a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800411c:	f107 031c 	add.w	r3, r7, #28
 8004120:	4619      	mov	r1, r3
 8004122:	481d      	ldr	r0, [pc, #116]	; (8004198 <MX_GPIO_Init+0x15c>)
 8004124:	f002 fe8c 	bl	8006e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004128:	2301      	movs	r3, #1
 800412a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800412c:	2301      	movs	r3, #1
 800412e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004130:	2300      	movs	r3, #0
 8004132:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004134:	2300      	movs	r3, #0
 8004136:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004138:	f107 031c 	add.w	r3, r7, #28
 800413c:	4619      	mov	r1, r3
 800413e:	4814      	ldr	r0, [pc, #80]	; (8004190 <MX_GPIO_Init+0x154>)
 8004140:	f002 fe7e 	bl	8006e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8004144:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8004148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800414a:	2301      	movs	r3, #1
 800414c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414e:	2300      	movs	r3, #0
 8004150:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004152:	2300      	movs	r3, #0
 8004154:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004156:	f107 031c 	add.w	r3, r7, #28
 800415a:	4619      	mov	r1, r3
 800415c:	480d      	ldr	r0, [pc, #52]	; (8004194 <MX_GPIO_Init+0x158>)
 800415e:	f002 fe6f 	bl	8006e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004162:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004168:	2302      	movs	r3, #2
 800416a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416c:	2300      	movs	r3, #0
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004170:	2300      	movs	r3, #0
 8004172:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004174:	2300      	movs	r3, #0
 8004176:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004178:	f107 031c 	add.w	r3, r7, #28
 800417c:	4619      	mov	r1, r3
 800417e:	4806      	ldr	r0, [pc, #24]	; (8004198 <MX_GPIO_Init+0x15c>)
 8004180:	f002 fe5e 	bl	8006e40 <HAL_GPIO_Init>

}
 8004184:	bf00      	nop
 8004186:	3730      	adds	r7, #48	; 0x30
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40023800 	.word	0x40023800
 8004190:	40020400 	.word	0x40020400
 8004194:	40020c00 	.word	0x40020c00
 8004198:	40020000 	.word	0x40020000

0800419c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80041a0:	bf00      	nop
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
	...

080041ac <ov7670_init>:
//static RET ov7670_write(uint8_t regAddr, uint8_t data);
//static RET ov7670_read(uint8_t regAddr, uint8_t *data);

/*** External Function Defines ***/
RET ov7670_init(DCMI_HandleTypeDef *p_hdcmi, DMA_HandleTypeDef *p_hdma_dcmi, I2C_HandleTypeDef *p_hi2c)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
  sp_hdcmi     = p_hdcmi;
 80041b8:	4a1a      	ldr	r2, [pc, #104]	; (8004224 <ov7670_init+0x78>)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6013      	str	r3, [r2, #0]
  sp_hdma_dcmi = p_hdma_dcmi;
 80041be:	4a1a      	ldr	r2, [pc, #104]	; (8004228 <ov7670_init+0x7c>)
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	6013      	str	r3, [r2, #0]
  sp_hi2c      = p_hi2c;
 80041c4:	4a19      	ldr	r2, [pc, #100]	; (800422c <ov7670_init+0x80>)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6013      	str	r3, [r2, #0]
  s_destAddressForContiuousMode = 0;
 80041ca:	4b19      	ldr	r3, [pc, #100]	; (8004230 <ov7670_init+0x84>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]

  // PD14
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80041d0:	2200      	movs	r2, #0
 80041d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80041d6:	4817      	ldr	r0, [pc, #92]	; (8004234 <ov7670_init+0x88>)
 80041d8:	f002 ffe4 	bl	80071a4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80041dc:	2064      	movs	r0, #100	; 0x64
 80041de:	f000 fcd3 	bl	8004b88 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80041e2:	2201      	movs	r2, #1
 80041e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80041e8:	4812      	ldr	r0, [pc, #72]	; (8004234 <ov7670_init+0x88>)
 80041ea:	f002 ffdb 	bl	80071a4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80041ee:	2064      	movs	r0, #100	; 0x64
 80041f0:	f000 fcca 	bl	8004b88 <HAL_Delay>

  ov7670_write(0x12, 0x80);  // RESET
 80041f4:	2180      	movs	r1, #128	; 0x80
 80041f6:	2012      	movs	r0, #18
 80041f8:	f000 f8c6 	bl	8004388 <ov7670_write>
  HAL_Delay(30);
 80041fc:	201e      	movs	r0, #30
 80041fe:	f000 fcc3 	bl	8004b88 <HAL_Delay>

  uint8_t buffer[4];
  RET stat = ov7670_read(0x0b, buffer);
 8004202:	f107 0310 	add.w	r3, r7, #16
 8004206:	4619      	mov	r1, r3
 8004208:	200b      	movs	r0, #11
 800420a:	f000 f8dd 	bl	80043c8 <ov7670_read>
 800420e:	6178      	str	r0, [r7, #20]
  printf("[OV7670] dev id = %02X\n", buffer[0]);
 8004210:	7c3b      	ldrb	r3, [r7, #16]
 8004212:	4619      	mov	r1, r3
 8004214:	4808      	ldr	r0, [pc, #32]	; (8004238 <ov7670_init+0x8c>)
 8004216:	f007 f98b 	bl	800b530 <iprintf>


  return RET_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	20000440 	.word	0x20000440
 8004228:	20000444 	.word	0x20000444
 800422c:	20000448 	.word	0x20000448
 8004230:	2000044c 	.word	0x2000044c
 8004234:	40020c00 	.word	0x40020c00
 8004238:	0800d59c 	.word	0x0800d59c

0800423c <ov7670_config>:

RET ov7670_config(uint32_t mode)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  ov7670_stopCap();
 8004244:	f000 f858 	bl	80042f8 <ov7670_stopCap>
  ov7670_write(0x12, 0x80);  // RESET
 8004248:	2180      	movs	r1, #128	; 0x80
 800424a:	2012      	movs	r0, #18
 800424c:	f000 f89c 	bl	8004388 <ov7670_write>
  HAL_Delay(30);
 8004250:	201e      	movs	r0, #30
 8004252:	f000 fc99 	bl	8004b88 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8004256:	2300      	movs	r3, #0
 8004258:	60fb      	str	r3, [r7, #12]
 800425a:	e011      	b.n	8004280 <ov7670_config+0x44>
    ov7670_write(OV7670_reg[i][0], OV7670_reg[i][1]);
 800425c:	4a0e      	ldr	r2, [pc, #56]	; (8004298 <ov7670_config+0x5c>)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 8004264:	4a0c      	ldr	r2, [pc, #48]	; (8004298 <ov7670_config+0x5c>)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	4413      	add	r3, r2
 800426c:	785b      	ldrb	r3, [r3, #1]
 800426e:	4619      	mov	r1, r3
 8004270:	f000 f88a 	bl	8004388 <ov7670_write>
    HAL_Delay(1);
 8004274:	2001      	movs	r0, #1
 8004276:	f000 fc87 	bl	8004b88 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	3301      	adds	r3, #1
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	4a05      	ldr	r2, [pc, #20]	; (8004298 <ov7670_config+0x5c>)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8004288:	2bff      	cmp	r3, #255	; 0xff
 800428a:	d1e7      	bne.n	800425c <ov7670_config+0x20>
  }
  return RET_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	0800d5b4 	.word	0x0800d5b4

0800429c <ov7670_startCap>:

RET ov7670_startCap(uint32_t capMode, uint32_t destAddress)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  ov7670_stopCap();
 80042a6:	f000 f827 	bl	80042f8 <ov7670_stopCap>
  if (capMode == OV7670_CAP_CONTINUOUS) {
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10b      	bne.n	80042c8 <ov7670_startCap+0x2c>
    /* note: continuous mode automatically invokes DCMI, but DMA needs to be invoked manually */
    s_destAddressForContiuousMode = destAddress;
 80042b0:	4a0f      	ldr	r2, [pc, #60]	; (80042f0 <ov7670_startCap+0x54>)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	6013      	str	r3, [r2, #0]
    HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 80042b6:	4b0f      	ldr	r3, [pc, #60]	; (80042f4 <ov7670_startCap+0x58>)
 80042b8:	6818      	ldr	r0, [r3, #0]
 80042ba:	f243 03f0 	movw	r3, #12528	; 0x30f0
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	2100      	movs	r1, #0
 80042c2:	f000 fd95 	bl	8004df0 <HAL_DCMI_Start_DMA>
 80042c6:	e00d      	b.n	80042e4 <ov7670_startCap+0x48>
  } else if (capMode == OV7670_CAP_SINGLE_FRAME) {
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d10a      	bne.n	80042e4 <ov7670_startCap+0x48>
    s_destAddressForContiuousMode = 0;
 80042ce:	4b08      	ldr	r3, [pc, #32]	; (80042f0 <ov7670_startCap+0x54>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]
    HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_SNAPSHOT, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 80042d4:	4b07      	ldr	r3, [pc, #28]	; (80042f4 <ov7670_startCap+0x58>)
 80042d6:	6818      	ldr	r0, [r3, #0]
 80042d8:	f243 03f0 	movw	r3, #12528	; 0x30f0
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	2102      	movs	r1, #2
 80042e0:	f000 fd86 	bl	8004df0 <HAL_DCMI_Start_DMA>
  }

  return RET_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	2000044c 	.word	0x2000044c
 80042f4:	20000440 	.word	0x20000440

080042f8 <ov7670_stopCap>:

RET ov7670_stopCap()
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  HAL_DCMI_Stop(sp_hdcmi);
 80042fc:	4b03      	ldr	r3, [pc, #12]	; (800430c <ov7670_stopCap+0x14>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f000 fe15 	bl	8004f30 <HAL_DCMI_Stop>
//  HAL_Delay(30);
  return RET_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	bd80      	pop	{r7, pc}
 800430c:	20000440 	.word	0x20000440

08004310 <HAL_DCMI_FrameEventCallback>:
  s_cbHsync = cbHsync;
  s_cbVsync = cbVsync;
}

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
//  printf("FRAME %d\n", HAL_GetTick());
  if(s_cbVsync)s_cbVsync(s_currentV);
 8004318:	4b12      	ldr	r3, [pc, #72]	; (8004364 <HAL_DCMI_FrameEventCallback+0x54>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d005      	beq.n	800432c <HAL_DCMI_FrameEventCallback+0x1c>
 8004320:	4b10      	ldr	r3, [pc, #64]	; (8004364 <HAL_DCMI_FrameEventCallback+0x54>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a10      	ldr	r2, [pc, #64]	; (8004368 <HAL_DCMI_FrameEventCallback+0x58>)
 8004326:	6812      	ldr	r2, [r2, #0]
 8004328:	4610      	mov	r0, r2
 800432a:	4798      	blx	r3
  if(s_destAddressForContiuousMode != 0) {
 800432c:	4b0f      	ldr	r3, [pc, #60]	; (800436c <HAL_DCMI_FrameEventCallback+0x5c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00b      	beq.n	800434c <HAL_DCMI_FrameEventCallback+0x3c>
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3328      	adds	r3, #40	; 0x28
 800433e:	4619      	mov	r1, r3
 8004340:	4b0a      	ldr	r3, [pc, #40]	; (800436c <HAL_DCMI_FrameEventCallback+0x5c>)
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	f243 03f0 	movw	r3, #12528	; 0x30f0
 8004348:	f001 f8a0 	bl	800548c <HAL_DMA_Start_IT>
  }
  s_currentV++;
 800434c:	4b06      	ldr	r3, [pc, #24]	; (8004368 <HAL_DCMI_FrameEventCallback+0x58>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3301      	adds	r3, #1
 8004352:	4a05      	ldr	r2, [pc, #20]	; (8004368 <HAL_DCMI_FrameEventCallback+0x58>)
 8004354:	6013      	str	r3, [r2, #0]
  s_currentH = 0;
 8004356:	4b06      	ldr	r3, [pc, #24]	; (8004370 <HAL_DCMI_FrameEventCallback+0x60>)
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]
}
 800435c:	bf00      	nop
 800435e:	3708      	adds	r7, #8
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	20000450 	.word	0x20000450
 8004368:	20000458 	.word	0x20000458
 800436c:	2000044c 	.word	0x2000044c
 8004370:	20000454 	.word	0x20000454

08004374 <HAL_DCMI_VsyncEventCallback>:

void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
//  printf("VSYNC %d\n", HAL_GetTick());
//  HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <ov7670_write>:
//  s_currentH++;
//}

/*** Internal Function Defines ***/
RET ov7670_write(uint8_t regAddr, uint8_t data)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af04      	add	r7, sp, #16
 800438e:	4603      	mov	r3, r0
 8004390:	460a      	mov	r2, r1
 8004392:	71fb      	strb	r3, [r7, #7]
 8004394:	4613      	mov	r3, r2
 8004396:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef ret;
  do {
    ret = HAL_I2C_Mem_Write(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8004398:	4b0a      	ldr	r3, [pc, #40]	; (80043c4 <ov7670_write+0x3c>)
 800439a:	6818      	ldr	r0, [r3, #0]
 800439c:	79fb      	ldrb	r3, [r7, #7]
 800439e:	b29a      	uxth	r2, r3
 80043a0:	2364      	movs	r3, #100	; 0x64
 80043a2:	9302      	str	r3, [sp, #8]
 80043a4:	2301      	movs	r3, #1
 80043a6:	9301      	str	r3, [sp, #4]
 80043a8:	1dbb      	adds	r3, r7, #6
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	2301      	movs	r3, #1
 80043ae:	2142      	movs	r1, #66	; 0x42
 80043b0:	f003 fb6e 	bl	8007a90 <HAL_I2C_Mem_Write>
 80043b4:	4603      	mov	r3, r0
 80043b6:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	20000448 	.word	0x20000448

080043c8 <ov7670_read>:

RET ov7670_read(uint8_t regAddr, uint8_t *data)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af02      	add	r7, sp, #8
 80043ce:	4603      	mov	r3, r0
 80043d0:	6039      	str	r1, [r7, #0]
 80043d2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef ret;
  do {
    // HAL_I2C_Mem_Read doesn't work (because of SCCB protocol(doesn't have ack))? */
//    ret = HAL_I2C_Mem_Read(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, data, 1, 1000);
    ret = HAL_I2C_Master_Transmit(sp_hi2c, SLAVE_ADDR, &regAddr, 1, 100);
 80043d4:	4b0e      	ldr	r3, [pc, #56]	; (8004410 <ov7670_read+0x48>)
 80043d6:	6818      	ldr	r0, [r3, #0]
 80043d8:	1dfa      	adds	r2, r7, #7
 80043da:	2364      	movs	r3, #100	; 0x64
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	2301      	movs	r3, #1
 80043e0:	2142      	movs	r1, #66	; 0x42
 80043e2:	f003 f831 	bl	8007448 <HAL_I2C_Master_Transmit>
 80043e6:	4603      	mov	r3, r0
 80043e8:	73fb      	strb	r3, [r7, #15]
    ret |= HAL_I2C_Master_Receive(sp_hi2c, SLAVE_ADDR, data, 1, 100);
 80043ea:	4b09      	ldr	r3, [pc, #36]	; (8004410 <ov7670_read+0x48>)
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	2364      	movs	r3, #100	; 0x64
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	2301      	movs	r3, #1
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	2142      	movs	r1, #66	; 0x42
 80043f8:	f003 f924 	bl	8007644 <HAL_I2C_Master_Receive>
 80043fc:	4603      	mov	r3, r0
 80043fe:	461a      	mov	r2, r3
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	4313      	orrs	r3, r2
 8004404:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 8004406:	7bfb      	ldrb	r3, [r7, #15]
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	20000448 	.word	0x20000448

08004414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800441a:	2300      	movs	r3, #0
 800441c:	607b      	str	r3, [r7, #4]
 800441e:	4b10      	ldr	r3, [pc, #64]	; (8004460 <HAL_MspInit+0x4c>)
 8004420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004422:	4a0f      	ldr	r2, [pc, #60]	; (8004460 <HAL_MspInit+0x4c>)
 8004424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004428:	6453      	str	r3, [r2, #68]	; 0x44
 800442a:	4b0d      	ldr	r3, [pc, #52]	; (8004460 <HAL_MspInit+0x4c>)
 800442c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004432:	607b      	str	r3, [r7, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004436:	2300      	movs	r3, #0
 8004438:	603b      	str	r3, [r7, #0]
 800443a:	4b09      	ldr	r3, [pc, #36]	; (8004460 <HAL_MspInit+0x4c>)
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	4a08      	ldr	r2, [pc, #32]	; (8004460 <HAL_MspInit+0x4c>)
 8004440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004444:	6413      	str	r3, [r2, #64]	; 0x40
 8004446:	4b06      	ldr	r3, [pc, #24]	; (8004460 <HAL_MspInit+0x4c>)
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444e:	603b      	str	r3, [r7, #0]
 8004450:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	40023800 	.word	0x40023800

08004464 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08c      	sub	sp, #48	; 0x30
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800446c:	f107 031c 	add.w	r3, r7, #28
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	605a      	str	r2, [r3, #4]
 8004476:	609a      	str	r2, [r3, #8]
 8004478:	60da      	str	r2, [r3, #12]
 800447a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a63      	ldr	r2, [pc, #396]	; (8004610 <HAL_DCMI_MspInit+0x1ac>)
 8004482:	4293      	cmp	r3, r2
 8004484:	f040 80c0 	bne.w	8004608 <HAL_DCMI_MspInit+0x1a4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8004488:	2300      	movs	r3, #0
 800448a:	61bb      	str	r3, [r7, #24]
 800448c:	4b61      	ldr	r3, [pc, #388]	; (8004614 <HAL_DCMI_MspInit+0x1b0>)
 800448e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004490:	4a60      	ldr	r2, [pc, #384]	; (8004614 <HAL_DCMI_MspInit+0x1b0>)
 8004492:	f043 0301 	orr.w	r3, r3, #1
 8004496:	6353      	str	r3, [r2, #52]	; 0x34
 8004498:	4b5e      	ldr	r3, [pc, #376]	; (8004614 <HAL_DCMI_MspInit+0x1b0>)
 800449a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	61bb      	str	r3, [r7, #24]
 80044a2:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80044a4:	2300      	movs	r3, #0
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	4b5a      	ldr	r3, [pc, #360]	; (8004614 <HAL_DCMI_MspInit+0x1b0>)
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	4a59      	ldr	r2, [pc, #356]	; (8004614 <HAL_DCMI_MspInit+0x1b0>)
 80044ae:	f043 0310 	orr.w	r3, r3, #16
 80044b2:	6313      	str	r3, [r2, #48]	; 0x30
 80044b4:	4b57      	ldr	r3, [pc, #348]	; (8004614 <HAL_DCMI_MspInit+0x1b0>)
 80044b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b8:	f003 0310 	and.w	r3, r3, #16
 80044bc:	617b      	str	r3, [r7, #20]
 80044be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044c0:	2300      	movs	r3, #0
 80044c2:	613b      	str	r3, [r7, #16]
 80044c4:	4b53      	ldr	r3, [pc, #332]	; (8004614 <HAL_DCMI_MspInit+0x1b0>)
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	4a52      	ldr	r2, [pc, #328]	; (8004614 <HAL_DCMI_MspInit+0x1b0>)
 80044ca:	f043 0301 	orr.w	r3, r3, #1
 80044ce:	6313      	str	r3, [r2, #48]	; 0x30
 80044d0:	4b50      	ldr	r3, [pc, #320]	; (8004614 <HAL_DCMI_MspInit+0x1b0>)
 80044d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044dc:	2300      	movs	r3, #0
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	4b4c      	ldr	r3, [pc, #304]	; (8004614 <HAL_DCMI_MspInit+0x1b0>)
 80044e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e4:	4a4b      	ldr	r2, [pc, #300]	; (8004614 <HAL_DCMI_MspInit+0x1b0>)
 80044e6:	f043 0304 	orr.w	r3, r3, #4
 80044ea:	6313      	str	r3, [r2, #48]	; 0x30
 80044ec:	4b49      	ldr	r3, [pc, #292]	; (8004614 <HAL_DCMI_MspInit+0x1b0>)
 80044ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f0:	f003 0304 	and.w	r3, r3, #4
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044f8:	2300      	movs	r3, #0
 80044fa:	60bb      	str	r3, [r7, #8]
 80044fc:	4b45      	ldr	r3, [pc, #276]	; (8004614 <HAL_DCMI_MspInit+0x1b0>)
 80044fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004500:	4a44      	ldr	r2, [pc, #272]	; (8004614 <HAL_DCMI_MspInit+0x1b0>)
 8004502:	f043 0302 	orr.w	r3, r3, #2
 8004506:	6313      	str	r3, [r2, #48]	; 0x30
 8004508:	4b42      	ldr	r3, [pc, #264]	; (8004614 <HAL_DCMI_MspInit+0x1b0>)
 800450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	60bb      	str	r3, [r7, #8]
 8004512:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8004514:	2370      	movs	r3, #112	; 0x70
 8004516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004518:	2302      	movs	r3, #2
 800451a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800451c:	2300      	movs	r3, #0
 800451e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004520:	2300      	movs	r3, #0
 8004522:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004524:	230d      	movs	r3, #13
 8004526:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004528:	f107 031c 	add.w	r3, r7, #28
 800452c:	4619      	mov	r1, r3
 800452e:	483a      	ldr	r0, [pc, #232]	; (8004618 <HAL_DCMI_MspInit+0x1b4>)
 8004530:	f002 fc86 	bl	8006e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8004534:	2350      	movs	r3, #80	; 0x50
 8004536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004538:	2302      	movs	r3, #2
 800453a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453c:	2300      	movs	r3, #0
 800453e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004540:	2300      	movs	r3, #0
 8004542:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004544:	230d      	movs	r3, #13
 8004546:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004548:	f107 031c 	add.w	r3, r7, #28
 800454c:	4619      	mov	r1, r3
 800454e:	4833      	ldr	r0, [pc, #204]	; (800461c <HAL_DCMI_MspInit+0x1b8>)
 8004550:	f002 fc76 	bl	8006e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8004554:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800455a:	2302      	movs	r3, #2
 800455c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800455e:	2300      	movs	r3, #0
 8004560:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004562:	2300      	movs	r3, #0
 8004564:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004566:	230d      	movs	r3, #13
 8004568:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800456a:	f107 031c 	add.w	r3, r7, #28
 800456e:	4619      	mov	r1, r3
 8004570:	482b      	ldr	r0, [pc, #172]	; (8004620 <HAL_DCMI_MspInit+0x1bc>)
 8004572:	f002 fc65 	bl	8006e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004576:	23c0      	movs	r3, #192	; 0xc0
 8004578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800457a:	2302      	movs	r3, #2
 800457c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457e:	2300      	movs	r3, #0
 8004580:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004582:	2300      	movs	r3, #0
 8004584:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004586:	230d      	movs	r3, #13
 8004588:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800458a:	f107 031c 	add.w	r3, r7, #28
 800458e:	4619      	mov	r1, r3
 8004590:	4824      	ldr	r0, [pc, #144]	; (8004624 <HAL_DCMI_MspInit+0x1c0>)
 8004592:	f002 fc55 	bl	8006e40 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8004596:	4b24      	ldr	r3, [pc, #144]	; (8004628 <HAL_DCMI_MspInit+0x1c4>)
 8004598:	4a24      	ldr	r2, [pc, #144]	; (800462c <HAL_DCMI_MspInit+0x1c8>)
 800459a:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 800459c:	4b22      	ldr	r3, [pc, #136]	; (8004628 <HAL_DCMI_MspInit+0x1c4>)
 800459e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045a2:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045a4:	4b20      	ldr	r3, [pc, #128]	; (8004628 <HAL_DCMI_MspInit+0x1c4>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80045aa:	4b1f      	ldr	r3, [pc, #124]	; (8004628 <HAL_DCMI_MspInit+0x1c4>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80045b0:	4b1d      	ldr	r3, [pc, #116]	; (8004628 <HAL_DCMI_MspInit+0x1c4>)
 80045b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045b6:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80045b8:	4b1b      	ldr	r3, [pc, #108]	; (8004628 <HAL_DCMI_MspInit+0x1c4>)
 80045ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80045be:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80045c0:	4b19      	ldr	r3, [pc, #100]	; (8004628 <HAL_DCMI_MspInit+0x1c4>)
 80045c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80045c6:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 80045c8:	4b17      	ldr	r3, [pc, #92]	; (8004628 <HAL_DCMI_MspInit+0x1c4>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_MEDIUM;
 80045ce:	4b16      	ldr	r3, [pc, #88]	; (8004628 <HAL_DCMI_MspInit+0x1c4>)
 80045d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80045d4:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80045d6:	4b14      	ldr	r3, [pc, #80]	; (8004628 <HAL_DCMI_MspInit+0x1c4>)
 80045d8:	2200      	movs	r2, #0
 80045da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80045dc:	4812      	ldr	r0, [pc, #72]	; (8004628 <HAL_DCMI_MspInit+0x1c4>)
 80045de:	f000 fea7 	bl	8005330 <HAL_DMA_Init>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <HAL_DCMI_MspInit+0x188>
    {
      Error_Handler();
 80045e8:	f7ff fdd8 	bl	800419c <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a0e      	ldr	r2, [pc, #56]	; (8004628 <HAL_DCMI_MspInit+0x1c4>)
 80045f0:	639a      	str	r2, [r3, #56]	; 0x38
 80045f2:	4a0d      	ldr	r2, [pc, #52]	; (8004628 <HAL_DCMI_MspInit+0x1c4>)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80045f8:	2200      	movs	r2, #0
 80045fa:	2100      	movs	r1, #0
 80045fc:	204e      	movs	r0, #78	; 0x4e
 80045fe:	f000 fbc0 	bl	8004d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8004602:	204e      	movs	r0, #78	; 0x4e
 8004604:	f000 fbd9 	bl	8004dba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8004608:	bf00      	nop
 800460a:	3730      	adds	r7, #48	; 0x30
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	50050000 	.word	0x50050000
 8004614:	40023800 	.word	0x40023800
 8004618:	40021000 	.word	0x40021000
 800461c:	40020000 	.word	0x40020000
 8004620:	40020800 	.word	0x40020800
 8004624:	40020400 	.word	0x40020400
 8004628:	200132f0 	.word	0x200132f0
 800462c:	40026428 	.word	0x40026428

08004630 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08a      	sub	sp, #40	; 0x28
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004638:	f107 0314 	add.w	r3, r7, #20
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	605a      	str	r2, [r3, #4]
 8004642:	609a      	str	r2, [r3, #8]
 8004644:	60da      	str	r2, [r3, #12]
 8004646:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a19      	ldr	r2, [pc, #100]	; (80046b4 <HAL_I2C_MspInit+0x84>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d12c      	bne.n	80046ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004652:	2300      	movs	r3, #0
 8004654:	613b      	str	r3, [r7, #16]
 8004656:	4b18      	ldr	r3, [pc, #96]	; (80046b8 <HAL_I2C_MspInit+0x88>)
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	4a17      	ldr	r2, [pc, #92]	; (80046b8 <HAL_I2C_MspInit+0x88>)
 800465c:	f043 0302 	orr.w	r3, r3, #2
 8004660:	6313      	str	r3, [r2, #48]	; 0x30
 8004662:	4b15      	ldr	r3, [pc, #84]	; (80046b8 <HAL_I2C_MspInit+0x88>)
 8004664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	613b      	str	r3, [r7, #16]
 800466c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800466e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004674:	2312      	movs	r3, #18
 8004676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004678:	2301      	movs	r3, #1
 800467a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800467c:	2303      	movs	r3, #3
 800467e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004680:	2304      	movs	r3, #4
 8004682:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004684:	f107 0314 	add.w	r3, r7, #20
 8004688:	4619      	mov	r1, r3
 800468a:	480c      	ldr	r0, [pc, #48]	; (80046bc <HAL_I2C_MspInit+0x8c>)
 800468c:	f002 fbd8 	bl	8006e40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004690:	2300      	movs	r3, #0
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	4b08      	ldr	r3, [pc, #32]	; (80046b8 <HAL_I2C_MspInit+0x88>)
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	4a07      	ldr	r2, [pc, #28]	; (80046b8 <HAL_I2C_MspInit+0x88>)
 800469a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800469e:	6413      	str	r3, [r2, #64]	; 0x40
 80046a0:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <HAL_I2C_MspInit+0x88>)
 80046a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80046ac:	bf00      	nop
 80046ae:	3728      	adds	r7, #40	; 0x28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	40005800 	.word	0x40005800
 80046b8:	40023800 	.word	0x40023800
 80046bc:	40020400 	.word	0x40020400

080046c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b08a      	sub	sp, #40	; 0x28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046c8:	f107 0314 	add.w	r3, r7, #20
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	605a      	str	r2, [r3, #4]
 80046d2:	609a      	str	r2, [r3, #8]
 80046d4:	60da      	str	r2, [r3, #12]
 80046d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a19      	ldr	r2, [pc, #100]	; (8004744 <HAL_SPI_MspInit+0x84>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d12b      	bne.n	800473a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80046e2:	2300      	movs	r3, #0
 80046e4:	613b      	str	r3, [r7, #16]
 80046e6:	4b18      	ldr	r3, [pc, #96]	; (8004748 <HAL_SPI_MspInit+0x88>)
 80046e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ea:	4a17      	ldr	r2, [pc, #92]	; (8004748 <HAL_SPI_MspInit+0x88>)
 80046ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80046f0:	6453      	str	r3, [r2, #68]	; 0x44
 80046f2:	4b15      	ldr	r3, [pc, #84]	; (8004748 <HAL_SPI_MspInit+0x88>)
 80046f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046fa:	613b      	str	r3, [r7, #16]
 80046fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046fe:	2300      	movs	r3, #0
 8004700:	60fb      	str	r3, [r7, #12]
 8004702:	4b11      	ldr	r3, [pc, #68]	; (8004748 <HAL_SPI_MspInit+0x88>)
 8004704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004706:	4a10      	ldr	r2, [pc, #64]	; (8004748 <HAL_SPI_MspInit+0x88>)
 8004708:	f043 0302 	orr.w	r3, r3, #2
 800470c:	6313      	str	r3, [r2, #48]	; 0x30
 800470e:	4b0e      	ldr	r3, [pc, #56]	; (8004748 <HAL_SPI_MspInit+0x88>)
 8004710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800471a:	2338      	movs	r3, #56	; 0x38
 800471c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800471e:	2302      	movs	r3, #2
 8004720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004722:	2300      	movs	r3, #0
 8004724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004726:	2303      	movs	r3, #3
 8004728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800472a:	2305      	movs	r3, #5
 800472c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800472e:	f107 0314 	add.w	r3, r7, #20
 8004732:	4619      	mov	r1, r3
 8004734:	4805      	ldr	r0, [pc, #20]	; (800474c <HAL_SPI_MspInit+0x8c>)
 8004736:	f002 fb83 	bl	8006e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800473a:	bf00      	nop
 800473c:	3728      	adds	r7, #40	; 0x28
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	40013000 	.word	0x40013000
 8004748:	40023800 	.word	0x40023800
 800474c:	40020400 	.word	0x40020400

08004750 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a0e      	ldr	r2, [pc, #56]	; (8004798 <HAL_TIM_Base_MspInit+0x48>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d115      	bne.n	800478e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004762:	2300      	movs	r3, #0
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	4b0d      	ldr	r3, [pc, #52]	; (800479c <HAL_TIM_Base_MspInit+0x4c>)
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	4a0c      	ldr	r2, [pc, #48]	; (800479c <HAL_TIM_Base_MspInit+0x4c>)
 800476c:	f043 0302 	orr.w	r3, r3, #2
 8004770:	6413      	str	r3, [r2, #64]	; 0x40
 8004772:	4b0a      	ldr	r3, [pc, #40]	; (800479c <HAL_TIM_Base_MspInit+0x4c>)
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800477e:	2200      	movs	r2, #0
 8004780:	2100      	movs	r1, #0
 8004782:	201d      	movs	r0, #29
 8004784:	f000 fafd 	bl	8004d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004788:	201d      	movs	r0, #29
 800478a:	f000 fb16 	bl	8004dba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800478e:	bf00      	nop
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40000400 	.word	0x40000400
 800479c:	40023800 	.word	0x40023800

080047a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b08a      	sub	sp, #40	; 0x28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047a8:	f107 0314 	add.w	r3, r7, #20
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	605a      	str	r2, [r3, #4]
 80047b2:	609a      	str	r2, [r3, #8]
 80047b4:	60da      	str	r2, [r3, #12]
 80047b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a1d      	ldr	r2, [pc, #116]	; (8004834 <HAL_UART_MspInit+0x94>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d133      	bne.n	800482a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80047c2:	2300      	movs	r3, #0
 80047c4:	613b      	str	r3, [r7, #16]
 80047c6:	4b1c      	ldr	r3, [pc, #112]	; (8004838 <HAL_UART_MspInit+0x98>)
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	4a1b      	ldr	r2, [pc, #108]	; (8004838 <HAL_UART_MspInit+0x98>)
 80047cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047d0:	6413      	str	r3, [r2, #64]	; 0x40
 80047d2:	4b19      	ldr	r3, [pc, #100]	; (8004838 <HAL_UART_MspInit+0x98>)
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047da:	613b      	str	r3, [r7, #16]
 80047dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80047de:	2300      	movs	r3, #0
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	4b15      	ldr	r3, [pc, #84]	; (8004838 <HAL_UART_MspInit+0x98>)
 80047e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e6:	4a14      	ldr	r2, [pc, #80]	; (8004838 <HAL_UART_MspInit+0x98>)
 80047e8:	f043 0308 	orr.w	r3, r3, #8
 80047ec:	6313      	str	r3, [r2, #48]	; 0x30
 80047ee:	4b12      	ldr	r3, [pc, #72]	; (8004838 <HAL_UART_MspInit+0x98>)
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80047fa:	2360      	movs	r3, #96	; 0x60
 80047fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047fe:	2302      	movs	r3, #2
 8004800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004802:	2300      	movs	r3, #0
 8004804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004806:	2303      	movs	r3, #3
 8004808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800480a:	2307      	movs	r3, #7
 800480c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800480e:	f107 0314 	add.w	r3, r7, #20
 8004812:	4619      	mov	r1, r3
 8004814:	4809      	ldr	r0, [pc, #36]	; (800483c <HAL_UART_MspInit+0x9c>)
 8004816:	f002 fb13 	bl	8006e40 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800481a:	2200      	movs	r2, #0
 800481c:	2100      	movs	r1, #0
 800481e:	2026      	movs	r0, #38	; 0x26
 8004820:	f000 faaf 	bl	8004d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004824:	2026      	movs	r0, #38	; 0x26
 8004826:	f000 fac8 	bl	8004dba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800482a:	bf00      	nop
 800482c:	3728      	adds	r7, #40	; 0x28
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	40004400 	.word	0x40004400
 8004838:	40023800 	.word	0x40023800
 800483c:	40020c00 	.word	0x40020c00

08004840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004844:	bf00      	nop
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800484e:	b480      	push	{r7}
 8004850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004852:	e7fe      	b.n	8004852 <HardFault_Handler+0x4>

08004854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004858:	e7fe      	b.n	8004858 <MemManage_Handler+0x4>

0800485a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800485a:	b480      	push	{r7}
 800485c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800485e:	e7fe      	b.n	800485e <BusFault_Handler+0x4>

08004860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004864:	e7fe      	b.n	8004864 <UsageFault_Handler+0x4>

08004866 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004866:	b480      	push	{r7}
 8004868:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800486a:	bf00      	nop
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004878:	bf00      	nop
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004882:	b480      	push	{r7}
 8004884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004886:	bf00      	nop
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	sdcard_systick_timerproc();
 8004894:	f7fd f8ce 	bl	8001a34 <sdcard_systick_timerproc>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004898:	f000 f956 	bl	8004b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800489c:	bf00      	nop
 800489e:	bd80      	pop	{r7, pc}

080048a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80048a4:	4802      	ldr	r0, [pc, #8]	; (80048b0 <TIM3_IRQHandler+0x10>)
 80048a6:	f004 feba 	bl	800961e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80048aa:	bf00      	nop
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	20013370 	.word	0x20013370

080048b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80048b8:	4802      	ldr	r0, [pc, #8]	; (80048c4 <USART2_IRQHandler+0x10>)
 80048ba:	f005 fb49 	bl	8009f50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80048be:	bf00      	nop
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	20013784 	.word	0x20013784

080048c8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80048cc:	4802      	ldr	r0, [pc, #8]	; (80048d8 <DMA2_Stream1_IRQHandler+0x10>)
 80048ce:	f000 fec7 	bl	8005660 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80048d2:	bf00      	nop
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	200132f0 	.word	0x200132f0

080048dc <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80048e0:	4802      	ldr	r0, [pc, #8]	; (80048ec <DCMI_IRQHandler+0x10>)
 80048e2:	f000 fb81 	bl	8004fe8 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80048e6:	bf00      	nop
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	200135d8 	.word	0x200135d8

080048f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048fc:	2300      	movs	r3, #0
 80048fe:	617b      	str	r3, [r7, #20]
 8004900:	e00a      	b.n	8004918 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004902:	f3af 8000 	nop.w
 8004906:	4601      	mov	r1, r0
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	60ba      	str	r2, [r7, #8]
 800490e:	b2ca      	uxtb	r2, r1
 8004910:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	3301      	adds	r3, #1
 8004916:	617b      	str	r3, [r7, #20]
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	429a      	cmp	r2, r3
 800491e:	dbf0      	blt.n	8004902 <_read+0x12>
	}

return len;
 8004920:	687b      	ldr	r3, [r7, #4]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b086      	sub	sp, #24
 800492e:	af00      	add	r7, sp, #0
 8004930:	60f8      	str	r0, [r7, #12]
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004936:	2300      	movs	r3, #0
 8004938:	617b      	str	r3, [r7, #20]
 800493a:	e009      	b.n	8004950 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	1c5a      	adds	r2, r3, #1
 8004940:	60ba      	str	r2, [r7, #8]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	4618      	mov	r0, r3
 8004946:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	3301      	adds	r3, #1
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	429a      	cmp	r2, r3
 8004956:	dbf1      	blt.n	800493c <_write+0x12>
	}
	return len;
 8004958:	687b      	ldr	r3, [r7, #4]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3718      	adds	r7, #24
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <_close>:

int _close(int file)
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
	return -1;
 800496a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800496e:	4618      	mov	r0, r3
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
 8004982:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800498a:	605a      	str	r2, [r3, #4]
	return 0;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <_isatty>:

int _isatty(int file)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
	return 1;
 80049a2:	2301      	movs	r3, #1
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
	return 0;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
	...

080049cc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80049d4:	4b11      	ldr	r3, [pc, #68]	; (8004a1c <_sbrk+0x50>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d102      	bne.n	80049e2 <_sbrk+0x16>
		heap_end = &end;
 80049dc:	4b0f      	ldr	r3, [pc, #60]	; (8004a1c <_sbrk+0x50>)
 80049de:	4a10      	ldr	r2, [pc, #64]	; (8004a20 <_sbrk+0x54>)
 80049e0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80049e2:	4b0e      	ldr	r3, [pc, #56]	; (8004a1c <_sbrk+0x50>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80049e8:	4b0c      	ldr	r3, [pc, #48]	; (8004a1c <_sbrk+0x50>)
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4413      	add	r3, r2
 80049f0:	466a      	mov	r2, sp
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d907      	bls.n	8004a06 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80049f6:	f006 f85d 	bl	800aab4 <__errno>
 80049fa:	4602      	mov	r2, r0
 80049fc:	230c      	movs	r3, #12
 80049fe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004a00:	f04f 33ff 	mov.w	r3, #4294967295
 8004a04:	e006      	b.n	8004a14 <_sbrk+0x48>
	}

	heap_end += incr;
 8004a06:	4b05      	ldr	r3, [pc, #20]	; (8004a1c <_sbrk+0x50>)
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	4a03      	ldr	r2, [pc, #12]	; (8004a1c <_sbrk+0x50>)
 8004a10:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004a12:	68fb      	ldr	r3, [r7, #12]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	2000045c 	.word	0x2000045c
 8004a20:	200137d0 	.word	0x200137d0

08004a24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a28:	4b08      	ldr	r3, [pc, #32]	; (8004a4c <SystemInit+0x28>)
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2e:	4a07      	ldr	r2, [pc, #28]	; (8004a4c <SystemInit+0x28>)
 8004a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004a38:	4b04      	ldr	r3, [pc, #16]	; (8004a4c <SystemInit+0x28>)
 8004a3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a3e:	609a      	str	r2, [r3, #8]
#endif
}
 8004a40:	bf00      	nop
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	e000ed00 	.word	0xe000ed00

08004a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004a54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004a56:	e003      	b.n	8004a60 <LoopCopyDataInit>

08004a58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004a58:	4b0c      	ldr	r3, [pc, #48]	; (8004a8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004a5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004a5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004a5e:	3104      	adds	r1, #4

08004a60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004a60:	480b      	ldr	r0, [pc, #44]	; (8004a90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004a62:	4b0c      	ldr	r3, [pc, #48]	; (8004a94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004a64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004a66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004a68:	d3f6      	bcc.n	8004a58 <CopyDataInit>
  ldr  r2, =_sbss
 8004a6a:	4a0b      	ldr	r2, [pc, #44]	; (8004a98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004a6c:	e002      	b.n	8004a74 <LoopFillZerobss>

08004a6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004a6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004a70:	f842 3b04 	str.w	r3, [r2], #4

08004a74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004a74:	4b09      	ldr	r3, [pc, #36]	; (8004a9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004a76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004a78:	d3f9      	bcc.n	8004a6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004a7a:	f7ff ffd3 	bl	8004a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a7e:	f006 f81f 	bl	800aac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a82:	f7ff f86d 	bl	8003b60 <main>
  bx  lr    
 8004a86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004a88:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004a8c:	0800d900 	.word	0x0800d900
  ldr  r0, =_sdata
 8004a90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004a94:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8004a98:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8004a9c:	200137d0 	.word	0x200137d0

08004aa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004aa0:	e7fe      	b.n	8004aa0 <ADC_IRQHandler>
	...

08004aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004aa8:	4b0e      	ldr	r3, [pc, #56]	; (8004ae4 <HAL_Init+0x40>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a0d      	ldr	r2, [pc, #52]	; (8004ae4 <HAL_Init+0x40>)
 8004aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ab2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ab4:	4b0b      	ldr	r3, [pc, #44]	; (8004ae4 <HAL_Init+0x40>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a0a      	ldr	r2, [pc, #40]	; (8004ae4 <HAL_Init+0x40>)
 8004aba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004abe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ac0:	4b08      	ldr	r3, [pc, #32]	; (8004ae4 <HAL_Init+0x40>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a07      	ldr	r2, [pc, #28]	; (8004ae4 <HAL_Init+0x40>)
 8004ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004acc:	2003      	movs	r0, #3
 8004ace:	f000 f94d 	bl	8004d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	f000 f808 	bl	8004ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ad8:	f7ff fc9c 	bl	8004414 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40023c00 	.word	0x40023c00

08004ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004af0:	4b12      	ldr	r3, [pc, #72]	; (8004b3c <HAL_InitTick+0x54>)
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	4b12      	ldr	r3, [pc, #72]	; (8004b40 <HAL_InitTick+0x58>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	4619      	mov	r1, r3
 8004afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 f965 	bl	8004dd6 <HAL_SYSTICK_Config>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e00e      	b.n	8004b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b0f      	cmp	r3, #15
 8004b1a:	d80a      	bhi.n	8004b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	f04f 30ff 	mov.w	r0, #4294967295
 8004b24:	f000 f92d 	bl	8004d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b28:	4a06      	ldr	r2, [pc, #24]	; (8004b44 <HAL_InitTick+0x5c>)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	e000      	b.n	8004b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	2000000c 	.word	0x2000000c
 8004b40:	20000014 	.word	0x20000014
 8004b44:	20000010 	.word	0x20000010

08004b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b4c:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <HAL_IncTick+0x20>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	461a      	mov	r2, r3
 8004b52:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <HAL_IncTick+0x24>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4413      	add	r3, r2
 8004b58:	4a04      	ldr	r2, [pc, #16]	; (8004b6c <HAL_IncTick+0x24>)
 8004b5a:	6013      	str	r3, [r2, #0]
}
 8004b5c:	bf00      	nop
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	20000014 	.word	0x20000014
 8004b6c:	200137c8 	.word	0x200137c8

08004b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  return uwTick;
 8004b74:	4b03      	ldr	r3, [pc, #12]	; (8004b84 <HAL_GetTick+0x14>)
 8004b76:	681b      	ldr	r3, [r3, #0]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	200137c8 	.word	0x200137c8

08004b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b90:	f7ff ffee 	bl	8004b70 <HAL_GetTick>
 8004b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba0:	d005      	beq.n	8004bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ba2:	4b09      	ldr	r3, [pc, #36]	; (8004bc8 <HAL_Delay+0x40>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4413      	add	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004bae:	bf00      	nop
 8004bb0:	f7ff ffde 	bl	8004b70 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d8f7      	bhi.n	8004bb0 <HAL_Delay+0x28>
  {
  }
}
 8004bc0:	bf00      	nop
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	20000014 	.word	0x20000014

08004bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bdc:	4b0c      	ldr	r3, [pc, #48]	; (8004c10 <__NVIC_SetPriorityGrouping+0x44>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004be8:	4013      	ands	r3, r2
 8004bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bfe:	4a04      	ldr	r2, [pc, #16]	; (8004c10 <__NVIC_SetPriorityGrouping+0x44>)
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	60d3      	str	r3, [r2, #12]
}
 8004c04:	bf00      	nop
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	e000ed00 	.word	0xe000ed00

08004c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c14:	b480      	push	{r7}
 8004c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c18:	4b04      	ldr	r3, [pc, #16]	; (8004c2c <__NVIC_GetPriorityGrouping+0x18>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	0a1b      	lsrs	r3, r3, #8
 8004c1e:	f003 0307 	and.w	r3, r3, #7
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	e000ed00 	.word	0xe000ed00

08004c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	4603      	mov	r3, r0
 8004c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	db0b      	blt.n	8004c5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c42:	79fb      	ldrb	r3, [r7, #7]
 8004c44:	f003 021f 	and.w	r2, r3, #31
 8004c48:	4907      	ldr	r1, [pc, #28]	; (8004c68 <__NVIC_EnableIRQ+0x38>)
 8004c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c4e:	095b      	lsrs	r3, r3, #5
 8004c50:	2001      	movs	r0, #1
 8004c52:	fa00 f202 	lsl.w	r2, r0, r2
 8004c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	e000e100 	.word	0xe000e100

08004c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	4603      	mov	r3, r0
 8004c74:	6039      	str	r1, [r7, #0]
 8004c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	db0a      	blt.n	8004c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	490c      	ldr	r1, [pc, #48]	; (8004cb8 <__NVIC_SetPriority+0x4c>)
 8004c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c8a:	0112      	lsls	r2, r2, #4
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	440b      	add	r3, r1
 8004c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c94:	e00a      	b.n	8004cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	4908      	ldr	r1, [pc, #32]	; (8004cbc <__NVIC_SetPriority+0x50>)
 8004c9c:	79fb      	ldrb	r3, [r7, #7]
 8004c9e:	f003 030f 	and.w	r3, r3, #15
 8004ca2:	3b04      	subs	r3, #4
 8004ca4:	0112      	lsls	r2, r2, #4
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	440b      	add	r3, r1
 8004caa:	761a      	strb	r2, [r3, #24]
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	e000e100 	.word	0xe000e100
 8004cbc:	e000ed00 	.word	0xe000ed00

08004cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b089      	sub	sp, #36	; 0x24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	f1c3 0307 	rsb	r3, r3, #7
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	bf28      	it	cs
 8004cde:	2304      	movcs	r3, #4
 8004ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	3304      	adds	r3, #4
 8004ce6:	2b06      	cmp	r3, #6
 8004ce8:	d902      	bls.n	8004cf0 <NVIC_EncodePriority+0x30>
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	3b03      	subs	r3, #3
 8004cee:	e000      	b.n	8004cf2 <NVIC_EncodePriority+0x32>
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfe:	43da      	mvns	r2, r3
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	401a      	ands	r2, r3
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d08:	f04f 31ff 	mov.w	r1, #4294967295
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d12:	43d9      	mvns	r1, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d18:	4313      	orrs	r3, r2
         );
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3724      	adds	r7, #36	; 0x24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
	...

08004d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d38:	d301      	bcc.n	8004d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e00f      	b.n	8004d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d3e:	4a0a      	ldr	r2, [pc, #40]	; (8004d68 <SysTick_Config+0x40>)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d46:	210f      	movs	r1, #15
 8004d48:	f04f 30ff 	mov.w	r0, #4294967295
 8004d4c:	f7ff ff8e 	bl	8004c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d50:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <SysTick_Config+0x40>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d56:	4b04      	ldr	r3, [pc, #16]	; (8004d68 <SysTick_Config+0x40>)
 8004d58:	2207      	movs	r2, #7
 8004d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	e000e010 	.word	0xe000e010

08004d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff ff29 	bl	8004bcc <__NVIC_SetPriorityGrouping>
}
 8004d7a:	bf00      	nop
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b086      	sub	sp, #24
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	4603      	mov	r3, r0
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	607a      	str	r2, [r7, #4]
 8004d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d94:	f7ff ff3e 	bl	8004c14 <__NVIC_GetPriorityGrouping>
 8004d98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	68b9      	ldr	r1, [r7, #8]
 8004d9e:	6978      	ldr	r0, [r7, #20]
 8004da0:	f7ff ff8e 	bl	8004cc0 <NVIC_EncodePriority>
 8004da4:	4602      	mov	r2, r0
 8004da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004daa:	4611      	mov	r1, r2
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7ff ff5d 	bl	8004c6c <__NVIC_SetPriority>
}
 8004db2:	bf00      	nop
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b082      	sub	sp, #8
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7ff ff31 	bl	8004c30 <__NVIC_EnableIRQ>
}
 8004dce:	bf00      	nop
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b082      	sub	sp, #8
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7ff ffa2 	bl	8004d28 <SysTick_Config>
 8004de4:	4603      	mov	r3, r0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
	...

08004df0 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b088      	sub	sp, #32
 8004df4:	af02      	add	r7, sp, #8
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d101      	bne.n	8004e10 <HAL_DCMI_Start_DMA+0x20>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e086      	b.n	8004f1e <HAL_DCMI_Start_DMA+0x12e>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e2e:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0202 	bic.w	r2, r2, #2
 8004e3e:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6819      	ldr	r1, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e54:	4a34      	ldr	r2, [pc, #208]	; (8004f28 <HAL_DCMI_Start_DMA+0x138>)
 8004e56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5c:	4a33      	ldr	r2, [pc, #204]	; (8004f2c <HAL_DCMI_Start_DMA+0x13c>)
 8004e5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e64:	2200      	movs	r2, #0
 8004e66:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e7a:	d20a      	bcs.n	8004e92 <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	3328      	adds	r3, #40	; 0x28
 8004e86:	4619      	mov	r1, r3
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	f000 fafe 	bl	800548c <HAL_DMA_Start_IT>
 8004e90:	e038      	b.n	8004f04 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e96:	4a24      	ldr	r2, [pc, #144]	; (8004f28 <HAL_DCMI_Start_DMA+0x138>)
 8004e98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8004eac:	e009      	b.n	8004ec2 <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb2:	085a      	lsrs	r2, r3, #1
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebc:	005a      	lsls	r2, r3, #1
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eca:	d2f0      	bcs.n	8004eae <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed0:	1e9a      	subs	r2, r3, #2
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3328      	adds	r3, #40	; 0x28
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	f000 fe16 	bl	8005b30 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0201 	orr.w	r2, r2, #1
 8004f12:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3718      	adds	r7, #24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	0800510d 	.word	0x0800510d
 8004f2c:	08005237 	.word	0x08005237

08004f30 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 8004f38:	4b29      	ldr	r3, [pc, #164]	; (8004fe0 <HAL_DCMI_Stop+0xb0>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	085b      	lsrs	r3, r3, #1
 8004f3e:	4a29      	ldr	r2, [pc, #164]	; (8004fe4 <HAL_DCMI_Stop+0xb4>)
 8004f40:	fba2 2303 	umull	r2, r3, r2, r3
 8004f44:	089b      	lsrs	r3, r3, #2
 8004f46:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d101      	bne.n	8004f5a <HAL_DCMI_Stop+0x2a>
 8004f56:	2302      	movs	r3, #2
 8004f58:	e03e      	b.n	8004fd8 <HAL_DCMI_Stop+0xa8>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2202      	movs	r2, #2
 8004f66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 0201 	bic.w	r2, r2, #1
 8004f78:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	1e5a      	subs	r2, r3, #1
 8004f7e:	60ba      	str	r2, [r7, #8]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d108      	bne.n	8004f96 <HAL_DCMI_Stop+0x66>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f88:	f043 0220 	orr.w	r2, r3, #32
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	63da      	str	r2, [r3, #60]	; 0x3c

      status = HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	73fb      	strb	r3, [r7, #15]
      break;
 8004f94:	e006      	b.n	8004fa4 <HAL_DCMI_Stop+0x74>
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1ea      	bne.n	8004f7a <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004fb2:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 fabf 	bl	800553c <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return status;
 8004fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	2000000c 	.word	0x2000000c
 8004fe4:	92492493 	.word	0x92492493

08004fe8 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f003 0304 	and.w	r3, r3, #4
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d016      	beq.n	8005030 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2204      	movs	r2, #4
 8005008:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500e:	f043 0202 	orr.w	r2, r3, #2
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2204      	movs	r2, #4
 800501a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005022:	4a2f      	ldr	r2, [pc, #188]	; (80050e0 <HAL_DCMI_IRQHandler+0xf8>)
 8005024:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502a:	4618      	mov	r0, r3
 800502c:	f000 faf6 	bl	800561c <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d016      	beq.n	8005068 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2202      	movs	r2, #2
 8005040:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005046:	f043 0201 	orr.w	r2, r3, #1
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2204      	movs	r2, #4
 8005052:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505a:	4a21      	ldr	r2, [pc, #132]	; (80050e0 <HAL_DCMI_IRQHandler+0xf8>)
 800505c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005062:	4618      	mov	r0, r3
 8005064:	f000 fada 	bl	800561c <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f003 0310 	and.w	r3, r3, #16
 800506e:	2b00      	cmp	r3, #0
 8005070:	d006      	beq.n	8005080 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2210      	movs	r2, #16
 8005078:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f83c 	bl	80050f8 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f003 0308 	and.w	r3, r3, #8
 8005086:	2b00      	cmp	r3, #0
 8005088:	d006      	beq.n	8005098 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2208      	movs	r2, #8
 8005090:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7ff f96e 	bl	8004374 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d019      	beq.n	80050d6 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d107      	bne.n	80050c0 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68da      	ldr	r2, [r3, #12]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 021e 	bic.w	r2, r2, #30
 80050be:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0201 	bic.w	r2, r2, #1
 80050ce:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7ff f91d 	bl	8004310 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 80050d6:	bf00      	nop
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	08005237 	.word	0x08005237

080050e4 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511c:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005122:	2b00      	cmp	r3, #0
 8005124:	d043      	beq.n	80051ae <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005132:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	2b00      	cmp	r3, #0
 800513e:	d118      	bne.n	8005172 <DCMI_DMAXferCplt+0x66>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d015      	beq.n	8005172 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005158:	00da      	lsls	r2, r3, #3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	4413      	add	r3, r2
 800515e:	2200      	movs	r2, #0
 8005160:	4619      	mov	r1, r3
 8005162:	f001 fe2d 	bl	8006dc0 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516a:	1e5a      	subs	r2, r3, #1
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	629a      	str	r2, [r3, #40]	; 0x28
 8005170:	e044      	b.n	80051fc <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d13c      	bne.n	80051fc <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005194:	00da      	lsls	r2, r3, #3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4413      	add	r3, r2
 800519a:	2201      	movs	r2, #1
 800519c:	4619      	mov	r1, r3
 800519e:	f001 fe0f 	bl	8006dc0 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a6:	1e5a      	subs	r2, r3, #1
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	629a      	str	r2, [r3, #40]	; 0x28
 80051ac:	e026      	b.n	80051fc <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d006      	beq.n	80051cc <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051c8:	60da      	str	r2, [r3, #12]
 80051ca:	e017      	b.n	80051fc <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10f      	bne.n	80051fc <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e0:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e6:	0099      	lsls	r1, r3, #2
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	440a      	add	r2, r1
 80051f2:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005204:	429a      	cmp	r2, r3
 8005206:	d112      	bne.n	800522e <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68da      	ldr	r2, [r3, #12]
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 0201 	orr.w	r2, r2, #1
 8005216:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b02      	cmp	r3, #2
 8005224:	d103      	bne.n	800522e <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 800522e:	bf00      	nop
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b084      	sub	sp, #16
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005242:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524a:	2b02      	cmp	r3, #2
 800524c:	d003      	beq.n	8005256 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f7ff ff44 	bl	80050e4 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 800525c:	bf00      	nop
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e058      	b.n	8005328 <HAL_DCMI_Init+0xc4>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d102      	bne.n	8005288 <HAL_DCMI_Init+0x24>
  {
    /* Init the low level hardware */
    HAL_DCMI_MspInit(hdcmi);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7ff f8ee 	bl	8004464 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6812      	ldr	r2, [r2, #0]
 800529a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800529e:	f023 0308 	bic.w	r3, r3, #8
 80052a2:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6819      	ldr	r1, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80052b8:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80052c4:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode 
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80052d0:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2b10      	cmp	r3, #16
 80052e0:	d112      	bne.n	8005308 <HAL_DCMI_Init+0xa4>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	7f1b      	ldrb	r3, [r3, #28]
 80052e6:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	7f5b      	ldrb	r3, [r3, #29]
 80052ec:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80052ee:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	7f9b      	ldrb	r3, [r3, #30]
 80052f4:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80052f6:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	7fdb      	ldrb	r3, [r3, #31]
 80052fe:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8005304:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8005306:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68da      	ldr	r2, [r3, #12]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 021e 	orr.w	r2, r2, #30
 8005316:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3708      	adds	r7, #8
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800533c:	f7ff fc18 	bl	8004b70 <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e099      	b.n	8005480 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0201 	bic.w	r2, r2, #1
 800536a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800536c:	e00f      	b.n	800538e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800536e:	f7ff fbff 	bl	8004b70 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2b05      	cmp	r3, #5
 800537a:	d908      	bls.n	800538e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2220      	movs	r2, #32
 8005380:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2203      	movs	r2, #3
 8005386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e078      	b.n	8005480 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1e8      	bne.n	800536e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	4b38      	ldr	r3, [pc, #224]	; (8005488 <HAL_DMA_Init+0x158>)
 80053a8:	4013      	ands	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	4313      	orrs	r3, r2
 80053de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	2b04      	cmp	r3, #4
 80053e6:	d107      	bne.n	80053f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f0:	4313      	orrs	r3, r2
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f023 0307 	bic.w	r3, r3, #7
 800540e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	4313      	orrs	r3, r2
 8005418:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541e:	2b04      	cmp	r3, #4
 8005420:	d117      	bne.n	8005452 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	4313      	orrs	r3, r2
 800542a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00e      	beq.n	8005452 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fb01 	bl	8005a3c <DMA_CheckFifoParam>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d008      	beq.n	8005452 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2240      	movs	r2, #64	; 0x40
 8005444:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800544e:	2301      	movs	r3, #1
 8005450:	e016      	b.n	8005480 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fab8 	bl	80059d0 <DMA_CalcBaseAndBitshift>
 8005460:	4603      	mov	r3, r0
 8005462:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005468:	223f      	movs	r2, #63	; 0x3f
 800546a:	409a      	lsls	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	f010803f 	.word	0xf010803f

0800548c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
 8005498:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d101      	bne.n	80054b2 <HAL_DMA_Start_IT+0x26>
 80054ae:	2302      	movs	r3, #2
 80054b0:	e040      	b.n	8005534 <HAL_DMA_Start_IT+0xa8>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d12f      	bne.n	8005526 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2202      	movs	r2, #2
 80054ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	68b9      	ldr	r1, [r7, #8]
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 fa4a 	bl	8005974 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e4:	223f      	movs	r2, #63	; 0x3f
 80054e6:	409a      	lsls	r2, r3
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0216 	orr.w	r2, r2, #22
 80054fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005500:	2b00      	cmp	r3, #0
 8005502:	d007      	beq.n	8005514 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f042 0208 	orr.w	r2, r2, #8
 8005512:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f042 0201 	orr.w	r2, r2, #1
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	e005      	b.n	8005532 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800552e:	2302      	movs	r3, #2
 8005530:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005532:	7dfb      	ldrb	r3, [r7, #23]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3718      	adds	r7, #24
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005548:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800554a:	f7ff fb11 	bl	8004b70 <HAL_GetTick>
 800554e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d008      	beq.n	800556e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2280      	movs	r2, #128	; 0x80
 8005560:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e052      	b.n	8005614 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 0216 	bic.w	r2, r2, #22
 800557c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	695a      	ldr	r2, [r3, #20]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800558c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	2b00      	cmp	r3, #0
 8005594:	d103      	bne.n	800559e <HAL_DMA_Abort+0x62>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800559a:	2b00      	cmp	r3, #0
 800559c:	d007      	beq.n	80055ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 0208 	bic.w	r2, r2, #8
 80055ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f022 0201 	bic.w	r2, r2, #1
 80055bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055be:	e013      	b.n	80055e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055c0:	f7ff fad6 	bl	8004b70 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b05      	cmp	r3, #5
 80055cc:	d90c      	bls.n	80055e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2220      	movs	r2, #32
 80055d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2203      	movs	r2, #3
 80055e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e015      	b.n	8005614 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1e4      	bne.n	80055c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055fa:	223f      	movs	r2, #63	; 0x3f
 80055fc:	409a      	lsls	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b02      	cmp	r3, #2
 800562e:	d004      	beq.n	800563a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2280      	movs	r2, #128	; 0x80
 8005634:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e00c      	b.n	8005654 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2205      	movs	r2, #5
 800563e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 0201 	bic.w	r2, r2, #1
 8005650:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800566c:	4b92      	ldr	r3, [pc, #584]	; (80058b8 <HAL_DMA_IRQHandler+0x258>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a92      	ldr	r2, [pc, #584]	; (80058bc <HAL_DMA_IRQHandler+0x25c>)
 8005672:	fba2 2303 	umull	r2, r3, r2, r3
 8005676:	0a9b      	lsrs	r3, r3, #10
 8005678:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800567e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800568a:	2208      	movs	r2, #8
 800568c:	409a      	lsls	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	4013      	ands	r3, r2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d01a      	beq.n	80056cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0304 	and.w	r3, r3, #4
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d013      	beq.n	80056cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 0204 	bic.w	r2, r2, #4
 80056b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b8:	2208      	movs	r2, #8
 80056ba:	409a      	lsls	r2, r3
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c4:	f043 0201 	orr.w	r2, r3, #1
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056d0:	2201      	movs	r2, #1
 80056d2:	409a      	lsls	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4013      	ands	r3, r2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d012      	beq.n	8005702 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00b      	beq.n	8005702 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ee:	2201      	movs	r2, #1
 80056f0:	409a      	lsls	r2, r3
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fa:	f043 0202 	orr.w	r2, r3, #2
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005706:	2204      	movs	r2, #4
 8005708:	409a      	lsls	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	4013      	ands	r3, r2
 800570e:	2b00      	cmp	r3, #0
 8005710:	d012      	beq.n	8005738 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00b      	beq.n	8005738 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005724:	2204      	movs	r2, #4
 8005726:	409a      	lsls	r2, r3
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005730:	f043 0204 	orr.w	r2, r3, #4
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800573c:	2210      	movs	r2, #16
 800573e:	409a      	lsls	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4013      	ands	r3, r2
 8005744:	2b00      	cmp	r3, #0
 8005746:	d043      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0308 	and.w	r3, r3, #8
 8005752:	2b00      	cmp	r3, #0
 8005754:	d03c      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800575a:	2210      	movs	r2, #16
 800575c:	409a      	lsls	r2, r3
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d018      	beq.n	80057a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d108      	bne.n	8005790 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	2b00      	cmp	r3, #0
 8005784:	d024      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	4798      	blx	r3
 800578e:	e01f      	b.n	80057d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005794:	2b00      	cmp	r3, #0
 8005796:	d01b      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	4798      	blx	r3
 80057a0:	e016      	b.n	80057d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d107      	bne.n	80057c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f022 0208 	bic.w	r2, r2, #8
 80057be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d003      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d4:	2220      	movs	r2, #32
 80057d6:	409a      	lsls	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4013      	ands	r3, r2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 808e 	beq.w	80058fe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0310 	and.w	r3, r3, #16
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 8086 	beq.w	80058fe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f6:	2220      	movs	r2, #32
 80057f8:	409a      	lsls	r2, r3
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b05      	cmp	r3, #5
 8005808:	d136      	bne.n	8005878 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0216 	bic.w	r2, r2, #22
 8005818:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	695a      	ldr	r2, [r3, #20]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005828:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582e:	2b00      	cmp	r3, #0
 8005830:	d103      	bne.n	800583a <HAL_DMA_IRQHandler+0x1da>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005836:	2b00      	cmp	r3, #0
 8005838:	d007      	beq.n	800584a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 0208 	bic.w	r2, r2, #8
 8005848:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800584e:	223f      	movs	r2, #63	; 0x3f
 8005850:	409a      	lsls	r2, r3
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800586a:	2b00      	cmp	r3, #0
 800586c:	d07d      	beq.n	800596a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	4798      	blx	r3
        }
        return;
 8005876:	e078      	b.n	800596a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d01c      	beq.n	80058c0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d108      	bne.n	80058a6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005898:	2b00      	cmp	r3, #0
 800589a:	d030      	beq.n	80058fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	4798      	blx	r3
 80058a4:	e02b      	b.n	80058fe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d027      	beq.n	80058fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	4798      	blx	r3
 80058b6:	e022      	b.n	80058fe <HAL_DMA_IRQHandler+0x29e>
 80058b8:	2000000c 	.word	0x2000000c
 80058bc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10f      	bne.n	80058ee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0210 	bic.w	r2, r2, #16
 80058dc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005902:	2b00      	cmp	r3, #0
 8005904:	d032      	beq.n	800596c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d022      	beq.n	8005958 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2205      	movs	r2, #5
 8005916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 0201 	bic.w	r2, r2, #1
 8005928:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	3301      	adds	r3, #1
 800592e:	60bb      	str	r3, [r7, #8]
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	429a      	cmp	r2, r3
 8005934:	d307      	bcc.n	8005946 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1f2      	bne.n	800592a <HAL_DMA_IRQHandler+0x2ca>
 8005944:	e000      	b.n	8005948 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005946:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800595c:	2b00      	cmp	r3, #0
 800595e:	d005      	beq.n	800596c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	4798      	blx	r3
 8005968:	e000      	b.n	800596c <HAL_DMA_IRQHandler+0x30c>
        return;
 800596a:	bf00      	nop
    }
  }
}
 800596c:	3718      	adds	r7, #24
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop

08005974 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
 8005980:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005990:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	2b40      	cmp	r3, #64	; 0x40
 80059a0:	d108      	bne.n	80059b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80059b2:	e007      	b.n	80059c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	60da      	str	r2, [r3, #12]
}
 80059c4:	bf00      	nop
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	3b10      	subs	r3, #16
 80059e0:	4a14      	ldr	r2, [pc, #80]	; (8005a34 <DMA_CalcBaseAndBitshift+0x64>)
 80059e2:	fba2 2303 	umull	r2, r3, r2, r3
 80059e6:	091b      	lsrs	r3, r3, #4
 80059e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80059ea:	4a13      	ldr	r2, [pc, #76]	; (8005a38 <DMA_CalcBaseAndBitshift+0x68>)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4413      	add	r3, r2
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	461a      	mov	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2b03      	cmp	r3, #3
 80059fc:	d909      	bls.n	8005a12 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005a06:	f023 0303 	bic.w	r3, r3, #3
 8005a0a:	1d1a      	adds	r2, r3, #4
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	659a      	str	r2, [r3, #88]	; 0x58
 8005a10:	e007      	b.n	8005a22 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005a1a:	f023 0303 	bic.w	r3, r3, #3
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	aaaaaaab 	.word	0xaaaaaaab
 8005a38:	0800d628 	.word	0x0800d628

08005a3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a44:	2300      	movs	r3, #0
 8005a46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d11f      	bne.n	8005a96 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	2b03      	cmp	r3, #3
 8005a5a:	d855      	bhi.n	8005b08 <DMA_CheckFifoParam+0xcc>
 8005a5c:	a201      	add	r2, pc, #4	; (adr r2, 8005a64 <DMA_CheckFifoParam+0x28>)
 8005a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a62:	bf00      	nop
 8005a64:	08005a75 	.word	0x08005a75
 8005a68:	08005a87 	.word	0x08005a87
 8005a6c:	08005a75 	.word	0x08005a75
 8005a70:	08005b09 	.word	0x08005b09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d045      	beq.n	8005b0c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a84:	e042      	b.n	8005b0c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a8e:	d13f      	bne.n	8005b10 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a94:	e03c      	b.n	8005b10 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a9e:	d121      	bne.n	8005ae4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2b03      	cmp	r3, #3
 8005aa4:	d836      	bhi.n	8005b14 <DMA_CheckFifoParam+0xd8>
 8005aa6:	a201      	add	r2, pc, #4	; (adr r2, 8005aac <DMA_CheckFifoParam+0x70>)
 8005aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aac:	08005abd 	.word	0x08005abd
 8005ab0:	08005ac3 	.word	0x08005ac3
 8005ab4:	08005abd 	.word	0x08005abd
 8005ab8:	08005ad5 	.word	0x08005ad5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	73fb      	strb	r3, [r7, #15]
      break;
 8005ac0:	e02f      	b.n	8005b22 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d024      	beq.n	8005b18 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ad2:	e021      	b.n	8005b18 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005adc:	d11e      	bne.n	8005b1c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005ae2:	e01b      	b.n	8005b1c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d902      	bls.n	8005af0 <DMA_CheckFifoParam+0xb4>
 8005aea:	2b03      	cmp	r3, #3
 8005aec:	d003      	beq.n	8005af6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005aee:	e018      	b.n	8005b22 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	73fb      	strb	r3, [r7, #15]
      break;
 8005af4:	e015      	b.n	8005b22 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00e      	beq.n	8005b20 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	73fb      	strb	r3, [r7, #15]
      break;
 8005b06:	e00b      	b.n	8005b20 <DMA_CheckFifoParam+0xe4>
      break;
 8005b08:	bf00      	nop
 8005b0a:	e00a      	b.n	8005b22 <DMA_CheckFifoParam+0xe6>
      break;
 8005b0c:	bf00      	nop
 8005b0e:	e008      	b.n	8005b22 <DMA_CheckFifoParam+0xe6>
      break;
 8005b10:	bf00      	nop
 8005b12:	e006      	b.n	8005b22 <DMA_CheckFifoParam+0xe6>
      break;
 8005b14:	bf00      	nop
 8005b16:	e004      	b.n	8005b22 <DMA_CheckFifoParam+0xe6>
      break;
 8005b18:	bf00      	nop
 8005b1a:	e002      	b.n	8005b22 <DMA_CheckFifoParam+0xe6>
      break;   
 8005b1c:	bf00      	nop
 8005b1e:	e000      	b.n	8005b22 <DMA_CheckFifoParam+0xe6>
      break;
 8005b20:	bf00      	nop
    }
  } 
  
  return status; 
 8005b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
 8005b3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	2b80      	cmp	r3, #128	; 0x80
 8005b48:	d106      	bne.n	8005b58 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	f001 b913 	b.w	8006d7e <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d007      	beq.n	8005b70 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d003      	beq.n	8005b70 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d105      	bne.n	8005b7c <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2240      	movs	r2, #64	; 0x40
 8005b74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	f001 b901 	b.w	8006d7e <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d102      	bne.n	8005b8c <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8005b86:	2302      	movs	r3, #2
 8005b88:	f001 b8f9 	b.w	8006d7e <HAL_DMAEx_MultiBufferStart_IT+0x124e>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	f041 80e7 	bne.w	8006d70 <HAL_DMAEx_MultiBufferStart_IT+0x1240>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005bbe:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	68b9      	ldr	r1, [r7, #8]
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f001 f910 	bl	8006df4 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	461a      	mov	r2, r3
 8005bda:	4b99      	ldr	r3, [pc, #612]	; (8005e40 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d960      	bls.n	8005ca2 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a97      	ldr	r2, [pc, #604]	; (8005e44 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d057      	beq.n	8005c9a <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a96      	ldr	r2, [pc, #600]	; (8005e48 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d050      	beq.n	8005c96 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a94      	ldr	r2, [pc, #592]	; (8005e4c <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d049      	beq.n	8005c92 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a93      	ldr	r2, [pc, #588]	; (8005e50 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d042      	beq.n	8005c8e <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a91      	ldr	r2, [pc, #580]	; (8005e54 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d03a      	beq.n	8005c88 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a90      	ldr	r2, [pc, #576]	; (8005e58 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d032      	beq.n	8005c82 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a8e      	ldr	r2, [pc, #568]	; (8005e5c <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d02a      	beq.n	8005c7c <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a8d      	ldr	r2, [pc, #564]	; (8005e60 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d022      	beq.n	8005c76 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a8b      	ldr	r2, [pc, #556]	; (8005e64 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d01a      	beq.n	8005c70 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a8a      	ldr	r2, [pc, #552]	; (8005e68 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d012      	beq.n	8005c6a <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a88      	ldr	r2, [pc, #544]	; (8005e6c <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d00a      	beq.n	8005c64 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a87      	ldr	r2, [pc, #540]	; (8005e70 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d102      	bne.n	8005c5e <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8005c58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005c5c:	e01e      	b.n	8005c9c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005c5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c62:	e01b      	b.n	8005c9c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005c64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005c68:	e018      	b.n	8005c9c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005c6a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005c6e:	e015      	b.n	8005c9c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005c70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005c74:	e012      	b.n	8005c9c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005c76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c7a:	e00f      	b.n	8005c9c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005c7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c80:	e00c      	b.n	8005c9c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005c82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c86:	e009      	b.n	8005c9c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005c88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c8c:	e006      	b.n	8005c9c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005c8e:	2320      	movs	r3, #32
 8005c90:	e004      	b.n	8005c9c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005c92:	2320      	movs	r3, #32
 8005c94:	e002      	b.n	8005c9c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005c96:	2320      	movs	r3, #32
 8005c98:	e000      	b.n	8005c9c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005c9a:	2320      	movs	r3, #32
 8005c9c:	4a75      	ldr	r2, [pc, #468]	; (8005e74 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8005c9e:	60d3      	str	r3, [r2, #12]
 8005ca0:	e150      	b.n	8005f44 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	4b73      	ldr	r3, [pc, #460]	; (8005e78 <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d960      	bls.n	8005d70 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a64      	ldr	r2, [pc, #400]	; (8005e44 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d057      	beq.n	8005d68 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a62      	ldr	r2, [pc, #392]	; (8005e48 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d050      	beq.n	8005d64 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a61      	ldr	r2, [pc, #388]	; (8005e4c <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d049      	beq.n	8005d60 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a5f      	ldr	r2, [pc, #380]	; (8005e50 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d042      	beq.n	8005d5c <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a5e      	ldr	r2, [pc, #376]	; (8005e54 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d03a      	beq.n	8005d56 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a5c      	ldr	r2, [pc, #368]	; (8005e58 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d032      	beq.n	8005d50 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a5b      	ldr	r2, [pc, #364]	; (8005e5c <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d02a      	beq.n	8005d4a <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a59      	ldr	r2, [pc, #356]	; (8005e60 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d022      	beq.n	8005d44 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a58      	ldr	r2, [pc, #352]	; (8005e64 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d01a      	beq.n	8005d3e <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a56      	ldr	r2, [pc, #344]	; (8005e68 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d012      	beq.n	8005d38 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a55      	ldr	r2, [pc, #340]	; (8005e6c <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d00a      	beq.n	8005d32 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a53      	ldr	r2, [pc, #332]	; (8005e70 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d102      	bne.n	8005d2c <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8005d26:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005d2a:	e01e      	b.n	8005d6a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005d2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d30:	e01b      	b.n	8005d6a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005d32:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005d36:	e018      	b.n	8005d6a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005d38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005d3c:	e015      	b.n	8005d6a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005d3e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005d42:	e012      	b.n	8005d6a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005d44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d48:	e00f      	b.n	8005d6a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005d4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d4e:	e00c      	b.n	8005d6a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005d50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d54:	e009      	b.n	8005d6a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005d56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d5a:	e006      	b.n	8005d6a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005d5c:	2320      	movs	r3, #32
 8005d5e:	e004      	b.n	8005d6a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005d60:	2320      	movs	r3, #32
 8005d62:	e002      	b.n	8005d6a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005d64:	2320      	movs	r3, #32
 8005d66:	e000      	b.n	8005d6a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005d68:	2320      	movs	r3, #32
 8005d6a:	4a42      	ldr	r2, [pc, #264]	; (8005e74 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8005d6c:	6093      	str	r3, [r2, #8]
 8005d6e:	e0e9      	b.n	8005f44 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	461a      	mov	r2, r3
 8005d76:	4b41      	ldr	r3, [pc, #260]	; (8005e7c <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	f240 8083 	bls.w	8005e84 <HAL_DMAEx_MultiBufferStart_IT+0x354>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a30      	ldr	r2, [pc, #192]	; (8005e44 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d057      	beq.n	8005e38 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a2e      	ldr	r2, [pc, #184]	; (8005e48 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d050      	beq.n	8005e34 <HAL_DMAEx_MultiBufferStart_IT+0x304>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a2d      	ldr	r2, [pc, #180]	; (8005e4c <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d049      	beq.n	8005e30 <HAL_DMAEx_MultiBufferStart_IT+0x300>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a2b      	ldr	r2, [pc, #172]	; (8005e50 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d042      	beq.n	8005e2c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a2a      	ldr	r2, [pc, #168]	; (8005e54 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d03a      	beq.n	8005e26 <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a28      	ldr	r2, [pc, #160]	; (8005e58 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d032      	beq.n	8005e20 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a27      	ldr	r2, [pc, #156]	; (8005e5c <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d02a      	beq.n	8005e1a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a25      	ldr	r2, [pc, #148]	; (8005e60 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d022      	beq.n	8005e14 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a24      	ldr	r2, [pc, #144]	; (8005e64 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d01a      	beq.n	8005e0e <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a22      	ldr	r2, [pc, #136]	; (8005e68 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d012      	beq.n	8005e08 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a21      	ldr	r2, [pc, #132]	; (8005e6c <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d00a      	beq.n	8005e02 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a1f      	ldr	r2, [pc, #124]	; (8005e70 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d102      	bne.n	8005dfc <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8005df6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005dfa:	e01e      	b.n	8005e3a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005dfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e00:	e01b      	b.n	8005e3a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005e02:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e06:	e018      	b.n	8005e3a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005e08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e0c:	e015      	b.n	8005e3a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005e0e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e12:	e012      	b.n	8005e3a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005e14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e18:	e00f      	b.n	8005e3a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005e1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e1e:	e00c      	b.n	8005e3a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005e20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e24:	e009      	b.n	8005e3a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005e26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e2a:	e006      	b.n	8005e3a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005e2c:	2320      	movs	r3, #32
 8005e2e:	e004      	b.n	8005e3a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005e30:	2320      	movs	r3, #32
 8005e32:	e002      	b.n	8005e3a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005e34:	2320      	movs	r3, #32
 8005e36:	e000      	b.n	8005e3a <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8005e38:	2320      	movs	r3, #32
 8005e3a:	4a11      	ldr	r2, [pc, #68]	; (8005e80 <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 8005e3c:	60d3      	str	r3, [r2, #12]
 8005e3e:	e081      	b.n	8005f44 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8005e40:	40026458 	.word	0x40026458
 8005e44:	40026010 	.word	0x40026010
 8005e48:	40026410 	.word	0x40026410
 8005e4c:	40026070 	.word	0x40026070
 8005e50:	40026470 	.word	0x40026470
 8005e54:	40026028 	.word	0x40026028
 8005e58:	40026428 	.word	0x40026428
 8005e5c:	40026088 	.word	0x40026088
 8005e60:	40026488 	.word	0x40026488
 8005e64:	40026040 	.word	0x40026040
 8005e68:	40026440 	.word	0x40026440
 8005e6c:	400260a0 	.word	0x400260a0
 8005e70:	400264a0 	.word	0x400264a0
 8005e74:	40026400 	.word	0x40026400
 8005e78:	400260b8 	.word	0x400260b8
 8005e7c:	40026058 	.word	0x40026058
 8005e80:	40026000 	.word	0x40026000
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a96      	ldr	r2, [pc, #600]	; (80060e4 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d057      	beq.n	8005f3e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a95      	ldr	r2, [pc, #596]	; (80060e8 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d050      	beq.n	8005f3a <HAL_DMAEx_MultiBufferStart_IT+0x40a>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a93      	ldr	r2, [pc, #588]	; (80060ec <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d049      	beq.n	8005f36 <HAL_DMAEx_MultiBufferStart_IT+0x406>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a92      	ldr	r2, [pc, #584]	; (80060f0 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d042      	beq.n	8005f32 <HAL_DMAEx_MultiBufferStart_IT+0x402>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a90      	ldr	r2, [pc, #576]	; (80060f4 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d03a      	beq.n	8005f2c <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a8f      	ldr	r2, [pc, #572]	; (80060f8 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d032      	beq.n	8005f26 <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a8d      	ldr	r2, [pc, #564]	; (80060fc <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d02a      	beq.n	8005f20 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a8c      	ldr	r2, [pc, #560]	; (8006100 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d022      	beq.n	8005f1a <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a8a      	ldr	r2, [pc, #552]	; (8006104 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d01a      	beq.n	8005f14 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a89      	ldr	r2, [pc, #548]	; (8006108 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d012      	beq.n	8005f0e <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a87      	ldr	r2, [pc, #540]	; (800610c <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d00a      	beq.n	8005f08 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a86      	ldr	r2, [pc, #536]	; (8006110 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d102      	bne.n	8005f02 <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 8005efc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005f00:	e01e      	b.n	8005f40 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005f02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f06:	e01b      	b.n	8005f40 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005f08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005f0c:	e018      	b.n	8005f40 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005f0e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005f12:	e015      	b.n	8005f40 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005f14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005f18:	e012      	b.n	8005f40 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005f1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f1e:	e00f      	b.n	8005f40 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005f20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f24:	e00c      	b.n	8005f40 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005f26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f2a:	e009      	b.n	8005f40 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005f2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f30:	e006      	b.n	8005f40 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005f32:	2320      	movs	r3, #32
 8005f34:	e004      	b.n	8005f40 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005f36:	2320      	movs	r3, #32
 8005f38:	e002      	b.n	8005f40 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005f3a:	2320      	movs	r3, #32
 8005f3c:	e000      	b.n	8005f40 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8005f3e:	2320      	movs	r3, #32
 8005f40:	4a74      	ldr	r2, [pc, #464]	; (8006114 <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
 8005f42:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	4b73      	ldr	r3, [pc, #460]	; (8006118 <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d960      	bls.n	8006012 <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a63      	ldr	r2, [pc, #396]	; (80060e4 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d057      	beq.n	800600a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a62      	ldr	r2, [pc, #392]	; (80060e8 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d050      	beq.n	8006006 <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a60      	ldr	r2, [pc, #384]	; (80060ec <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d049      	beq.n	8006002 <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a5f      	ldr	r2, [pc, #380]	; (80060f0 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d042      	beq.n	8005ffe <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a5d      	ldr	r2, [pc, #372]	; (80060f4 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d03a      	beq.n	8005ff8 <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a5c      	ldr	r2, [pc, #368]	; (80060f8 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d032      	beq.n	8005ff2 <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a5a      	ldr	r2, [pc, #360]	; (80060fc <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d02a      	beq.n	8005fec <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a59      	ldr	r2, [pc, #356]	; (8006100 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d022      	beq.n	8005fe6 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a57      	ldr	r2, [pc, #348]	; (8006104 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d01a      	beq.n	8005fe0 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a56      	ldr	r2, [pc, #344]	; (8006108 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d012      	beq.n	8005fda <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a54      	ldr	r2, [pc, #336]	; (800610c <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d00a      	beq.n	8005fd4 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a53      	ldr	r2, [pc, #332]	; (8006110 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d102      	bne.n	8005fce <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 8005fc8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005fcc:	e01e      	b.n	800600c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8005fce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005fd2:	e01b      	b.n	800600c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8005fd4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005fd8:	e018      	b.n	800600c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8005fda:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005fde:	e015      	b.n	800600c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8005fe0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005fe4:	e012      	b.n	800600c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8005fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fea:	e00f      	b.n	800600c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8005fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ff0:	e00c      	b.n	800600c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8005ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ff6:	e009      	b.n	800600c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8005ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ffc:	e006      	b.n	800600c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8005ffe:	2310      	movs	r3, #16
 8006000:	e004      	b.n	800600c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8006002:	2310      	movs	r3, #16
 8006004:	e002      	b.n	800600c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8006006:	2310      	movs	r3, #16
 8006008:	e000      	b.n	800600c <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800600a:	2310      	movs	r3, #16
 800600c:	4a43      	ldr	r2, [pc, #268]	; (800611c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 800600e:	60d3      	str	r3, [r2, #12]
 8006010:	e14f      	b.n	80062b2 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	461a      	mov	r2, r3
 8006018:	4b41      	ldr	r3, [pc, #260]	; (8006120 <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
 800601a:	429a      	cmp	r2, r3
 800601c:	f240 8082 	bls.w	8006124 <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a2f      	ldr	r2, [pc, #188]	; (80060e4 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d057      	beq.n	80060da <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a2e      	ldr	r2, [pc, #184]	; (80060e8 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d050      	beq.n	80060d6 <HAL_DMAEx_MultiBufferStart_IT+0x5a6>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a2c      	ldr	r2, [pc, #176]	; (80060ec <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d049      	beq.n	80060d2 <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a2b      	ldr	r2, [pc, #172]	; (80060f0 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d042      	beq.n	80060ce <HAL_DMAEx_MultiBufferStart_IT+0x59e>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a29      	ldr	r2, [pc, #164]	; (80060f4 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d03a      	beq.n	80060c8 <HAL_DMAEx_MultiBufferStart_IT+0x598>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a28      	ldr	r2, [pc, #160]	; (80060f8 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d032      	beq.n	80060c2 <HAL_DMAEx_MultiBufferStart_IT+0x592>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a26      	ldr	r2, [pc, #152]	; (80060fc <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d02a      	beq.n	80060bc <HAL_DMAEx_MultiBufferStart_IT+0x58c>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a25      	ldr	r2, [pc, #148]	; (8006100 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d022      	beq.n	80060b6 <HAL_DMAEx_MultiBufferStart_IT+0x586>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a23      	ldr	r2, [pc, #140]	; (8006104 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d01a      	beq.n	80060b0 <HAL_DMAEx_MultiBufferStart_IT+0x580>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a22      	ldr	r2, [pc, #136]	; (8006108 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d012      	beq.n	80060aa <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a20      	ldr	r2, [pc, #128]	; (800610c <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00a      	beq.n	80060a4 <HAL_DMAEx_MultiBufferStart_IT+0x574>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a1f      	ldr	r2, [pc, #124]	; (8006110 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d102      	bne.n	800609e <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 8006098:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800609c:	e01e      	b.n	80060dc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800609e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80060a2:	e01b      	b.n	80060dc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80060a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80060a8:	e018      	b.n	80060dc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80060aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80060ae:	e015      	b.n	80060dc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80060b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80060b4:	e012      	b.n	80060dc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80060b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060ba:	e00f      	b.n	80060dc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80060bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060c0:	e00c      	b.n	80060dc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80060c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060c6:	e009      	b.n	80060dc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80060c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060cc:	e006      	b.n	80060dc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80060ce:	2310      	movs	r3, #16
 80060d0:	e004      	b.n	80060dc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80060d2:	2310      	movs	r3, #16
 80060d4:	e002      	b.n	80060dc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80060d6:	2310      	movs	r3, #16
 80060d8:	e000      	b.n	80060dc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80060da:	2310      	movs	r3, #16
 80060dc:	4a0f      	ldr	r2, [pc, #60]	; (800611c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 80060de:	6093      	str	r3, [r2, #8]
 80060e0:	e0e7      	b.n	80062b2 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 80060e2:	bf00      	nop
 80060e4:	40026010 	.word	0x40026010
 80060e8:	40026410 	.word	0x40026410
 80060ec:	40026070 	.word	0x40026070
 80060f0:	40026470 	.word	0x40026470
 80060f4:	40026028 	.word	0x40026028
 80060f8:	40026428 	.word	0x40026428
 80060fc:	40026088 	.word	0x40026088
 8006100:	40026488 	.word	0x40026488
 8006104:	40026040 	.word	0x40026040
 8006108:	40026440 	.word	0x40026440
 800610c:	400260a0 	.word	0x400260a0
 8006110:	400264a0 	.word	0x400264a0
 8006114:	40026000 	.word	0x40026000
 8006118:	40026458 	.word	0x40026458
 800611c:	40026400 	.word	0x40026400
 8006120:	400260b8 	.word	0x400260b8
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	461a      	mov	r2, r3
 800612a:	4b96      	ldr	r3, [pc, #600]	; (8006384 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800612c:	429a      	cmp	r2, r3
 800612e:	d960      	bls.n	80061f2 <HAL_DMAEx_MultiBufferStart_IT+0x6c2>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a94      	ldr	r2, [pc, #592]	; (8006388 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d057      	beq.n	80061ea <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a93      	ldr	r2, [pc, #588]	; (800638c <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d050      	beq.n	80061e6 <HAL_DMAEx_MultiBufferStart_IT+0x6b6>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a91      	ldr	r2, [pc, #580]	; (8006390 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d049      	beq.n	80061e2 <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a90      	ldr	r2, [pc, #576]	; (8006394 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d042      	beq.n	80061de <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a8e      	ldr	r2, [pc, #568]	; (8006398 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d03a      	beq.n	80061d8 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a8d      	ldr	r2, [pc, #564]	; (800639c <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d032      	beq.n	80061d2 <HAL_DMAEx_MultiBufferStart_IT+0x6a2>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a8b      	ldr	r2, [pc, #556]	; (80063a0 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d02a      	beq.n	80061cc <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a8a      	ldr	r2, [pc, #552]	; (80063a4 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d022      	beq.n	80061c6 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a88      	ldr	r2, [pc, #544]	; (80063a8 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d01a      	beq.n	80061c0 <HAL_DMAEx_MultiBufferStart_IT+0x690>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a87      	ldr	r2, [pc, #540]	; (80063ac <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d012      	beq.n	80061ba <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a85      	ldr	r2, [pc, #532]	; (80063b0 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d00a      	beq.n	80061b4 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a84      	ldr	r2, [pc, #528]	; (80063b4 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d102      	bne.n	80061ae <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 80061a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80061ac:	e01e      	b.n	80061ec <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80061ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80061b2:	e01b      	b.n	80061ec <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80061b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80061b8:	e018      	b.n	80061ec <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80061ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80061be:	e015      	b.n	80061ec <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80061c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80061c4:	e012      	b.n	80061ec <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80061c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061ca:	e00f      	b.n	80061ec <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80061cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061d0:	e00c      	b.n	80061ec <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80061d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061d6:	e009      	b.n	80061ec <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80061d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061dc:	e006      	b.n	80061ec <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80061de:	2310      	movs	r3, #16
 80061e0:	e004      	b.n	80061ec <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80061e2:	2310      	movs	r3, #16
 80061e4:	e002      	b.n	80061ec <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80061e6:	2310      	movs	r3, #16
 80061e8:	e000      	b.n	80061ec <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80061ea:	2310      	movs	r3, #16
 80061ec:	4a72      	ldr	r2, [pc, #456]	; (80063b8 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 80061ee:	60d3      	str	r3, [r2, #12]
 80061f0:	e05f      	b.n	80062b2 <HAL_DMAEx_MultiBufferStart_IT+0x782>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a64      	ldr	r2, [pc, #400]	; (8006388 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d057      	beq.n	80062ac <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a62      	ldr	r2, [pc, #392]	; (800638c <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d050      	beq.n	80062a8 <HAL_DMAEx_MultiBufferStart_IT+0x778>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a61      	ldr	r2, [pc, #388]	; (8006390 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d049      	beq.n	80062a4 <HAL_DMAEx_MultiBufferStart_IT+0x774>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a5f      	ldr	r2, [pc, #380]	; (8006394 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d042      	beq.n	80062a0 <HAL_DMAEx_MultiBufferStart_IT+0x770>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a5e      	ldr	r2, [pc, #376]	; (8006398 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d03a      	beq.n	800629a <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a5c      	ldr	r2, [pc, #368]	; (800639c <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d032      	beq.n	8006294 <HAL_DMAEx_MultiBufferStart_IT+0x764>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a5b      	ldr	r2, [pc, #364]	; (80063a0 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d02a      	beq.n	800628e <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a59      	ldr	r2, [pc, #356]	; (80063a4 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d022      	beq.n	8006288 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a58      	ldr	r2, [pc, #352]	; (80063a8 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d01a      	beq.n	8006282 <HAL_DMAEx_MultiBufferStart_IT+0x752>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a56      	ldr	r2, [pc, #344]	; (80063ac <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d012      	beq.n	800627c <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a55      	ldr	r2, [pc, #340]	; (80063b0 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d00a      	beq.n	8006276 <HAL_DMAEx_MultiBufferStart_IT+0x746>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a53      	ldr	r2, [pc, #332]	; (80063b4 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d102      	bne.n	8006270 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 800626a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800626e:	e01e      	b.n	80062ae <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8006270:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006274:	e01b      	b.n	80062ae <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8006276:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800627a:	e018      	b.n	80062ae <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800627c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006280:	e015      	b.n	80062ae <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8006282:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006286:	e012      	b.n	80062ae <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8006288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800628c:	e00f      	b.n	80062ae <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800628e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006292:	e00c      	b.n	80062ae <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8006294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006298:	e009      	b.n	80062ae <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800629a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800629e:	e006      	b.n	80062ae <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80062a0:	2310      	movs	r3, #16
 80062a2:	e004      	b.n	80062ae <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80062a4:	2310      	movs	r3, #16
 80062a6:	e002      	b.n	80062ae <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80062a8:	2310      	movs	r3, #16
 80062aa:	e000      	b.n	80062ae <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80062ac:	2310      	movs	r3, #16
 80062ae:	4a42      	ldr	r2, [pc, #264]	; (80063b8 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 80062b0:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	4b40      	ldr	r3, [pc, #256]	; (80063bc <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 80062ba:	429a      	cmp	r2, r3
 80062bc:	f240 8082 	bls.w	80063c4 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a30      	ldr	r2, [pc, #192]	; (8006388 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d057      	beq.n	800637a <HAL_DMAEx_MultiBufferStart_IT+0x84a>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a2f      	ldr	r2, [pc, #188]	; (800638c <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d050      	beq.n	8006376 <HAL_DMAEx_MultiBufferStart_IT+0x846>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a2d      	ldr	r2, [pc, #180]	; (8006390 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d049      	beq.n	8006372 <HAL_DMAEx_MultiBufferStart_IT+0x842>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a2c      	ldr	r2, [pc, #176]	; (8006394 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d042      	beq.n	800636e <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a2a      	ldr	r2, [pc, #168]	; (8006398 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d03a      	beq.n	8006368 <HAL_DMAEx_MultiBufferStart_IT+0x838>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a29      	ldr	r2, [pc, #164]	; (800639c <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d032      	beq.n	8006362 <HAL_DMAEx_MultiBufferStart_IT+0x832>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a27      	ldr	r2, [pc, #156]	; (80063a0 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d02a      	beq.n	800635c <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a26      	ldr	r2, [pc, #152]	; (80063a4 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d022      	beq.n	8006356 <HAL_DMAEx_MultiBufferStart_IT+0x826>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a24      	ldr	r2, [pc, #144]	; (80063a8 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d01a      	beq.n	8006350 <HAL_DMAEx_MultiBufferStart_IT+0x820>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a23      	ldr	r2, [pc, #140]	; (80063ac <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d012      	beq.n	800634a <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a21      	ldr	r2, [pc, #132]	; (80063b0 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d00a      	beq.n	8006344 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a20      	ldr	r2, [pc, #128]	; (80063b4 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d102      	bne.n	800633e <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 8006338:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800633c:	e01e      	b.n	800637c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800633e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006342:	e01b      	b.n	800637c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8006344:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006348:	e018      	b.n	800637c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800634a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800634e:	e015      	b.n	800637c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8006350:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006354:	e012      	b.n	800637c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8006356:	f44f 7300 	mov.w	r3, #512	; 0x200
 800635a:	e00f      	b.n	800637c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800635c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006360:	e00c      	b.n	800637c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8006362:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006366:	e009      	b.n	800637c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8006368:	f44f 7300 	mov.w	r3, #512	; 0x200
 800636c:	e006      	b.n	800637c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800636e:	2308      	movs	r3, #8
 8006370:	e004      	b.n	800637c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8006372:	2308      	movs	r3, #8
 8006374:	e002      	b.n	800637c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8006376:	2308      	movs	r3, #8
 8006378:	e000      	b.n	800637c <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800637a:	2308      	movs	r3, #8
 800637c:	4a10      	ldr	r2, [pc, #64]	; (80063c0 <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 800637e:	60d3      	str	r3, [r2, #12]
 8006380:	e16f      	b.n	8006662 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8006382:	bf00      	nop
 8006384:	40026058 	.word	0x40026058
 8006388:	40026010 	.word	0x40026010
 800638c:	40026410 	.word	0x40026410
 8006390:	40026070 	.word	0x40026070
 8006394:	40026470 	.word	0x40026470
 8006398:	40026028 	.word	0x40026028
 800639c:	40026428 	.word	0x40026428
 80063a0:	40026088 	.word	0x40026088
 80063a4:	40026488 	.word	0x40026488
 80063a8:	40026040 	.word	0x40026040
 80063ac:	40026440 	.word	0x40026440
 80063b0:	400260a0 	.word	0x400260a0
 80063b4:	400264a0 	.word	0x400264a0
 80063b8:	40026000 	.word	0x40026000
 80063bc:	40026458 	.word	0x40026458
 80063c0:	40026400 	.word	0x40026400
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	461a      	mov	r2, r3
 80063ca:	4b94      	ldr	r3, [pc, #592]	; (800661c <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d960      	bls.n	8006492 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a92      	ldr	r2, [pc, #584]	; (8006620 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d057      	beq.n	800648a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a91      	ldr	r2, [pc, #580]	; (8006624 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d050      	beq.n	8006486 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a8f      	ldr	r2, [pc, #572]	; (8006628 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d049      	beq.n	8006482 <HAL_DMAEx_MultiBufferStart_IT+0x952>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a8e      	ldr	r2, [pc, #568]	; (800662c <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d042      	beq.n	800647e <HAL_DMAEx_MultiBufferStart_IT+0x94e>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a8c      	ldr	r2, [pc, #560]	; (8006630 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d03a      	beq.n	8006478 <HAL_DMAEx_MultiBufferStart_IT+0x948>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a8b      	ldr	r2, [pc, #556]	; (8006634 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d032      	beq.n	8006472 <HAL_DMAEx_MultiBufferStart_IT+0x942>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a89      	ldr	r2, [pc, #548]	; (8006638 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d02a      	beq.n	800646c <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a88      	ldr	r2, [pc, #544]	; (800663c <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d022      	beq.n	8006466 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a86      	ldr	r2, [pc, #536]	; (8006640 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d01a      	beq.n	8006460 <HAL_DMAEx_MultiBufferStart_IT+0x930>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a85      	ldr	r2, [pc, #532]	; (8006644 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d012      	beq.n	800645a <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a83      	ldr	r2, [pc, #524]	; (8006648 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d00a      	beq.n	8006454 <HAL_DMAEx_MultiBufferStart_IT+0x924>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a82      	ldr	r2, [pc, #520]	; (800664c <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d102      	bne.n	800644e <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 8006448:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800644c:	e01e      	b.n	800648c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800644e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006452:	e01b      	b.n	800648c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8006454:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006458:	e018      	b.n	800648c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800645a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800645e:	e015      	b.n	800648c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8006460:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006464:	e012      	b.n	800648c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8006466:	f44f 7300 	mov.w	r3, #512	; 0x200
 800646a:	e00f      	b.n	800648c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800646c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006470:	e00c      	b.n	800648c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8006472:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006476:	e009      	b.n	800648c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8006478:	f44f 7300 	mov.w	r3, #512	; 0x200
 800647c:	e006      	b.n	800648c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800647e:	2308      	movs	r3, #8
 8006480:	e004      	b.n	800648c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8006482:	2308      	movs	r3, #8
 8006484:	e002      	b.n	800648c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8006486:	2308      	movs	r3, #8
 8006488:	e000      	b.n	800648c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800648a:	2308      	movs	r3, #8
 800648c:	4a70      	ldr	r2, [pc, #448]	; (8006650 <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 800648e:	6093      	str	r3, [r2, #8]
 8006490:	e0e7      	b.n	8006662 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	461a      	mov	r2, r3
 8006498:	4b6e      	ldr	r3, [pc, #440]	; (8006654 <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
 800649a:	429a      	cmp	r2, r3
 800649c:	d960      	bls.n	8006560 <HAL_DMAEx_MultiBufferStart_IT+0xa30>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a5f      	ldr	r2, [pc, #380]	; (8006620 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d057      	beq.n	8006558 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a5d      	ldr	r2, [pc, #372]	; (8006624 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d050      	beq.n	8006554 <HAL_DMAEx_MultiBufferStart_IT+0xa24>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a5c      	ldr	r2, [pc, #368]	; (8006628 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d049      	beq.n	8006550 <HAL_DMAEx_MultiBufferStart_IT+0xa20>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a5a      	ldr	r2, [pc, #360]	; (800662c <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d042      	beq.n	800654c <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a59      	ldr	r2, [pc, #356]	; (8006630 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d03a      	beq.n	8006546 <HAL_DMAEx_MultiBufferStart_IT+0xa16>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a57      	ldr	r2, [pc, #348]	; (8006634 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d032      	beq.n	8006540 <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a56      	ldr	r2, [pc, #344]	; (8006638 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d02a      	beq.n	800653a <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a54      	ldr	r2, [pc, #336]	; (800663c <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d022      	beq.n	8006534 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a53      	ldr	r2, [pc, #332]	; (8006640 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d01a      	beq.n	800652e <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a51      	ldr	r2, [pc, #324]	; (8006644 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d012      	beq.n	8006528 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a50      	ldr	r2, [pc, #320]	; (8006648 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d00a      	beq.n	8006522 <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a4e      	ldr	r2, [pc, #312]	; (800664c <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d102      	bne.n	800651c <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 8006516:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800651a:	e01e      	b.n	800655a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800651c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006520:	e01b      	b.n	800655a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8006522:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006526:	e018      	b.n	800655a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8006528:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800652c:	e015      	b.n	800655a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800652e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006532:	e012      	b.n	800655a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8006534:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006538:	e00f      	b.n	800655a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800653a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800653e:	e00c      	b.n	800655a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8006540:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006544:	e009      	b.n	800655a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8006546:	f44f 7300 	mov.w	r3, #512	; 0x200
 800654a:	e006      	b.n	800655a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800654c:	2308      	movs	r3, #8
 800654e:	e004      	b.n	800655a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8006550:	2308      	movs	r3, #8
 8006552:	e002      	b.n	800655a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8006554:	2308      	movs	r3, #8
 8006556:	e000      	b.n	800655a <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8006558:	2308      	movs	r3, #8
 800655a:	4a3f      	ldr	r2, [pc, #252]	; (8006658 <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
 800655c:	60d3      	str	r3, [r2, #12]
 800655e:	e080      	b.n	8006662 <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a2e      	ldr	r2, [pc, #184]	; (8006620 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d078      	beq.n	800665c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a2d      	ldr	r2, [pc, #180]	; (8006624 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d050      	beq.n	8006616 <HAL_DMAEx_MultiBufferStart_IT+0xae6>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a2b      	ldr	r2, [pc, #172]	; (8006628 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d049      	beq.n	8006612 <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a2a      	ldr	r2, [pc, #168]	; (800662c <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d042      	beq.n	800660e <HAL_DMAEx_MultiBufferStart_IT+0xade>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a28      	ldr	r2, [pc, #160]	; (8006630 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d03a      	beq.n	8006608 <HAL_DMAEx_MultiBufferStart_IT+0xad8>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a27      	ldr	r2, [pc, #156]	; (8006634 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d032      	beq.n	8006602 <HAL_DMAEx_MultiBufferStart_IT+0xad2>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a25      	ldr	r2, [pc, #148]	; (8006638 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d02a      	beq.n	80065fc <HAL_DMAEx_MultiBufferStart_IT+0xacc>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a24      	ldr	r2, [pc, #144]	; (800663c <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d022      	beq.n	80065f6 <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a22      	ldr	r2, [pc, #136]	; (8006640 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d01a      	beq.n	80065f0 <HAL_DMAEx_MultiBufferStart_IT+0xac0>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a21      	ldr	r2, [pc, #132]	; (8006644 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d012      	beq.n	80065ea <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a1f      	ldr	r2, [pc, #124]	; (8006648 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d00a      	beq.n	80065e4 <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a1e      	ldr	r2, [pc, #120]	; (800664c <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d102      	bne.n	80065de <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 80065d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80065dc:	e03f      	b.n	800665e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80065de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065e2:	e03c      	b.n	800665e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80065e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80065e8:	e039      	b.n	800665e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80065ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80065ee:	e036      	b.n	800665e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80065f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80065f4:	e033      	b.n	800665e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80065f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065fa:	e030      	b.n	800665e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80065fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006600:	e02d      	b.n	800665e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8006602:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006606:	e02a      	b.n	800665e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8006608:	f44f 7300 	mov.w	r3, #512	; 0x200
 800660c:	e027      	b.n	800665e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800660e:	2308      	movs	r3, #8
 8006610:	e025      	b.n	800665e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8006612:	2308      	movs	r3, #8
 8006614:	e023      	b.n	800665e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8006616:	2308      	movs	r3, #8
 8006618:	e021      	b.n	800665e <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800661a:	bf00      	nop
 800661c:	400260b8 	.word	0x400260b8
 8006620:	40026010 	.word	0x40026010
 8006624:	40026410 	.word	0x40026410
 8006628:	40026070 	.word	0x40026070
 800662c:	40026470 	.word	0x40026470
 8006630:	40026028 	.word	0x40026028
 8006634:	40026428 	.word	0x40026428
 8006638:	40026088 	.word	0x40026088
 800663c:	40026488 	.word	0x40026488
 8006640:	40026040 	.word	0x40026040
 8006644:	40026440 	.word	0x40026440
 8006648:	400260a0 	.word	0x400260a0
 800664c:	400264a0 	.word	0x400264a0
 8006650:	40026400 	.word	0x40026400
 8006654:	40026058 	.word	0x40026058
 8006658:	40026000 	.word	0x40026000
 800665c:	2308      	movs	r3, #8
 800665e:	4a9a      	ldr	r2, [pc, #616]	; (80068c8 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8006660:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	461a      	mov	r2, r3
 8006668:	4b98      	ldr	r3, [pc, #608]	; (80068cc <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 800666a:	429a      	cmp	r2, r3
 800666c:	d960      	bls.n	8006730 <HAL_DMAEx_MultiBufferStart_IT+0xc00>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a97      	ldr	r2, [pc, #604]	; (80068d0 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d057      	beq.n	8006728 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a95      	ldr	r2, [pc, #596]	; (80068d4 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d050      	beq.n	8006724 <HAL_DMAEx_MultiBufferStart_IT+0xbf4>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a94      	ldr	r2, [pc, #592]	; (80068d8 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d049      	beq.n	8006720 <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a92      	ldr	r2, [pc, #584]	; (80068dc <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d042      	beq.n	800671c <HAL_DMAEx_MultiBufferStart_IT+0xbec>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a91      	ldr	r2, [pc, #580]	; (80068e0 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d03a      	beq.n	8006716 <HAL_DMAEx_MultiBufferStart_IT+0xbe6>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a8f      	ldr	r2, [pc, #572]	; (80068e4 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d032      	beq.n	8006710 <HAL_DMAEx_MultiBufferStart_IT+0xbe0>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a8e      	ldr	r2, [pc, #568]	; (80068e8 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d02a      	beq.n	800670a <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a8c      	ldr	r2, [pc, #560]	; (80068ec <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d022      	beq.n	8006704 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a8b      	ldr	r2, [pc, #556]	; (80068f0 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d01a      	beq.n	80066fe <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a89      	ldr	r2, [pc, #548]	; (80068f4 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d012      	beq.n	80066f8 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a88      	ldr	r2, [pc, #544]	; (80068f8 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d00a      	beq.n	80066f2 <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a86      	ldr	r2, [pc, #536]	; (80068fc <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d102      	bne.n	80066ec <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 80066e6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80066ea:	e01e      	b.n	800672a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80066ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066f0:	e01b      	b.n	800672a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80066f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80066f6:	e018      	b.n	800672a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80066f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80066fc:	e015      	b.n	800672a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80066fe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006702:	e012      	b.n	800672a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8006704:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006708:	e00f      	b.n	800672a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800670a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800670e:	e00c      	b.n	800672a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8006710:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006714:	e009      	b.n	800672a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8006716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800671a:	e006      	b.n	800672a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800671c:	2304      	movs	r3, #4
 800671e:	e004      	b.n	800672a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8006720:	2304      	movs	r3, #4
 8006722:	e002      	b.n	800672a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8006724:	2304      	movs	r3, #4
 8006726:	e000      	b.n	800672a <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8006728:	2304      	movs	r3, #4
 800672a:	4a75      	ldr	r2, [pc, #468]	; (8006900 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 800672c:	60d3      	str	r3, [r2, #12]
 800672e:	e151      	b.n	80069d4 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	461a      	mov	r2, r3
 8006736:	4b73      	ldr	r3, [pc, #460]	; (8006904 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>)
 8006738:	429a      	cmp	r2, r3
 800673a:	d960      	bls.n	80067fe <HAL_DMAEx_MultiBufferStart_IT+0xcce>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a63      	ldr	r2, [pc, #396]	; (80068d0 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d057      	beq.n	80067f6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a62      	ldr	r2, [pc, #392]	; (80068d4 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d050      	beq.n	80067f2 <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a60      	ldr	r2, [pc, #384]	; (80068d8 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d049      	beq.n	80067ee <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a5f      	ldr	r2, [pc, #380]	; (80068dc <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d042      	beq.n	80067ea <HAL_DMAEx_MultiBufferStart_IT+0xcba>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a5d      	ldr	r2, [pc, #372]	; (80068e0 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d03a      	beq.n	80067e4 <HAL_DMAEx_MultiBufferStart_IT+0xcb4>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a5c      	ldr	r2, [pc, #368]	; (80068e4 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d032      	beq.n	80067de <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a5a      	ldr	r2, [pc, #360]	; (80068e8 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d02a      	beq.n	80067d8 <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a59      	ldr	r2, [pc, #356]	; (80068ec <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d022      	beq.n	80067d2 <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a57      	ldr	r2, [pc, #348]	; (80068f0 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d01a      	beq.n	80067cc <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a56      	ldr	r2, [pc, #344]	; (80068f4 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d012      	beq.n	80067c6 <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a54      	ldr	r2, [pc, #336]	; (80068f8 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d00a      	beq.n	80067c0 <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a53      	ldr	r2, [pc, #332]	; (80068fc <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d102      	bne.n	80067ba <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 80067b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80067b8:	e01e      	b.n	80067f8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80067ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067be:	e01b      	b.n	80067f8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80067c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80067c4:	e018      	b.n	80067f8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80067c6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80067ca:	e015      	b.n	80067f8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80067cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80067d0:	e012      	b.n	80067f8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80067d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067d6:	e00f      	b.n	80067f8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80067d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067dc:	e00c      	b.n	80067f8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80067de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067e2:	e009      	b.n	80067f8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80067e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067e8:	e006      	b.n	80067f8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80067ea:	2304      	movs	r3, #4
 80067ec:	e004      	b.n	80067f8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80067ee:	2304      	movs	r3, #4
 80067f0:	e002      	b.n	80067f8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80067f2:	2304      	movs	r3, #4
 80067f4:	e000      	b.n	80067f8 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80067f6:	2304      	movs	r3, #4
 80067f8:	4a41      	ldr	r2, [pc, #260]	; (8006900 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 80067fa:	6093      	str	r3, [r2, #8]
 80067fc:	e0ea      	b.n	80069d4 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	461a      	mov	r2, r3
 8006804:	4b40      	ldr	r3, [pc, #256]	; (8006908 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>)
 8006806:	429a      	cmp	r2, r3
 8006808:	f240 8084 	bls.w	8006914 <HAL_DMAEx_MultiBufferStart_IT+0xde4>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a2f      	ldr	r2, [pc, #188]	; (80068d0 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d07a      	beq.n	800690c <HAL_DMAEx_MultiBufferStart_IT+0xddc>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a2e      	ldr	r2, [pc, #184]	; (80068d4 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d050      	beq.n	80068c2 <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a2c      	ldr	r2, [pc, #176]	; (80068d8 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d049      	beq.n	80068be <HAL_DMAEx_MultiBufferStart_IT+0xd8e>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a2b      	ldr	r2, [pc, #172]	; (80068dc <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d042      	beq.n	80068ba <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a29      	ldr	r2, [pc, #164]	; (80068e0 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d03a      	beq.n	80068b4 <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a28      	ldr	r2, [pc, #160]	; (80068e4 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d032      	beq.n	80068ae <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a26      	ldr	r2, [pc, #152]	; (80068e8 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d02a      	beq.n	80068a8 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a25      	ldr	r2, [pc, #148]	; (80068ec <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d022      	beq.n	80068a2 <HAL_DMAEx_MultiBufferStart_IT+0xd72>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a23      	ldr	r2, [pc, #140]	; (80068f0 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d01a      	beq.n	800689c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a22      	ldr	r2, [pc, #136]	; (80068f4 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d012      	beq.n	8006896 <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a20      	ldr	r2, [pc, #128]	; (80068f8 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d00a      	beq.n	8006890 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a1f      	ldr	r2, [pc, #124]	; (80068fc <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d102      	bne.n	800688a <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 8006884:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006888:	e041      	b.n	800690e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800688a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800688e:	e03e      	b.n	800690e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8006890:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006894:	e03b      	b.n	800690e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8006896:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800689a:	e038      	b.n	800690e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800689c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80068a0:	e035      	b.n	800690e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80068a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068a6:	e032      	b.n	800690e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80068a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068ac:	e02f      	b.n	800690e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80068ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068b2:	e02c      	b.n	800690e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80068b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068b8:	e029      	b.n	800690e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80068ba:	2304      	movs	r3, #4
 80068bc:	e027      	b.n	800690e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80068be:	2304      	movs	r3, #4
 80068c0:	e025      	b.n	800690e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80068c2:	2304      	movs	r3, #4
 80068c4:	e023      	b.n	800690e <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80068c6:	bf00      	nop
 80068c8:	40026000 	.word	0x40026000
 80068cc:	40026458 	.word	0x40026458
 80068d0:	40026010 	.word	0x40026010
 80068d4:	40026410 	.word	0x40026410
 80068d8:	40026070 	.word	0x40026070
 80068dc:	40026470 	.word	0x40026470
 80068e0:	40026028 	.word	0x40026028
 80068e4:	40026428 	.word	0x40026428
 80068e8:	40026088 	.word	0x40026088
 80068ec:	40026488 	.word	0x40026488
 80068f0:	40026040 	.word	0x40026040
 80068f4:	40026440 	.word	0x40026440
 80068f8:	400260a0 	.word	0x400260a0
 80068fc:	400264a0 	.word	0x400264a0
 8006900:	40026400 	.word	0x40026400
 8006904:	400260b8 	.word	0x400260b8
 8006908:	40026058 	.word	0x40026058
 800690c:	2304      	movs	r3, #4
 800690e:	4a94      	ldr	r2, [pc, #592]	; (8006b60 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8006910:	60d3      	str	r3, [r2, #12]
 8006912:	e05f      	b.n	80069d4 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a92      	ldr	r2, [pc, #584]	; (8006b64 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d057      	beq.n	80069ce <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a91      	ldr	r2, [pc, #580]	; (8006b68 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d050      	beq.n	80069ca <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a8f      	ldr	r2, [pc, #572]	; (8006b6c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d049      	beq.n	80069c6 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a8e      	ldr	r2, [pc, #568]	; (8006b70 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d042      	beq.n	80069c2 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a8c      	ldr	r2, [pc, #560]	; (8006b74 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d03a      	beq.n	80069bc <HAL_DMAEx_MultiBufferStart_IT+0xe8c>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a8b      	ldr	r2, [pc, #556]	; (8006b78 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d032      	beq.n	80069b6 <HAL_DMAEx_MultiBufferStart_IT+0xe86>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a89      	ldr	r2, [pc, #548]	; (8006b7c <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d02a      	beq.n	80069b0 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a88      	ldr	r2, [pc, #544]	; (8006b80 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d022      	beq.n	80069aa <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a86      	ldr	r2, [pc, #536]	; (8006b84 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d01a      	beq.n	80069a4 <HAL_DMAEx_MultiBufferStart_IT+0xe74>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a85      	ldr	r2, [pc, #532]	; (8006b88 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d012      	beq.n	800699e <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a83      	ldr	r2, [pc, #524]	; (8006b8c <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d00a      	beq.n	8006998 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a82      	ldr	r2, [pc, #520]	; (8006b90 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d102      	bne.n	8006992 <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 800698c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006990:	e01e      	b.n	80069d0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8006992:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006996:	e01b      	b.n	80069d0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8006998:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800699c:	e018      	b.n	80069d0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800699e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80069a2:	e015      	b.n	80069d0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80069a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80069a8:	e012      	b.n	80069d0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80069aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069ae:	e00f      	b.n	80069d0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80069b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069b4:	e00c      	b.n	80069d0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80069b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069ba:	e009      	b.n	80069d0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80069bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069c0:	e006      	b.n	80069d0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80069c2:	2304      	movs	r3, #4
 80069c4:	e004      	b.n	80069d0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80069c6:	2304      	movs	r3, #4
 80069c8:	e002      	b.n	80069d0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80069ca:	2304      	movs	r3, #4
 80069cc:	e000      	b.n	80069d0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80069ce:	2304      	movs	r3, #4
 80069d0:	4a63      	ldr	r2, [pc, #396]	; (8006b60 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80069d2:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	461a      	mov	r2, r3
 80069da:	4b6e      	ldr	r3, [pc, #440]	; (8006b94 <HAL_DMAEx_MultiBufferStart_IT+0x1064>)
 80069dc:	429a      	cmp	r2, r3
 80069de:	d95c      	bls.n	8006a9a <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a5f      	ldr	r2, [pc, #380]	; (8006b64 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d053      	beq.n	8006a92 <HAL_DMAEx_MultiBufferStart_IT+0xf62>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a5e      	ldr	r2, [pc, #376]	; (8006b68 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d04c      	beq.n	8006a8e <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a5c      	ldr	r2, [pc, #368]	; (8006b6c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d045      	beq.n	8006a8a <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a5b      	ldr	r2, [pc, #364]	; (8006b70 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d03e      	beq.n	8006a86 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a59      	ldr	r2, [pc, #356]	; (8006b74 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d037      	beq.n	8006a82 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a58      	ldr	r2, [pc, #352]	; (8006b78 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d030      	beq.n	8006a7e <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a56      	ldr	r2, [pc, #344]	; (8006b7c <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d029      	beq.n	8006a7a <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a55      	ldr	r2, [pc, #340]	; (8006b80 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d022      	beq.n	8006a76 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a53      	ldr	r2, [pc, #332]	; (8006b84 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d01a      	beq.n	8006a70 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a52      	ldr	r2, [pc, #328]	; (8006b88 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d012      	beq.n	8006a6a <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a50      	ldr	r2, [pc, #320]	; (8006b8c <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d00a      	beq.n	8006a64 <HAL_DMAEx_MultiBufferStart_IT+0xf34>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a4f      	ldr	r2, [pc, #316]	; (8006b90 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d102      	bne.n	8006a5e <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 8006a58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006a5c:	e01a      	b.n	8006a94 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8006a5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006a62:	e017      	b.n	8006a94 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8006a64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006a68:	e014      	b.n	8006a94 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8006a6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006a6e:	e011      	b.n	8006a94 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8006a70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006a74:	e00e      	b.n	8006a94 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8006a76:	2340      	movs	r3, #64	; 0x40
 8006a78:	e00c      	b.n	8006a94 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8006a7a:	2340      	movs	r3, #64	; 0x40
 8006a7c:	e00a      	b.n	8006a94 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8006a7e:	2340      	movs	r3, #64	; 0x40
 8006a80:	e008      	b.n	8006a94 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8006a82:	2340      	movs	r3, #64	; 0x40
 8006a84:	e006      	b.n	8006a94 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8006a86:	2301      	movs	r3, #1
 8006a88:	e004      	b.n	8006a94 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e002      	b.n	8006a94 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e000      	b.n	8006a94 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8006a92:	2301      	movs	r3, #1
 8006a94:	4a40      	ldr	r2, [pc, #256]	; (8006b98 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8006a96:	60d3      	str	r3, [r2, #12]
 8006a98:	e141      	b.n	8006d1e <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	4b3e      	ldr	r3, [pc, #248]	; (8006b9c <HAL_DMAEx_MultiBufferStart_IT+0x106c>)
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d97c      	bls.n	8006ba0 <HAL_DMAEx_MultiBufferStart_IT+0x1070>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a2e      	ldr	r2, [pc, #184]	; (8006b64 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d053      	beq.n	8006b58 <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a2c      	ldr	r2, [pc, #176]	; (8006b68 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d04c      	beq.n	8006b54 <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a2b      	ldr	r2, [pc, #172]	; (8006b6c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d045      	beq.n	8006b50 <HAL_DMAEx_MultiBufferStart_IT+0x1020>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a29      	ldr	r2, [pc, #164]	; (8006b70 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d03e      	beq.n	8006b4c <HAL_DMAEx_MultiBufferStart_IT+0x101c>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a28      	ldr	r2, [pc, #160]	; (8006b74 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d037      	beq.n	8006b48 <HAL_DMAEx_MultiBufferStart_IT+0x1018>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a26      	ldr	r2, [pc, #152]	; (8006b78 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d030      	beq.n	8006b44 <HAL_DMAEx_MultiBufferStart_IT+0x1014>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a25      	ldr	r2, [pc, #148]	; (8006b7c <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d029      	beq.n	8006b40 <HAL_DMAEx_MultiBufferStart_IT+0x1010>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a23      	ldr	r2, [pc, #140]	; (8006b80 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d022      	beq.n	8006b3c <HAL_DMAEx_MultiBufferStart_IT+0x100c>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a22      	ldr	r2, [pc, #136]	; (8006b84 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d01a      	beq.n	8006b36 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a20      	ldr	r2, [pc, #128]	; (8006b88 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d012      	beq.n	8006b30 <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a1f      	ldr	r2, [pc, #124]	; (8006b8c <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d00a      	beq.n	8006b2a <HAL_DMAEx_MultiBufferStart_IT+0xffa>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a1d      	ldr	r2, [pc, #116]	; (8006b90 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d102      	bne.n	8006b24 <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 8006b1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b22:	e01a      	b.n	8006b5a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006b24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006b28:	e017      	b.n	8006b5a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006b2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b2e:	e014      	b.n	8006b5a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006b30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b34:	e011      	b.n	8006b5a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006b36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b3a:	e00e      	b.n	8006b5a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006b3c:	2340      	movs	r3, #64	; 0x40
 8006b3e:	e00c      	b.n	8006b5a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006b40:	2340      	movs	r3, #64	; 0x40
 8006b42:	e00a      	b.n	8006b5a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006b44:	2340      	movs	r3, #64	; 0x40
 8006b46:	e008      	b.n	8006b5a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006b48:	2340      	movs	r3, #64	; 0x40
 8006b4a:	e006      	b.n	8006b5a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e004      	b.n	8006b5a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006b50:	2301      	movs	r3, #1
 8006b52:	e002      	b.n	8006b5a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006b54:	2301      	movs	r3, #1
 8006b56:	e000      	b.n	8006b5a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	4a0f      	ldr	r2, [pc, #60]	; (8006b98 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8006b5c:	6093      	str	r3, [r2, #8]
 8006b5e:	e0de      	b.n	8006d1e <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8006b60:	40026000 	.word	0x40026000
 8006b64:	40026010 	.word	0x40026010
 8006b68:	40026410 	.word	0x40026410
 8006b6c:	40026070 	.word	0x40026070
 8006b70:	40026470 	.word	0x40026470
 8006b74:	40026028 	.word	0x40026028
 8006b78:	40026428 	.word	0x40026428
 8006b7c:	40026088 	.word	0x40026088
 8006b80:	40026488 	.word	0x40026488
 8006b84:	40026040 	.word	0x40026040
 8006b88:	40026440 	.word	0x40026440
 8006b8c:	400260a0 	.word	0x400260a0
 8006b90:	400264a0 	.word	0x400264a0
 8006b94:	40026458 	.word	0x40026458
 8006b98:	40026400 	.word	0x40026400
 8006b9c:	400260b8 	.word	0x400260b8
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	4b78      	ldr	r3, [pc, #480]	; (8006d88 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d95c      	bls.n	8006c66 <HAL_DMAEx_MultiBufferStart_IT+0x1136>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a76      	ldr	r2, [pc, #472]	; (8006d8c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d053      	beq.n	8006c5e <HAL_DMAEx_MultiBufferStart_IT+0x112e>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a75      	ldr	r2, [pc, #468]	; (8006d90 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d04c      	beq.n	8006c5a <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a73      	ldr	r2, [pc, #460]	; (8006d94 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d045      	beq.n	8006c56 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a72      	ldr	r2, [pc, #456]	; (8006d98 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d03e      	beq.n	8006c52 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a70      	ldr	r2, [pc, #448]	; (8006d9c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d037      	beq.n	8006c4e <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a6f      	ldr	r2, [pc, #444]	; (8006da0 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d030      	beq.n	8006c4a <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a6d      	ldr	r2, [pc, #436]	; (8006da4 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d029      	beq.n	8006c46 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a6c      	ldr	r2, [pc, #432]	; (8006da8 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d022      	beq.n	8006c42 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a6a      	ldr	r2, [pc, #424]	; (8006dac <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d01a      	beq.n	8006c3c <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a69      	ldr	r2, [pc, #420]	; (8006db0 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d012      	beq.n	8006c36 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a67      	ldr	r2, [pc, #412]	; (8006db4 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d00a      	beq.n	8006c30 <HAL_DMAEx_MultiBufferStart_IT+0x1100>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a66      	ldr	r2, [pc, #408]	; (8006db8 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d102      	bne.n	8006c2a <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 8006c24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c28:	e01a      	b.n	8006c60 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8006c2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006c2e:	e017      	b.n	8006c60 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8006c30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c34:	e014      	b.n	8006c60 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8006c36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c3a:	e011      	b.n	8006c60 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8006c3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c40:	e00e      	b.n	8006c60 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8006c42:	2340      	movs	r3, #64	; 0x40
 8006c44:	e00c      	b.n	8006c60 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8006c46:	2340      	movs	r3, #64	; 0x40
 8006c48:	e00a      	b.n	8006c60 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8006c4a:	2340      	movs	r3, #64	; 0x40
 8006c4c:	e008      	b.n	8006c60 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8006c4e:	2340      	movs	r3, #64	; 0x40
 8006c50:	e006      	b.n	8006c60 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8006c52:	2301      	movs	r3, #1
 8006c54:	e004      	b.n	8006c60 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8006c56:	2301      	movs	r3, #1
 8006c58:	e002      	b.n	8006c60 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e000      	b.n	8006c60 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8006c5e:	2301      	movs	r3, #1
 8006c60:	4a56      	ldr	r2, [pc, #344]	; (8006dbc <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8006c62:	60d3      	str	r3, [r2, #12]
 8006c64:	e05b      	b.n	8006d1e <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a48      	ldr	r2, [pc, #288]	; (8006d8c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d053      	beq.n	8006d18 <HAL_DMAEx_MultiBufferStart_IT+0x11e8>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a46      	ldr	r2, [pc, #280]	; (8006d90 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d04c      	beq.n	8006d14 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a45      	ldr	r2, [pc, #276]	; (8006d94 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d045      	beq.n	8006d10 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a43      	ldr	r2, [pc, #268]	; (8006d98 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d03e      	beq.n	8006d0c <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a42      	ldr	r2, [pc, #264]	; (8006d9c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d037      	beq.n	8006d08 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a40      	ldr	r2, [pc, #256]	; (8006da0 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d030      	beq.n	8006d04 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a3f      	ldr	r2, [pc, #252]	; (8006da4 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d029      	beq.n	8006d00 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a3d      	ldr	r2, [pc, #244]	; (8006da8 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d022      	beq.n	8006cfc <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a3c      	ldr	r2, [pc, #240]	; (8006dac <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d01a      	beq.n	8006cf6 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a3a      	ldr	r2, [pc, #232]	; (8006db0 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d012      	beq.n	8006cf0 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a39      	ldr	r2, [pc, #228]	; (8006db4 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d00a      	beq.n	8006cea <HAL_DMAEx_MultiBufferStart_IT+0x11ba>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a37      	ldr	r2, [pc, #220]	; (8006db8 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d102      	bne.n	8006ce4 <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 8006cde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006ce2:	e01a      	b.n	8006d1a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006ce4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006ce8:	e017      	b.n	8006d1a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006cea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006cee:	e014      	b.n	8006d1a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006cf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006cf4:	e011      	b.n	8006d1a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006cf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006cfa:	e00e      	b.n	8006d1a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006cfc:	2340      	movs	r3, #64	; 0x40
 8006cfe:	e00c      	b.n	8006d1a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006d00:	2340      	movs	r3, #64	; 0x40
 8006d02:	e00a      	b.n	8006d1a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006d04:	2340      	movs	r3, #64	; 0x40
 8006d06:	e008      	b.n	8006d1a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006d08:	2340      	movs	r3, #64	; 0x40
 8006d0a:	e006      	b.n	8006d1a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e004      	b.n	8006d1a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006d10:	2301      	movs	r3, #1
 8006d12:	e002      	b.n	8006d1a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006d14:	2301      	movs	r3, #1
 8006d16:	e000      	b.n	8006d1a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006d18:	2301      	movs	r3, #1
 8006d1a:	4a28      	ldr	r2, [pc, #160]	; (8006dbc <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8006d1c:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f042 0216 	orr.w	r2, r2, #22
 8006d2c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	695a      	ldr	r2, [r3, #20]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d3c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d103      	bne.n	8006d4e <HAL_DMAEx_MultiBufferStart_IT+0x121e>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d007      	beq.n	8006d5e <HAL_DMAEx_MultiBufferStart_IT+0x122e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f042 0208 	orr.w	r2, r2, #8
 8006d5c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f042 0201 	orr.w	r2, r2, #1
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	e005      	b.n	8006d7c <HAL_DMAEx_MultiBufferStart_IT+0x124c>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006d78:	2302      	movs	r3, #2
 8006d7a:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8006d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3718      	adds	r7, #24
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	40026058 	.word	0x40026058
 8006d8c:	40026010 	.word	0x40026010
 8006d90:	40026410 	.word	0x40026410
 8006d94:	40026070 	.word	0x40026070
 8006d98:	40026470 	.word	0x40026470
 8006d9c:	40026028 	.word	0x40026028
 8006da0:	40026428 	.word	0x40026428
 8006da4:	40026088 	.word	0x40026088
 8006da8:	40026488 	.word	0x40026488
 8006dac:	40026040 	.word	0x40026040
 8006db0:	40026440 	.word	0x40026440
 8006db4:	400260a0 	.word	0x400260a0
 8006db8:	400264a0 	.word	0x400264a0
 8006dbc:	40026000 	.word	0x40026000

08006dc0 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8006dce:	79fb      	ldrb	r3, [r7, #7]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d104      	bne.n	8006dde <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	60da      	str	r2, [r3, #12]
 8006ddc:	e003      	b.n	8006de6 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3714      	adds	r7, #20
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
 8006e00:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	2b40      	cmp	r3, #64	; 0x40
 8006e10:	d108      	bne.n	8006e24 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006e22:	e007      	b.n	8006e34 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	60da      	str	r2, [r3, #12]
}
 8006e34:	bf00      	nop
 8006e36:	3714      	adds	r7, #20
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b089      	sub	sp, #36	; 0x24
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006e52:	2300      	movs	r3, #0
 8006e54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e56:	2300      	movs	r3, #0
 8006e58:	61fb      	str	r3, [r7, #28]
 8006e5a:	e16b      	b.n	8007134 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	fa02 f303 	lsl.w	r3, r2, r3
 8006e64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	f040 815a 	bne.w	800712e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d00b      	beq.n	8006e9a <HAL_GPIO_Init+0x5a>
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d007      	beq.n	8006e9a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006e8e:	2b11      	cmp	r3, #17
 8006e90:	d003      	beq.n	8006e9a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	2b12      	cmp	r3, #18
 8006e98:	d130      	bne.n	8006efc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	005b      	lsls	r3, r3, #1
 8006ea4:	2203      	movs	r2, #3
 8006ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eaa:	43db      	mvns	r3, r3
 8006eac:	69ba      	ldr	r2, [r7, #24]
 8006eae:	4013      	ands	r3, r2
 8006eb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	68da      	ldr	r2, [r3, #12]
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	005b      	lsls	r3, r3, #1
 8006eba:	fa02 f303 	lsl.w	r3, r2, r3
 8006ebe:	69ba      	ldr	r2, [r7, #24]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	69ba      	ldr	r2, [r7, #24]
 8006ec8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed8:	43db      	mvns	r3, r3
 8006eda:	69ba      	ldr	r2, [r7, #24]
 8006edc:	4013      	ands	r3, r2
 8006ede:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	091b      	lsrs	r3, r3, #4
 8006ee6:	f003 0201 	and.w	r2, r3, #1
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef0:	69ba      	ldr	r2, [r7, #24]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	69ba      	ldr	r2, [r7, #24]
 8006efa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	005b      	lsls	r3, r3, #1
 8006f06:	2203      	movs	r2, #3
 8006f08:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0c:	43db      	mvns	r3, r3
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	4013      	ands	r3, r2
 8006f12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	689a      	ldr	r2, [r3, #8]
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	005b      	lsls	r3, r3, #1
 8006f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f20:	69ba      	ldr	r2, [r7, #24]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	69ba      	ldr	r2, [r7, #24]
 8006f2a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d003      	beq.n	8006f3c <HAL_GPIO_Init+0xfc>
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	2b12      	cmp	r3, #18
 8006f3a:	d123      	bne.n	8006f84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	08da      	lsrs	r2, r3, #3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	3208      	adds	r2, #8
 8006f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	f003 0307 	and.w	r3, r3, #7
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	220f      	movs	r2, #15
 8006f54:	fa02 f303 	lsl.w	r3, r2, r3
 8006f58:	43db      	mvns	r3, r3
 8006f5a:	69ba      	ldr	r2, [r7, #24]
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	691a      	ldr	r2, [r3, #16]
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	f003 0307 	and.w	r3, r3, #7
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	08da      	lsrs	r2, r3, #3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	3208      	adds	r2, #8
 8006f7e:	69b9      	ldr	r1, [r7, #24]
 8006f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	005b      	lsls	r3, r3, #1
 8006f8e:	2203      	movs	r2, #3
 8006f90:	fa02 f303 	lsl.w	r3, r2, r3
 8006f94:	43db      	mvns	r3, r3
 8006f96:	69ba      	ldr	r2, [r7, #24]
 8006f98:	4013      	ands	r3, r2
 8006f9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f003 0203 	and.w	r2, r3, #3
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	005b      	lsls	r3, r3, #1
 8006fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fac:	69ba      	ldr	r2, [r7, #24]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	69ba      	ldr	r2, [r7, #24]
 8006fb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f000 80b4 	beq.w	800712e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60fb      	str	r3, [r7, #12]
 8006fca:	4b5f      	ldr	r3, [pc, #380]	; (8007148 <HAL_GPIO_Init+0x308>)
 8006fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fce:	4a5e      	ldr	r2, [pc, #376]	; (8007148 <HAL_GPIO_Init+0x308>)
 8006fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8006fd6:	4b5c      	ldr	r3, [pc, #368]	; (8007148 <HAL_GPIO_Init+0x308>)
 8006fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fde:	60fb      	str	r3, [r7, #12]
 8006fe0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006fe2:	4a5a      	ldr	r2, [pc, #360]	; (800714c <HAL_GPIO_Init+0x30c>)
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	089b      	lsrs	r3, r3, #2
 8006fe8:	3302      	adds	r3, #2
 8006fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	f003 0303 	and.w	r3, r3, #3
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	220f      	movs	r2, #15
 8006ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffe:	43db      	mvns	r3, r3
 8007000:	69ba      	ldr	r2, [r7, #24]
 8007002:	4013      	ands	r3, r2
 8007004:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a51      	ldr	r2, [pc, #324]	; (8007150 <HAL_GPIO_Init+0x310>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d02b      	beq.n	8007066 <HAL_GPIO_Init+0x226>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a50      	ldr	r2, [pc, #320]	; (8007154 <HAL_GPIO_Init+0x314>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d025      	beq.n	8007062 <HAL_GPIO_Init+0x222>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a4f      	ldr	r2, [pc, #316]	; (8007158 <HAL_GPIO_Init+0x318>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d01f      	beq.n	800705e <HAL_GPIO_Init+0x21e>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a4e      	ldr	r2, [pc, #312]	; (800715c <HAL_GPIO_Init+0x31c>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d019      	beq.n	800705a <HAL_GPIO_Init+0x21a>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4a4d      	ldr	r2, [pc, #308]	; (8007160 <HAL_GPIO_Init+0x320>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d013      	beq.n	8007056 <HAL_GPIO_Init+0x216>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a4c      	ldr	r2, [pc, #304]	; (8007164 <HAL_GPIO_Init+0x324>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d00d      	beq.n	8007052 <HAL_GPIO_Init+0x212>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a4b      	ldr	r2, [pc, #300]	; (8007168 <HAL_GPIO_Init+0x328>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d007      	beq.n	800704e <HAL_GPIO_Init+0x20e>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a4a      	ldr	r2, [pc, #296]	; (800716c <HAL_GPIO_Init+0x32c>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d101      	bne.n	800704a <HAL_GPIO_Init+0x20a>
 8007046:	2307      	movs	r3, #7
 8007048:	e00e      	b.n	8007068 <HAL_GPIO_Init+0x228>
 800704a:	2308      	movs	r3, #8
 800704c:	e00c      	b.n	8007068 <HAL_GPIO_Init+0x228>
 800704e:	2306      	movs	r3, #6
 8007050:	e00a      	b.n	8007068 <HAL_GPIO_Init+0x228>
 8007052:	2305      	movs	r3, #5
 8007054:	e008      	b.n	8007068 <HAL_GPIO_Init+0x228>
 8007056:	2304      	movs	r3, #4
 8007058:	e006      	b.n	8007068 <HAL_GPIO_Init+0x228>
 800705a:	2303      	movs	r3, #3
 800705c:	e004      	b.n	8007068 <HAL_GPIO_Init+0x228>
 800705e:	2302      	movs	r3, #2
 8007060:	e002      	b.n	8007068 <HAL_GPIO_Init+0x228>
 8007062:	2301      	movs	r3, #1
 8007064:	e000      	b.n	8007068 <HAL_GPIO_Init+0x228>
 8007066:	2300      	movs	r3, #0
 8007068:	69fa      	ldr	r2, [r7, #28]
 800706a:	f002 0203 	and.w	r2, r2, #3
 800706e:	0092      	lsls	r2, r2, #2
 8007070:	4093      	lsls	r3, r2
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	4313      	orrs	r3, r2
 8007076:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007078:	4934      	ldr	r1, [pc, #208]	; (800714c <HAL_GPIO_Init+0x30c>)
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	089b      	lsrs	r3, r3, #2
 800707e:	3302      	adds	r3, #2
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007086:	4b3a      	ldr	r3, [pc, #232]	; (8007170 <HAL_GPIO_Init+0x330>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	43db      	mvns	r3, r3
 8007090:	69ba      	ldr	r2, [r7, #24]
 8007092:	4013      	ands	r3, r2
 8007094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d003      	beq.n	80070aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80070a2:	69ba      	ldr	r2, [r7, #24]
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80070aa:	4a31      	ldr	r2, [pc, #196]	; (8007170 <HAL_GPIO_Init+0x330>)
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80070b0:	4b2f      	ldr	r3, [pc, #188]	; (8007170 <HAL_GPIO_Init+0x330>)
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	43db      	mvns	r3, r3
 80070ba:	69ba      	ldr	r2, [r7, #24]
 80070bc:	4013      	ands	r3, r2
 80070be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d003      	beq.n	80070d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80070cc:	69ba      	ldr	r2, [r7, #24]
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80070d4:	4a26      	ldr	r2, [pc, #152]	; (8007170 <HAL_GPIO_Init+0x330>)
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80070da:	4b25      	ldr	r3, [pc, #148]	; (8007170 <HAL_GPIO_Init+0x330>)
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	43db      	mvns	r3, r3
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	4013      	ands	r3, r2
 80070e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d003      	beq.n	80070fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80070f6:	69ba      	ldr	r2, [r7, #24]
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80070fe:	4a1c      	ldr	r2, [pc, #112]	; (8007170 <HAL_GPIO_Init+0x330>)
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007104:	4b1a      	ldr	r3, [pc, #104]	; (8007170 <HAL_GPIO_Init+0x330>)
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	43db      	mvns	r3, r3
 800710e:	69ba      	ldr	r2, [r7, #24]
 8007110:	4013      	ands	r3, r2
 8007112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d003      	beq.n	8007128 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007120:	69ba      	ldr	r2, [r7, #24]
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	4313      	orrs	r3, r2
 8007126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007128:	4a11      	ldr	r2, [pc, #68]	; (8007170 <HAL_GPIO_Init+0x330>)
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	3301      	adds	r3, #1
 8007132:	61fb      	str	r3, [r7, #28]
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	2b0f      	cmp	r3, #15
 8007138:	f67f ae90 	bls.w	8006e5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800713c:	bf00      	nop
 800713e:	3724      	adds	r7, #36	; 0x24
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	40023800 	.word	0x40023800
 800714c:	40013800 	.word	0x40013800
 8007150:	40020000 	.word	0x40020000
 8007154:	40020400 	.word	0x40020400
 8007158:	40020800 	.word	0x40020800
 800715c:	40020c00 	.word	0x40020c00
 8007160:	40021000 	.word	0x40021000
 8007164:	40021400 	.word	0x40021400
 8007168:	40021800 	.word	0x40021800
 800716c:	40021c00 	.word	0x40021c00
 8007170:	40013c00 	.word	0x40013c00

08007174 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	460b      	mov	r3, r1
 800717e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	691a      	ldr	r2, [r3, #16]
 8007184:	887b      	ldrh	r3, [r7, #2]
 8007186:	4013      	ands	r3, r2
 8007188:	2b00      	cmp	r3, #0
 800718a:	d002      	beq.n	8007192 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800718c:	2301      	movs	r3, #1
 800718e:	73fb      	strb	r3, [r7, #15]
 8007190:	e001      	b.n	8007196 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007192:	2300      	movs	r3, #0
 8007194:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007196:	7bfb      	ldrb	r3, [r7, #15]
}
 8007198:	4618      	mov	r0, r3
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	460b      	mov	r3, r1
 80071ae:	807b      	strh	r3, [r7, #2]
 80071b0:	4613      	mov	r3, r2
 80071b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80071b4:	787b      	ldrb	r3, [r7, #1]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d003      	beq.n	80071c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80071ba:	887a      	ldrh	r2, [r7, #2]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80071c0:	e003      	b.n	80071ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80071c2:	887b      	ldrh	r3, [r7, #2]
 80071c4:	041a      	lsls	r2, r3, #16
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	619a      	str	r2, [r3, #24]
}
 80071ca:	bf00      	nop
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
	...

080071d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e11f      	b.n	800742a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d106      	bne.n	8007204 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f7fd fa16 	bl	8004630 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2224      	movs	r2, #36	; 0x24
 8007208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 0201 	bic.w	r2, r2, #1
 800721a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800722a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800723a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800723c:	f001 fd84 	bl	8008d48 <HAL_RCC_GetPCLK1Freq>
 8007240:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	4a7b      	ldr	r2, [pc, #492]	; (8007434 <HAL_I2C_Init+0x25c>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d807      	bhi.n	800725c <HAL_I2C_Init+0x84>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	4a7a      	ldr	r2, [pc, #488]	; (8007438 <HAL_I2C_Init+0x260>)
 8007250:	4293      	cmp	r3, r2
 8007252:	bf94      	ite	ls
 8007254:	2301      	movls	r3, #1
 8007256:	2300      	movhi	r3, #0
 8007258:	b2db      	uxtb	r3, r3
 800725a:	e006      	b.n	800726a <HAL_I2C_Init+0x92>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	4a77      	ldr	r2, [pc, #476]	; (800743c <HAL_I2C_Init+0x264>)
 8007260:	4293      	cmp	r3, r2
 8007262:	bf94      	ite	ls
 8007264:	2301      	movls	r3, #1
 8007266:	2300      	movhi	r3, #0
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	d001      	beq.n	8007272 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e0db      	b.n	800742a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	4a72      	ldr	r2, [pc, #456]	; (8007440 <HAL_I2C_Init+0x268>)
 8007276:	fba2 2303 	umull	r2, r3, r2, r3
 800727a:	0c9b      	lsrs	r3, r3, #18
 800727c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	430a      	orrs	r2, r1
 8007290:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	6a1b      	ldr	r3, [r3, #32]
 8007298:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	4a64      	ldr	r2, [pc, #400]	; (8007434 <HAL_I2C_Init+0x25c>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d802      	bhi.n	80072ac <HAL_I2C_Init+0xd4>
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	3301      	adds	r3, #1
 80072aa:	e009      	b.n	80072c0 <HAL_I2C_Init+0xe8>
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80072b2:	fb02 f303 	mul.w	r3, r2, r3
 80072b6:	4a63      	ldr	r2, [pc, #396]	; (8007444 <HAL_I2C_Init+0x26c>)
 80072b8:	fba2 2303 	umull	r2, r3, r2, r3
 80072bc:	099b      	lsrs	r3, r3, #6
 80072be:	3301      	adds	r3, #1
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	6812      	ldr	r2, [r2, #0]
 80072c4:	430b      	orrs	r3, r1
 80072c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	69db      	ldr	r3, [r3, #28]
 80072ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80072d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	4956      	ldr	r1, [pc, #344]	; (8007434 <HAL_I2C_Init+0x25c>)
 80072dc:	428b      	cmp	r3, r1
 80072de:	d80d      	bhi.n	80072fc <HAL_I2C_Init+0x124>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	1e59      	subs	r1, r3, #1
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	005b      	lsls	r3, r3, #1
 80072ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80072ee:	3301      	adds	r3, #1
 80072f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072f4:	2b04      	cmp	r3, #4
 80072f6:	bf38      	it	cc
 80072f8:	2304      	movcc	r3, #4
 80072fa:	e04f      	b.n	800739c <HAL_I2C_Init+0x1c4>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d111      	bne.n	8007328 <HAL_I2C_Init+0x150>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	1e58      	subs	r0, r3, #1
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6859      	ldr	r1, [r3, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	005b      	lsls	r3, r3, #1
 8007310:	440b      	add	r3, r1
 8007312:	fbb0 f3f3 	udiv	r3, r0, r3
 8007316:	3301      	adds	r3, #1
 8007318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800731c:	2b00      	cmp	r3, #0
 800731e:	bf0c      	ite	eq
 8007320:	2301      	moveq	r3, #1
 8007322:	2300      	movne	r3, #0
 8007324:	b2db      	uxtb	r3, r3
 8007326:	e012      	b.n	800734e <HAL_I2C_Init+0x176>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	1e58      	subs	r0, r3, #1
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6859      	ldr	r1, [r3, #4]
 8007330:	460b      	mov	r3, r1
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	440b      	add	r3, r1
 8007336:	0099      	lsls	r1, r3, #2
 8007338:	440b      	add	r3, r1
 800733a:	fbb0 f3f3 	udiv	r3, r0, r3
 800733e:	3301      	adds	r3, #1
 8007340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007344:	2b00      	cmp	r3, #0
 8007346:	bf0c      	ite	eq
 8007348:	2301      	moveq	r3, #1
 800734a:	2300      	movne	r3, #0
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <HAL_I2C_Init+0x17e>
 8007352:	2301      	movs	r3, #1
 8007354:	e022      	b.n	800739c <HAL_I2C_Init+0x1c4>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10e      	bne.n	800737c <HAL_I2C_Init+0x1a4>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	1e58      	subs	r0, r3, #1
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6859      	ldr	r1, [r3, #4]
 8007366:	460b      	mov	r3, r1
 8007368:	005b      	lsls	r3, r3, #1
 800736a:	440b      	add	r3, r1
 800736c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007370:	3301      	adds	r3, #1
 8007372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800737a:	e00f      	b.n	800739c <HAL_I2C_Init+0x1c4>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	1e58      	subs	r0, r3, #1
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6859      	ldr	r1, [r3, #4]
 8007384:	460b      	mov	r3, r1
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	440b      	add	r3, r1
 800738a:	0099      	lsls	r1, r3, #2
 800738c:	440b      	add	r3, r1
 800738e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007392:	3301      	adds	r3, #1
 8007394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007398:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800739c:	6879      	ldr	r1, [r7, #4]
 800739e:	6809      	ldr	r1, [r1, #0]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	69da      	ldr	r2, [r3, #28]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a1b      	ldr	r3, [r3, #32]
 80073b6:	431a      	orrs	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	430a      	orrs	r2, r1
 80073be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80073ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	6911      	ldr	r1, [r2, #16]
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	68d2      	ldr	r2, [r2, #12]
 80073d6:	4311      	orrs	r1, r2
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	6812      	ldr	r2, [r2, #0]
 80073dc:	430b      	orrs	r3, r1
 80073de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	695a      	ldr	r2, [r3, #20]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	431a      	orrs	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	430a      	orrs	r2, r1
 80073fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f042 0201 	orr.w	r2, r2, #1
 800740a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2220      	movs	r2, #32
 8007416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	000186a0 	.word	0x000186a0
 8007438:	001e847f 	.word	0x001e847f
 800743c:	003d08ff 	.word	0x003d08ff
 8007440:	431bde83 	.word	0x431bde83
 8007444:	10624dd3 	.word	0x10624dd3

08007448 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b088      	sub	sp, #32
 800744c:	af02      	add	r7, sp, #8
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	607a      	str	r2, [r7, #4]
 8007452:	461a      	mov	r2, r3
 8007454:	460b      	mov	r3, r1
 8007456:	817b      	strh	r3, [r7, #10]
 8007458:	4613      	mov	r3, r2
 800745a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800745c:	f7fd fb88 	bl	8004b70 <HAL_GetTick>
 8007460:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b20      	cmp	r3, #32
 800746c:	f040 80e0 	bne.w	8007630 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	2319      	movs	r3, #25
 8007476:	2201      	movs	r2, #1
 8007478:	4970      	ldr	r1, [pc, #448]	; (800763c <HAL_I2C_Master_Transmit+0x1f4>)
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f000 fde4 	bl	8008048 <I2C_WaitOnFlagUntilTimeout>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d001      	beq.n	800748a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007486:	2302      	movs	r3, #2
 8007488:	e0d3      	b.n	8007632 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007490:	2b01      	cmp	r3, #1
 8007492:	d101      	bne.n	8007498 <HAL_I2C_Master_Transmit+0x50>
 8007494:	2302      	movs	r3, #2
 8007496:	e0cc      	b.n	8007632 <HAL_I2C_Master_Transmit+0x1ea>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d007      	beq.n	80074be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f042 0201 	orr.w	r2, r2, #1
 80074bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2221      	movs	r2, #33	; 0x21
 80074d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2210      	movs	r2, #16
 80074da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	893a      	ldrh	r2, [r7, #8]
 80074ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	4a50      	ldr	r2, [pc, #320]	; (8007640 <HAL_I2C_Master_Transmit+0x1f8>)
 80074fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007500:	8979      	ldrh	r1, [r7, #10]
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	6a3a      	ldr	r2, [r7, #32]
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f000 fbbc 	bl	8007c84 <I2C_MasterRequestWrite>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d001      	beq.n	8007516 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e08d      	b.n	8007632 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007516:	2300      	movs	r3, #0
 8007518:	613b      	str	r3, [r7, #16]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	613b      	str	r3, [r7, #16]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	613b      	str	r3, [r7, #16]
 800752a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800752c:	e066      	b.n	80075fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	6a39      	ldr	r1, [r7, #32]
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f000 fe5e 	bl	80081f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00d      	beq.n	800755a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007542:	2b04      	cmp	r3, #4
 8007544:	d107      	bne.n	8007556 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007554:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e06b      	b.n	8007632 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755e:	781a      	ldrb	r2, [r3, #0]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756a:	1c5a      	adds	r2, r3, #1
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007574:	b29b      	uxth	r3, r3
 8007576:	3b01      	subs	r3, #1
 8007578:	b29a      	uxth	r2, r3
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007582:	3b01      	subs	r3, #1
 8007584:	b29a      	uxth	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	695b      	ldr	r3, [r3, #20]
 8007590:	f003 0304 	and.w	r3, r3, #4
 8007594:	2b04      	cmp	r3, #4
 8007596:	d11b      	bne.n	80075d0 <HAL_I2C_Master_Transmit+0x188>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800759c:	2b00      	cmp	r3, #0
 800759e:	d017      	beq.n	80075d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	781a      	ldrb	r2, [r3, #0]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b0:	1c5a      	adds	r2, r3, #1
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	3b01      	subs	r3, #1
 80075be:	b29a      	uxth	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075c8:	3b01      	subs	r3, #1
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075d0:	697a      	ldr	r2, [r7, #20]
 80075d2:	6a39      	ldr	r1, [r7, #32]
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f000 fe4e 	bl	8008276 <I2C_WaitOnBTFFlagUntilTimeout>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00d      	beq.n	80075fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e4:	2b04      	cmp	r3, #4
 80075e6:	d107      	bne.n	80075f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e01a      	b.n	8007632 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007600:	2b00      	cmp	r3, #0
 8007602:	d194      	bne.n	800752e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007612:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2220      	movs	r2, #32
 8007618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800762c:	2300      	movs	r3, #0
 800762e:	e000      	b.n	8007632 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007630:	2302      	movs	r3, #2
  }
}
 8007632:	4618      	mov	r0, r3
 8007634:	3718      	adds	r7, #24
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	00100002 	.word	0x00100002
 8007640:	ffff0000 	.word	0xffff0000

08007644 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b08c      	sub	sp, #48	; 0x30
 8007648:	af02      	add	r7, sp, #8
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	607a      	str	r2, [r7, #4]
 800764e:	461a      	mov	r2, r3
 8007650:	460b      	mov	r3, r1
 8007652:	817b      	strh	r3, [r7, #10]
 8007654:	4613      	mov	r3, r2
 8007656:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007658:	f7fd fa8a 	bl	8004b70 <HAL_GetTick>
 800765c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b20      	cmp	r3, #32
 8007668:	f040 820b 	bne.w	8007a82 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800766c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	2319      	movs	r3, #25
 8007672:	2201      	movs	r2, #1
 8007674:	497c      	ldr	r1, [pc, #496]	; (8007868 <HAL_I2C_Master_Receive+0x224>)
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f000 fce6 	bl	8008048 <I2C_WaitOnFlagUntilTimeout>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d001      	beq.n	8007686 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007682:	2302      	movs	r3, #2
 8007684:	e1fe      	b.n	8007a84 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800768c:	2b01      	cmp	r3, #1
 800768e:	d101      	bne.n	8007694 <HAL_I2C_Master_Receive+0x50>
 8007690:	2302      	movs	r3, #2
 8007692:	e1f7      	b.n	8007a84 <HAL_I2C_Master_Receive+0x440>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 0301 	and.w	r3, r3, #1
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d007      	beq.n	80076ba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f042 0201 	orr.w	r2, r2, #1
 80076b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2222      	movs	r2, #34	; 0x22
 80076ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2210      	movs	r2, #16
 80076d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2200      	movs	r2, #0
 80076de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	893a      	ldrh	r2, [r7, #8]
 80076ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	4a5c      	ldr	r2, [pc, #368]	; (800786c <HAL_I2C_Master_Receive+0x228>)
 80076fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80076fc:	8979      	ldrh	r1, [r7, #10]
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f000 fb40 	bl	8007d88 <I2C_MasterRequestRead>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d001      	beq.n	8007712 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e1b8      	b.n	8007a84 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007716:	2b00      	cmp	r3, #0
 8007718:	d113      	bne.n	8007742 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800771a:	2300      	movs	r3, #0
 800771c:	623b      	str	r3, [r7, #32]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	695b      	ldr	r3, [r3, #20]
 8007724:	623b      	str	r3, [r7, #32]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	623b      	str	r3, [r7, #32]
 800772e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800773e:	601a      	str	r2, [r3, #0]
 8007740:	e18c      	b.n	8007a5c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007746:	2b01      	cmp	r3, #1
 8007748:	d11b      	bne.n	8007782 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007758:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800775a:	2300      	movs	r3, #0
 800775c:	61fb      	str	r3, [r7, #28]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	695b      	ldr	r3, [r3, #20]
 8007764:	61fb      	str	r3, [r7, #28]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	61fb      	str	r3, [r7, #28]
 800776e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800777e:	601a      	str	r2, [r3, #0]
 8007780:	e16c      	b.n	8007a5c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007786:	2b02      	cmp	r3, #2
 8007788:	d11b      	bne.n	80077c2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007798:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077aa:	2300      	movs	r3, #0
 80077ac:	61bb      	str	r3, [r7, #24]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	695b      	ldr	r3, [r3, #20]
 80077b4:	61bb      	str	r3, [r7, #24]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	699b      	ldr	r3, [r3, #24]
 80077bc:	61bb      	str	r3, [r7, #24]
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	e14c      	b.n	8007a5c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077d2:	2300      	movs	r3, #0
 80077d4:	617b      	str	r3, [r7, #20]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	695b      	ldr	r3, [r3, #20]
 80077dc:	617b      	str	r3, [r7, #20]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	617b      	str	r3, [r7, #20]
 80077e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80077e8:	e138      	b.n	8007a5c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ee:	2b03      	cmp	r3, #3
 80077f0:	f200 80f1 	bhi.w	80079d6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d123      	bne.n	8007844 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f000 fd79 	bl	80082f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d001      	beq.n	8007810 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	e139      	b.n	8007a84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	691a      	ldr	r2, [r3, #16]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781a:	b2d2      	uxtb	r2, r2
 800781c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007822:	1c5a      	adds	r2, r3, #1
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800782c:	3b01      	subs	r3, #1
 800782e:	b29a      	uxth	r2, r3
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007838:	b29b      	uxth	r3, r3
 800783a:	3b01      	subs	r3, #1
 800783c:	b29a      	uxth	r2, r3
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007842:	e10b      	b.n	8007a5c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007848:	2b02      	cmp	r3, #2
 800784a:	d14e      	bne.n	80078ea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007852:	2200      	movs	r2, #0
 8007854:	4906      	ldr	r1, [pc, #24]	; (8007870 <HAL_I2C_Master_Receive+0x22c>)
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f000 fbf6 	bl	8008048 <I2C_WaitOnFlagUntilTimeout>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d008      	beq.n	8007874 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e10e      	b.n	8007a84 <HAL_I2C_Master_Receive+0x440>
 8007866:	bf00      	nop
 8007868:	00100002 	.word	0x00100002
 800786c:	ffff0000 	.word	0xffff0000
 8007870:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007882:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	691a      	ldr	r2, [r3, #16]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788e:	b2d2      	uxtb	r2, r2
 8007890:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007896:	1c5a      	adds	r2, r3, #1
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078a0:	3b01      	subs	r3, #1
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	3b01      	subs	r3, #1
 80078b0:	b29a      	uxth	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	691a      	ldr	r2, [r3, #16]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c0:	b2d2      	uxtb	r2, r2
 80078c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c8:	1c5a      	adds	r2, r3, #1
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078d2:	3b01      	subs	r3, #1
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078de:	b29b      	uxth	r3, r3
 80078e0:	3b01      	subs	r3, #1
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80078e8:	e0b8      	b.n	8007a5c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80078ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ec:	9300      	str	r3, [sp, #0]
 80078ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f0:	2200      	movs	r2, #0
 80078f2:	4966      	ldr	r1, [pc, #408]	; (8007a8c <HAL_I2C_Master_Receive+0x448>)
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f000 fba7 	bl	8008048 <I2C_WaitOnFlagUntilTimeout>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d001      	beq.n	8007904 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	e0bf      	b.n	8007a84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007912:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	691a      	ldr	r2, [r3, #16]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791e:	b2d2      	uxtb	r2, r2
 8007920:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007926:	1c5a      	adds	r2, r3, #1
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007930:	3b01      	subs	r3, #1
 8007932:	b29a      	uxth	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800793c:	b29b      	uxth	r3, r3
 800793e:	3b01      	subs	r3, #1
 8007940:	b29a      	uxth	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794c:	2200      	movs	r2, #0
 800794e:	494f      	ldr	r1, [pc, #316]	; (8007a8c <HAL_I2C_Master_Receive+0x448>)
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f000 fb79 	bl	8008048 <I2C_WaitOnFlagUntilTimeout>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d001      	beq.n	8007960 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	e091      	b.n	8007a84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800796e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	691a      	ldr	r2, [r3, #16]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797a:	b2d2      	uxtb	r2, r2
 800797c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007982:	1c5a      	adds	r2, r3, #1
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800798c:	3b01      	subs	r3, #1
 800798e:	b29a      	uxth	r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007998:	b29b      	uxth	r3, r3
 800799a:	3b01      	subs	r3, #1
 800799c:	b29a      	uxth	r2, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	691a      	ldr	r2, [r3, #16]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	b2d2      	uxtb	r2, r2
 80079ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b4:	1c5a      	adds	r2, r3, #1
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079be:	3b01      	subs	r3, #1
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	3b01      	subs	r3, #1
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80079d4:	e042      	b.n	8007a5c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	f000 fc8c 	bl	80082f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e04c      	b.n	8007a84 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	691a      	ldr	r2, [r3, #16]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f4:	b2d2      	uxtb	r2, r2
 80079f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fc:	1c5a      	adds	r2, r3, #1
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a06:	3b01      	subs	r3, #1
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	3b01      	subs	r3, #1
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	695b      	ldr	r3, [r3, #20]
 8007a22:	f003 0304 	and.w	r3, r3, #4
 8007a26:	2b04      	cmp	r3, #4
 8007a28:	d118      	bne.n	8007a5c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	691a      	ldr	r2, [r3, #16]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a34:	b2d2      	uxtb	r2, r2
 8007a36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3c:	1c5a      	adds	r2, r3, #1
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a46:	3b01      	subs	r3, #1
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	3b01      	subs	r3, #1
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f47f aec2 	bne.w	80077ea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2220      	movs	r2, #32
 8007a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	e000      	b.n	8007a84 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007a82:	2302      	movs	r3, #2
  }
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3728      	adds	r7, #40	; 0x28
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	00010004 	.word	0x00010004

08007a90 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b088      	sub	sp, #32
 8007a94:	af02      	add	r7, sp, #8
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	4608      	mov	r0, r1
 8007a9a:	4611      	mov	r1, r2
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	817b      	strh	r3, [r7, #10]
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	813b      	strh	r3, [r7, #8]
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007aaa:	f7fd f861 	bl	8004b70 <HAL_GetTick>
 8007aae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	2b20      	cmp	r3, #32
 8007aba:	f040 80d9 	bne.w	8007c70 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	2319      	movs	r3, #25
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	496d      	ldr	r1, [pc, #436]	; (8007c7c <HAL_I2C_Mem_Write+0x1ec>)
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f000 fabd 	bl	8008048 <I2C_WaitOnFlagUntilTimeout>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d001      	beq.n	8007ad8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	e0cc      	b.n	8007c72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d101      	bne.n	8007ae6 <HAL_I2C_Mem_Write+0x56>
 8007ae2:	2302      	movs	r3, #2
 8007ae4:	e0c5      	b.n	8007c72 <HAL_I2C_Mem_Write+0x1e2>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d007      	beq.n	8007b0c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f042 0201 	orr.w	r2, r2, #1
 8007b0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2221      	movs	r2, #33	; 0x21
 8007b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2240      	movs	r2, #64	; 0x40
 8007b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6a3a      	ldr	r2, [r7, #32]
 8007b36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007b3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	4a4d      	ldr	r2, [pc, #308]	; (8007c80 <HAL_I2C_Mem_Write+0x1f0>)
 8007b4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007b4e:	88f8      	ldrh	r0, [r7, #6]
 8007b50:	893a      	ldrh	r2, [r7, #8]
 8007b52:	8979      	ldrh	r1, [r7, #10]
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	9301      	str	r3, [sp, #4]
 8007b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5a:	9300      	str	r3, [sp, #0]
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f000 f9de 	bl	8007f20 <I2C_RequestMemoryWrite>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d052      	beq.n	8007c10 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e081      	b.n	8007c72 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f000 fb3e 	bl	80081f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00d      	beq.n	8007b9a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b82:	2b04      	cmp	r3, #4
 8007b84:	d107      	bne.n	8007b96 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e06b      	b.n	8007c72 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9e:	781a      	ldrb	r2, [r3, #0]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007baa:	1c5a      	adds	r2, r3, #1
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	695b      	ldr	r3, [r3, #20]
 8007bd0:	f003 0304 	and.w	r3, r3, #4
 8007bd4:	2b04      	cmp	r3, #4
 8007bd6:	d11b      	bne.n	8007c10 <HAL_I2C_Mem_Write+0x180>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d017      	beq.n	8007c10 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be4:	781a      	ldrb	r2, [r3, #0]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf0:	1c5a      	adds	r2, r3, #1
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1aa      	bne.n	8007b6e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f000 fb2a 	bl	8008276 <I2C_WaitOnBTFFlagUntilTimeout>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00d      	beq.n	8007c44 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2c:	2b04      	cmp	r3, #4
 8007c2e:	d107      	bne.n	8007c40 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e016      	b.n	8007c72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2220      	movs	r2, #32
 8007c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	e000      	b.n	8007c72 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007c70:	2302      	movs	r3, #2
  }
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3718      	adds	r7, #24
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	00100002 	.word	0x00100002
 8007c80:	ffff0000 	.word	0xffff0000

08007c84 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b088      	sub	sp, #32
 8007c88:	af02      	add	r7, sp, #8
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	607a      	str	r2, [r7, #4]
 8007c8e:	603b      	str	r3, [r7, #0]
 8007c90:	460b      	mov	r3, r1
 8007c92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c98:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	2b08      	cmp	r3, #8
 8007c9e:	d006      	beq.n	8007cae <I2C_MasterRequestWrite+0x2a>
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d003      	beq.n	8007cae <I2C_MasterRequestWrite+0x2a>
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007cac:	d108      	bne.n	8007cc0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cbc:	601a      	str	r2, [r3, #0]
 8007cbe:	e00b      	b.n	8007cd8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc4:	2b12      	cmp	r3, #18
 8007cc6:	d107      	bne.n	8007cd8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cd6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f000 f9af 	bl	8008048 <I2C_WaitOnFlagUntilTimeout>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00c      	beq.n	8007d0a <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d003      	beq.n	8007d06 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e035      	b.n	8007d76 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d12:	d108      	bne.n	8007d26 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d14:	897b      	ldrh	r3, [r7, #10]
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	461a      	mov	r2, r3
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007d22:	611a      	str	r2, [r3, #16]
 8007d24:	e01b      	b.n	8007d5e <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007d26:	897b      	ldrh	r3, [r7, #10]
 8007d28:	11db      	asrs	r3, r3, #7
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	f003 0306 	and.w	r3, r3, #6
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	f063 030f 	orn	r3, r3, #15
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	490f      	ldr	r1, [pc, #60]	; (8007d80 <I2C_MasterRequestWrite+0xfc>)
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f000 f9d6 	bl	80080f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d001      	beq.n	8007d54 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	e010      	b.n	8007d76 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007d54:	897b      	ldrh	r3, [r7, #10]
 8007d56:	b2da      	uxtb	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	4908      	ldr	r1, [pc, #32]	; (8007d84 <I2C_MasterRequestWrite+0x100>)
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f000 f9c6 	bl	80080f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	e000      	b.n	8007d76 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3718      	adds	r7, #24
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	00010008 	.word	0x00010008
 8007d84:	00010002 	.word	0x00010002

08007d88 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b088      	sub	sp, #32
 8007d8c:	af02      	add	r7, sp, #8
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	607a      	str	r2, [r7, #4]
 8007d92:	603b      	str	r3, [r7, #0]
 8007d94:	460b      	mov	r3, r1
 8007d96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007dac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	2b08      	cmp	r3, #8
 8007db2:	d006      	beq.n	8007dc2 <I2C_MasterRequestRead+0x3a>
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d003      	beq.n	8007dc2 <I2C_MasterRequestRead+0x3a>
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007dc0:	d108      	bne.n	8007dd4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dd0:	601a      	str	r2, [r3, #0]
 8007dd2:	e00b      	b.n	8007dec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd8:	2b11      	cmp	r3, #17
 8007dda:	d107      	bne.n	8007dec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	9300      	str	r3, [sp, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f000 f925 	bl	8008048 <I2C_WaitOnFlagUntilTimeout>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00c      	beq.n	8007e1e <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d003      	beq.n	8007e1a <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e078      	b.n	8007f10 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e26:	d108      	bne.n	8007e3a <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007e28:	897b      	ldrh	r3, [r7, #10]
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	f043 0301 	orr.w	r3, r3, #1
 8007e30:	b2da      	uxtb	r2, r3
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	611a      	str	r2, [r3, #16]
 8007e38:	e05e      	b.n	8007ef8 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007e3a:	897b      	ldrh	r3, [r7, #10]
 8007e3c:	11db      	asrs	r3, r3, #7
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	f003 0306 	and.w	r3, r3, #6
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	f063 030f 	orn	r3, r3, #15
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	4930      	ldr	r1, [pc, #192]	; (8007f18 <I2C_MasterRequestRead+0x190>)
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f000 f94c 	bl	80080f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d001      	beq.n	8007e68 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	e053      	b.n	8007f10 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007e68:	897b      	ldrh	r3, [r7, #10]
 8007e6a:	b2da      	uxtb	r2, r3
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	4929      	ldr	r1, [pc, #164]	; (8007f1c <I2C_MasterRequestRead+0x194>)
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f000 f93c 	bl	80080f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d001      	beq.n	8007e88 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e043      	b.n	8007f10 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e88:	2300      	movs	r3, #0
 8007e8a:	613b      	str	r3, [r7, #16]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	613b      	str	r3, [r7, #16]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	699b      	ldr	r3, [r3, #24]
 8007e9a:	613b      	str	r3, [r7, #16]
 8007e9c:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007eac:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	9300      	str	r3, [sp, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f000 f8c4 	bl	8008048 <I2C_WaitOnFlagUntilTimeout>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00c      	beq.n	8007ee0 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d003      	beq.n	8007edc <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007eda:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007edc:	2303      	movs	r3, #3
 8007ede:	e017      	b.n	8007f10 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007ee0:	897b      	ldrh	r3, [r7, #10]
 8007ee2:	11db      	asrs	r3, r3, #7
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	f003 0306 	and.w	r3, r3, #6
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	f063 030e 	orn	r3, r3, #14
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	4907      	ldr	r1, [pc, #28]	; (8007f1c <I2C_MasterRequestRead+0x194>)
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f000 f8f9 	bl	80080f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d001      	beq.n	8007f0e <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e000      	b.n	8007f10 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3718      	adds	r7, #24
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	00010008 	.word	0x00010008
 8007f1c:	00010002 	.word	0x00010002

08007f20 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b088      	sub	sp, #32
 8007f24:	af02      	add	r7, sp, #8
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	4608      	mov	r0, r1
 8007f2a:	4611      	mov	r1, r2
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	4603      	mov	r3, r0
 8007f30:	817b      	strh	r3, [r7, #10]
 8007f32:	460b      	mov	r3, r1
 8007f34:	813b      	strh	r3, [r7, #8]
 8007f36:	4613      	mov	r3, r2
 8007f38:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f000 f876 	bl	8008048 <I2C_WaitOnFlagUntilTimeout>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00c      	beq.n	8007f7c <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d003      	beq.n	8007f78 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e05f      	b.n	800803c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007f7c:	897b      	ldrh	r3, [r7, #10]
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	461a      	mov	r2, r3
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007f8a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8e:	6a3a      	ldr	r2, [r7, #32]
 8007f90:	492c      	ldr	r1, [pc, #176]	; (8008044 <I2C_RequestMemoryWrite+0x124>)
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	f000 f8af 	bl	80080f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d001      	beq.n	8007fa2 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e04c      	b.n	800803c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	617b      	str	r3, [r7, #20]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	695b      	ldr	r3, [r3, #20]
 8007fac:	617b      	str	r3, [r7, #20]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	617b      	str	r3, [r7, #20]
 8007fb6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fba:	6a39      	ldr	r1, [r7, #32]
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f000 f919 	bl	80081f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00d      	beq.n	8007fe4 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fcc:	2b04      	cmp	r3, #4
 8007fce:	d107      	bne.n	8007fe0 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fde:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e02b      	b.n	800803c <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007fe4:	88fb      	ldrh	r3, [r7, #6]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d105      	bne.n	8007ff6 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007fea:	893b      	ldrh	r3, [r7, #8]
 8007fec:	b2da      	uxtb	r2, r3
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	611a      	str	r2, [r3, #16]
 8007ff4:	e021      	b.n	800803a <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007ff6:	893b      	ldrh	r3, [r7, #8]
 8007ff8:	0a1b      	lsrs	r3, r3, #8
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	b2da      	uxtb	r2, r3
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008006:	6a39      	ldr	r1, [r7, #32]
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f000 f8f3 	bl	80081f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800800e:	4603      	mov	r3, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00d      	beq.n	8008030 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008018:	2b04      	cmp	r3, #4
 800801a:	d107      	bne.n	800802c <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800802a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	e005      	b.n	800803c <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008030:	893b      	ldrh	r3, [r7, #8]
 8008032:	b2da      	uxtb	r2, r3
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800803a:	2300      	movs	r3, #0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3718      	adds	r7, #24
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}
 8008044:	00010002 	.word	0x00010002

08008048 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	603b      	str	r3, [r7, #0]
 8008054:	4613      	mov	r3, r2
 8008056:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008058:	e025      	b.n	80080a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008060:	d021      	beq.n	80080a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008062:	f7fc fd85 	bl	8004b70 <HAL_GetTick>
 8008066:	4602      	mov	r2, r0
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	1ad3      	subs	r3, r2, r3
 800806c:	683a      	ldr	r2, [r7, #0]
 800806e:	429a      	cmp	r2, r3
 8008070:	d302      	bcc.n	8008078 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d116      	bne.n	80080a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2200      	movs	r2, #0
 800807c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2220      	movs	r2, #32
 8008082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008092:	f043 0220 	orr.w	r2, r3, #32
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e023      	b.n	80080ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	0c1b      	lsrs	r3, r3, #16
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d10d      	bne.n	80080cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	695b      	ldr	r3, [r3, #20]
 80080b6:	43da      	mvns	r2, r3
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	4013      	ands	r3, r2
 80080bc:	b29b      	uxth	r3, r3
 80080be:	2b00      	cmp	r3, #0
 80080c0:	bf0c      	ite	eq
 80080c2:	2301      	moveq	r3, #1
 80080c4:	2300      	movne	r3, #0
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	461a      	mov	r2, r3
 80080ca:	e00c      	b.n	80080e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	699b      	ldr	r3, [r3, #24]
 80080d2:	43da      	mvns	r2, r3
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	4013      	ands	r3, r2
 80080d8:	b29b      	uxth	r3, r3
 80080da:	2b00      	cmp	r3, #0
 80080dc:	bf0c      	ite	eq
 80080de:	2301      	moveq	r3, #1
 80080e0:	2300      	movne	r3, #0
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	461a      	mov	r2, r3
 80080e6:	79fb      	ldrb	r3, [r7, #7]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d0b6      	beq.n	800805a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b084      	sub	sp, #16
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	60f8      	str	r0, [r7, #12]
 80080fe:	60b9      	str	r1, [r7, #8]
 8008100:	607a      	str	r2, [r7, #4]
 8008102:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008104:	e051      	b.n	80081aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	695b      	ldr	r3, [r3, #20]
 800810c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008114:	d123      	bne.n	800815e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008124:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800812e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2200      	movs	r2, #0
 8008134:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2220      	movs	r2, #32
 800813a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2200      	movs	r2, #0
 8008142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814a:	f043 0204 	orr.w	r2, r3, #4
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e046      	b.n	80081ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008164:	d021      	beq.n	80081aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008166:	f7fc fd03 	bl	8004b70 <HAL_GetTick>
 800816a:	4602      	mov	r2, r0
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	1ad3      	subs	r3, r2, r3
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	429a      	cmp	r2, r3
 8008174:	d302      	bcc.n	800817c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d116      	bne.n	80081aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2200      	movs	r2, #0
 8008180:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2220      	movs	r2, #32
 8008186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008196:	f043 0220 	orr.w	r2, r3, #32
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	e020      	b.n	80081ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	0c1b      	lsrs	r3, r3, #16
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d10c      	bne.n	80081ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	695b      	ldr	r3, [r3, #20]
 80081ba:	43da      	mvns	r2, r3
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	4013      	ands	r3, r2
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	bf14      	ite	ne
 80081c6:	2301      	movne	r3, #1
 80081c8:	2300      	moveq	r3, #0
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	e00b      	b.n	80081e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	43da      	mvns	r2, r3
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	4013      	ands	r3, r2
 80081da:	b29b      	uxth	r3, r3
 80081dc:	2b00      	cmp	r3, #0
 80081de:	bf14      	ite	ne
 80081e0:	2301      	movne	r3, #1
 80081e2:	2300      	moveq	r3, #0
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d18d      	bne.n	8008106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008200:	e02d      	b.n	800825e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f000 f8ce 	bl	80083a4 <I2C_IsAcknowledgeFailed>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d001      	beq.n	8008212 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e02d      	b.n	800826e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008218:	d021      	beq.n	800825e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800821a:	f7fc fca9 	bl	8004b70 <HAL_GetTick>
 800821e:	4602      	mov	r2, r0
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	429a      	cmp	r2, r3
 8008228:	d302      	bcc.n	8008230 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d116      	bne.n	800825e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2200      	movs	r2, #0
 8008234:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2220      	movs	r2, #32
 800823a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824a:	f043 0220 	orr.w	r2, r3, #32
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e007      	b.n	800826e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	695b      	ldr	r3, [r3, #20]
 8008264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008268:	2b80      	cmp	r3, #128	; 0x80
 800826a:	d1ca      	bne.n	8008202 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b084      	sub	sp, #16
 800827a:	af00      	add	r7, sp, #0
 800827c:	60f8      	str	r0, [r7, #12]
 800827e:	60b9      	str	r1, [r7, #8]
 8008280:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008282:	e02d      	b.n	80082e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f000 f88d 	bl	80083a4 <I2C_IsAcknowledgeFailed>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d001      	beq.n	8008294 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e02d      	b.n	80082f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800829a:	d021      	beq.n	80082e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800829c:	f7fc fc68 	bl	8004b70 <HAL_GetTick>
 80082a0:	4602      	mov	r2, r0
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	1ad3      	subs	r3, r2, r3
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d302      	bcc.n	80082b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d116      	bne.n	80082e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2200      	movs	r2, #0
 80082b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2220      	movs	r2, #32
 80082bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082cc:	f043 0220 	orr.w	r2, r3, #32
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	e007      	b.n	80082f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	695b      	ldr	r3, [r3, #20]
 80082e6:	f003 0304 	and.w	r3, r3, #4
 80082ea:	2b04      	cmp	r3, #4
 80082ec:	d1ca      	bne.n	8008284 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008304:	e042      	b.n	800838c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	695b      	ldr	r3, [r3, #20]
 800830c:	f003 0310 	and.w	r3, r3, #16
 8008310:	2b10      	cmp	r3, #16
 8008312:	d119      	bne.n	8008348 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f06f 0210 	mvn.w	r2, #16
 800831c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2220      	movs	r2, #32
 8008328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	e029      	b.n	800839c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008348:	f7fc fc12 	bl	8004b70 <HAL_GetTick>
 800834c:	4602      	mov	r2, r0
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	429a      	cmp	r2, r3
 8008356:	d302      	bcc.n	800835e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d116      	bne.n	800838c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2200      	movs	r2, #0
 8008362:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2220      	movs	r2, #32
 8008368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008378:	f043 0220 	orr.w	r2, r3, #32
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2200      	movs	r2, #0
 8008384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	e007      	b.n	800839c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	695b      	ldr	r3, [r3, #20]
 8008392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008396:	2b40      	cmp	r3, #64	; 0x40
 8008398:	d1b5      	bne.n	8008306 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3710      	adds	r7, #16
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	695b      	ldr	r3, [r3, #20]
 80083b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083ba:	d11b      	bne.n	80083f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80083c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2220      	movs	r2, #32
 80083d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e0:	f043 0204 	orr.w	r2, r3, #4
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	e000      	b.n	80083f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	370c      	adds	r7, #12
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
	...

08008404 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b086      	sub	sp, #24
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d101      	bne.n	8008416 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	e25b      	b.n	80088ce <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	2b00      	cmp	r3, #0
 8008420:	d075      	beq.n	800850e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008422:	4ba3      	ldr	r3, [pc, #652]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	f003 030c 	and.w	r3, r3, #12
 800842a:	2b04      	cmp	r3, #4
 800842c:	d00c      	beq.n	8008448 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800842e:	4ba0      	ldr	r3, [pc, #640]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008436:	2b08      	cmp	r3, #8
 8008438:	d112      	bne.n	8008460 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800843a:	4b9d      	ldr	r3, [pc, #628]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008442:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008446:	d10b      	bne.n	8008460 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008448:	4b99      	ldr	r3, [pc, #612]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d05b      	beq.n	800850c <HAL_RCC_OscConfig+0x108>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d157      	bne.n	800850c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	e236      	b.n	80088ce <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008468:	d106      	bne.n	8008478 <HAL_RCC_OscConfig+0x74>
 800846a:	4b91      	ldr	r3, [pc, #580]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a90      	ldr	r2, [pc, #576]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 8008470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008474:	6013      	str	r3, [r2, #0]
 8008476:	e01d      	b.n	80084b4 <HAL_RCC_OscConfig+0xb0>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008480:	d10c      	bne.n	800849c <HAL_RCC_OscConfig+0x98>
 8008482:	4b8b      	ldr	r3, [pc, #556]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a8a      	ldr	r2, [pc, #552]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 8008488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800848c:	6013      	str	r3, [r2, #0]
 800848e:	4b88      	ldr	r3, [pc, #544]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a87      	ldr	r2, [pc, #540]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 8008494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008498:	6013      	str	r3, [r2, #0]
 800849a:	e00b      	b.n	80084b4 <HAL_RCC_OscConfig+0xb0>
 800849c:	4b84      	ldr	r3, [pc, #528]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a83      	ldr	r2, [pc, #524]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 80084a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084a6:	6013      	str	r3, [r2, #0]
 80084a8:	4b81      	ldr	r3, [pc, #516]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a80      	ldr	r2, [pc, #512]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 80084ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d013      	beq.n	80084e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084bc:	f7fc fb58 	bl	8004b70 <HAL_GetTick>
 80084c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084c2:	e008      	b.n	80084d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084c4:	f7fc fb54 	bl	8004b70 <HAL_GetTick>
 80084c8:	4602      	mov	r2, r0
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	2b64      	cmp	r3, #100	; 0x64
 80084d0:	d901      	bls.n	80084d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80084d2:	2303      	movs	r3, #3
 80084d4:	e1fb      	b.n	80088ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084d6:	4b76      	ldr	r3, [pc, #472]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d0f0      	beq.n	80084c4 <HAL_RCC_OscConfig+0xc0>
 80084e2:	e014      	b.n	800850e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084e4:	f7fc fb44 	bl	8004b70 <HAL_GetTick>
 80084e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084ea:	e008      	b.n	80084fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084ec:	f7fc fb40 	bl	8004b70 <HAL_GetTick>
 80084f0:	4602      	mov	r2, r0
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	2b64      	cmp	r3, #100	; 0x64
 80084f8:	d901      	bls.n	80084fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80084fa:	2303      	movs	r3, #3
 80084fc:	e1e7      	b.n	80088ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084fe:	4b6c      	ldr	r3, [pc, #432]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1f0      	bne.n	80084ec <HAL_RCC_OscConfig+0xe8>
 800850a:	e000      	b.n	800850e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800850c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f003 0302 	and.w	r3, r3, #2
 8008516:	2b00      	cmp	r3, #0
 8008518:	d063      	beq.n	80085e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800851a:	4b65      	ldr	r3, [pc, #404]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	f003 030c 	and.w	r3, r3, #12
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00b      	beq.n	800853e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008526:	4b62      	ldr	r3, [pc, #392]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800852e:	2b08      	cmp	r3, #8
 8008530:	d11c      	bne.n	800856c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008532:	4b5f      	ldr	r3, [pc, #380]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800853a:	2b00      	cmp	r3, #0
 800853c:	d116      	bne.n	800856c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800853e:	4b5c      	ldr	r3, [pc, #368]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 0302 	and.w	r3, r3, #2
 8008546:	2b00      	cmp	r3, #0
 8008548:	d005      	beq.n	8008556 <HAL_RCC_OscConfig+0x152>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	2b01      	cmp	r3, #1
 8008550:	d001      	beq.n	8008556 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	e1bb      	b.n	80088ce <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008556:	4b56      	ldr	r3, [pc, #344]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	00db      	lsls	r3, r3, #3
 8008564:	4952      	ldr	r1, [pc, #328]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 8008566:	4313      	orrs	r3, r2
 8008568:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800856a:	e03a      	b.n	80085e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d020      	beq.n	80085b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008574:	4b4f      	ldr	r3, [pc, #316]	; (80086b4 <HAL_RCC_OscConfig+0x2b0>)
 8008576:	2201      	movs	r2, #1
 8008578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800857a:	f7fc faf9 	bl	8004b70 <HAL_GetTick>
 800857e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008580:	e008      	b.n	8008594 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008582:	f7fc faf5 	bl	8004b70 <HAL_GetTick>
 8008586:	4602      	mov	r2, r0
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	1ad3      	subs	r3, r2, r3
 800858c:	2b02      	cmp	r3, #2
 800858e:	d901      	bls.n	8008594 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008590:	2303      	movs	r3, #3
 8008592:	e19c      	b.n	80088ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008594:	4b46      	ldr	r3, [pc, #280]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f003 0302 	and.w	r3, r3, #2
 800859c:	2b00      	cmp	r3, #0
 800859e:	d0f0      	beq.n	8008582 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085a0:	4b43      	ldr	r3, [pc, #268]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	00db      	lsls	r3, r3, #3
 80085ae:	4940      	ldr	r1, [pc, #256]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 80085b0:	4313      	orrs	r3, r2
 80085b2:	600b      	str	r3, [r1, #0]
 80085b4:	e015      	b.n	80085e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085b6:	4b3f      	ldr	r3, [pc, #252]	; (80086b4 <HAL_RCC_OscConfig+0x2b0>)
 80085b8:	2200      	movs	r2, #0
 80085ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085bc:	f7fc fad8 	bl	8004b70 <HAL_GetTick>
 80085c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085c2:	e008      	b.n	80085d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80085c4:	f7fc fad4 	bl	8004b70 <HAL_GetTick>
 80085c8:	4602      	mov	r2, r0
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d901      	bls.n	80085d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	e17b      	b.n	80088ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085d6:	4b36      	ldr	r3, [pc, #216]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 0302 	and.w	r3, r3, #2
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d1f0      	bne.n	80085c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f003 0308 	and.w	r3, r3, #8
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d030      	beq.n	8008650 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d016      	beq.n	8008624 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80085f6:	4b30      	ldr	r3, [pc, #192]	; (80086b8 <HAL_RCC_OscConfig+0x2b4>)
 80085f8:	2201      	movs	r2, #1
 80085fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085fc:	f7fc fab8 	bl	8004b70 <HAL_GetTick>
 8008600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008602:	e008      	b.n	8008616 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008604:	f7fc fab4 	bl	8004b70 <HAL_GetTick>
 8008608:	4602      	mov	r2, r0
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	1ad3      	subs	r3, r2, r3
 800860e:	2b02      	cmp	r3, #2
 8008610:	d901      	bls.n	8008616 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008612:	2303      	movs	r3, #3
 8008614:	e15b      	b.n	80088ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008616:	4b26      	ldr	r3, [pc, #152]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 8008618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800861a:	f003 0302 	and.w	r3, r3, #2
 800861e:	2b00      	cmp	r3, #0
 8008620:	d0f0      	beq.n	8008604 <HAL_RCC_OscConfig+0x200>
 8008622:	e015      	b.n	8008650 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008624:	4b24      	ldr	r3, [pc, #144]	; (80086b8 <HAL_RCC_OscConfig+0x2b4>)
 8008626:	2200      	movs	r2, #0
 8008628:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800862a:	f7fc faa1 	bl	8004b70 <HAL_GetTick>
 800862e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008630:	e008      	b.n	8008644 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008632:	f7fc fa9d 	bl	8004b70 <HAL_GetTick>
 8008636:	4602      	mov	r2, r0
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	1ad3      	subs	r3, r2, r3
 800863c:	2b02      	cmp	r3, #2
 800863e:	d901      	bls.n	8008644 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008640:	2303      	movs	r3, #3
 8008642:	e144      	b.n	80088ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008644:	4b1a      	ldr	r3, [pc, #104]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 8008646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008648:	f003 0302 	and.w	r3, r3, #2
 800864c:	2b00      	cmp	r3, #0
 800864e:	d1f0      	bne.n	8008632 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 0304 	and.w	r3, r3, #4
 8008658:	2b00      	cmp	r3, #0
 800865a:	f000 80a0 	beq.w	800879e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800865e:	2300      	movs	r3, #0
 8008660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008662:	4b13      	ldr	r3, [pc, #76]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 8008664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10f      	bne.n	800868e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800866e:	2300      	movs	r3, #0
 8008670:	60bb      	str	r3, [r7, #8]
 8008672:	4b0f      	ldr	r3, [pc, #60]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 8008674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008676:	4a0e      	ldr	r2, [pc, #56]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 8008678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800867c:	6413      	str	r3, [r2, #64]	; 0x40
 800867e:	4b0c      	ldr	r3, [pc, #48]	; (80086b0 <HAL_RCC_OscConfig+0x2ac>)
 8008680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008686:	60bb      	str	r3, [r7, #8]
 8008688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800868a:	2301      	movs	r3, #1
 800868c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800868e:	4b0b      	ldr	r3, [pc, #44]	; (80086bc <HAL_RCC_OscConfig+0x2b8>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008696:	2b00      	cmp	r3, #0
 8008698:	d121      	bne.n	80086de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800869a:	4b08      	ldr	r3, [pc, #32]	; (80086bc <HAL_RCC_OscConfig+0x2b8>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a07      	ldr	r2, [pc, #28]	; (80086bc <HAL_RCC_OscConfig+0x2b8>)
 80086a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80086a6:	f7fc fa63 	bl	8004b70 <HAL_GetTick>
 80086aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086ac:	e011      	b.n	80086d2 <HAL_RCC_OscConfig+0x2ce>
 80086ae:	bf00      	nop
 80086b0:	40023800 	.word	0x40023800
 80086b4:	42470000 	.word	0x42470000
 80086b8:	42470e80 	.word	0x42470e80
 80086bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086c0:	f7fc fa56 	bl	8004b70 <HAL_GetTick>
 80086c4:	4602      	mov	r2, r0
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	1ad3      	subs	r3, r2, r3
 80086ca:	2b02      	cmp	r3, #2
 80086cc:	d901      	bls.n	80086d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80086ce:	2303      	movs	r3, #3
 80086d0:	e0fd      	b.n	80088ce <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086d2:	4b81      	ldr	r3, [pc, #516]	; (80088d8 <HAL_RCC_OscConfig+0x4d4>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d0f0      	beq.n	80086c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d106      	bne.n	80086f4 <HAL_RCC_OscConfig+0x2f0>
 80086e6:	4b7d      	ldr	r3, [pc, #500]	; (80088dc <HAL_RCC_OscConfig+0x4d8>)
 80086e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ea:	4a7c      	ldr	r2, [pc, #496]	; (80088dc <HAL_RCC_OscConfig+0x4d8>)
 80086ec:	f043 0301 	orr.w	r3, r3, #1
 80086f0:	6713      	str	r3, [r2, #112]	; 0x70
 80086f2:	e01c      	b.n	800872e <HAL_RCC_OscConfig+0x32a>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	2b05      	cmp	r3, #5
 80086fa:	d10c      	bne.n	8008716 <HAL_RCC_OscConfig+0x312>
 80086fc:	4b77      	ldr	r3, [pc, #476]	; (80088dc <HAL_RCC_OscConfig+0x4d8>)
 80086fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008700:	4a76      	ldr	r2, [pc, #472]	; (80088dc <HAL_RCC_OscConfig+0x4d8>)
 8008702:	f043 0304 	orr.w	r3, r3, #4
 8008706:	6713      	str	r3, [r2, #112]	; 0x70
 8008708:	4b74      	ldr	r3, [pc, #464]	; (80088dc <HAL_RCC_OscConfig+0x4d8>)
 800870a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800870c:	4a73      	ldr	r2, [pc, #460]	; (80088dc <HAL_RCC_OscConfig+0x4d8>)
 800870e:	f043 0301 	orr.w	r3, r3, #1
 8008712:	6713      	str	r3, [r2, #112]	; 0x70
 8008714:	e00b      	b.n	800872e <HAL_RCC_OscConfig+0x32a>
 8008716:	4b71      	ldr	r3, [pc, #452]	; (80088dc <HAL_RCC_OscConfig+0x4d8>)
 8008718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800871a:	4a70      	ldr	r2, [pc, #448]	; (80088dc <HAL_RCC_OscConfig+0x4d8>)
 800871c:	f023 0301 	bic.w	r3, r3, #1
 8008720:	6713      	str	r3, [r2, #112]	; 0x70
 8008722:	4b6e      	ldr	r3, [pc, #440]	; (80088dc <HAL_RCC_OscConfig+0x4d8>)
 8008724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008726:	4a6d      	ldr	r2, [pc, #436]	; (80088dc <HAL_RCC_OscConfig+0x4d8>)
 8008728:	f023 0304 	bic.w	r3, r3, #4
 800872c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d015      	beq.n	8008762 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008736:	f7fc fa1b 	bl	8004b70 <HAL_GetTick>
 800873a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800873c:	e00a      	b.n	8008754 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800873e:	f7fc fa17 	bl	8004b70 <HAL_GetTick>
 8008742:	4602      	mov	r2, r0
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	1ad3      	subs	r3, r2, r3
 8008748:	f241 3288 	movw	r2, #5000	; 0x1388
 800874c:	4293      	cmp	r3, r2
 800874e:	d901      	bls.n	8008754 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008750:	2303      	movs	r3, #3
 8008752:	e0bc      	b.n	80088ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008754:	4b61      	ldr	r3, [pc, #388]	; (80088dc <HAL_RCC_OscConfig+0x4d8>)
 8008756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008758:	f003 0302 	and.w	r3, r3, #2
 800875c:	2b00      	cmp	r3, #0
 800875e:	d0ee      	beq.n	800873e <HAL_RCC_OscConfig+0x33a>
 8008760:	e014      	b.n	800878c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008762:	f7fc fa05 	bl	8004b70 <HAL_GetTick>
 8008766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008768:	e00a      	b.n	8008780 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800876a:	f7fc fa01 	bl	8004b70 <HAL_GetTick>
 800876e:	4602      	mov	r2, r0
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	1ad3      	subs	r3, r2, r3
 8008774:	f241 3288 	movw	r2, #5000	; 0x1388
 8008778:	4293      	cmp	r3, r2
 800877a:	d901      	bls.n	8008780 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800877c:	2303      	movs	r3, #3
 800877e:	e0a6      	b.n	80088ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008780:	4b56      	ldr	r3, [pc, #344]	; (80088dc <HAL_RCC_OscConfig+0x4d8>)
 8008782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008784:	f003 0302 	and.w	r3, r3, #2
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1ee      	bne.n	800876a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800878c:	7dfb      	ldrb	r3, [r7, #23]
 800878e:	2b01      	cmp	r3, #1
 8008790:	d105      	bne.n	800879e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008792:	4b52      	ldr	r3, [pc, #328]	; (80088dc <HAL_RCC_OscConfig+0x4d8>)
 8008794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008796:	4a51      	ldr	r2, [pc, #324]	; (80088dc <HAL_RCC_OscConfig+0x4d8>)
 8008798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800879c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	699b      	ldr	r3, [r3, #24]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f000 8092 	beq.w	80088cc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80087a8:	4b4c      	ldr	r3, [pc, #304]	; (80088dc <HAL_RCC_OscConfig+0x4d8>)
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	f003 030c 	and.w	r3, r3, #12
 80087b0:	2b08      	cmp	r3, #8
 80087b2:	d05c      	beq.n	800886e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	699b      	ldr	r3, [r3, #24]
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	d141      	bne.n	8008840 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087bc:	4b48      	ldr	r3, [pc, #288]	; (80088e0 <HAL_RCC_OscConfig+0x4dc>)
 80087be:	2200      	movs	r2, #0
 80087c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087c2:	f7fc f9d5 	bl	8004b70 <HAL_GetTick>
 80087c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087c8:	e008      	b.n	80087dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087ca:	f7fc f9d1 	bl	8004b70 <HAL_GetTick>
 80087ce:	4602      	mov	r2, r0
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	1ad3      	subs	r3, r2, r3
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	d901      	bls.n	80087dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80087d8:	2303      	movs	r3, #3
 80087da:	e078      	b.n	80088ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087dc:	4b3f      	ldr	r3, [pc, #252]	; (80088dc <HAL_RCC_OscConfig+0x4d8>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d1f0      	bne.n	80087ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	69da      	ldr	r2, [r3, #28]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a1b      	ldr	r3, [r3, #32]
 80087f0:	431a      	orrs	r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f6:	019b      	lsls	r3, r3, #6
 80087f8:	431a      	orrs	r2, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087fe:	085b      	lsrs	r3, r3, #1
 8008800:	3b01      	subs	r3, #1
 8008802:	041b      	lsls	r3, r3, #16
 8008804:	431a      	orrs	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880a:	061b      	lsls	r3, r3, #24
 800880c:	4933      	ldr	r1, [pc, #204]	; (80088dc <HAL_RCC_OscConfig+0x4d8>)
 800880e:	4313      	orrs	r3, r2
 8008810:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008812:	4b33      	ldr	r3, [pc, #204]	; (80088e0 <HAL_RCC_OscConfig+0x4dc>)
 8008814:	2201      	movs	r2, #1
 8008816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008818:	f7fc f9aa 	bl	8004b70 <HAL_GetTick>
 800881c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800881e:	e008      	b.n	8008832 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008820:	f7fc f9a6 	bl	8004b70 <HAL_GetTick>
 8008824:	4602      	mov	r2, r0
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	1ad3      	subs	r3, r2, r3
 800882a:	2b02      	cmp	r3, #2
 800882c:	d901      	bls.n	8008832 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800882e:	2303      	movs	r3, #3
 8008830:	e04d      	b.n	80088ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008832:	4b2a      	ldr	r3, [pc, #168]	; (80088dc <HAL_RCC_OscConfig+0x4d8>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800883a:	2b00      	cmp	r3, #0
 800883c:	d0f0      	beq.n	8008820 <HAL_RCC_OscConfig+0x41c>
 800883e:	e045      	b.n	80088cc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008840:	4b27      	ldr	r3, [pc, #156]	; (80088e0 <HAL_RCC_OscConfig+0x4dc>)
 8008842:	2200      	movs	r2, #0
 8008844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008846:	f7fc f993 	bl	8004b70 <HAL_GetTick>
 800884a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800884c:	e008      	b.n	8008860 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800884e:	f7fc f98f 	bl	8004b70 <HAL_GetTick>
 8008852:	4602      	mov	r2, r0
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	1ad3      	subs	r3, r2, r3
 8008858:	2b02      	cmp	r3, #2
 800885a:	d901      	bls.n	8008860 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800885c:	2303      	movs	r3, #3
 800885e:	e036      	b.n	80088ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008860:	4b1e      	ldr	r3, [pc, #120]	; (80088dc <HAL_RCC_OscConfig+0x4d8>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1f0      	bne.n	800884e <HAL_RCC_OscConfig+0x44a>
 800886c:	e02e      	b.n	80088cc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	699b      	ldr	r3, [r3, #24]
 8008872:	2b01      	cmp	r3, #1
 8008874:	d101      	bne.n	800887a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e029      	b.n	80088ce <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800887a:	4b18      	ldr	r3, [pc, #96]	; (80088dc <HAL_RCC_OscConfig+0x4d8>)
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	69db      	ldr	r3, [r3, #28]
 800888a:	429a      	cmp	r2, r3
 800888c:	d11c      	bne.n	80088c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008898:	429a      	cmp	r2, r3
 800889a:	d115      	bne.n	80088c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800889c:	68fa      	ldr	r2, [r7, #12]
 800889e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80088a2:	4013      	ands	r3, r2
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d10d      	bne.n	80088c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d106      	bne.n	80088c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d001      	beq.n	80088cc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	e000      	b.n	80088ce <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3718      	adds	r7, #24
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	40007000 	.word	0x40007000
 80088dc:	40023800 	.word	0x40023800
 80088e0:	42470060 	.word	0x42470060

080088e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d101      	bne.n	80088f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	e0cc      	b.n	8008a92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80088f8:	4b68      	ldr	r3, [pc, #416]	; (8008a9c <HAL_RCC_ClockConfig+0x1b8>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 030f 	and.w	r3, r3, #15
 8008900:	683a      	ldr	r2, [r7, #0]
 8008902:	429a      	cmp	r2, r3
 8008904:	d90c      	bls.n	8008920 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008906:	4b65      	ldr	r3, [pc, #404]	; (8008a9c <HAL_RCC_ClockConfig+0x1b8>)
 8008908:	683a      	ldr	r2, [r7, #0]
 800890a:	b2d2      	uxtb	r2, r2
 800890c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800890e:	4b63      	ldr	r3, [pc, #396]	; (8008a9c <HAL_RCC_ClockConfig+0x1b8>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f003 030f 	and.w	r3, r3, #15
 8008916:	683a      	ldr	r2, [r7, #0]
 8008918:	429a      	cmp	r2, r3
 800891a:	d001      	beq.n	8008920 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e0b8      	b.n	8008a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0302 	and.w	r3, r3, #2
 8008928:	2b00      	cmp	r3, #0
 800892a:	d020      	beq.n	800896e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 0304 	and.w	r3, r3, #4
 8008934:	2b00      	cmp	r3, #0
 8008936:	d005      	beq.n	8008944 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008938:	4b59      	ldr	r3, [pc, #356]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	4a58      	ldr	r2, [pc, #352]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800893e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008942:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f003 0308 	and.w	r3, r3, #8
 800894c:	2b00      	cmp	r3, #0
 800894e:	d005      	beq.n	800895c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008950:	4b53      	ldr	r3, [pc, #332]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	4a52      	ldr	r2, [pc, #328]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008956:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800895a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800895c:	4b50      	ldr	r3, [pc, #320]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	494d      	ldr	r1, [pc, #308]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800896a:	4313      	orrs	r3, r2
 800896c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f003 0301 	and.w	r3, r3, #1
 8008976:	2b00      	cmp	r3, #0
 8008978:	d044      	beq.n	8008a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	2b01      	cmp	r3, #1
 8008980:	d107      	bne.n	8008992 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008982:	4b47      	ldr	r3, [pc, #284]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800898a:	2b00      	cmp	r3, #0
 800898c:	d119      	bne.n	80089c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	e07f      	b.n	8008a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	2b02      	cmp	r3, #2
 8008998:	d003      	beq.n	80089a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800899e:	2b03      	cmp	r3, #3
 80089a0:	d107      	bne.n	80089b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089a2:	4b3f      	ldr	r3, [pc, #252]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d109      	bne.n	80089c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	e06f      	b.n	8008a92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089b2:	4b3b      	ldr	r3, [pc, #236]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 0302 	and.w	r3, r3, #2
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d101      	bne.n	80089c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	e067      	b.n	8008a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80089c2:	4b37      	ldr	r3, [pc, #220]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	f023 0203 	bic.w	r2, r3, #3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	4934      	ldr	r1, [pc, #208]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80089d0:	4313      	orrs	r3, r2
 80089d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80089d4:	f7fc f8cc 	bl	8004b70 <HAL_GetTick>
 80089d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089da:	e00a      	b.n	80089f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089dc:	f7fc f8c8 	bl	8004b70 <HAL_GetTick>
 80089e0:	4602      	mov	r2, r0
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	1ad3      	subs	r3, r2, r3
 80089e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d901      	bls.n	80089f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e04f      	b.n	8008a92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089f2:	4b2b      	ldr	r3, [pc, #172]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	f003 020c 	and.w	r2, r3, #12
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d1eb      	bne.n	80089dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008a04:	4b25      	ldr	r3, [pc, #148]	; (8008a9c <HAL_RCC_ClockConfig+0x1b8>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 030f 	and.w	r3, r3, #15
 8008a0c:	683a      	ldr	r2, [r7, #0]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d20c      	bcs.n	8008a2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a12:	4b22      	ldr	r3, [pc, #136]	; (8008a9c <HAL_RCC_ClockConfig+0x1b8>)
 8008a14:	683a      	ldr	r2, [r7, #0]
 8008a16:	b2d2      	uxtb	r2, r2
 8008a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a1a:	4b20      	ldr	r3, [pc, #128]	; (8008a9c <HAL_RCC_ClockConfig+0x1b8>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 030f 	and.w	r3, r3, #15
 8008a22:	683a      	ldr	r2, [r7, #0]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d001      	beq.n	8008a2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e032      	b.n	8008a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 0304 	and.w	r3, r3, #4
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d008      	beq.n	8008a4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a38:	4b19      	ldr	r3, [pc, #100]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	4916      	ldr	r1, [pc, #88]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a46:	4313      	orrs	r3, r2
 8008a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f003 0308 	and.w	r3, r3, #8
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d009      	beq.n	8008a6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a56:	4b12      	ldr	r3, [pc, #72]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	00db      	lsls	r3, r3, #3
 8008a64:	490e      	ldr	r1, [pc, #56]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a66:	4313      	orrs	r3, r2
 8008a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008a6a:	f000 f889 	bl	8008b80 <HAL_RCC_GetSysClockFreq>
 8008a6e:	4601      	mov	r1, r0
 8008a70:	4b0b      	ldr	r3, [pc, #44]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	091b      	lsrs	r3, r3, #4
 8008a76:	f003 030f 	and.w	r3, r3, #15
 8008a7a:	4a0a      	ldr	r2, [pc, #40]	; (8008aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8008a7c:	5cd3      	ldrb	r3, [r2, r3]
 8008a7e:	fa21 f303 	lsr.w	r3, r1, r3
 8008a82:	4a09      	ldr	r2, [pc, #36]	; (8008aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008a86:	4b09      	ldr	r3, [pc, #36]	; (8008aac <HAL_RCC_ClockConfig+0x1c8>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7fc f82c 	bl	8004ae8 <HAL_InitTick>

  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	40023c00 	.word	0x40023c00
 8008aa0:	40023800 	.word	0x40023800
 8008aa4:	0800d610 	.word	0x0800d610
 8008aa8:	2000000c 	.word	0x2000000c
 8008aac:	20000010 	.word	0x20000010

08008ab0 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b08c      	sub	sp, #48	; 0x30
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d129      	bne.n	8008b16 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	61bb      	str	r3, [r7, #24]
 8008ac6:	4b2b      	ldr	r3, [pc, #172]	; (8008b74 <HAL_RCC_MCOConfig+0xc4>)
 8008ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aca:	4a2a      	ldr	r2, [pc, #168]	; (8008b74 <HAL_RCC_MCOConfig+0xc4>)
 8008acc:	f043 0301 	orr.w	r3, r3, #1
 8008ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8008ad2:	4b28      	ldr	r3, [pc, #160]	; (8008b74 <HAL_RCC_MCOConfig+0xc4>)
 8008ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad6:	f003 0301 	and.w	r3, r3, #1
 8008ada:	61bb      	str	r3, [r7, #24]
 8008adc:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8008ade:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ae4:	2302      	movs	r3, #2
 8008ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008aec:	2300      	movs	r3, #0
 8008aee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008af0:	2300      	movs	r3, #0
 8008af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008af4:	f107 031c 	add.w	r3, r7, #28
 8008af8:	4619      	mov	r1, r3
 8008afa:	481f      	ldr	r0, [pc, #124]	; (8008b78 <HAL_RCC_MCOConfig+0xc8>)
 8008afc:	f7fe f9a0 	bl	8006e40 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8008b00:	4b1c      	ldr	r3, [pc, #112]	; (8008b74 <HAL_RCC_MCOConfig+0xc4>)
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8008b08:	68b9      	ldr	r1, [r7, #8]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	430b      	orrs	r3, r1
 8008b0e:	4919      	ldr	r1, [pc, #100]	; (8008b74 <HAL_RCC_MCOConfig+0xc4>)
 8008b10:	4313      	orrs	r3, r2
 8008b12:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8008b14:	e029      	b.n	8008b6a <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8008b16:	2300      	movs	r3, #0
 8008b18:	617b      	str	r3, [r7, #20]
 8008b1a:	4b16      	ldr	r3, [pc, #88]	; (8008b74 <HAL_RCC_MCOConfig+0xc4>)
 8008b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b1e:	4a15      	ldr	r2, [pc, #84]	; (8008b74 <HAL_RCC_MCOConfig+0xc4>)
 8008b20:	f043 0304 	orr.w	r3, r3, #4
 8008b24:	6313      	str	r3, [r2, #48]	; 0x30
 8008b26:	4b13      	ldr	r3, [pc, #76]	; (8008b74 <HAL_RCC_MCOConfig+0xc4>)
 8008b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b2a:	f003 0304 	and.w	r3, r3, #4
 8008b2e:	617b      	str	r3, [r7, #20]
 8008b30:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8008b32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b38:	2302      	movs	r3, #2
 8008b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b3c:	2303      	movs	r3, #3
 8008b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b40:	2300      	movs	r3, #0
 8008b42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008b44:	2300      	movs	r3, #0
 8008b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8008b48:	f107 031c 	add.w	r3, r7, #28
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	480b      	ldr	r0, [pc, #44]	; (8008b7c <HAL_RCC_MCOConfig+0xcc>)
 8008b50:	f7fe f976 	bl	8006e40 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8008b54:	4b07      	ldr	r3, [pc, #28]	; (8008b74 <HAL_RCC_MCOConfig+0xc4>)
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	00d9      	lsls	r1, r3, #3
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	430b      	orrs	r3, r1
 8008b64:	4903      	ldr	r1, [pc, #12]	; (8008b74 <HAL_RCC_MCOConfig+0xc4>)
 8008b66:	4313      	orrs	r3, r2
 8008b68:	608b      	str	r3, [r1, #8]
}
 8008b6a:	bf00      	nop
 8008b6c:	3730      	adds	r7, #48	; 0x30
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	40023800 	.word	0x40023800
 8008b78:	40020000 	.word	0x40020000
 8008b7c:	40020800 	.word	0x40020800

08008b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008b86:	2300      	movs	r3, #0
 8008b88:	607b      	str	r3, [r7, #4]
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	60fb      	str	r3, [r7, #12]
 8008b8e:	2300      	movs	r3, #0
 8008b90:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008b92:	2300      	movs	r3, #0
 8008b94:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b96:	4b63      	ldr	r3, [pc, #396]	; (8008d24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	f003 030c 	and.w	r3, r3, #12
 8008b9e:	2b04      	cmp	r3, #4
 8008ba0:	d007      	beq.n	8008bb2 <HAL_RCC_GetSysClockFreq+0x32>
 8008ba2:	2b08      	cmp	r3, #8
 8008ba4:	d008      	beq.n	8008bb8 <HAL_RCC_GetSysClockFreq+0x38>
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	f040 80b4 	bne.w	8008d14 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008bac:	4b5e      	ldr	r3, [pc, #376]	; (8008d28 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008bae:	60bb      	str	r3, [r7, #8]
       break;
 8008bb0:	e0b3      	b.n	8008d1a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008bb2:	4b5e      	ldr	r3, [pc, #376]	; (8008d2c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8008bb4:	60bb      	str	r3, [r7, #8]
      break;
 8008bb6:	e0b0      	b.n	8008d1a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008bb8:	4b5a      	ldr	r3, [pc, #360]	; (8008d24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bc0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008bc2:	4b58      	ldr	r3, [pc, #352]	; (8008d24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d04a      	beq.n	8008c64 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008bce:	4b55      	ldr	r3, [pc, #340]	; (8008d24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	099b      	lsrs	r3, r3, #6
 8008bd4:	f04f 0400 	mov.w	r4, #0
 8008bd8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008bdc:	f04f 0200 	mov.w	r2, #0
 8008be0:	ea03 0501 	and.w	r5, r3, r1
 8008be4:	ea04 0602 	and.w	r6, r4, r2
 8008be8:	4629      	mov	r1, r5
 8008bea:	4632      	mov	r2, r6
 8008bec:	f04f 0300 	mov.w	r3, #0
 8008bf0:	f04f 0400 	mov.w	r4, #0
 8008bf4:	0154      	lsls	r4, r2, #5
 8008bf6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008bfa:	014b      	lsls	r3, r1, #5
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	4622      	mov	r2, r4
 8008c00:	1b49      	subs	r1, r1, r5
 8008c02:	eb62 0206 	sbc.w	r2, r2, r6
 8008c06:	f04f 0300 	mov.w	r3, #0
 8008c0a:	f04f 0400 	mov.w	r4, #0
 8008c0e:	0194      	lsls	r4, r2, #6
 8008c10:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008c14:	018b      	lsls	r3, r1, #6
 8008c16:	1a5b      	subs	r3, r3, r1
 8008c18:	eb64 0402 	sbc.w	r4, r4, r2
 8008c1c:	f04f 0100 	mov.w	r1, #0
 8008c20:	f04f 0200 	mov.w	r2, #0
 8008c24:	00e2      	lsls	r2, r4, #3
 8008c26:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008c2a:	00d9      	lsls	r1, r3, #3
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	4614      	mov	r4, r2
 8008c30:	195b      	adds	r3, r3, r5
 8008c32:	eb44 0406 	adc.w	r4, r4, r6
 8008c36:	f04f 0100 	mov.w	r1, #0
 8008c3a:	f04f 0200 	mov.w	r2, #0
 8008c3e:	0262      	lsls	r2, r4, #9
 8008c40:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008c44:	0259      	lsls	r1, r3, #9
 8008c46:	460b      	mov	r3, r1
 8008c48:	4614      	mov	r4, r2
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	4621      	mov	r1, r4
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f04f 0400 	mov.w	r4, #0
 8008c54:	461a      	mov	r2, r3
 8008c56:	4623      	mov	r3, r4
 8008c58:	f7f7 ffc6 	bl	8000be8 <__aeabi_uldivmod>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	460c      	mov	r4, r1
 8008c60:	60fb      	str	r3, [r7, #12]
 8008c62:	e049      	b.n	8008cf8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c64:	4b2f      	ldr	r3, [pc, #188]	; (8008d24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	099b      	lsrs	r3, r3, #6
 8008c6a:	f04f 0400 	mov.w	r4, #0
 8008c6e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008c72:	f04f 0200 	mov.w	r2, #0
 8008c76:	ea03 0501 	and.w	r5, r3, r1
 8008c7a:	ea04 0602 	and.w	r6, r4, r2
 8008c7e:	4629      	mov	r1, r5
 8008c80:	4632      	mov	r2, r6
 8008c82:	f04f 0300 	mov.w	r3, #0
 8008c86:	f04f 0400 	mov.w	r4, #0
 8008c8a:	0154      	lsls	r4, r2, #5
 8008c8c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008c90:	014b      	lsls	r3, r1, #5
 8008c92:	4619      	mov	r1, r3
 8008c94:	4622      	mov	r2, r4
 8008c96:	1b49      	subs	r1, r1, r5
 8008c98:	eb62 0206 	sbc.w	r2, r2, r6
 8008c9c:	f04f 0300 	mov.w	r3, #0
 8008ca0:	f04f 0400 	mov.w	r4, #0
 8008ca4:	0194      	lsls	r4, r2, #6
 8008ca6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008caa:	018b      	lsls	r3, r1, #6
 8008cac:	1a5b      	subs	r3, r3, r1
 8008cae:	eb64 0402 	sbc.w	r4, r4, r2
 8008cb2:	f04f 0100 	mov.w	r1, #0
 8008cb6:	f04f 0200 	mov.w	r2, #0
 8008cba:	00e2      	lsls	r2, r4, #3
 8008cbc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008cc0:	00d9      	lsls	r1, r3, #3
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	4614      	mov	r4, r2
 8008cc6:	195b      	adds	r3, r3, r5
 8008cc8:	eb44 0406 	adc.w	r4, r4, r6
 8008ccc:	f04f 0100 	mov.w	r1, #0
 8008cd0:	f04f 0200 	mov.w	r2, #0
 8008cd4:	02a2      	lsls	r2, r4, #10
 8008cd6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008cda:	0299      	lsls	r1, r3, #10
 8008cdc:	460b      	mov	r3, r1
 8008cde:	4614      	mov	r4, r2
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	4621      	mov	r1, r4
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f04f 0400 	mov.w	r4, #0
 8008cea:	461a      	mov	r2, r3
 8008cec:	4623      	mov	r3, r4
 8008cee:	f7f7 ff7b 	bl	8000be8 <__aeabi_uldivmod>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	460c      	mov	r4, r1
 8008cf6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008cf8:	4b0a      	ldr	r3, [pc, #40]	; (8008d24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	0c1b      	lsrs	r3, r3, #16
 8008cfe:	f003 0303 	and.w	r3, r3, #3
 8008d02:	3301      	adds	r3, #1
 8008d04:	005b      	lsls	r3, r3, #1
 8008d06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d10:	60bb      	str	r3, [r7, #8]
      break;
 8008d12:	e002      	b.n	8008d1a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008d14:	4b04      	ldr	r3, [pc, #16]	; (8008d28 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008d16:	60bb      	str	r3, [r7, #8]
      break;
 8008d18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008d1a:	68bb      	ldr	r3, [r7, #8]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3714      	adds	r7, #20
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d24:	40023800 	.word	0x40023800
 8008d28:	00f42400 	.word	0x00f42400
 8008d2c:	007a1200 	.word	0x007a1200

08008d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d30:	b480      	push	{r7}
 8008d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d34:	4b03      	ldr	r3, [pc, #12]	; (8008d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8008d36:	681b      	ldr	r3, [r3, #0]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	2000000c 	.word	0x2000000c

08008d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008d4c:	f7ff fff0 	bl	8008d30 <HAL_RCC_GetHCLKFreq>
 8008d50:	4601      	mov	r1, r0
 8008d52:	4b05      	ldr	r3, [pc, #20]	; (8008d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	0a9b      	lsrs	r3, r3, #10
 8008d58:	f003 0307 	and.w	r3, r3, #7
 8008d5c:	4a03      	ldr	r2, [pc, #12]	; (8008d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d5e:	5cd3      	ldrb	r3, [r2, r3]
 8008d60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	40023800 	.word	0x40023800
 8008d6c:	0800d620 	.word	0x0800d620

08008d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008d74:	f7ff ffdc 	bl	8008d30 <HAL_RCC_GetHCLKFreq>
 8008d78:	4601      	mov	r1, r0
 8008d7a:	4b05      	ldr	r3, [pc, #20]	; (8008d90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	0b5b      	lsrs	r3, r3, #13
 8008d80:	f003 0307 	and.w	r3, r3, #7
 8008d84:	4a03      	ldr	r2, [pc, #12]	; (8008d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d86:	5cd3      	ldrb	r3, [r2, r3]
 8008d88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	40023800 	.word	0x40023800
 8008d94:	0800d620 	.word	0x0800d620

08008d98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d101      	bne.n	8008daa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e056      	b.n	8008e58 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d106      	bne.n	8008dca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f7fb fc7b 	bl	80046c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2202      	movs	r2, #2
 8008dce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008de0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	685a      	ldr	r2, [r3, #4]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	431a      	orrs	r2, r3
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	431a      	orrs	r2, r3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	431a      	orrs	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	695b      	ldr	r3, [r3, #20]
 8008dfc:	431a      	orrs	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e06:	431a      	orrs	r2, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	69db      	ldr	r3, [r3, #28]
 8008e0c:	431a      	orrs	r2, r3
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a1b      	ldr	r3, [r3, #32]
 8008e12:	ea42 0103 	orr.w	r1, r2, r3
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	430a      	orrs	r2, r1
 8008e20:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	699b      	ldr	r3, [r3, #24]
 8008e26:	0c1b      	lsrs	r3, r3, #16
 8008e28:	f003 0104 	and.w	r1, r3, #4
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	430a      	orrs	r2, r1
 8008e36:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	69da      	ldr	r2, [r3, #28]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e46:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2201      	movs	r2, #1
 8008e52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008e56:	2300      	movs	r3, #0
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3708      	adds	r7, #8
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b088      	sub	sp, #32
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	603b      	str	r3, [r7, #0]
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008e70:	2300      	movs	r3, #0
 8008e72:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d101      	bne.n	8008e82 <HAL_SPI_Transmit+0x22>
 8008e7e:	2302      	movs	r3, #2
 8008e80:	e11e      	b.n	80090c0 <HAL_SPI_Transmit+0x260>
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2201      	movs	r2, #1
 8008e86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e8a:	f7fb fe71 	bl	8004b70 <HAL_GetTick>
 8008e8e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008e90:	88fb      	ldrh	r3, [r7, #6]
 8008e92:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d002      	beq.n	8008ea6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008ea4:	e103      	b.n	80090ae <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d002      	beq.n	8008eb2 <HAL_SPI_Transmit+0x52>
 8008eac:	88fb      	ldrh	r3, [r7, #6]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d102      	bne.n	8008eb8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008eb6:	e0fa      	b.n	80090ae <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2203      	movs	r2, #3
 8008ebc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	68ba      	ldr	r2, [r7, #8]
 8008eca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	88fa      	ldrh	r2, [r7, #6]
 8008ed0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	88fa      	ldrh	r2, [r7, #6]
 8008ed6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2200      	movs	r2, #0
 8008edc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008efe:	d107      	bne.n	8008f10 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f0e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f1a:	2b40      	cmp	r3, #64	; 0x40
 8008f1c:	d007      	beq.n	8008f2e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f36:	d14b      	bne.n	8008fd0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d002      	beq.n	8008f46 <HAL_SPI_Transmit+0xe6>
 8008f40:	8afb      	ldrh	r3, [r7, #22]
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d13e      	bne.n	8008fc4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f4a:	881a      	ldrh	r2, [r3, #0]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f56:	1c9a      	adds	r2, r3, #2
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	3b01      	subs	r3, #1
 8008f64:	b29a      	uxth	r2, r3
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008f6a:	e02b      	b.n	8008fc4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	f003 0302 	and.w	r3, r3, #2
 8008f76:	2b02      	cmp	r3, #2
 8008f78:	d112      	bne.n	8008fa0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f7e:	881a      	ldrh	r2, [r3, #0]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f8a:	1c9a      	adds	r2, r3, #2
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	3b01      	subs	r3, #1
 8008f98:	b29a      	uxth	r2, r3
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	86da      	strh	r2, [r3, #54]	; 0x36
 8008f9e:	e011      	b.n	8008fc4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008fa0:	f7fb fde6 	bl	8004b70 <HAL_GetTick>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	1ad3      	subs	r3, r2, r3
 8008faa:	683a      	ldr	r2, [r7, #0]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d803      	bhi.n	8008fb8 <HAL_SPI_Transmit+0x158>
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb6:	d102      	bne.n	8008fbe <HAL_SPI_Transmit+0x15e>
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d102      	bne.n	8008fc4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008fbe:	2303      	movs	r3, #3
 8008fc0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008fc2:	e074      	b.n	80090ae <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1ce      	bne.n	8008f6c <HAL_SPI_Transmit+0x10c>
 8008fce:	e04c      	b.n	800906a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d002      	beq.n	8008fde <HAL_SPI_Transmit+0x17e>
 8008fd8:	8afb      	ldrh	r3, [r7, #22]
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d140      	bne.n	8009060 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	330c      	adds	r3, #12
 8008fe8:	7812      	ldrb	r2, [r2, #0]
 8008fea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff0:	1c5a      	adds	r2, r3, #1
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	3b01      	subs	r3, #1
 8008ffe:	b29a      	uxth	r2, r3
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009004:	e02c      	b.n	8009060 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	f003 0302 	and.w	r3, r3, #2
 8009010:	2b02      	cmp	r3, #2
 8009012:	d113      	bne.n	800903c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	330c      	adds	r3, #12
 800901e:	7812      	ldrb	r2, [r2, #0]
 8009020:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009026:	1c5a      	adds	r2, r3, #1
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009030:	b29b      	uxth	r3, r3
 8009032:	3b01      	subs	r3, #1
 8009034:	b29a      	uxth	r2, r3
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	86da      	strh	r2, [r3, #54]	; 0x36
 800903a:	e011      	b.n	8009060 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800903c:	f7fb fd98 	bl	8004b70 <HAL_GetTick>
 8009040:	4602      	mov	r2, r0
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	683a      	ldr	r2, [r7, #0]
 8009048:	429a      	cmp	r2, r3
 800904a:	d803      	bhi.n	8009054 <HAL_SPI_Transmit+0x1f4>
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009052:	d102      	bne.n	800905a <HAL_SPI_Transmit+0x1fa>
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d102      	bne.n	8009060 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800905a:	2303      	movs	r3, #3
 800905c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800905e:	e026      	b.n	80090ae <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009064:	b29b      	uxth	r3, r3
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1cd      	bne.n	8009006 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800906a:	69ba      	ldr	r2, [r7, #24]
 800906c:	6839      	ldr	r1, [r7, #0]
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f000 fa44 	bl	80094fc <SPI_EndRxTxTransaction>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d002      	beq.n	8009080 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2220      	movs	r2, #32
 800907e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d10a      	bne.n	800909e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009088:	2300      	movs	r3, #0
 800908a:	613b      	str	r3, [r7, #16]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	613b      	str	r3, [r7, #16]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	613b      	str	r3, [r7, #16]
 800909c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d002      	beq.n	80090ac <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	77fb      	strb	r3, [r7, #31]
 80090aa:	e000      	b.n	80090ae <HAL_SPI_Transmit+0x24e>
  }

error:
 80090ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2201      	movs	r2, #1
 80090b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2200      	movs	r2, #0
 80090ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80090be:	7ffb      	ldrb	r3, [r7, #31]
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3720      	adds	r7, #32
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b08c      	sub	sp, #48	; 0x30
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
 80090d4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80090d6:	2301      	movs	r3, #1
 80090d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80090da:	2300      	movs	r3, #0
 80090dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d101      	bne.n	80090ee <HAL_SPI_TransmitReceive+0x26>
 80090ea:	2302      	movs	r3, #2
 80090ec:	e18a      	b.n	8009404 <HAL_SPI_TransmitReceive+0x33c>
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2201      	movs	r2, #1
 80090f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80090f6:	f7fb fd3b 	bl	8004b70 <HAL_GetTick>
 80090fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800910c:	887b      	ldrh	r3, [r7, #2]
 800910e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009110:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009114:	2b01      	cmp	r3, #1
 8009116:	d00f      	beq.n	8009138 <HAL_SPI_TransmitReceive+0x70>
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800911e:	d107      	bne.n	8009130 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d103      	bne.n	8009130 <HAL_SPI_TransmitReceive+0x68>
 8009128:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800912c:	2b04      	cmp	r3, #4
 800912e:	d003      	beq.n	8009138 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009130:	2302      	movs	r3, #2
 8009132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009136:	e15b      	b.n	80093f0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d005      	beq.n	800914a <HAL_SPI_TransmitReceive+0x82>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d002      	beq.n	800914a <HAL_SPI_TransmitReceive+0x82>
 8009144:	887b      	ldrh	r3, [r7, #2]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d103      	bne.n	8009152 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009150:	e14e      	b.n	80093f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009158:	b2db      	uxtb	r3, r3
 800915a:	2b04      	cmp	r3, #4
 800915c:	d003      	beq.n	8009166 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2205      	movs	r2, #5
 8009162:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2200      	movs	r2, #0
 800916a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	887a      	ldrh	r2, [r7, #2]
 8009176:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	887a      	ldrh	r2, [r7, #2]
 800917c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	68ba      	ldr	r2, [r7, #8]
 8009182:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	887a      	ldrh	r2, [r7, #2]
 8009188:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	887a      	ldrh	r2, [r7, #2]
 800918e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2200      	movs	r2, #0
 8009194:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2200      	movs	r2, #0
 800919a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091a6:	2b40      	cmp	r3, #64	; 0x40
 80091a8:	d007      	beq.n	80091ba <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091c2:	d178      	bne.n	80092b6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d002      	beq.n	80091d2 <HAL_SPI_TransmitReceive+0x10a>
 80091cc:	8b7b      	ldrh	r3, [r7, #26]
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d166      	bne.n	80092a0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d6:	881a      	ldrh	r2, [r3, #0]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e2:	1c9a      	adds	r2, r3, #2
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	3b01      	subs	r3, #1
 80091f0:	b29a      	uxth	r2, r3
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091f6:	e053      	b.n	80092a0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	f003 0302 	and.w	r3, r3, #2
 8009202:	2b02      	cmp	r3, #2
 8009204:	d11b      	bne.n	800923e <HAL_SPI_TransmitReceive+0x176>
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800920a:	b29b      	uxth	r3, r3
 800920c:	2b00      	cmp	r3, #0
 800920e:	d016      	beq.n	800923e <HAL_SPI_TransmitReceive+0x176>
 8009210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009212:	2b01      	cmp	r3, #1
 8009214:	d113      	bne.n	800923e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800921a:	881a      	ldrh	r2, [r3, #0]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009226:	1c9a      	adds	r2, r3, #2
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009230:	b29b      	uxth	r3, r3
 8009232:	3b01      	subs	r3, #1
 8009234:	b29a      	uxth	r2, r3
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800923a:	2300      	movs	r3, #0
 800923c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	f003 0301 	and.w	r3, r3, #1
 8009248:	2b01      	cmp	r3, #1
 800924a:	d119      	bne.n	8009280 <HAL_SPI_TransmitReceive+0x1b8>
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009250:	b29b      	uxth	r3, r3
 8009252:	2b00      	cmp	r3, #0
 8009254:	d014      	beq.n	8009280 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	68da      	ldr	r2, [r3, #12]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009260:	b292      	uxth	r2, r2
 8009262:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009268:	1c9a      	adds	r2, r3, #2
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009272:	b29b      	uxth	r3, r3
 8009274:	3b01      	subs	r3, #1
 8009276:	b29a      	uxth	r2, r3
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800927c:	2301      	movs	r3, #1
 800927e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009280:	f7fb fc76 	bl	8004b70 <HAL_GetTick>
 8009284:	4602      	mov	r2, r0
 8009286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009288:	1ad3      	subs	r3, r2, r3
 800928a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800928c:	429a      	cmp	r2, r3
 800928e:	d807      	bhi.n	80092a0 <HAL_SPI_TransmitReceive+0x1d8>
 8009290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009296:	d003      	beq.n	80092a0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009298:	2303      	movs	r3, #3
 800929a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800929e:	e0a7      	b.n	80093f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d1a6      	bne.n	80091f8 <HAL_SPI_TransmitReceive+0x130>
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1a1      	bne.n	80091f8 <HAL_SPI_TransmitReceive+0x130>
 80092b4:	e07c      	b.n	80093b0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d002      	beq.n	80092c4 <HAL_SPI_TransmitReceive+0x1fc>
 80092be:	8b7b      	ldrh	r3, [r7, #26]
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d16b      	bne.n	800939c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	330c      	adds	r3, #12
 80092ce:	7812      	ldrb	r2, [r2, #0]
 80092d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d6:	1c5a      	adds	r2, r3, #1
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	3b01      	subs	r3, #1
 80092e4:	b29a      	uxth	r2, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092ea:	e057      	b.n	800939c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	f003 0302 	and.w	r3, r3, #2
 80092f6:	2b02      	cmp	r3, #2
 80092f8:	d11c      	bne.n	8009334 <HAL_SPI_TransmitReceive+0x26c>
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092fe:	b29b      	uxth	r3, r3
 8009300:	2b00      	cmp	r3, #0
 8009302:	d017      	beq.n	8009334 <HAL_SPI_TransmitReceive+0x26c>
 8009304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009306:	2b01      	cmp	r3, #1
 8009308:	d114      	bne.n	8009334 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	330c      	adds	r3, #12
 8009314:	7812      	ldrb	r2, [r2, #0]
 8009316:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800931c:	1c5a      	adds	r2, r3, #1
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009326:	b29b      	uxth	r3, r3
 8009328:	3b01      	subs	r3, #1
 800932a:	b29a      	uxth	r2, r3
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009330:	2300      	movs	r3, #0
 8009332:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	689b      	ldr	r3, [r3, #8]
 800933a:	f003 0301 	and.w	r3, r3, #1
 800933e:	2b01      	cmp	r3, #1
 8009340:	d119      	bne.n	8009376 <HAL_SPI_TransmitReceive+0x2ae>
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009346:	b29b      	uxth	r3, r3
 8009348:	2b00      	cmp	r3, #0
 800934a:	d014      	beq.n	8009376 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	68da      	ldr	r2, [r3, #12]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009356:	b2d2      	uxtb	r2, r2
 8009358:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935e:	1c5a      	adds	r2, r3, #1
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009368:	b29b      	uxth	r3, r3
 800936a:	3b01      	subs	r3, #1
 800936c:	b29a      	uxth	r2, r3
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009372:	2301      	movs	r3, #1
 8009374:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009376:	f7fb fbfb 	bl	8004b70 <HAL_GetTick>
 800937a:	4602      	mov	r2, r0
 800937c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009382:	429a      	cmp	r2, r3
 8009384:	d803      	bhi.n	800938e <HAL_SPI_TransmitReceive+0x2c6>
 8009386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800938c:	d102      	bne.n	8009394 <HAL_SPI_TransmitReceive+0x2cc>
 800938e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009390:	2b00      	cmp	r3, #0
 8009392:	d103      	bne.n	800939c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009394:	2303      	movs	r3, #3
 8009396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800939a:	e029      	b.n	80093f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1a2      	bne.n	80092ec <HAL_SPI_TransmitReceive+0x224>
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d19d      	bne.n	80092ec <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80093b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	f000 f8a1 	bl	80094fc <SPI_EndRxTxTransaction>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d006      	beq.n	80093ce <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2220      	movs	r2, #32
 80093ca:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80093cc:	e010      	b.n	80093f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d10b      	bne.n	80093ee <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093d6:	2300      	movs	r3, #0
 80093d8:	617b      	str	r3, [r7, #20]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	617b      	str	r3, [r7, #20]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	617b      	str	r3, [r7, #20]
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	e000      	b.n	80093f0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80093ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2201      	movs	r2, #1
 80093f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009400:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009404:	4618      	mov	r0, r3
 8009406:	3730      	adds	r7, #48	; 0x30
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800941a:	b2db      	uxtb	r3, r3
}
 800941c:	4618      	mov	r0, r3
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	603b      	str	r3, [r7, #0]
 8009434:	4613      	mov	r3, r2
 8009436:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009438:	e04c      	b.n	80094d4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009440:	d048      	beq.n	80094d4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009442:	f7fb fb95 	bl	8004b70 <HAL_GetTick>
 8009446:	4602      	mov	r2, r0
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	1ad3      	subs	r3, r2, r3
 800944c:	683a      	ldr	r2, [r7, #0]
 800944e:	429a      	cmp	r2, r3
 8009450:	d902      	bls.n	8009458 <SPI_WaitFlagStateUntilTimeout+0x30>
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d13d      	bne.n	80094d4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	685a      	ldr	r2, [r3, #4]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009466:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009470:	d111      	bne.n	8009496 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800947a:	d004      	beq.n	8009486 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009484:	d107      	bne.n	8009496 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009494:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800949a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800949e:	d10f      	bne.n	80094c0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80094ae:	601a      	str	r2, [r3, #0]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80094be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2201      	movs	r2, #1
 80094c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80094d0:	2303      	movs	r3, #3
 80094d2:	e00f      	b.n	80094f4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	689a      	ldr	r2, [r3, #8]
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	4013      	ands	r3, r2
 80094de:	68ba      	ldr	r2, [r7, #8]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	bf0c      	ite	eq
 80094e4:	2301      	moveq	r3, #1
 80094e6:	2300      	movne	r3, #0
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	461a      	mov	r2, r3
 80094ec:	79fb      	ldrb	r3, [r7, #7]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d1a3      	bne.n	800943a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3710      	adds	r7, #16
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b088      	sub	sp, #32
 8009500:	af02      	add	r7, sp, #8
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009508:	4b1b      	ldr	r3, [pc, #108]	; (8009578 <SPI_EndRxTxTransaction+0x7c>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a1b      	ldr	r2, [pc, #108]	; (800957c <SPI_EndRxTxTransaction+0x80>)
 800950e:	fba2 2303 	umull	r2, r3, r2, r3
 8009512:	0d5b      	lsrs	r3, r3, #21
 8009514:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009518:	fb02 f303 	mul.w	r3, r2, r3
 800951c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009526:	d112      	bne.n	800954e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	2200      	movs	r2, #0
 8009530:	2180      	movs	r1, #128	; 0x80
 8009532:	68f8      	ldr	r0, [r7, #12]
 8009534:	f7ff ff78 	bl	8009428 <SPI_WaitFlagStateUntilTimeout>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d016      	beq.n	800956c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009542:	f043 0220 	orr.w	r2, r3, #32
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800954a:	2303      	movs	r3, #3
 800954c:	e00f      	b.n	800956e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00a      	beq.n	800956a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	3b01      	subs	r3, #1
 8009558:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009564:	2b80      	cmp	r3, #128	; 0x80
 8009566:	d0f2      	beq.n	800954e <SPI_EndRxTxTransaction+0x52>
 8009568:	e000      	b.n	800956c <SPI_EndRxTxTransaction+0x70>
        break;
 800956a:	bf00      	nop
  }

  return HAL_OK;
 800956c:	2300      	movs	r3, #0
}
 800956e:	4618      	mov	r0, r3
 8009570:	3718      	adds	r7, #24
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	2000000c 	.word	0x2000000c
 800957c:	165e9f81 	.word	0x165e9f81

08009580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d101      	bne.n	8009592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	e01d      	b.n	80095ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009598:	b2db      	uxtb	r3, r3
 800959a:	2b00      	cmp	r3, #0
 800959c:	d106      	bne.n	80095ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f7fb f8d2 	bl	8004750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2202      	movs	r2, #2
 80095b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	3304      	adds	r3, #4
 80095bc:	4619      	mov	r1, r3
 80095be:	4610      	mov	r0, r2
 80095c0:	f000 fa14 	bl	80099ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80095d6:	b480      	push	{r7}
 80095d8:	b085      	sub	sp, #20
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68da      	ldr	r2, [r3, #12]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f042 0201 	orr.w	r2, r2, #1
 80095ec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	f003 0307 	and.w	r3, r3, #7
 80095f8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2b06      	cmp	r3, #6
 80095fe:	d007      	beq.n	8009610 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f042 0201 	orr.w	r2, r2, #1
 800960e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	3714      	adds	r7, #20
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr

0800961e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b082      	sub	sp, #8
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	f003 0302 	and.w	r3, r3, #2
 8009630:	2b02      	cmp	r3, #2
 8009632:	d122      	bne.n	800967a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	f003 0302 	and.w	r3, r3, #2
 800963e:	2b02      	cmp	r3, #2
 8009640:	d11b      	bne.n	800967a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f06f 0202 	mvn.w	r2, #2
 800964a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	699b      	ldr	r3, [r3, #24]
 8009658:	f003 0303 	and.w	r3, r3, #3
 800965c:	2b00      	cmp	r3, #0
 800965e:	d003      	beq.n	8009668 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 f9a5 	bl	80099b0 <HAL_TIM_IC_CaptureCallback>
 8009666:	e005      	b.n	8009674 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 f997 	bl	800999c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 f9a8 	bl	80099c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	691b      	ldr	r3, [r3, #16]
 8009680:	f003 0304 	and.w	r3, r3, #4
 8009684:	2b04      	cmp	r3, #4
 8009686:	d122      	bne.n	80096ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	f003 0304 	and.w	r3, r3, #4
 8009692:	2b04      	cmp	r3, #4
 8009694:	d11b      	bne.n	80096ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f06f 0204 	mvn.w	r2, #4
 800969e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2202      	movs	r2, #2
 80096a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	699b      	ldr	r3, [r3, #24]
 80096ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d003      	beq.n	80096bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 f97b 	bl	80099b0 <HAL_TIM_IC_CaptureCallback>
 80096ba:	e005      	b.n	80096c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 f96d 	bl	800999c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 f97e 	bl	80099c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	691b      	ldr	r3, [r3, #16]
 80096d4:	f003 0308 	and.w	r3, r3, #8
 80096d8:	2b08      	cmp	r3, #8
 80096da:	d122      	bne.n	8009722 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	f003 0308 	and.w	r3, r3, #8
 80096e6:	2b08      	cmp	r3, #8
 80096e8:	d11b      	bne.n	8009722 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f06f 0208 	mvn.w	r2, #8
 80096f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2204      	movs	r2, #4
 80096f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	69db      	ldr	r3, [r3, #28]
 8009700:	f003 0303 	and.w	r3, r3, #3
 8009704:	2b00      	cmp	r3, #0
 8009706:	d003      	beq.n	8009710 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 f951 	bl	80099b0 <HAL_TIM_IC_CaptureCallback>
 800970e:	e005      	b.n	800971c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 f943 	bl	800999c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 f954 	bl	80099c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	f003 0310 	and.w	r3, r3, #16
 800972c:	2b10      	cmp	r3, #16
 800972e:	d122      	bne.n	8009776 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	f003 0310 	and.w	r3, r3, #16
 800973a:	2b10      	cmp	r3, #16
 800973c:	d11b      	bne.n	8009776 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f06f 0210 	mvn.w	r2, #16
 8009746:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2208      	movs	r2, #8
 800974c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	69db      	ldr	r3, [r3, #28]
 8009754:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009758:	2b00      	cmp	r3, #0
 800975a:	d003      	beq.n	8009764 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 f927 	bl	80099b0 <HAL_TIM_IC_CaptureCallback>
 8009762:	e005      	b.n	8009770 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 f919 	bl	800999c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 f92a 	bl	80099c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	f003 0301 	and.w	r3, r3, #1
 8009780:	2b01      	cmp	r3, #1
 8009782:	d10e      	bne.n	80097a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	f003 0301 	and.w	r3, r3, #1
 800978e:	2b01      	cmp	r3, #1
 8009790:	d107      	bne.n	80097a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f06f 0201 	mvn.w	r2, #1
 800979a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f7fa f9d3 	bl	8003b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	691b      	ldr	r3, [r3, #16]
 80097a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ac:	2b80      	cmp	r3, #128	; 0x80
 80097ae:	d10e      	bne.n	80097ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ba:	2b80      	cmp	r3, #128	; 0x80
 80097bc:	d107      	bne.n	80097ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80097c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 facf 	bl	8009d6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	691b      	ldr	r3, [r3, #16]
 80097d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097d8:	2b40      	cmp	r3, #64	; 0x40
 80097da:	d10e      	bne.n	80097fa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	68db      	ldr	r3, [r3, #12]
 80097e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097e6:	2b40      	cmp	r3, #64	; 0x40
 80097e8:	d107      	bne.n	80097fa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80097f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 f8ef 	bl	80099d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	f003 0320 	and.w	r3, r3, #32
 8009804:	2b20      	cmp	r3, #32
 8009806:	d10e      	bne.n	8009826 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	f003 0320 	and.w	r3, r3, #32
 8009812:	2b20      	cmp	r3, #32
 8009814:	d107      	bne.n	8009826 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f06f 0220 	mvn.w	r2, #32
 800981e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 fa99 	bl	8009d58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009826:	bf00      	nop
 8009828:	3708      	adds	r7, #8
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800982e:	b580      	push	{r7, lr}
 8009830:	b084      	sub	sp, #16
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
 8009836:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800983e:	2b01      	cmp	r3, #1
 8009840:	d101      	bne.n	8009846 <HAL_TIM_ConfigClockSource+0x18>
 8009842:	2302      	movs	r3, #2
 8009844:	e0a6      	b.n	8009994 <HAL_TIM_ConfigClockSource+0x166>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2201      	movs	r2, #1
 800984a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2202      	movs	r2, #2
 8009852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009864:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800986c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	68fa      	ldr	r2, [r7, #12]
 8009874:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2b40      	cmp	r3, #64	; 0x40
 800987c:	d067      	beq.n	800994e <HAL_TIM_ConfigClockSource+0x120>
 800987e:	2b40      	cmp	r3, #64	; 0x40
 8009880:	d80b      	bhi.n	800989a <HAL_TIM_ConfigClockSource+0x6c>
 8009882:	2b10      	cmp	r3, #16
 8009884:	d073      	beq.n	800996e <HAL_TIM_ConfigClockSource+0x140>
 8009886:	2b10      	cmp	r3, #16
 8009888:	d802      	bhi.n	8009890 <HAL_TIM_ConfigClockSource+0x62>
 800988a:	2b00      	cmp	r3, #0
 800988c:	d06f      	beq.n	800996e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800988e:	e078      	b.n	8009982 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009890:	2b20      	cmp	r3, #32
 8009892:	d06c      	beq.n	800996e <HAL_TIM_ConfigClockSource+0x140>
 8009894:	2b30      	cmp	r3, #48	; 0x30
 8009896:	d06a      	beq.n	800996e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009898:	e073      	b.n	8009982 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800989a:	2b70      	cmp	r3, #112	; 0x70
 800989c:	d00d      	beq.n	80098ba <HAL_TIM_ConfigClockSource+0x8c>
 800989e:	2b70      	cmp	r3, #112	; 0x70
 80098a0:	d804      	bhi.n	80098ac <HAL_TIM_ConfigClockSource+0x7e>
 80098a2:	2b50      	cmp	r3, #80	; 0x50
 80098a4:	d033      	beq.n	800990e <HAL_TIM_ConfigClockSource+0xe0>
 80098a6:	2b60      	cmp	r3, #96	; 0x60
 80098a8:	d041      	beq.n	800992e <HAL_TIM_ConfigClockSource+0x100>
      break;
 80098aa:	e06a      	b.n	8009982 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80098ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098b0:	d066      	beq.n	8009980 <HAL_TIM_ConfigClockSource+0x152>
 80098b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098b6:	d017      	beq.n	80098e8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80098b8:	e063      	b.n	8009982 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6818      	ldr	r0, [r3, #0]
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	6899      	ldr	r1, [r3, #8]
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	685a      	ldr	r2, [r3, #4]
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	f000 f9a9 	bl	8009c20 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80098dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	609a      	str	r2, [r3, #8]
      break;
 80098e6:	e04c      	b.n	8009982 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6818      	ldr	r0, [r3, #0]
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	6899      	ldr	r1, [r3, #8]
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	685a      	ldr	r2, [r3, #4]
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	f000 f992 	bl	8009c20 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	689a      	ldr	r2, [r3, #8]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800990a:	609a      	str	r2, [r3, #8]
      break;
 800990c:	e039      	b.n	8009982 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6818      	ldr	r0, [r3, #0]
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	6859      	ldr	r1, [r3, #4]
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	461a      	mov	r2, r3
 800991c:	f000 f906 	bl	8009b2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2150      	movs	r1, #80	; 0x50
 8009926:	4618      	mov	r0, r3
 8009928:	f000 f95f 	bl	8009bea <TIM_ITRx_SetConfig>
      break;
 800992c:	e029      	b.n	8009982 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6818      	ldr	r0, [r3, #0]
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	6859      	ldr	r1, [r3, #4]
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	461a      	mov	r2, r3
 800993c:	f000 f925 	bl	8009b8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	2160      	movs	r1, #96	; 0x60
 8009946:	4618      	mov	r0, r3
 8009948:	f000 f94f 	bl	8009bea <TIM_ITRx_SetConfig>
      break;
 800994c:	e019      	b.n	8009982 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6818      	ldr	r0, [r3, #0]
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	6859      	ldr	r1, [r3, #4]
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	461a      	mov	r2, r3
 800995c:	f000 f8e6 	bl	8009b2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2140      	movs	r1, #64	; 0x40
 8009966:	4618      	mov	r0, r3
 8009968:	f000 f93f 	bl	8009bea <TIM_ITRx_SetConfig>
      break;
 800996c:	e009      	b.n	8009982 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4619      	mov	r1, r3
 8009978:	4610      	mov	r0, r2
 800997a:	f000 f936 	bl	8009bea <TIM_ITRx_SetConfig>
      break;
 800997e:	e000      	b.n	8009982 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009980:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2201      	movs	r2, #1
 8009986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80099a4:	bf00      	nop
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80099b8:	bf00      	nop
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80099cc:	bf00      	nop
 80099ce:	370c      	adds	r7, #12
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80099e0:	bf00      	nop
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b085      	sub	sp, #20
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	4a40      	ldr	r2, [pc, #256]	; (8009b00 <TIM_Base_SetConfig+0x114>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d013      	beq.n	8009a2c <TIM_Base_SetConfig+0x40>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a0a:	d00f      	beq.n	8009a2c <TIM_Base_SetConfig+0x40>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4a3d      	ldr	r2, [pc, #244]	; (8009b04 <TIM_Base_SetConfig+0x118>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d00b      	beq.n	8009a2c <TIM_Base_SetConfig+0x40>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4a3c      	ldr	r2, [pc, #240]	; (8009b08 <TIM_Base_SetConfig+0x11c>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d007      	beq.n	8009a2c <TIM_Base_SetConfig+0x40>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	4a3b      	ldr	r2, [pc, #236]	; (8009b0c <TIM_Base_SetConfig+0x120>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d003      	beq.n	8009a2c <TIM_Base_SetConfig+0x40>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	4a3a      	ldr	r2, [pc, #232]	; (8009b10 <TIM_Base_SetConfig+0x124>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d108      	bne.n	8009a3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	68fa      	ldr	r2, [r7, #12]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4a2f      	ldr	r2, [pc, #188]	; (8009b00 <TIM_Base_SetConfig+0x114>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d02b      	beq.n	8009a9e <TIM_Base_SetConfig+0xb2>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a4c:	d027      	beq.n	8009a9e <TIM_Base_SetConfig+0xb2>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	4a2c      	ldr	r2, [pc, #176]	; (8009b04 <TIM_Base_SetConfig+0x118>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d023      	beq.n	8009a9e <TIM_Base_SetConfig+0xb2>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4a2b      	ldr	r2, [pc, #172]	; (8009b08 <TIM_Base_SetConfig+0x11c>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d01f      	beq.n	8009a9e <TIM_Base_SetConfig+0xb2>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	4a2a      	ldr	r2, [pc, #168]	; (8009b0c <TIM_Base_SetConfig+0x120>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d01b      	beq.n	8009a9e <TIM_Base_SetConfig+0xb2>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	4a29      	ldr	r2, [pc, #164]	; (8009b10 <TIM_Base_SetConfig+0x124>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d017      	beq.n	8009a9e <TIM_Base_SetConfig+0xb2>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	4a28      	ldr	r2, [pc, #160]	; (8009b14 <TIM_Base_SetConfig+0x128>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d013      	beq.n	8009a9e <TIM_Base_SetConfig+0xb2>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	4a27      	ldr	r2, [pc, #156]	; (8009b18 <TIM_Base_SetConfig+0x12c>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d00f      	beq.n	8009a9e <TIM_Base_SetConfig+0xb2>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	4a26      	ldr	r2, [pc, #152]	; (8009b1c <TIM_Base_SetConfig+0x130>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d00b      	beq.n	8009a9e <TIM_Base_SetConfig+0xb2>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	4a25      	ldr	r2, [pc, #148]	; (8009b20 <TIM_Base_SetConfig+0x134>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d007      	beq.n	8009a9e <TIM_Base_SetConfig+0xb2>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	4a24      	ldr	r2, [pc, #144]	; (8009b24 <TIM_Base_SetConfig+0x138>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d003      	beq.n	8009a9e <TIM_Base_SetConfig+0xb2>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	4a23      	ldr	r2, [pc, #140]	; (8009b28 <TIM_Base_SetConfig+0x13c>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d108      	bne.n	8009ab0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	68db      	ldr	r3, [r3, #12]
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	4313      	orrs	r3, r2
 8009aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	695b      	ldr	r3, [r3, #20]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	689a      	ldr	r2, [r3, #8]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4a0a      	ldr	r2, [pc, #40]	; (8009b00 <TIM_Base_SetConfig+0x114>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d003      	beq.n	8009ae4 <TIM_Base_SetConfig+0xf8>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4a0c      	ldr	r2, [pc, #48]	; (8009b10 <TIM_Base_SetConfig+0x124>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d103      	bne.n	8009aec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	691a      	ldr	r2, [r3, #16]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	615a      	str	r2, [r3, #20]
}
 8009af2:	bf00      	nop
 8009af4:	3714      	adds	r7, #20
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop
 8009b00:	40010000 	.word	0x40010000
 8009b04:	40000400 	.word	0x40000400
 8009b08:	40000800 	.word	0x40000800
 8009b0c:	40000c00 	.word	0x40000c00
 8009b10:	40010400 	.word	0x40010400
 8009b14:	40014000 	.word	0x40014000
 8009b18:	40014400 	.word	0x40014400
 8009b1c:	40014800 	.word	0x40014800
 8009b20:	40001800 	.word	0x40001800
 8009b24:	40001c00 	.word	0x40001c00
 8009b28:	40002000 	.word	0x40002000

08009b2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b087      	sub	sp, #28
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6a1b      	ldr	r3, [r3, #32]
 8009b3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	6a1b      	ldr	r3, [r3, #32]
 8009b42:	f023 0201 	bic.w	r2, r3, #1
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	699b      	ldr	r3, [r3, #24]
 8009b4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	011b      	lsls	r3, r3, #4
 8009b5c:	693a      	ldr	r2, [r7, #16]
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	f023 030a 	bic.w	r3, r3, #10
 8009b68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b6a:	697a      	ldr	r2, [r7, #20]
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	693a      	ldr	r2, [r7, #16]
 8009b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	697a      	ldr	r2, [r7, #20]
 8009b7c:	621a      	str	r2, [r3, #32]
}
 8009b7e:	bf00      	nop
 8009b80:	371c      	adds	r7, #28
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr

08009b8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b8a:	b480      	push	{r7}
 8009b8c:	b087      	sub	sp, #28
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	60f8      	str	r0, [r7, #12]
 8009b92:	60b9      	str	r1, [r7, #8]
 8009b94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6a1b      	ldr	r3, [r3, #32]
 8009b9a:	f023 0210 	bic.w	r2, r3, #16
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	699b      	ldr	r3, [r3, #24]
 8009ba6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6a1b      	ldr	r3, [r3, #32]
 8009bac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009bb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	031b      	lsls	r3, r3, #12
 8009bba:	697a      	ldr	r2, [r7, #20]
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009bc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	011b      	lsls	r3, r3, #4
 8009bcc:	693a      	ldr	r2, [r7, #16]
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	697a      	ldr	r2, [r7, #20]
 8009bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	693a      	ldr	r2, [r7, #16]
 8009bdc:	621a      	str	r2, [r3, #32]
}
 8009bde:	bf00      	nop
 8009be0:	371c      	adds	r7, #28
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr

08009bea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009bea:	b480      	push	{r7}
 8009bec:	b085      	sub	sp, #20
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
 8009bf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009c02:	683a      	ldr	r2, [r7, #0]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	4313      	orrs	r3, r2
 8009c08:	f043 0307 	orr.w	r3, r3, #7
 8009c0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	68fa      	ldr	r2, [r7, #12]
 8009c12:	609a      	str	r2, [r3, #8]
}
 8009c14:	bf00      	nop
 8009c16:	3714      	adds	r7, #20
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b087      	sub	sp, #28
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	60b9      	str	r1, [r7, #8]
 8009c2a:	607a      	str	r2, [r7, #4]
 8009c2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	021a      	lsls	r2, r3, #8
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	431a      	orrs	r2, r3
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	4313      	orrs	r3, r2
 8009c48:	697a      	ldr	r2, [r7, #20]
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	697a      	ldr	r2, [r7, #20]
 8009c52:	609a      	str	r2, [r3, #8]
}
 8009c54:	bf00      	nop
 8009c56:	371c      	adds	r7, #28
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b085      	sub	sp, #20
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d101      	bne.n	8009c78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c74:	2302      	movs	r3, #2
 8009c76:	e05a      	b.n	8009d2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2202      	movs	r2, #2
 8009c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	68fa      	ldr	r2, [r7, #12]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a21      	ldr	r2, [pc, #132]	; (8009d3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d022      	beq.n	8009d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cc4:	d01d      	beq.n	8009d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a1d      	ldr	r2, [pc, #116]	; (8009d40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d018      	beq.n	8009d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a1b      	ldr	r2, [pc, #108]	; (8009d44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d013      	beq.n	8009d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a1a      	ldr	r2, [pc, #104]	; (8009d48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d00e      	beq.n	8009d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a18      	ldr	r2, [pc, #96]	; (8009d4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d009      	beq.n	8009d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a17      	ldr	r2, [pc, #92]	; (8009d50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d004      	beq.n	8009d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a15      	ldr	r2, [pc, #84]	; (8009d54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d10c      	bne.n	8009d1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	68ba      	ldr	r2, [r7, #8]
 8009d10:	4313      	orrs	r3, r2
 8009d12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	68ba      	ldr	r2, [r7, #8]
 8009d1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3714      	adds	r7, #20
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr
 8009d3a:	bf00      	nop
 8009d3c:	40010000 	.word	0x40010000
 8009d40:	40000400 	.word	0x40000400
 8009d44:	40000800 	.word	0x40000800
 8009d48:	40000c00 	.word	0x40000c00
 8009d4c:	40010400 	.word	0x40010400
 8009d50:	40014000 	.word	0x40014000
 8009d54:	40001800 	.word	0x40001800

08009d58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d60:	bf00      	nop
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d74:	bf00      	nop
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d101      	bne.n	8009d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e03f      	b.n	8009e12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d106      	bne.n	8009dac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f7fa fcfa 	bl	80047a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2224      	movs	r2, #36	; 0x24
 8009db0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	68da      	ldr	r2, [r3, #12]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009dc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 faf9 	bl	800a3bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	691a      	ldr	r2, [r3, #16]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009dd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	695a      	ldr	r2, [r3, #20]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009de8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	68da      	ldr	r2, [r3, #12]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009df8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2220      	movs	r2, #32
 8009e04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2220      	movs	r2, #32
 8009e0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3708      	adds	r7, #8
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e1a:	b480      	push	{r7}
 8009e1c:	b085      	sub	sp, #20
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	60f8      	str	r0, [r7, #12]
 8009e22:	60b9      	str	r1, [r7, #8]
 8009e24:	4613      	mov	r3, r2
 8009e26:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	2b20      	cmp	r3, #32
 8009e32:	d130      	bne.n	8009e96 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d002      	beq.n	8009e40 <HAL_UART_Transmit_IT+0x26>
 8009e3a:	88fb      	ldrh	r3, [r7, #6]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d101      	bne.n	8009e44 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009e40:	2301      	movs	r3, #1
 8009e42:	e029      	b.n	8009e98 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d101      	bne.n	8009e52 <HAL_UART_Transmit_IT+0x38>
 8009e4e:	2302      	movs	r3, #2
 8009e50:	e022      	b.n	8009e98 <HAL_UART_Transmit_IT+0x7e>
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2201      	movs	r2, #1
 8009e56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	68ba      	ldr	r2, [r7, #8]
 8009e5e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	88fa      	ldrh	r2, [r7, #6]
 8009e64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	88fa      	ldrh	r2, [r7, #6]
 8009e6a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2221      	movs	r2, #33	; 0x21
 8009e76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	68da      	ldr	r2, [r3, #12]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009e90:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8009e92:	2300      	movs	r3, #0
 8009e94:	e000      	b.n	8009e98 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8009e96:	2302      	movs	r3, #2
  }
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3714      	adds	r7, #20
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	60b9      	str	r1, [r7, #8]
 8009eae:	4613      	mov	r3, r2
 8009eb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	2b20      	cmp	r3, #32
 8009ebc:	d140      	bne.n	8009f40 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d002      	beq.n	8009eca <HAL_UART_Receive_IT+0x26>
 8009ec4:	88fb      	ldrh	r3, [r7, #6]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d101      	bne.n	8009ece <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	e039      	b.n	8009f42 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d101      	bne.n	8009edc <HAL_UART_Receive_IT+0x38>
 8009ed8:	2302      	movs	r3, #2
 8009eda:	e032      	b.n	8009f42 <HAL_UART_Receive_IT+0x9e>
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	68ba      	ldr	r2, [r7, #8]
 8009ee8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	88fa      	ldrh	r2, [r7, #6]
 8009eee:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	88fa      	ldrh	r2, [r7, #6]
 8009ef4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2222      	movs	r2, #34	; 0x22
 8009f00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	68da      	ldr	r2, [r3, #12]
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f1a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	695a      	ldr	r2, [r3, #20]
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f042 0201 	orr.w	r2, r2, #1
 8009f2a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	68da      	ldr	r2, [r3, #12]
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f042 0220 	orr.w	r2, r2, #32
 8009f3a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	e000      	b.n	8009f42 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8009f40:	2302      	movs	r3, #2
  }
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3714      	adds	r7, #20
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr
	...

08009f50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b088      	sub	sp, #32
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	695b      	ldr	r3, [r3, #20]
 8009f6e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8009f70:	2300      	movs	r3, #0
 8009f72:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8009f74:	2300      	movs	r3, #0
 8009f76:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009f78:	69fb      	ldr	r3, [r7, #28]
 8009f7a:	f003 030f 	and.w	r3, r3, #15
 8009f7e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d10d      	bne.n	8009fa2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	f003 0320 	and.w	r3, r3, #32
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d008      	beq.n	8009fa2 <HAL_UART_IRQHandler+0x52>
 8009f90:	69bb      	ldr	r3, [r7, #24]
 8009f92:	f003 0320 	and.w	r3, r3, #32
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d003      	beq.n	8009fa2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 f98c 	bl	800a2b8 <UART_Receive_IT>
      return;
 8009fa0:	e0d1      	b.n	800a146 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f000 80b0 	beq.w	800a10a <HAL_UART_IRQHandler+0x1ba>
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	f003 0301 	and.w	r3, r3, #1
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d105      	bne.n	8009fc0 <HAL_UART_IRQHandler+0x70>
 8009fb4:	69bb      	ldr	r3, [r7, #24]
 8009fb6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	f000 80a5 	beq.w	800a10a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009fc0:	69fb      	ldr	r3, [r7, #28]
 8009fc2:	f003 0301 	and.w	r3, r3, #1
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d00a      	beq.n	8009fe0 <HAL_UART_IRQHandler+0x90>
 8009fca:	69bb      	ldr	r3, [r7, #24]
 8009fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d005      	beq.n	8009fe0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fd8:	f043 0201 	orr.w	r2, r3, #1
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	f003 0304 	and.w	r3, r3, #4
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00a      	beq.n	800a000 <HAL_UART_IRQHandler+0xb0>
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	f003 0301 	and.w	r3, r3, #1
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d005      	beq.n	800a000 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ff8:	f043 0202 	orr.w	r2, r3, #2
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	f003 0302 	and.w	r3, r3, #2
 800a006:	2b00      	cmp	r3, #0
 800a008:	d00a      	beq.n	800a020 <HAL_UART_IRQHandler+0xd0>
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	f003 0301 	and.w	r3, r3, #1
 800a010:	2b00      	cmp	r3, #0
 800a012:	d005      	beq.n	800a020 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a018:	f043 0204 	orr.w	r2, r3, #4
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	f003 0308 	and.w	r3, r3, #8
 800a026:	2b00      	cmp	r3, #0
 800a028:	d00f      	beq.n	800a04a <HAL_UART_IRQHandler+0xfa>
 800a02a:	69bb      	ldr	r3, [r7, #24]
 800a02c:	f003 0320 	and.w	r3, r3, #32
 800a030:	2b00      	cmp	r3, #0
 800a032:	d104      	bne.n	800a03e <HAL_UART_IRQHandler+0xee>
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	f003 0301 	and.w	r3, r3, #1
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d005      	beq.n	800a04a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a042:	f043 0208 	orr.w	r2, r3, #8
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d078      	beq.n	800a144 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a052:	69fb      	ldr	r3, [r7, #28]
 800a054:	f003 0320 	and.w	r3, r3, #32
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d007      	beq.n	800a06c <HAL_UART_IRQHandler+0x11c>
 800a05c:	69bb      	ldr	r3, [r7, #24]
 800a05e:	f003 0320 	and.w	r3, r3, #32
 800a062:	2b00      	cmp	r3, #0
 800a064:	d002      	beq.n	800a06c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 f926 	bl	800a2b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	695b      	ldr	r3, [r3, #20]
 800a072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a076:	2b40      	cmp	r3, #64	; 0x40
 800a078:	bf0c      	ite	eq
 800a07a:	2301      	moveq	r3, #1
 800a07c:	2300      	movne	r3, #0
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a086:	f003 0308 	and.w	r3, r3, #8
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d102      	bne.n	800a094 <HAL_UART_IRQHandler+0x144>
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d031      	beq.n	800a0f8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 f86f 	bl	800a178 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	695b      	ldr	r3, [r3, #20]
 800a0a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0a4:	2b40      	cmp	r3, #64	; 0x40
 800a0a6:	d123      	bne.n	800a0f0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	695a      	ldr	r2, [r3, #20]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0b6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d013      	beq.n	800a0e8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0c4:	4a21      	ldr	r2, [pc, #132]	; (800a14c <HAL_UART_IRQHandler+0x1fc>)
 800a0c6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7fb faa5 	bl	800561c <HAL_DMA_Abort_IT>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d016      	beq.n	800a106 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a0e2:	4610      	mov	r0, r2
 800a0e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0e6:	e00e      	b.n	800a106 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 f83b 	bl	800a164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0ee:	e00a      	b.n	800a106 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 f837 	bl	800a164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0f6:	e006      	b.n	800a106 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 f833 	bl	800a164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2200      	movs	r2, #0
 800a102:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800a104:	e01e      	b.n	800a144 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a106:	bf00      	nop
    return;
 800a108:	e01c      	b.n	800a144 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a10a:	69fb      	ldr	r3, [r7, #28]
 800a10c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a110:	2b00      	cmp	r3, #0
 800a112:	d008      	beq.n	800a126 <HAL_UART_IRQHandler+0x1d6>
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d003      	beq.n	800a126 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 f85c 	bl	800a1dc <UART_Transmit_IT>
    return;
 800a124:	e00f      	b.n	800a146 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a126:	69fb      	ldr	r3, [r7, #28]
 800a128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00a      	beq.n	800a146 <HAL_UART_IRQHandler+0x1f6>
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a136:	2b00      	cmp	r3, #0
 800a138:	d005      	beq.n	800a146 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 f8a4 	bl	800a288 <UART_EndTransmit_IT>
    return;
 800a140:	bf00      	nop
 800a142:	e000      	b.n	800a146 <HAL_UART_IRQHandler+0x1f6>
    return;
 800a144:	bf00      	nop
  }
}
 800a146:	3720      	adds	r7, #32
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	0800a1b5 	.word	0x0800a1b5

0800a150 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a158:	bf00      	nop
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a164:	b480      	push	{r7}
 800a166:	b083      	sub	sp, #12
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a16c:	bf00      	nop
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	68da      	ldr	r2, [r3, #12]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a18e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	695a      	ldr	r2, [r3, #20]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f022 0201 	bic.w	r2, r2, #1
 800a19e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2220      	movs	r2, #32
 800a1a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a1a8:	bf00      	nop
 800a1aa:	370c      	adds	r7, #12
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f7ff ffc8 	bl	800a164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1d4:	bf00      	nop
 800a1d6:	3710      	adds	r7, #16
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	2b21      	cmp	r3, #33	; 0x21
 800a1ee:	d144      	bne.n	800a27a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1f8:	d11a      	bne.n	800a230 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6a1b      	ldr	r3, [r3, #32]
 800a1fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	881b      	ldrh	r3, [r3, #0]
 800a204:	461a      	mov	r2, r3
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a20e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	691b      	ldr	r3, [r3, #16]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d105      	bne.n	800a224 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6a1b      	ldr	r3, [r3, #32]
 800a21c:	1c9a      	adds	r2, r3, #2
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	621a      	str	r2, [r3, #32]
 800a222:	e00e      	b.n	800a242 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6a1b      	ldr	r3, [r3, #32]
 800a228:	1c5a      	adds	r2, r3, #1
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	621a      	str	r2, [r3, #32]
 800a22e:	e008      	b.n	800a242 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6a1b      	ldr	r3, [r3, #32]
 800a234:	1c59      	adds	r1, r3, #1
 800a236:	687a      	ldr	r2, [r7, #4]
 800a238:	6211      	str	r1, [r2, #32]
 800a23a:	781a      	ldrb	r2, [r3, #0]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a246:	b29b      	uxth	r3, r3
 800a248:	3b01      	subs	r3, #1
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	4619      	mov	r1, r3
 800a250:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a252:	2b00      	cmp	r3, #0
 800a254:	d10f      	bne.n	800a276 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	68da      	ldr	r2, [r3, #12]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a264:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	68da      	ldr	r2, [r3, #12]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a274:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a276:	2300      	movs	r3, #0
 800a278:	e000      	b.n	800a27c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a27a:	2302      	movs	r3, #2
  }
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3714      	adds	r7, #20
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	68da      	ldr	r2, [r3, #12]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a29e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2220      	movs	r2, #32
 800a2a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f7ff ff51 	bl	800a150 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3708      	adds	r7, #8
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	2b22      	cmp	r3, #34	; 0x22
 800a2ca:	d171      	bne.n	800a3b0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2d4:	d123      	bne.n	800a31e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2da:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d10e      	bne.n	800a302 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2f0:	b29a      	uxth	r2, r3
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2fa:	1c9a      	adds	r2, r3, #2
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	629a      	str	r2, [r3, #40]	; 0x28
 800a300:	e029      	b.n	800a356 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	b29b      	uxth	r3, r3
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	b29a      	uxth	r2, r3
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a316:	1c5a      	adds	r2, r3, #1
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	629a      	str	r2, [r3, #40]	; 0x28
 800a31c:	e01b      	b.n	800a356 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	691b      	ldr	r3, [r3, #16]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d10a      	bne.n	800a33c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	6858      	ldr	r0, [r3, #4]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a330:	1c59      	adds	r1, r3, #1
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	6291      	str	r1, [r2, #40]	; 0x28
 800a336:	b2c2      	uxtb	r2, r0
 800a338:	701a      	strb	r2, [r3, #0]
 800a33a:	e00c      	b.n	800a356 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	b2da      	uxtb	r2, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a348:	1c58      	adds	r0, r3, #1
 800a34a:	6879      	ldr	r1, [r7, #4]
 800a34c:	6288      	str	r0, [r1, #40]	; 0x28
 800a34e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a352:	b2d2      	uxtb	r2, r2
 800a354:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	3b01      	subs	r3, #1
 800a35e:	b29b      	uxth	r3, r3
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	4619      	mov	r1, r3
 800a364:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a366:	2b00      	cmp	r3, #0
 800a368:	d120      	bne.n	800a3ac <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	68da      	ldr	r2, [r3, #12]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f022 0220 	bic.w	r2, r2, #32
 800a378:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	68da      	ldr	r2, [r3, #12]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a388:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	695a      	ldr	r2, [r3, #20]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f022 0201 	bic.w	r2, r2, #1
 800a398:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2220      	movs	r2, #32
 800a39e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f7f9 fb5c 	bl	8003a60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	e002      	b.n	800a3b2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	e000      	b.n	800a3b2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800a3b0:	2302      	movs	r3, #2
  }
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3710      	adds	r7, #16
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
	...

0800a3bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c0:	b085      	sub	sp, #20
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	691b      	ldr	r3, [r3, #16]
 800a3cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	68da      	ldr	r2, [r3, #12]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	430a      	orrs	r2, r1
 800a3da:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	689a      	ldr	r2, [r3, #8]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	691b      	ldr	r3, [r3, #16]
 800a3e4:	431a      	orrs	r2, r3
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	695b      	ldr	r3, [r3, #20]
 800a3ea:	431a      	orrs	r2, r3
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	69db      	ldr	r3, [r3, #28]
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	68db      	ldr	r3, [r3, #12]
 800a3fa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a3fe:	f023 030c 	bic.w	r3, r3, #12
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	6812      	ldr	r2, [r2, #0]
 800a406:	68f9      	ldr	r1, [r7, #12]
 800a408:	430b      	orrs	r3, r1
 800a40a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	695b      	ldr	r3, [r3, #20]
 800a412:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	699a      	ldr	r2, [r3, #24]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	430a      	orrs	r2, r1
 800a420:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	69db      	ldr	r3, [r3, #28]
 800a426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a42a:	f040 818b 	bne.w	800a744 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4ac1      	ldr	r2, [pc, #772]	; (800a738 <UART_SetConfig+0x37c>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d005      	beq.n	800a444 <UART_SetConfig+0x88>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4abf      	ldr	r2, [pc, #764]	; (800a73c <UART_SetConfig+0x380>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	f040 80bd 	bne.w	800a5be <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a444:	f7fe fc94 	bl	8008d70 <HAL_RCC_GetPCLK2Freq>
 800a448:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	461d      	mov	r5, r3
 800a44e:	f04f 0600 	mov.w	r6, #0
 800a452:	46a8      	mov	r8, r5
 800a454:	46b1      	mov	r9, r6
 800a456:	eb18 0308 	adds.w	r3, r8, r8
 800a45a:	eb49 0409 	adc.w	r4, r9, r9
 800a45e:	4698      	mov	r8, r3
 800a460:	46a1      	mov	r9, r4
 800a462:	eb18 0805 	adds.w	r8, r8, r5
 800a466:	eb49 0906 	adc.w	r9, r9, r6
 800a46a:	f04f 0100 	mov.w	r1, #0
 800a46e:	f04f 0200 	mov.w	r2, #0
 800a472:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a476:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a47a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a47e:	4688      	mov	r8, r1
 800a480:	4691      	mov	r9, r2
 800a482:	eb18 0005 	adds.w	r0, r8, r5
 800a486:	eb49 0106 	adc.w	r1, r9, r6
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	461d      	mov	r5, r3
 800a490:	f04f 0600 	mov.w	r6, #0
 800a494:	196b      	adds	r3, r5, r5
 800a496:	eb46 0406 	adc.w	r4, r6, r6
 800a49a:	461a      	mov	r2, r3
 800a49c:	4623      	mov	r3, r4
 800a49e:	f7f6 fba3 	bl	8000be8 <__aeabi_uldivmod>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	460c      	mov	r4, r1
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	4ba5      	ldr	r3, [pc, #660]	; (800a740 <UART_SetConfig+0x384>)
 800a4aa:	fba3 2302 	umull	r2, r3, r3, r2
 800a4ae:	095b      	lsrs	r3, r3, #5
 800a4b0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	461d      	mov	r5, r3
 800a4b8:	f04f 0600 	mov.w	r6, #0
 800a4bc:	46a9      	mov	r9, r5
 800a4be:	46b2      	mov	sl, r6
 800a4c0:	eb19 0309 	adds.w	r3, r9, r9
 800a4c4:	eb4a 040a 	adc.w	r4, sl, sl
 800a4c8:	4699      	mov	r9, r3
 800a4ca:	46a2      	mov	sl, r4
 800a4cc:	eb19 0905 	adds.w	r9, r9, r5
 800a4d0:	eb4a 0a06 	adc.w	sl, sl, r6
 800a4d4:	f04f 0100 	mov.w	r1, #0
 800a4d8:	f04f 0200 	mov.w	r2, #0
 800a4dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a4e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a4e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a4e8:	4689      	mov	r9, r1
 800a4ea:	4692      	mov	sl, r2
 800a4ec:	eb19 0005 	adds.w	r0, r9, r5
 800a4f0:	eb4a 0106 	adc.w	r1, sl, r6
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	461d      	mov	r5, r3
 800a4fa:	f04f 0600 	mov.w	r6, #0
 800a4fe:	196b      	adds	r3, r5, r5
 800a500:	eb46 0406 	adc.w	r4, r6, r6
 800a504:	461a      	mov	r2, r3
 800a506:	4623      	mov	r3, r4
 800a508:	f7f6 fb6e 	bl	8000be8 <__aeabi_uldivmod>
 800a50c:	4603      	mov	r3, r0
 800a50e:	460c      	mov	r4, r1
 800a510:	461a      	mov	r2, r3
 800a512:	4b8b      	ldr	r3, [pc, #556]	; (800a740 <UART_SetConfig+0x384>)
 800a514:	fba3 1302 	umull	r1, r3, r3, r2
 800a518:	095b      	lsrs	r3, r3, #5
 800a51a:	2164      	movs	r1, #100	; 0x64
 800a51c:	fb01 f303 	mul.w	r3, r1, r3
 800a520:	1ad3      	subs	r3, r2, r3
 800a522:	00db      	lsls	r3, r3, #3
 800a524:	3332      	adds	r3, #50	; 0x32
 800a526:	4a86      	ldr	r2, [pc, #536]	; (800a740 <UART_SetConfig+0x384>)
 800a528:	fba2 2303 	umull	r2, r3, r2, r3
 800a52c:	095b      	lsrs	r3, r3, #5
 800a52e:	005b      	lsls	r3, r3, #1
 800a530:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a534:	4498      	add	r8, r3
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	461d      	mov	r5, r3
 800a53a:	f04f 0600 	mov.w	r6, #0
 800a53e:	46a9      	mov	r9, r5
 800a540:	46b2      	mov	sl, r6
 800a542:	eb19 0309 	adds.w	r3, r9, r9
 800a546:	eb4a 040a 	adc.w	r4, sl, sl
 800a54a:	4699      	mov	r9, r3
 800a54c:	46a2      	mov	sl, r4
 800a54e:	eb19 0905 	adds.w	r9, r9, r5
 800a552:	eb4a 0a06 	adc.w	sl, sl, r6
 800a556:	f04f 0100 	mov.w	r1, #0
 800a55a:	f04f 0200 	mov.w	r2, #0
 800a55e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a562:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a566:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a56a:	4689      	mov	r9, r1
 800a56c:	4692      	mov	sl, r2
 800a56e:	eb19 0005 	adds.w	r0, r9, r5
 800a572:	eb4a 0106 	adc.w	r1, sl, r6
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	461d      	mov	r5, r3
 800a57c:	f04f 0600 	mov.w	r6, #0
 800a580:	196b      	adds	r3, r5, r5
 800a582:	eb46 0406 	adc.w	r4, r6, r6
 800a586:	461a      	mov	r2, r3
 800a588:	4623      	mov	r3, r4
 800a58a:	f7f6 fb2d 	bl	8000be8 <__aeabi_uldivmod>
 800a58e:	4603      	mov	r3, r0
 800a590:	460c      	mov	r4, r1
 800a592:	461a      	mov	r2, r3
 800a594:	4b6a      	ldr	r3, [pc, #424]	; (800a740 <UART_SetConfig+0x384>)
 800a596:	fba3 1302 	umull	r1, r3, r3, r2
 800a59a:	095b      	lsrs	r3, r3, #5
 800a59c:	2164      	movs	r1, #100	; 0x64
 800a59e:	fb01 f303 	mul.w	r3, r1, r3
 800a5a2:	1ad3      	subs	r3, r2, r3
 800a5a4:	00db      	lsls	r3, r3, #3
 800a5a6:	3332      	adds	r3, #50	; 0x32
 800a5a8:	4a65      	ldr	r2, [pc, #404]	; (800a740 <UART_SetConfig+0x384>)
 800a5aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a5ae:	095b      	lsrs	r3, r3, #5
 800a5b0:	f003 0207 	and.w	r2, r3, #7
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4442      	add	r2, r8
 800a5ba:	609a      	str	r2, [r3, #8]
 800a5bc:	e26f      	b.n	800aa9e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a5be:	f7fe fbc3 	bl	8008d48 <HAL_RCC_GetPCLK1Freq>
 800a5c2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	461d      	mov	r5, r3
 800a5c8:	f04f 0600 	mov.w	r6, #0
 800a5cc:	46a8      	mov	r8, r5
 800a5ce:	46b1      	mov	r9, r6
 800a5d0:	eb18 0308 	adds.w	r3, r8, r8
 800a5d4:	eb49 0409 	adc.w	r4, r9, r9
 800a5d8:	4698      	mov	r8, r3
 800a5da:	46a1      	mov	r9, r4
 800a5dc:	eb18 0805 	adds.w	r8, r8, r5
 800a5e0:	eb49 0906 	adc.w	r9, r9, r6
 800a5e4:	f04f 0100 	mov.w	r1, #0
 800a5e8:	f04f 0200 	mov.w	r2, #0
 800a5ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a5f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a5f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a5f8:	4688      	mov	r8, r1
 800a5fa:	4691      	mov	r9, r2
 800a5fc:	eb18 0005 	adds.w	r0, r8, r5
 800a600:	eb49 0106 	adc.w	r1, r9, r6
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	461d      	mov	r5, r3
 800a60a:	f04f 0600 	mov.w	r6, #0
 800a60e:	196b      	adds	r3, r5, r5
 800a610:	eb46 0406 	adc.w	r4, r6, r6
 800a614:	461a      	mov	r2, r3
 800a616:	4623      	mov	r3, r4
 800a618:	f7f6 fae6 	bl	8000be8 <__aeabi_uldivmod>
 800a61c:	4603      	mov	r3, r0
 800a61e:	460c      	mov	r4, r1
 800a620:	461a      	mov	r2, r3
 800a622:	4b47      	ldr	r3, [pc, #284]	; (800a740 <UART_SetConfig+0x384>)
 800a624:	fba3 2302 	umull	r2, r3, r3, r2
 800a628:	095b      	lsrs	r3, r3, #5
 800a62a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	461d      	mov	r5, r3
 800a632:	f04f 0600 	mov.w	r6, #0
 800a636:	46a9      	mov	r9, r5
 800a638:	46b2      	mov	sl, r6
 800a63a:	eb19 0309 	adds.w	r3, r9, r9
 800a63e:	eb4a 040a 	adc.w	r4, sl, sl
 800a642:	4699      	mov	r9, r3
 800a644:	46a2      	mov	sl, r4
 800a646:	eb19 0905 	adds.w	r9, r9, r5
 800a64a:	eb4a 0a06 	adc.w	sl, sl, r6
 800a64e:	f04f 0100 	mov.w	r1, #0
 800a652:	f04f 0200 	mov.w	r2, #0
 800a656:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a65a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a65e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a662:	4689      	mov	r9, r1
 800a664:	4692      	mov	sl, r2
 800a666:	eb19 0005 	adds.w	r0, r9, r5
 800a66a:	eb4a 0106 	adc.w	r1, sl, r6
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	461d      	mov	r5, r3
 800a674:	f04f 0600 	mov.w	r6, #0
 800a678:	196b      	adds	r3, r5, r5
 800a67a:	eb46 0406 	adc.w	r4, r6, r6
 800a67e:	461a      	mov	r2, r3
 800a680:	4623      	mov	r3, r4
 800a682:	f7f6 fab1 	bl	8000be8 <__aeabi_uldivmod>
 800a686:	4603      	mov	r3, r0
 800a688:	460c      	mov	r4, r1
 800a68a:	461a      	mov	r2, r3
 800a68c:	4b2c      	ldr	r3, [pc, #176]	; (800a740 <UART_SetConfig+0x384>)
 800a68e:	fba3 1302 	umull	r1, r3, r3, r2
 800a692:	095b      	lsrs	r3, r3, #5
 800a694:	2164      	movs	r1, #100	; 0x64
 800a696:	fb01 f303 	mul.w	r3, r1, r3
 800a69a:	1ad3      	subs	r3, r2, r3
 800a69c:	00db      	lsls	r3, r3, #3
 800a69e:	3332      	adds	r3, #50	; 0x32
 800a6a0:	4a27      	ldr	r2, [pc, #156]	; (800a740 <UART_SetConfig+0x384>)
 800a6a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a6a6:	095b      	lsrs	r3, r3, #5
 800a6a8:	005b      	lsls	r3, r3, #1
 800a6aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a6ae:	4498      	add	r8, r3
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	461d      	mov	r5, r3
 800a6b4:	f04f 0600 	mov.w	r6, #0
 800a6b8:	46a9      	mov	r9, r5
 800a6ba:	46b2      	mov	sl, r6
 800a6bc:	eb19 0309 	adds.w	r3, r9, r9
 800a6c0:	eb4a 040a 	adc.w	r4, sl, sl
 800a6c4:	4699      	mov	r9, r3
 800a6c6:	46a2      	mov	sl, r4
 800a6c8:	eb19 0905 	adds.w	r9, r9, r5
 800a6cc:	eb4a 0a06 	adc.w	sl, sl, r6
 800a6d0:	f04f 0100 	mov.w	r1, #0
 800a6d4:	f04f 0200 	mov.w	r2, #0
 800a6d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a6dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a6e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a6e4:	4689      	mov	r9, r1
 800a6e6:	4692      	mov	sl, r2
 800a6e8:	eb19 0005 	adds.w	r0, r9, r5
 800a6ec:	eb4a 0106 	adc.w	r1, sl, r6
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	461d      	mov	r5, r3
 800a6f6:	f04f 0600 	mov.w	r6, #0
 800a6fa:	196b      	adds	r3, r5, r5
 800a6fc:	eb46 0406 	adc.w	r4, r6, r6
 800a700:	461a      	mov	r2, r3
 800a702:	4623      	mov	r3, r4
 800a704:	f7f6 fa70 	bl	8000be8 <__aeabi_uldivmod>
 800a708:	4603      	mov	r3, r0
 800a70a:	460c      	mov	r4, r1
 800a70c:	461a      	mov	r2, r3
 800a70e:	4b0c      	ldr	r3, [pc, #48]	; (800a740 <UART_SetConfig+0x384>)
 800a710:	fba3 1302 	umull	r1, r3, r3, r2
 800a714:	095b      	lsrs	r3, r3, #5
 800a716:	2164      	movs	r1, #100	; 0x64
 800a718:	fb01 f303 	mul.w	r3, r1, r3
 800a71c:	1ad3      	subs	r3, r2, r3
 800a71e:	00db      	lsls	r3, r3, #3
 800a720:	3332      	adds	r3, #50	; 0x32
 800a722:	4a07      	ldr	r2, [pc, #28]	; (800a740 <UART_SetConfig+0x384>)
 800a724:	fba2 2303 	umull	r2, r3, r2, r3
 800a728:	095b      	lsrs	r3, r3, #5
 800a72a:	f003 0207 	and.w	r2, r3, #7
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4442      	add	r2, r8
 800a734:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800a736:	e1b2      	b.n	800aa9e <UART_SetConfig+0x6e2>
 800a738:	40011000 	.word	0x40011000
 800a73c:	40011400 	.word	0x40011400
 800a740:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4ad7      	ldr	r2, [pc, #860]	; (800aaa8 <UART_SetConfig+0x6ec>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d005      	beq.n	800a75a <UART_SetConfig+0x39e>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4ad6      	ldr	r2, [pc, #856]	; (800aaac <UART_SetConfig+0x6f0>)
 800a754:	4293      	cmp	r3, r2
 800a756:	f040 80d1 	bne.w	800a8fc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800a75a:	f7fe fb09 	bl	8008d70 <HAL_RCC_GetPCLK2Freq>
 800a75e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	469a      	mov	sl, r3
 800a764:	f04f 0b00 	mov.w	fp, #0
 800a768:	46d0      	mov	r8, sl
 800a76a:	46d9      	mov	r9, fp
 800a76c:	eb18 0308 	adds.w	r3, r8, r8
 800a770:	eb49 0409 	adc.w	r4, r9, r9
 800a774:	4698      	mov	r8, r3
 800a776:	46a1      	mov	r9, r4
 800a778:	eb18 080a 	adds.w	r8, r8, sl
 800a77c:	eb49 090b 	adc.w	r9, r9, fp
 800a780:	f04f 0100 	mov.w	r1, #0
 800a784:	f04f 0200 	mov.w	r2, #0
 800a788:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a78c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a790:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a794:	4688      	mov	r8, r1
 800a796:	4691      	mov	r9, r2
 800a798:	eb1a 0508 	adds.w	r5, sl, r8
 800a79c:	eb4b 0609 	adc.w	r6, fp, r9
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	f04f 0200 	mov.w	r2, #0
 800a7aa:	f04f 0300 	mov.w	r3, #0
 800a7ae:	f04f 0400 	mov.w	r4, #0
 800a7b2:	0094      	lsls	r4, r2, #2
 800a7b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a7b8:	008b      	lsls	r3, r1, #2
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	4623      	mov	r3, r4
 800a7be:	4628      	mov	r0, r5
 800a7c0:	4631      	mov	r1, r6
 800a7c2:	f7f6 fa11 	bl	8000be8 <__aeabi_uldivmod>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	460c      	mov	r4, r1
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	4bb8      	ldr	r3, [pc, #736]	; (800aab0 <UART_SetConfig+0x6f4>)
 800a7ce:	fba3 2302 	umull	r2, r3, r3, r2
 800a7d2:	095b      	lsrs	r3, r3, #5
 800a7d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	469b      	mov	fp, r3
 800a7dc:	f04f 0c00 	mov.w	ip, #0
 800a7e0:	46d9      	mov	r9, fp
 800a7e2:	46e2      	mov	sl, ip
 800a7e4:	eb19 0309 	adds.w	r3, r9, r9
 800a7e8:	eb4a 040a 	adc.w	r4, sl, sl
 800a7ec:	4699      	mov	r9, r3
 800a7ee:	46a2      	mov	sl, r4
 800a7f0:	eb19 090b 	adds.w	r9, r9, fp
 800a7f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a7f8:	f04f 0100 	mov.w	r1, #0
 800a7fc:	f04f 0200 	mov.w	r2, #0
 800a800:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a804:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a808:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a80c:	4689      	mov	r9, r1
 800a80e:	4692      	mov	sl, r2
 800a810:	eb1b 0509 	adds.w	r5, fp, r9
 800a814:	eb4c 060a 	adc.w	r6, ip, sl
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	4619      	mov	r1, r3
 800a81e:	f04f 0200 	mov.w	r2, #0
 800a822:	f04f 0300 	mov.w	r3, #0
 800a826:	f04f 0400 	mov.w	r4, #0
 800a82a:	0094      	lsls	r4, r2, #2
 800a82c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a830:	008b      	lsls	r3, r1, #2
 800a832:	461a      	mov	r2, r3
 800a834:	4623      	mov	r3, r4
 800a836:	4628      	mov	r0, r5
 800a838:	4631      	mov	r1, r6
 800a83a:	f7f6 f9d5 	bl	8000be8 <__aeabi_uldivmod>
 800a83e:	4603      	mov	r3, r0
 800a840:	460c      	mov	r4, r1
 800a842:	461a      	mov	r2, r3
 800a844:	4b9a      	ldr	r3, [pc, #616]	; (800aab0 <UART_SetConfig+0x6f4>)
 800a846:	fba3 1302 	umull	r1, r3, r3, r2
 800a84a:	095b      	lsrs	r3, r3, #5
 800a84c:	2164      	movs	r1, #100	; 0x64
 800a84e:	fb01 f303 	mul.w	r3, r1, r3
 800a852:	1ad3      	subs	r3, r2, r3
 800a854:	011b      	lsls	r3, r3, #4
 800a856:	3332      	adds	r3, #50	; 0x32
 800a858:	4a95      	ldr	r2, [pc, #596]	; (800aab0 <UART_SetConfig+0x6f4>)
 800a85a:	fba2 2303 	umull	r2, r3, r2, r3
 800a85e:	095b      	lsrs	r3, r3, #5
 800a860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a864:	4498      	add	r8, r3
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	469b      	mov	fp, r3
 800a86a:	f04f 0c00 	mov.w	ip, #0
 800a86e:	46d9      	mov	r9, fp
 800a870:	46e2      	mov	sl, ip
 800a872:	eb19 0309 	adds.w	r3, r9, r9
 800a876:	eb4a 040a 	adc.w	r4, sl, sl
 800a87a:	4699      	mov	r9, r3
 800a87c:	46a2      	mov	sl, r4
 800a87e:	eb19 090b 	adds.w	r9, r9, fp
 800a882:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a886:	f04f 0100 	mov.w	r1, #0
 800a88a:	f04f 0200 	mov.w	r2, #0
 800a88e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a892:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a896:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a89a:	4689      	mov	r9, r1
 800a89c:	4692      	mov	sl, r2
 800a89e:	eb1b 0509 	adds.w	r5, fp, r9
 800a8a2:	eb4c 060a 	adc.w	r6, ip, sl
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	f04f 0200 	mov.w	r2, #0
 800a8b0:	f04f 0300 	mov.w	r3, #0
 800a8b4:	f04f 0400 	mov.w	r4, #0
 800a8b8:	0094      	lsls	r4, r2, #2
 800a8ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a8be:	008b      	lsls	r3, r1, #2
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	4623      	mov	r3, r4
 800a8c4:	4628      	mov	r0, r5
 800a8c6:	4631      	mov	r1, r6
 800a8c8:	f7f6 f98e 	bl	8000be8 <__aeabi_uldivmod>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	460c      	mov	r4, r1
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	4b77      	ldr	r3, [pc, #476]	; (800aab0 <UART_SetConfig+0x6f4>)
 800a8d4:	fba3 1302 	umull	r1, r3, r3, r2
 800a8d8:	095b      	lsrs	r3, r3, #5
 800a8da:	2164      	movs	r1, #100	; 0x64
 800a8dc:	fb01 f303 	mul.w	r3, r1, r3
 800a8e0:	1ad3      	subs	r3, r2, r3
 800a8e2:	011b      	lsls	r3, r3, #4
 800a8e4:	3332      	adds	r3, #50	; 0x32
 800a8e6:	4a72      	ldr	r2, [pc, #456]	; (800aab0 <UART_SetConfig+0x6f4>)
 800a8e8:	fba2 2303 	umull	r2, r3, r2, r3
 800a8ec:	095b      	lsrs	r3, r3, #5
 800a8ee:	f003 020f 	and.w	r2, r3, #15
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4442      	add	r2, r8
 800a8f8:	609a      	str	r2, [r3, #8]
 800a8fa:	e0d0      	b.n	800aa9e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800a8fc:	f7fe fa24 	bl	8008d48 <HAL_RCC_GetPCLK1Freq>
 800a900:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	469a      	mov	sl, r3
 800a906:	f04f 0b00 	mov.w	fp, #0
 800a90a:	46d0      	mov	r8, sl
 800a90c:	46d9      	mov	r9, fp
 800a90e:	eb18 0308 	adds.w	r3, r8, r8
 800a912:	eb49 0409 	adc.w	r4, r9, r9
 800a916:	4698      	mov	r8, r3
 800a918:	46a1      	mov	r9, r4
 800a91a:	eb18 080a 	adds.w	r8, r8, sl
 800a91e:	eb49 090b 	adc.w	r9, r9, fp
 800a922:	f04f 0100 	mov.w	r1, #0
 800a926:	f04f 0200 	mov.w	r2, #0
 800a92a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a92e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a932:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a936:	4688      	mov	r8, r1
 800a938:	4691      	mov	r9, r2
 800a93a:	eb1a 0508 	adds.w	r5, sl, r8
 800a93e:	eb4b 0609 	adc.w	r6, fp, r9
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	4619      	mov	r1, r3
 800a948:	f04f 0200 	mov.w	r2, #0
 800a94c:	f04f 0300 	mov.w	r3, #0
 800a950:	f04f 0400 	mov.w	r4, #0
 800a954:	0094      	lsls	r4, r2, #2
 800a956:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a95a:	008b      	lsls	r3, r1, #2
 800a95c:	461a      	mov	r2, r3
 800a95e:	4623      	mov	r3, r4
 800a960:	4628      	mov	r0, r5
 800a962:	4631      	mov	r1, r6
 800a964:	f7f6 f940 	bl	8000be8 <__aeabi_uldivmod>
 800a968:	4603      	mov	r3, r0
 800a96a:	460c      	mov	r4, r1
 800a96c:	461a      	mov	r2, r3
 800a96e:	4b50      	ldr	r3, [pc, #320]	; (800aab0 <UART_SetConfig+0x6f4>)
 800a970:	fba3 2302 	umull	r2, r3, r3, r2
 800a974:	095b      	lsrs	r3, r3, #5
 800a976:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	469b      	mov	fp, r3
 800a97e:	f04f 0c00 	mov.w	ip, #0
 800a982:	46d9      	mov	r9, fp
 800a984:	46e2      	mov	sl, ip
 800a986:	eb19 0309 	adds.w	r3, r9, r9
 800a98a:	eb4a 040a 	adc.w	r4, sl, sl
 800a98e:	4699      	mov	r9, r3
 800a990:	46a2      	mov	sl, r4
 800a992:	eb19 090b 	adds.w	r9, r9, fp
 800a996:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a99a:	f04f 0100 	mov.w	r1, #0
 800a99e:	f04f 0200 	mov.w	r2, #0
 800a9a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a9a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a9aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a9ae:	4689      	mov	r9, r1
 800a9b0:	4692      	mov	sl, r2
 800a9b2:	eb1b 0509 	adds.w	r5, fp, r9
 800a9b6:	eb4c 060a 	adc.w	r6, ip, sl
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	4619      	mov	r1, r3
 800a9c0:	f04f 0200 	mov.w	r2, #0
 800a9c4:	f04f 0300 	mov.w	r3, #0
 800a9c8:	f04f 0400 	mov.w	r4, #0
 800a9cc:	0094      	lsls	r4, r2, #2
 800a9ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a9d2:	008b      	lsls	r3, r1, #2
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	4623      	mov	r3, r4
 800a9d8:	4628      	mov	r0, r5
 800a9da:	4631      	mov	r1, r6
 800a9dc:	f7f6 f904 	bl	8000be8 <__aeabi_uldivmod>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	460c      	mov	r4, r1
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	4b32      	ldr	r3, [pc, #200]	; (800aab0 <UART_SetConfig+0x6f4>)
 800a9e8:	fba3 1302 	umull	r1, r3, r3, r2
 800a9ec:	095b      	lsrs	r3, r3, #5
 800a9ee:	2164      	movs	r1, #100	; 0x64
 800a9f0:	fb01 f303 	mul.w	r3, r1, r3
 800a9f4:	1ad3      	subs	r3, r2, r3
 800a9f6:	011b      	lsls	r3, r3, #4
 800a9f8:	3332      	adds	r3, #50	; 0x32
 800a9fa:	4a2d      	ldr	r2, [pc, #180]	; (800aab0 <UART_SetConfig+0x6f4>)
 800a9fc:	fba2 2303 	umull	r2, r3, r2, r3
 800aa00:	095b      	lsrs	r3, r3, #5
 800aa02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa06:	4498      	add	r8, r3
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	469b      	mov	fp, r3
 800aa0c:	f04f 0c00 	mov.w	ip, #0
 800aa10:	46d9      	mov	r9, fp
 800aa12:	46e2      	mov	sl, ip
 800aa14:	eb19 0309 	adds.w	r3, r9, r9
 800aa18:	eb4a 040a 	adc.w	r4, sl, sl
 800aa1c:	4699      	mov	r9, r3
 800aa1e:	46a2      	mov	sl, r4
 800aa20:	eb19 090b 	adds.w	r9, r9, fp
 800aa24:	eb4a 0a0c 	adc.w	sl, sl, ip
 800aa28:	f04f 0100 	mov.w	r1, #0
 800aa2c:	f04f 0200 	mov.w	r2, #0
 800aa30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aa38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aa3c:	4689      	mov	r9, r1
 800aa3e:	4692      	mov	sl, r2
 800aa40:	eb1b 0509 	adds.w	r5, fp, r9
 800aa44:	eb4c 060a 	adc.w	r6, ip, sl
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	f04f 0200 	mov.w	r2, #0
 800aa52:	f04f 0300 	mov.w	r3, #0
 800aa56:	f04f 0400 	mov.w	r4, #0
 800aa5a:	0094      	lsls	r4, r2, #2
 800aa5c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aa60:	008b      	lsls	r3, r1, #2
 800aa62:	461a      	mov	r2, r3
 800aa64:	4623      	mov	r3, r4
 800aa66:	4628      	mov	r0, r5
 800aa68:	4631      	mov	r1, r6
 800aa6a:	f7f6 f8bd 	bl	8000be8 <__aeabi_uldivmod>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	460c      	mov	r4, r1
 800aa72:	461a      	mov	r2, r3
 800aa74:	4b0e      	ldr	r3, [pc, #56]	; (800aab0 <UART_SetConfig+0x6f4>)
 800aa76:	fba3 1302 	umull	r1, r3, r3, r2
 800aa7a:	095b      	lsrs	r3, r3, #5
 800aa7c:	2164      	movs	r1, #100	; 0x64
 800aa7e:	fb01 f303 	mul.w	r3, r1, r3
 800aa82:	1ad3      	subs	r3, r2, r3
 800aa84:	011b      	lsls	r3, r3, #4
 800aa86:	3332      	adds	r3, #50	; 0x32
 800aa88:	4a09      	ldr	r2, [pc, #36]	; (800aab0 <UART_SetConfig+0x6f4>)
 800aa8a:	fba2 2303 	umull	r2, r3, r2, r3
 800aa8e:	095b      	lsrs	r3, r3, #5
 800aa90:	f003 020f 	and.w	r2, r3, #15
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4442      	add	r2, r8
 800aa9a:	609a      	str	r2, [r3, #8]
}
 800aa9c:	e7ff      	b.n	800aa9e <UART_SetConfig+0x6e2>
 800aa9e:	bf00      	nop
 800aaa0:	3714      	adds	r7, #20
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaa8:	40011000 	.word	0x40011000
 800aaac:	40011400 	.word	0x40011400
 800aab0:	51eb851f 	.word	0x51eb851f

0800aab4 <__errno>:
 800aab4:	4b01      	ldr	r3, [pc, #4]	; (800aabc <__errno+0x8>)
 800aab6:	6818      	ldr	r0, [r3, #0]
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop
 800aabc:	20000018 	.word	0x20000018

0800aac0 <__libc_init_array>:
 800aac0:	b570      	push	{r4, r5, r6, lr}
 800aac2:	4e0d      	ldr	r6, [pc, #52]	; (800aaf8 <__libc_init_array+0x38>)
 800aac4:	4c0d      	ldr	r4, [pc, #52]	; (800aafc <__libc_init_array+0x3c>)
 800aac6:	1ba4      	subs	r4, r4, r6
 800aac8:	10a4      	asrs	r4, r4, #2
 800aaca:	2500      	movs	r5, #0
 800aacc:	42a5      	cmp	r5, r4
 800aace:	d109      	bne.n	800aae4 <__libc_init_array+0x24>
 800aad0:	4e0b      	ldr	r6, [pc, #44]	; (800ab00 <__libc_init_array+0x40>)
 800aad2:	4c0c      	ldr	r4, [pc, #48]	; (800ab04 <__libc_init_array+0x44>)
 800aad4:	f002 fd18 	bl	800d508 <_init>
 800aad8:	1ba4      	subs	r4, r4, r6
 800aada:	10a4      	asrs	r4, r4, #2
 800aadc:	2500      	movs	r5, #0
 800aade:	42a5      	cmp	r5, r4
 800aae0:	d105      	bne.n	800aaee <__libc_init_array+0x2e>
 800aae2:	bd70      	pop	{r4, r5, r6, pc}
 800aae4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aae8:	4798      	blx	r3
 800aaea:	3501      	adds	r5, #1
 800aaec:	e7ee      	b.n	800aacc <__libc_init_array+0xc>
 800aaee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aaf2:	4798      	blx	r3
 800aaf4:	3501      	adds	r5, #1
 800aaf6:	e7f2      	b.n	800aade <__libc_init_array+0x1e>
 800aaf8:	0800d8f8 	.word	0x0800d8f8
 800aafc:	0800d8f8 	.word	0x0800d8f8
 800ab00:	0800d8f8 	.word	0x0800d8f8
 800ab04:	0800d8fc 	.word	0x0800d8fc

0800ab08 <malloc>:
 800ab08:	4b02      	ldr	r3, [pc, #8]	; (800ab14 <malloc+0xc>)
 800ab0a:	4601      	mov	r1, r0
 800ab0c:	6818      	ldr	r0, [r3, #0]
 800ab0e:	f000 b859 	b.w	800abc4 <_malloc_r>
 800ab12:	bf00      	nop
 800ab14:	20000018 	.word	0x20000018

0800ab18 <memset>:
 800ab18:	4402      	add	r2, r0
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d100      	bne.n	800ab22 <memset+0xa>
 800ab20:	4770      	bx	lr
 800ab22:	f803 1b01 	strb.w	r1, [r3], #1
 800ab26:	e7f9      	b.n	800ab1c <memset+0x4>

0800ab28 <_free_r>:
 800ab28:	b538      	push	{r3, r4, r5, lr}
 800ab2a:	4605      	mov	r5, r0
 800ab2c:	2900      	cmp	r1, #0
 800ab2e:	d045      	beq.n	800abbc <_free_r+0x94>
 800ab30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab34:	1f0c      	subs	r4, r1, #4
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	bfb8      	it	lt
 800ab3a:	18e4      	addlt	r4, r4, r3
 800ab3c:	f001 fc7f 	bl	800c43e <__malloc_lock>
 800ab40:	4a1f      	ldr	r2, [pc, #124]	; (800abc0 <_free_r+0x98>)
 800ab42:	6813      	ldr	r3, [r2, #0]
 800ab44:	4610      	mov	r0, r2
 800ab46:	b933      	cbnz	r3, 800ab56 <_free_r+0x2e>
 800ab48:	6063      	str	r3, [r4, #4]
 800ab4a:	6014      	str	r4, [r2, #0]
 800ab4c:	4628      	mov	r0, r5
 800ab4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab52:	f001 bc75 	b.w	800c440 <__malloc_unlock>
 800ab56:	42a3      	cmp	r3, r4
 800ab58:	d90c      	bls.n	800ab74 <_free_r+0x4c>
 800ab5a:	6821      	ldr	r1, [r4, #0]
 800ab5c:	1862      	adds	r2, r4, r1
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	bf04      	itt	eq
 800ab62:	681a      	ldreq	r2, [r3, #0]
 800ab64:	685b      	ldreq	r3, [r3, #4]
 800ab66:	6063      	str	r3, [r4, #4]
 800ab68:	bf04      	itt	eq
 800ab6a:	1852      	addeq	r2, r2, r1
 800ab6c:	6022      	streq	r2, [r4, #0]
 800ab6e:	6004      	str	r4, [r0, #0]
 800ab70:	e7ec      	b.n	800ab4c <_free_r+0x24>
 800ab72:	4613      	mov	r3, r2
 800ab74:	685a      	ldr	r2, [r3, #4]
 800ab76:	b10a      	cbz	r2, 800ab7c <_free_r+0x54>
 800ab78:	42a2      	cmp	r2, r4
 800ab7a:	d9fa      	bls.n	800ab72 <_free_r+0x4a>
 800ab7c:	6819      	ldr	r1, [r3, #0]
 800ab7e:	1858      	adds	r0, r3, r1
 800ab80:	42a0      	cmp	r0, r4
 800ab82:	d10b      	bne.n	800ab9c <_free_r+0x74>
 800ab84:	6820      	ldr	r0, [r4, #0]
 800ab86:	4401      	add	r1, r0
 800ab88:	1858      	adds	r0, r3, r1
 800ab8a:	4282      	cmp	r2, r0
 800ab8c:	6019      	str	r1, [r3, #0]
 800ab8e:	d1dd      	bne.n	800ab4c <_free_r+0x24>
 800ab90:	6810      	ldr	r0, [r2, #0]
 800ab92:	6852      	ldr	r2, [r2, #4]
 800ab94:	605a      	str	r2, [r3, #4]
 800ab96:	4401      	add	r1, r0
 800ab98:	6019      	str	r1, [r3, #0]
 800ab9a:	e7d7      	b.n	800ab4c <_free_r+0x24>
 800ab9c:	d902      	bls.n	800aba4 <_free_r+0x7c>
 800ab9e:	230c      	movs	r3, #12
 800aba0:	602b      	str	r3, [r5, #0]
 800aba2:	e7d3      	b.n	800ab4c <_free_r+0x24>
 800aba4:	6820      	ldr	r0, [r4, #0]
 800aba6:	1821      	adds	r1, r4, r0
 800aba8:	428a      	cmp	r2, r1
 800abaa:	bf04      	itt	eq
 800abac:	6811      	ldreq	r1, [r2, #0]
 800abae:	6852      	ldreq	r2, [r2, #4]
 800abb0:	6062      	str	r2, [r4, #4]
 800abb2:	bf04      	itt	eq
 800abb4:	1809      	addeq	r1, r1, r0
 800abb6:	6021      	streq	r1, [r4, #0]
 800abb8:	605c      	str	r4, [r3, #4]
 800abba:	e7c7      	b.n	800ab4c <_free_r+0x24>
 800abbc:	bd38      	pop	{r3, r4, r5, pc}
 800abbe:	bf00      	nop
 800abc0:	20000460 	.word	0x20000460

0800abc4 <_malloc_r>:
 800abc4:	b570      	push	{r4, r5, r6, lr}
 800abc6:	1ccd      	adds	r5, r1, #3
 800abc8:	f025 0503 	bic.w	r5, r5, #3
 800abcc:	3508      	adds	r5, #8
 800abce:	2d0c      	cmp	r5, #12
 800abd0:	bf38      	it	cc
 800abd2:	250c      	movcc	r5, #12
 800abd4:	2d00      	cmp	r5, #0
 800abd6:	4606      	mov	r6, r0
 800abd8:	db01      	blt.n	800abde <_malloc_r+0x1a>
 800abda:	42a9      	cmp	r1, r5
 800abdc:	d903      	bls.n	800abe6 <_malloc_r+0x22>
 800abde:	230c      	movs	r3, #12
 800abe0:	6033      	str	r3, [r6, #0]
 800abe2:	2000      	movs	r0, #0
 800abe4:	bd70      	pop	{r4, r5, r6, pc}
 800abe6:	f001 fc2a 	bl	800c43e <__malloc_lock>
 800abea:	4a21      	ldr	r2, [pc, #132]	; (800ac70 <_malloc_r+0xac>)
 800abec:	6814      	ldr	r4, [r2, #0]
 800abee:	4621      	mov	r1, r4
 800abf0:	b991      	cbnz	r1, 800ac18 <_malloc_r+0x54>
 800abf2:	4c20      	ldr	r4, [pc, #128]	; (800ac74 <_malloc_r+0xb0>)
 800abf4:	6823      	ldr	r3, [r4, #0]
 800abf6:	b91b      	cbnz	r3, 800ac00 <_malloc_r+0x3c>
 800abf8:	4630      	mov	r0, r6
 800abfa:	f000 fcb1 	bl	800b560 <_sbrk_r>
 800abfe:	6020      	str	r0, [r4, #0]
 800ac00:	4629      	mov	r1, r5
 800ac02:	4630      	mov	r0, r6
 800ac04:	f000 fcac 	bl	800b560 <_sbrk_r>
 800ac08:	1c43      	adds	r3, r0, #1
 800ac0a:	d124      	bne.n	800ac56 <_malloc_r+0x92>
 800ac0c:	230c      	movs	r3, #12
 800ac0e:	6033      	str	r3, [r6, #0]
 800ac10:	4630      	mov	r0, r6
 800ac12:	f001 fc15 	bl	800c440 <__malloc_unlock>
 800ac16:	e7e4      	b.n	800abe2 <_malloc_r+0x1e>
 800ac18:	680b      	ldr	r3, [r1, #0]
 800ac1a:	1b5b      	subs	r3, r3, r5
 800ac1c:	d418      	bmi.n	800ac50 <_malloc_r+0x8c>
 800ac1e:	2b0b      	cmp	r3, #11
 800ac20:	d90f      	bls.n	800ac42 <_malloc_r+0x7e>
 800ac22:	600b      	str	r3, [r1, #0]
 800ac24:	50cd      	str	r5, [r1, r3]
 800ac26:	18cc      	adds	r4, r1, r3
 800ac28:	4630      	mov	r0, r6
 800ac2a:	f001 fc09 	bl	800c440 <__malloc_unlock>
 800ac2e:	f104 000b 	add.w	r0, r4, #11
 800ac32:	1d23      	adds	r3, r4, #4
 800ac34:	f020 0007 	bic.w	r0, r0, #7
 800ac38:	1ac3      	subs	r3, r0, r3
 800ac3a:	d0d3      	beq.n	800abe4 <_malloc_r+0x20>
 800ac3c:	425a      	negs	r2, r3
 800ac3e:	50e2      	str	r2, [r4, r3]
 800ac40:	e7d0      	b.n	800abe4 <_malloc_r+0x20>
 800ac42:	428c      	cmp	r4, r1
 800ac44:	684b      	ldr	r3, [r1, #4]
 800ac46:	bf16      	itet	ne
 800ac48:	6063      	strne	r3, [r4, #4]
 800ac4a:	6013      	streq	r3, [r2, #0]
 800ac4c:	460c      	movne	r4, r1
 800ac4e:	e7eb      	b.n	800ac28 <_malloc_r+0x64>
 800ac50:	460c      	mov	r4, r1
 800ac52:	6849      	ldr	r1, [r1, #4]
 800ac54:	e7cc      	b.n	800abf0 <_malloc_r+0x2c>
 800ac56:	1cc4      	adds	r4, r0, #3
 800ac58:	f024 0403 	bic.w	r4, r4, #3
 800ac5c:	42a0      	cmp	r0, r4
 800ac5e:	d005      	beq.n	800ac6c <_malloc_r+0xa8>
 800ac60:	1a21      	subs	r1, r4, r0
 800ac62:	4630      	mov	r0, r6
 800ac64:	f000 fc7c 	bl	800b560 <_sbrk_r>
 800ac68:	3001      	adds	r0, #1
 800ac6a:	d0cf      	beq.n	800ac0c <_malloc_r+0x48>
 800ac6c:	6025      	str	r5, [r4, #0]
 800ac6e:	e7db      	b.n	800ac28 <_malloc_r+0x64>
 800ac70:	20000460 	.word	0x20000460
 800ac74:	20000464 	.word	0x20000464

0800ac78 <__cvt>:
 800ac78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac7c:	ec55 4b10 	vmov	r4, r5, d0
 800ac80:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800ac82:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ac86:	2d00      	cmp	r5, #0
 800ac88:	460e      	mov	r6, r1
 800ac8a:	4691      	mov	r9, r2
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	bfb8      	it	lt
 800ac90:	4622      	movlt	r2, r4
 800ac92:	462b      	mov	r3, r5
 800ac94:	f027 0720 	bic.w	r7, r7, #32
 800ac98:	bfbb      	ittet	lt
 800ac9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ac9e:	461d      	movlt	r5, r3
 800aca0:	2300      	movge	r3, #0
 800aca2:	232d      	movlt	r3, #45	; 0x2d
 800aca4:	bfb8      	it	lt
 800aca6:	4614      	movlt	r4, r2
 800aca8:	2f46      	cmp	r7, #70	; 0x46
 800acaa:	700b      	strb	r3, [r1, #0]
 800acac:	d004      	beq.n	800acb8 <__cvt+0x40>
 800acae:	2f45      	cmp	r7, #69	; 0x45
 800acb0:	d100      	bne.n	800acb4 <__cvt+0x3c>
 800acb2:	3601      	adds	r6, #1
 800acb4:	2102      	movs	r1, #2
 800acb6:	e000      	b.n	800acba <__cvt+0x42>
 800acb8:	2103      	movs	r1, #3
 800acba:	ab03      	add	r3, sp, #12
 800acbc:	9301      	str	r3, [sp, #4]
 800acbe:	ab02      	add	r3, sp, #8
 800acc0:	9300      	str	r3, [sp, #0]
 800acc2:	4632      	mov	r2, r6
 800acc4:	4653      	mov	r3, sl
 800acc6:	ec45 4b10 	vmov	d0, r4, r5
 800acca:	f000 fd1d 	bl	800b708 <_dtoa_r>
 800acce:	2f47      	cmp	r7, #71	; 0x47
 800acd0:	4680      	mov	r8, r0
 800acd2:	d102      	bne.n	800acda <__cvt+0x62>
 800acd4:	f019 0f01 	tst.w	r9, #1
 800acd8:	d026      	beq.n	800ad28 <__cvt+0xb0>
 800acda:	2f46      	cmp	r7, #70	; 0x46
 800acdc:	eb08 0906 	add.w	r9, r8, r6
 800ace0:	d111      	bne.n	800ad06 <__cvt+0x8e>
 800ace2:	f898 3000 	ldrb.w	r3, [r8]
 800ace6:	2b30      	cmp	r3, #48	; 0x30
 800ace8:	d10a      	bne.n	800ad00 <__cvt+0x88>
 800acea:	2200      	movs	r2, #0
 800acec:	2300      	movs	r3, #0
 800acee:	4620      	mov	r0, r4
 800acf0:	4629      	mov	r1, r5
 800acf2:	f7f5 fee9 	bl	8000ac8 <__aeabi_dcmpeq>
 800acf6:	b918      	cbnz	r0, 800ad00 <__cvt+0x88>
 800acf8:	f1c6 0601 	rsb	r6, r6, #1
 800acfc:	f8ca 6000 	str.w	r6, [sl]
 800ad00:	f8da 3000 	ldr.w	r3, [sl]
 800ad04:	4499      	add	r9, r3
 800ad06:	2200      	movs	r2, #0
 800ad08:	2300      	movs	r3, #0
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	4629      	mov	r1, r5
 800ad0e:	f7f5 fedb 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad12:	b938      	cbnz	r0, 800ad24 <__cvt+0xac>
 800ad14:	2230      	movs	r2, #48	; 0x30
 800ad16:	9b03      	ldr	r3, [sp, #12]
 800ad18:	454b      	cmp	r3, r9
 800ad1a:	d205      	bcs.n	800ad28 <__cvt+0xb0>
 800ad1c:	1c59      	adds	r1, r3, #1
 800ad1e:	9103      	str	r1, [sp, #12]
 800ad20:	701a      	strb	r2, [r3, #0]
 800ad22:	e7f8      	b.n	800ad16 <__cvt+0x9e>
 800ad24:	f8cd 900c 	str.w	r9, [sp, #12]
 800ad28:	9b03      	ldr	r3, [sp, #12]
 800ad2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad2c:	eba3 0308 	sub.w	r3, r3, r8
 800ad30:	4640      	mov	r0, r8
 800ad32:	6013      	str	r3, [r2, #0]
 800ad34:	b004      	add	sp, #16
 800ad36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ad3a <__exponent>:
 800ad3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad3c:	2900      	cmp	r1, #0
 800ad3e:	4604      	mov	r4, r0
 800ad40:	bfba      	itte	lt
 800ad42:	4249      	neglt	r1, r1
 800ad44:	232d      	movlt	r3, #45	; 0x2d
 800ad46:	232b      	movge	r3, #43	; 0x2b
 800ad48:	2909      	cmp	r1, #9
 800ad4a:	f804 2b02 	strb.w	r2, [r4], #2
 800ad4e:	7043      	strb	r3, [r0, #1]
 800ad50:	dd20      	ble.n	800ad94 <__exponent+0x5a>
 800ad52:	f10d 0307 	add.w	r3, sp, #7
 800ad56:	461f      	mov	r7, r3
 800ad58:	260a      	movs	r6, #10
 800ad5a:	fb91 f5f6 	sdiv	r5, r1, r6
 800ad5e:	fb06 1115 	mls	r1, r6, r5, r1
 800ad62:	3130      	adds	r1, #48	; 0x30
 800ad64:	2d09      	cmp	r5, #9
 800ad66:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ad6a:	f103 32ff 	add.w	r2, r3, #4294967295
 800ad6e:	4629      	mov	r1, r5
 800ad70:	dc09      	bgt.n	800ad86 <__exponent+0x4c>
 800ad72:	3130      	adds	r1, #48	; 0x30
 800ad74:	3b02      	subs	r3, #2
 800ad76:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ad7a:	42bb      	cmp	r3, r7
 800ad7c:	4622      	mov	r2, r4
 800ad7e:	d304      	bcc.n	800ad8a <__exponent+0x50>
 800ad80:	1a10      	subs	r0, r2, r0
 800ad82:	b003      	add	sp, #12
 800ad84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad86:	4613      	mov	r3, r2
 800ad88:	e7e7      	b.n	800ad5a <__exponent+0x20>
 800ad8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad8e:	f804 2b01 	strb.w	r2, [r4], #1
 800ad92:	e7f2      	b.n	800ad7a <__exponent+0x40>
 800ad94:	2330      	movs	r3, #48	; 0x30
 800ad96:	4419      	add	r1, r3
 800ad98:	7083      	strb	r3, [r0, #2]
 800ad9a:	1d02      	adds	r2, r0, #4
 800ad9c:	70c1      	strb	r1, [r0, #3]
 800ad9e:	e7ef      	b.n	800ad80 <__exponent+0x46>

0800ada0 <_printf_float>:
 800ada0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada4:	b08d      	sub	sp, #52	; 0x34
 800ada6:	460c      	mov	r4, r1
 800ada8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800adac:	4616      	mov	r6, r2
 800adae:	461f      	mov	r7, r3
 800adb0:	4605      	mov	r5, r0
 800adb2:	f001 fb2b 	bl	800c40c <_localeconv_r>
 800adb6:	6803      	ldr	r3, [r0, #0]
 800adb8:	9304      	str	r3, [sp, #16]
 800adba:	4618      	mov	r0, r3
 800adbc:	f7f5 fa08 	bl	80001d0 <strlen>
 800adc0:	2300      	movs	r3, #0
 800adc2:	930a      	str	r3, [sp, #40]	; 0x28
 800adc4:	f8d8 3000 	ldr.w	r3, [r8]
 800adc8:	9005      	str	r0, [sp, #20]
 800adca:	3307      	adds	r3, #7
 800adcc:	f023 0307 	bic.w	r3, r3, #7
 800add0:	f103 0208 	add.w	r2, r3, #8
 800add4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800add8:	f8d4 b000 	ldr.w	fp, [r4]
 800addc:	f8c8 2000 	str.w	r2, [r8]
 800ade0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ade8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800adec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800adf0:	9307      	str	r3, [sp, #28]
 800adf2:	f8cd 8018 	str.w	r8, [sp, #24]
 800adf6:	f04f 32ff 	mov.w	r2, #4294967295
 800adfa:	4ba7      	ldr	r3, [pc, #668]	; (800b098 <_printf_float+0x2f8>)
 800adfc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae00:	f7f5 fe94 	bl	8000b2c <__aeabi_dcmpun>
 800ae04:	bb70      	cbnz	r0, 800ae64 <_printf_float+0xc4>
 800ae06:	f04f 32ff 	mov.w	r2, #4294967295
 800ae0a:	4ba3      	ldr	r3, [pc, #652]	; (800b098 <_printf_float+0x2f8>)
 800ae0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae10:	f7f5 fe6e 	bl	8000af0 <__aeabi_dcmple>
 800ae14:	bb30      	cbnz	r0, 800ae64 <_printf_float+0xc4>
 800ae16:	2200      	movs	r2, #0
 800ae18:	2300      	movs	r3, #0
 800ae1a:	4640      	mov	r0, r8
 800ae1c:	4649      	mov	r1, r9
 800ae1e:	f7f5 fe5d 	bl	8000adc <__aeabi_dcmplt>
 800ae22:	b110      	cbz	r0, 800ae2a <_printf_float+0x8a>
 800ae24:	232d      	movs	r3, #45	; 0x2d
 800ae26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae2a:	4a9c      	ldr	r2, [pc, #624]	; (800b09c <_printf_float+0x2fc>)
 800ae2c:	4b9c      	ldr	r3, [pc, #624]	; (800b0a0 <_printf_float+0x300>)
 800ae2e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ae32:	bf8c      	ite	hi
 800ae34:	4690      	movhi	r8, r2
 800ae36:	4698      	movls	r8, r3
 800ae38:	2303      	movs	r3, #3
 800ae3a:	f02b 0204 	bic.w	r2, fp, #4
 800ae3e:	6123      	str	r3, [r4, #16]
 800ae40:	6022      	str	r2, [r4, #0]
 800ae42:	f04f 0900 	mov.w	r9, #0
 800ae46:	9700      	str	r7, [sp, #0]
 800ae48:	4633      	mov	r3, r6
 800ae4a:	aa0b      	add	r2, sp, #44	; 0x2c
 800ae4c:	4621      	mov	r1, r4
 800ae4e:	4628      	mov	r0, r5
 800ae50:	f000 f9e6 	bl	800b220 <_printf_common>
 800ae54:	3001      	adds	r0, #1
 800ae56:	f040 808d 	bne.w	800af74 <_printf_float+0x1d4>
 800ae5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae5e:	b00d      	add	sp, #52	; 0x34
 800ae60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae64:	4642      	mov	r2, r8
 800ae66:	464b      	mov	r3, r9
 800ae68:	4640      	mov	r0, r8
 800ae6a:	4649      	mov	r1, r9
 800ae6c:	f7f5 fe5e 	bl	8000b2c <__aeabi_dcmpun>
 800ae70:	b110      	cbz	r0, 800ae78 <_printf_float+0xd8>
 800ae72:	4a8c      	ldr	r2, [pc, #560]	; (800b0a4 <_printf_float+0x304>)
 800ae74:	4b8c      	ldr	r3, [pc, #560]	; (800b0a8 <_printf_float+0x308>)
 800ae76:	e7da      	b.n	800ae2e <_printf_float+0x8e>
 800ae78:	6861      	ldr	r1, [r4, #4]
 800ae7a:	1c4b      	adds	r3, r1, #1
 800ae7c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800ae80:	a80a      	add	r0, sp, #40	; 0x28
 800ae82:	d13e      	bne.n	800af02 <_printf_float+0x162>
 800ae84:	2306      	movs	r3, #6
 800ae86:	6063      	str	r3, [r4, #4]
 800ae88:	2300      	movs	r3, #0
 800ae8a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ae8e:	ab09      	add	r3, sp, #36	; 0x24
 800ae90:	9300      	str	r3, [sp, #0]
 800ae92:	ec49 8b10 	vmov	d0, r8, r9
 800ae96:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ae9a:	6022      	str	r2, [r4, #0]
 800ae9c:	f8cd a004 	str.w	sl, [sp, #4]
 800aea0:	6861      	ldr	r1, [r4, #4]
 800aea2:	4628      	mov	r0, r5
 800aea4:	f7ff fee8 	bl	800ac78 <__cvt>
 800aea8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800aeac:	2b47      	cmp	r3, #71	; 0x47
 800aeae:	4680      	mov	r8, r0
 800aeb0:	d109      	bne.n	800aec6 <_printf_float+0x126>
 800aeb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeb4:	1cd8      	adds	r0, r3, #3
 800aeb6:	db02      	blt.n	800aebe <_printf_float+0x11e>
 800aeb8:	6862      	ldr	r2, [r4, #4]
 800aeba:	4293      	cmp	r3, r2
 800aebc:	dd47      	ble.n	800af4e <_printf_float+0x1ae>
 800aebe:	f1aa 0a02 	sub.w	sl, sl, #2
 800aec2:	fa5f fa8a 	uxtb.w	sl, sl
 800aec6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800aeca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aecc:	d824      	bhi.n	800af18 <_printf_float+0x178>
 800aece:	3901      	subs	r1, #1
 800aed0:	4652      	mov	r2, sl
 800aed2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800aed6:	9109      	str	r1, [sp, #36]	; 0x24
 800aed8:	f7ff ff2f 	bl	800ad3a <__exponent>
 800aedc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aede:	1813      	adds	r3, r2, r0
 800aee0:	2a01      	cmp	r2, #1
 800aee2:	4681      	mov	r9, r0
 800aee4:	6123      	str	r3, [r4, #16]
 800aee6:	dc02      	bgt.n	800aeee <_printf_float+0x14e>
 800aee8:	6822      	ldr	r2, [r4, #0]
 800aeea:	07d1      	lsls	r1, r2, #31
 800aeec:	d501      	bpl.n	800aef2 <_printf_float+0x152>
 800aeee:	3301      	adds	r3, #1
 800aef0:	6123      	str	r3, [r4, #16]
 800aef2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d0a5      	beq.n	800ae46 <_printf_float+0xa6>
 800aefa:	232d      	movs	r3, #45	; 0x2d
 800aefc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af00:	e7a1      	b.n	800ae46 <_printf_float+0xa6>
 800af02:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800af06:	f000 8177 	beq.w	800b1f8 <_printf_float+0x458>
 800af0a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800af0e:	d1bb      	bne.n	800ae88 <_printf_float+0xe8>
 800af10:	2900      	cmp	r1, #0
 800af12:	d1b9      	bne.n	800ae88 <_printf_float+0xe8>
 800af14:	2301      	movs	r3, #1
 800af16:	e7b6      	b.n	800ae86 <_printf_float+0xe6>
 800af18:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800af1c:	d119      	bne.n	800af52 <_printf_float+0x1b2>
 800af1e:	2900      	cmp	r1, #0
 800af20:	6863      	ldr	r3, [r4, #4]
 800af22:	dd0c      	ble.n	800af3e <_printf_float+0x19e>
 800af24:	6121      	str	r1, [r4, #16]
 800af26:	b913      	cbnz	r3, 800af2e <_printf_float+0x18e>
 800af28:	6822      	ldr	r2, [r4, #0]
 800af2a:	07d2      	lsls	r2, r2, #31
 800af2c:	d502      	bpl.n	800af34 <_printf_float+0x194>
 800af2e:	3301      	adds	r3, #1
 800af30:	440b      	add	r3, r1
 800af32:	6123      	str	r3, [r4, #16]
 800af34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af36:	65a3      	str	r3, [r4, #88]	; 0x58
 800af38:	f04f 0900 	mov.w	r9, #0
 800af3c:	e7d9      	b.n	800aef2 <_printf_float+0x152>
 800af3e:	b913      	cbnz	r3, 800af46 <_printf_float+0x1a6>
 800af40:	6822      	ldr	r2, [r4, #0]
 800af42:	07d0      	lsls	r0, r2, #31
 800af44:	d501      	bpl.n	800af4a <_printf_float+0x1aa>
 800af46:	3302      	adds	r3, #2
 800af48:	e7f3      	b.n	800af32 <_printf_float+0x192>
 800af4a:	2301      	movs	r3, #1
 800af4c:	e7f1      	b.n	800af32 <_printf_float+0x192>
 800af4e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800af52:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800af56:	4293      	cmp	r3, r2
 800af58:	db05      	blt.n	800af66 <_printf_float+0x1c6>
 800af5a:	6822      	ldr	r2, [r4, #0]
 800af5c:	6123      	str	r3, [r4, #16]
 800af5e:	07d1      	lsls	r1, r2, #31
 800af60:	d5e8      	bpl.n	800af34 <_printf_float+0x194>
 800af62:	3301      	adds	r3, #1
 800af64:	e7e5      	b.n	800af32 <_printf_float+0x192>
 800af66:	2b00      	cmp	r3, #0
 800af68:	bfd4      	ite	le
 800af6a:	f1c3 0302 	rsble	r3, r3, #2
 800af6e:	2301      	movgt	r3, #1
 800af70:	4413      	add	r3, r2
 800af72:	e7de      	b.n	800af32 <_printf_float+0x192>
 800af74:	6823      	ldr	r3, [r4, #0]
 800af76:	055a      	lsls	r2, r3, #21
 800af78:	d407      	bmi.n	800af8a <_printf_float+0x1ea>
 800af7a:	6923      	ldr	r3, [r4, #16]
 800af7c:	4642      	mov	r2, r8
 800af7e:	4631      	mov	r1, r6
 800af80:	4628      	mov	r0, r5
 800af82:	47b8      	blx	r7
 800af84:	3001      	adds	r0, #1
 800af86:	d12b      	bne.n	800afe0 <_printf_float+0x240>
 800af88:	e767      	b.n	800ae5a <_printf_float+0xba>
 800af8a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800af8e:	f240 80dc 	bls.w	800b14a <_printf_float+0x3aa>
 800af92:	2200      	movs	r2, #0
 800af94:	2300      	movs	r3, #0
 800af96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800af9a:	f7f5 fd95 	bl	8000ac8 <__aeabi_dcmpeq>
 800af9e:	2800      	cmp	r0, #0
 800afa0:	d033      	beq.n	800b00a <_printf_float+0x26a>
 800afa2:	2301      	movs	r3, #1
 800afa4:	4a41      	ldr	r2, [pc, #260]	; (800b0ac <_printf_float+0x30c>)
 800afa6:	4631      	mov	r1, r6
 800afa8:	4628      	mov	r0, r5
 800afaa:	47b8      	blx	r7
 800afac:	3001      	adds	r0, #1
 800afae:	f43f af54 	beq.w	800ae5a <_printf_float+0xba>
 800afb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800afb6:	429a      	cmp	r2, r3
 800afb8:	db02      	blt.n	800afc0 <_printf_float+0x220>
 800afba:	6823      	ldr	r3, [r4, #0]
 800afbc:	07d8      	lsls	r0, r3, #31
 800afbe:	d50f      	bpl.n	800afe0 <_printf_float+0x240>
 800afc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afc4:	4631      	mov	r1, r6
 800afc6:	4628      	mov	r0, r5
 800afc8:	47b8      	blx	r7
 800afca:	3001      	adds	r0, #1
 800afcc:	f43f af45 	beq.w	800ae5a <_printf_float+0xba>
 800afd0:	f04f 0800 	mov.w	r8, #0
 800afd4:	f104 091a 	add.w	r9, r4, #26
 800afd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afda:	3b01      	subs	r3, #1
 800afdc:	4543      	cmp	r3, r8
 800afde:	dc09      	bgt.n	800aff4 <_printf_float+0x254>
 800afe0:	6823      	ldr	r3, [r4, #0]
 800afe2:	079b      	lsls	r3, r3, #30
 800afe4:	f100 8103 	bmi.w	800b1ee <_printf_float+0x44e>
 800afe8:	68e0      	ldr	r0, [r4, #12]
 800afea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afec:	4298      	cmp	r0, r3
 800afee:	bfb8      	it	lt
 800aff0:	4618      	movlt	r0, r3
 800aff2:	e734      	b.n	800ae5e <_printf_float+0xbe>
 800aff4:	2301      	movs	r3, #1
 800aff6:	464a      	mov	r2, r9
 800aff8:	4631      	mov	r1, r6
 800affa:	4628      	mov	r0, r5
 800affc:	47b8      	blx	r7
 800affe:	3001      	adds	r0, #1
 800b000:	f43f af2b 	beq.w	800ae5a <_printf_float+0xba>
 800b004:	f108 0801 	add.w	r8, r8, #1
 800b008:	e7e6      	b.n	800afd8 <_printf_float+0x238>
 800b00a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	dc2b      	bgt.n	800b068 <_printf_float+0x2c8>
 800b010:	2301      	movs	r3, #1
 800b012:	4a26      	ldr	r2, [pc, #152]	; (800b0ac <_printf_float+0x30c>)
 800b014:	4631      	mov	r1, r6
 800b016:	4628      	mov	r0, r5
 800b018:	47b8      	blx	r7
 800b01a:	3001      	adds	r0, #1
 800b01c:	f43f af1d 	beq.w	800ae5a <_printf_float+0xba>
 800b020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b022:	b923      	cbnz	r3, 800b02e <_printf_float+0x28e>
 800b024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b026:	b913      	cbnz	r3, 800b02e <_printf_float+0x28e>
 800b028:	6823      	ldr	r3, [r4, #0]
 800b02a:	07d9      	lsls	r1, r3, #31
 800b02c:	d5d8      	bpl.n	800afe0 <_printf_float+0x240>
 800b02e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b032:	4631      	mov	r1, r6
 800b034:	4628      	mov	r0, r5
 800b036:	47b8      	blx	r7
 800b038:	3001      	adds	r0, #1
 800b03a:	f43f af0e 	beq.w	800ae5a <_printf_float+0xba>
 800b03e:	f04f 0900 	mov.w	r9, #0
 800b042:	f104 0a1a 	add.w	sl, r4, #26
 800b046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b048:	425b      	negs	r3, r3
 800b04a:	454b      	cmp	r3, r9
 800b04c:	dc01      	bgt.n	800b052 <_printf_float+0x2b2>
 800b04e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b050:	e794      	b.n	800af7c <_printf_float+0x1dc>
 800b052:	2301      	movs	r3, #1
 800b054:	4652      	mov	r2, sl
 800b056:	4631      	mov	r1, r6
 800b058:	4628      	mov	r0, r5
 800b05a:	47b8      	blx	r7
 800b05c:	3001      	adds	r0, #1
 800b05e:	f43f aefc 	beq.w	800ae5a <_printf_float+0xba>
 800b062:	f109 0901 	add.w	r9, r9, #1
 800b066:	e7ee      	b.n	800b046 <_printf_float+0x2a6>
 800b068:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b06a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b06c:	429a      	cmp	r2, r3
 800b06e:	bfa8      	it	ge
 800b070:	461a      	movge	r2, r3
 800b072:	2a00      	cmp	r2, #0
 800b074:	4691      	mov	r9, r2
 800b076:	dd07      	ble.n	800b088 <_printf_float+0x2e8>
 800b078:	4613      	mov	r3, r2
 800b07a:	4631      	mov	r1, r6
 800b07c:	4642      	mov	r2, r8
 800b07e:	4628      	mov	r0, r5
 800b080:	47b8      	blx	r7
 800b082:	3001      	adds	r0, #1
 800b084:	f43f aee9 	beq.w	800ae5a <_printf_float+0xba>
 800b088:	f104 031a 	add.w	r3, r4, #26
 800b08c:	f04f 0b00 	mov.w	fp, #0
 800b090:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b094:	9306      	str	r3, [sp, #24]
 800b096:	e015      	b.n	800b0c4 <_printf_float+0x324>
 800b098:	7fefffff 	.word	0x7fefffff
 800b09c:	0800d638 	.word	0x0800d638
 800b0a0:	0800d634 	.word	0x0800d634
 800b0a4:	0800d640 	.word	0x0800d640
 800b0a8:	0800d63c 	.word	0x0800d63c
 800b0ac:	0800d644 	.word	0x0800d644
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	9a06      	ldr	r2, [sp, #24]
 800b0b4:	4631      	mov	r1, r6
 800b0b6:	4628      	mov	r0, r5
 800b0b8:	47b8      	blx	r7
 800b0ba:	3001      	adds	r0, #1
 800b0bc:	f43f aecd 	beq.w	800ae5a <_printf_float+0xba>
 800b0c0:	f10b 0b01 	add.w	fp, fp, #1
 800b0c4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b0c8:	ebaa 0309 	sub.w	r3, sl, r9
 800b0cc:	455b      	cmp	r3, fp
 800b0ce:	dcef      	bgt.n	800b0b0 <_printf_float+0x310>
 800b0d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	44d0      	add	r8, sl
 800b0d8:	db15      	blt.n	800b106 <_printf_float+0x366>
 800b0da:	6823      	ldr	r3, [r4, #0]
 800b0dc:	07da      	lsls	r2, r3, #31
 800b0de:	d412      	bmi.n	800b106 <_printf_float+0x366>
 800b0e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0e4:	eba3 020a 	sub.w	r2, r3, sl
 800b0e8:	eba3 0a01 	sub.w	sl, r3, r1
 800b0ec:	4592      	cmp	sl, r2
 800b0ee:	bfa8      	it	ge
 800b0f0:	4692      	movge	sl, r2
 800b0f2:	f1ba 0f00 	cmp.w	sl, #0
 800b0f6:	dc0e      	bgt.n	800b116 <_printf_float+0x376>
 800b0f8:	f04f 0800 	mov.w	r8, #0
 800b0fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b100:	f104 091a 	add.w	r9, r4, #26
 800b104:	e019      	b.n	800b13a <_printf_float+0x39a>
 800b106:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b10a:	4631      	mov	r1, r6
 800b10c:	4628      	mov	r0, r5
 800b10e:	47b8      	blx	r7
 800b110:	3001      	adds	r0, #1
 800b112:	d1e5      	bne.n	800b0e0 <_printf_float+0x340>
 800b114:	e6a1      	b.n	800ae5a <_printf_float+0xba>
 800b116:	4653      	mov	r3, sl
 800b118:	4642      	mov	r2, r8
 800b11a:	4631      	mov	r1, r6
 800b11c:	4628      	mov	r0, r5
 800b11e:	47b8      	blx	r7
 800b120:	3001      	adds	r0, #1
 800b122:	d1e9      	bne.n	800b0f8 <_printf_float+0x358>
 800b124:	e699      	b.n	800ae5a <_printf_float+0xba>
 800b126:	2301      	movs	r3, #1
 800b128:	464a      	mov	r2, r9
 800b12a:	4631      	mov	r1, r6
 800b12c:	4628      	mov	r0, r5
 800b12e:	47b8      	blx	r7
 800b130:	3001      	adds	r0, #1
 800b132:	f43f ae92 	beq.w	800ae5a <_printf_float+0xba>
 800b136:	f108 0801 	add.w	r8, r8, #1
 800b13a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b13e:	1a9b      	subs	r3, r3, r2
 800b140:	eba3 030a 	sub.w	r3, r3, sl
 800b144:	4543      	cmp	r3, r8
 800b146:	dcee      	bgt.n	800b126 <_printf_float+0x386>
 800b148:	e74a      	b.n	800afe0 <_printf_float+0x240>
 800b14a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b14c:	2a01      	cmp	r2, #1
 800b14e:	dc01      	bgt.n	800b154 <_printf_float+0x3b4>
 800b150:	07db      	lsls	r3, r3, #31
 800b152:	d53a      	bpl.n	800b1ca <_printf_float+0x42a>
 800b154:	2301      	movs	r3, #1
 800b156:	4642      	mov	r2, r8
 800b158:	4631      	mov	r1, r6
 800b15a:	4628      	mov	r0, r5
 800b15c:	47b8      	blx	r7
 800b15e:	3001      	adds	r0, #1
 800b160:	f43f ae7b 	beq.w	800ae5a <_printf_float+0xba>
 800b164:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b168:	4631      	mov	r1, r6
 800b16a:	4628      	mov	r0, r5
 800b16c:	47b8      	blx	r7
 800b16e:	3001      	adds	r0, #1
 800b170:	f108 0801 	add.w	r8, r8, #1
 800b174:	f43f ae71 	beq.w	800ae5a <_printf_float+0xba>
 800b178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b17a:	2200      	movs	r2, #0
 800b17c:	f103 3aff 	add.w	sl, r3, #4294967295
 800b180:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b184:	2300      	movs	r3, #0
 800b186:	f7f5 fc9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b18a:	b9c8      	cbnz	r0, 800b1c0 <_printf_float+0x420>
 800b18c:	4653      	mov	r3, sl
 800b18e:	4642      	mov	r2, r8
 800b190:	4631      	mov	r1, r6
 800b192:	4628      	mov	r0, r5
 800b194:	47b8      	blx	r7
 800b196:	3001      	adds	r0, #1
 800b198:	d10e      	bne.n	800b1b8 <_printf_float+0x418>
 800b19a:	e65e      	b.n	800ae5a <_printf_float+0xba>
 800b19c:	2301      	movs	r3, #1
 800b19e:	4652      	mov	r2, sl
 800b1a0:	4631      	mov	r1, r6
 800b1a2:	4628      	mov	r0, r5
 800b1a4:	47b8      	blx	r7
 800b1a6:	3001      	adds	r0, #1
 800b1a8:	f43f ae57 	beq.w	800ae5a <_printf_float+0xba>
 800b1ac:	f108 0801 	add.w	r8, r8, #1
 800b1b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1b2:	3b01      	subs	r3, #1
 800b1b4:	4543      	cmp	r3, r8
 800b1b6:	dcf1      	bgt.n	800b19c <_printf_float+0x3fc>
 800b1b8:	464b      	mov	r3, r9
 800b1ba:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b1be:	e6de      	b.n	800af7e <_printf_float+0x1de>
 800b1c0:	f04f 0800 	mov.w	r8, #0
 800b1c4:	f104 0a1a 	add.w	sl, r4, #26
 800b1c8:	e7f2      	b.n	800b1b0 <_printf_float+0x410>
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	e7df      	b.n	800b18e <_printf_float+0x3ee>
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	464a      	mov	r2, r9
 800b1d2:	4631      	mov	r1, r6
 800b1d4:	4628      	mov	r0, r5
 800b1d6:	47b8      	blx	r7
 800b1d8:	3001      	adds	r0, #1
 800b1da:	f43f ae3e 	beq.w	800ae5a <_printf_float+0xba>
 800b1de:	f108 0801 	add.w	r8, r8, #1
 800b1e2:	68e3      	ldr	r3, [r4, #12]
 800b1e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b1e6:	1a9b      	subs	r3, r3, r2
 800b1e8:	4543      	cmp	r3, r8
 800b1ea:	dcf0      	bgt.n	800b1ce <_printf_float+0x42e>
 800b1ec:	e6fc      	b.n	800afe8 <_printf_float+0x248>
 800b1ee:	f04f 0800 	mov.w	r8, #0
 800b1f2:	f104 0919 	add.w	r9, r4, #25
 800b1f6:	e7f4      	b.n	800b1e2 <_printf_float+0x442>
 800b1f8:	2900      	cmp	r1, #0
 800b1fa:	f43f ae8b 	beq.w	800af14 <_printf_float+0x174>
 800b1fe:	2300      	movs	r3, #0
 800b200:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b204:	ab09      	add	r3, sp, #36	; 0x24
 800b206:	9300      	str	r3, [sp, #0]
 800b208:	ec49 8b10 	vmov	d0, r8, r9
 800b20c:	6022      	str	r2, [r4, #0]
 800b20e:	f8cd a004 	str.w	sl, [sp, #4]
 800b212:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b216:	4628      	mov	r0, r5
 800b218:	f7ff fd2e 	bl	800ac78 <__cvt>
 800b21c:	4680      	mov	r8, r0
 800b21e:	e648      	b.n	800aeb2 <_printf_float+0x112>

0800b220 <_printf_common>:
 800b220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b224:	4691      	mov	r9, r2
 800b226:	461f      	mov	r7, r3
 800b228:	688a      	ldr	r2, [r1, #8]
 800b22a:	690b      	ldr	r3, [r1, #16]
 800b22c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b230:	4293      	cmp	r3, r2
 800b232:	bfb8      	it	lt
 800b234:	4613      	movlt	r3, r2
 800b236:	f8c9 3000 	str.w	r3, [r9]
 800b23a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b23e:	4606      	mov	r6, r0
 800b240:	460c      	mov	r4, r1
 800b242:	b112      	cbz	r2, 800b24a <_printf_common+0x2a>
 800b244:	3301      	adds	r3, #1
 800b246:	f8c9 3000 	str.w	r3, [r9]
 800b24a:	6823      	ldr	r3, [r4, #0]
 800b24c:	0699      	lsls	r1, r3, #26
 800b24e:	bf42      	ittt	mi
 800b250:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b254:	3302      	addmi	r3, #2
 800b256:	f8c9 3000 	strmi.w	r3, [r9]
 800b25a:	6825      	ldr	r5, [r4, #0]
 800b25c:	f015 0506 	ands.w	r5, r5, #6
 800b260:	d107      	bne.n	800b272 <_printf_common+0x52>
 800b262:	f104 0a19 	add.w	sl, r4, #25
 800b266:	68e3      	ldr	r3, [r4, #12]
 800b268:	f8d9 2000 	ldr.w	r2, [r9]
 800b26c:	1a9b      	subs	r3, r3, r2
 800b26e:	42ab      	cmp	r3, r5
 800b270:	dc28      	bgt.n	800b2c4 <_printf_common+0xa4>
 800b272:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b276:	6822      	ldr	r2, [r4, #0]
 800b278:	3300      	adds	r3, #0
 800b27a:	bf18      	it	ne
 800b27c:	2301      	movne	r3, #1
 800b27e:	0692      	lsls	r2, r2, #26
 800b280:	d42d      	bmi.n	800b2de <_printf_common+0xbe>
 800b282:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b286:	4639      	mov	r1, r7
 800b288:	4630      	mov	r0, r6
 800b28a:	47c0      	blx	r8
 800b28c:	3001      	adds	r0, #1
 800b28e:	d020      	beq.n	800b2d2 <_printf_common+0xb2>
 800b290:	6823      	ldr	r3, [r4, #0]
 800b292:	68e5      	ldr	r5, [r4, #12]
 800b294:	f8d9 2000 	ldr.w	r2, [r9]
 800b298:	f003 0306 	and.w	r3, r3, #6
 800b29c:	2b04      	cmp	r3, #4
 800b29e:	bf08      	it	eq
 800b2a0:	1aad      	subeq	r5, r5, r2
 800b2a2:	68a3      	ldr	r3, [r4, #8]
 800b2a4:	6922      	ldr	r2, [r4, #16]
 800b2a6:	bf0c      	ite	eq
 800b2a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2ac:	2500      	movne	r5, #0
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	bfc4      	itt	gt
 800b2b2:	1a9b      	subgt	r3, r3, r2
 800b2b4:	18ed      	addgt	r5, r5, r3
 800b2b6:	f04f 0900 	mov.w	r9, #0
 800b2ba:	341a      	adds	r4, #26
 800b2bc:	454d      	cmp	r5, r9
 800b2be:	d11a      	bne.n	800b2f6 <_printf_common+0xd6>
 800b2c0:	2000      	movs	r0, #0
 800b2c2:	e008      	b.n	800b2d6 <_printf_common+0xb6>
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	4652      	mov	r2, sl
 800b2c8:	4639      	mov	r1, r7
 800b2ca:	4630      	mov	r0, r6
 800b2cc:	47c0      	blx	r8
 800b2ce:	3001      	adds	r0, #1
 800b2d0:	d103      	bne.n	800b2da <_printf_common+0xba>
 800b2d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b2d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2da:	3501      	adds	r5, #1
 800b2dc:	e7c3      	b.n	800b266 <_printf_common+0x46>
 800b2de:	18e1      	adds	r1, r4, r3
 800b2e0:	1c5a      	adds	r2, r3, #1
 800b2e2:	2030      	movs	r0, #48	; 0x30
 800b2e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b2e8:	4422      	add	r2, r4
 800b2ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b2ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b2f2:	3302      	adds	r3, #2
 800b2f4:	e7c5      	b.n	800b282 <_printf_common+0x62>
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	4622      	mov	r2, r4
 800b2fa:	4639      	mov	r1, r7
 800b2fc:	4630      	mov	r0, r6
 800b2fe:	47c0      	blx	r8
 800b300:	3001      	adds	r0, #1
 800b302:	d0e6      	beq.n	800b2d2 <_printf_common+0xb2>
 800b304:	f109 0901 	add.w	r9, r9, #1
 800b308:	e7d8      	b.n	800b2bc <_printf_common+0x9c>
	...

0800b30c <_printf_i>:
 800b30c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b310:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b314:	460c      	mov	r4, r1
 800b316:	7e09      	ldrb	r1, [r1, #24]
 800b318:	b085      	sub	sp, #20
 800b31a:	296e      	cmp	r1, #110	; 0x6e
 800b31c:	4617      	mov	r7, r2
 800b31e:	4606      	mov	r6, r0
 800b320:	4698      	mov	r8, r3
 800b322:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b324:	f000 80b3 	beq.w	800b48e <_printf_i+0x182>
 800b328:	d822      	bhi.n	800b370 <_printf_i+0x64>
 800b32a:	2963      	cmp	r1, #99	; 0x63
 800b32c:	d036      	beq.n	800b39c <_printf_i+0x90>
 800b32e:	d80a      	bhi.n	800b346 <_printf_i+0x3a>
 800b330:	2900      	cmp	r1, #0
 800b332:	f000 80b9 	beq.w	800b4a8 <_printf_i+0x19c>
 800b336:	2958      	cmp	r1, #88	; 0x58
 800b338:	f000 8083 	beq.w	800b442 <_printf_i+0x136>
 800b33c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b340:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b344:	e032      	b.n	800b3ac <_printf_i+0xa0>
 800b346:	2964      	cmp	r1, #100	; 0x64
 800b348:	d001      	beq.n	800b34e <_printf_i+0x42>
 800b34a:	2969      	cmp	r1, #105	; 0x69
 800b34c:	d1f6      	bne.n	800b33c <_printf_i+0x30>
 800b34e:	6820      	ldr	r0, [r4, #0]
 800b350:	6813      	ldr	r3, [r2, #0]
 800b352:	0605      	lsls	r5, r0, #24
 800b354:	f103 0104 	add.w	r1, r3, #4
 800b358:	d52a      	bpl.n	800b3b0 <_printf_i+0xa4>
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	6011      	str	r1, [r2, #0]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	da03      	bge.n	800b36a <_printf_i+0x5e>
 800b362:	222d      	movs	r2, #45	; 0x2d
 800b364:	425b      	negs	r3, r3
 800b366:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b36a:	486f      	ldr	r0, [pc, #444]	; (800b528 <_printf_i+0x21c>)
 800b36c:	220a      	movs	r2, #10
 800b36e:	e039      	b.n	800b3e4 <_printf_i+0xd8>
 800b370:	2973      	cmp	r1, #115	; 0x73
 800b372:	f000 809d 	beq.w	800b4b0 <_printf_i+0x1a4>
 800b376:	d808      	bhi.n	800b38a <_printf_i+0x7e>
 800b378:	296f      	cmp	r1, #111	; 0x6f
 800b37a:	d020      	beq.n	800b3be <_printf_i+0xb2>
 800b37c:	2970      	cmp	r1, #112	; 0x70
 800b37e:	d1dd      	bne.n	800b33c <_printf_i+0x30>
 800b380:	6823      	ldr	r3, [r4, #0]
 800b382:	f043 0320 	orr.w	r3, r3, #32
 800b386:	6023      	str	r3, [r4, #0]
 800b388:	e003      	b.n	800b392 <_printf_i+0x86>
 800b38a:	2975      	cmp	r1, #117	; 0x75
 800b38c:	d017      	beq.n	800b3be <_printf_i+0xb2>
 800b38e:	2978      	cmp	r1, #120	; 0x78
 800b390:	d1d4      	bne.n	800b33c <_printf_i+0x30>
 800b392:	2378      	movs	r3, #120	; 0x78
 800b394:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b398:	4864      	ldr	r0, [pc, #400]	; (800b52c <_printf_i+0x220>)
 800b39a:	e055      	b.n	800b448 <_printf_i+0x13c>
 800b39c:	6813      	ldr	r3, [r2, #0]
 800b39e:	1d19      	adds	r1, r3, #4
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	6011      	str	r1, [r2, #0]
 800b3a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b3a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	e08c      	b.n	800b4ca <_printf_i+0x1be>
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	6011      	str	r1, [r2, #0]
 800b3b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b3b8:	bf18      	it	ne
 800b3ba:	b21b      	sxthne	r3, r3
 800b3bc:	e7cf      	b.n	800b35e <_printf_i+0x52>
 800b3be:	6813      	ldr	r3, [r2, #0]
 800b3c0:	6825      	ldr	r5, [r4, #0]
 800b3c2:	1d18      	adds	r0, r3, #4
 800b3c4:	6010      	str	r0, [r2, #0]
 800b3c6:	0628      	lsls	r0, r5, #24
 800b3c8:	d501      	bpl.n	800b3ce <_printf_i+0xc2>
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	e002      	b.n	800b3d4 <_printf_i+0xc8>
 800b3ce:	0668      	lsls	r0, r5, #25
 800b3d0:	d5fb      	bpl.n	800b3ca <_printf_i+0xbe>
 800b3d2:	881b      	ldrh	r3, [r3, #0]
 800b3d4:	4854      	ldr	r0, [pc, #336]	; (800b528 <_printf_i+0x21c>)
 800b3d6:	296f      	cmp	r1, #111	; 0x6f
 800b3d8:	bf14      	ite	ne
 800b3da:	220a      	movne	r2, #10
 800b3dc:	2208      	moveq	r2, #8
 800b3de:	2100      	movs	r1, #0
 800b3e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b3e4:	6865      	ldr	r5, [r4, #4]
 800b3e6:	60a5      	str	r5, [r4, #8]
 800b3e8:	2d00      	cmp	r5, #0
 800b3ea:	f2c0 8095 	blt.w	800b518 <_printf_i+0x20c>
 800b3ee:	6821      	ldr	r1, [r4, #0]
 800b3f0:	f021 0104 	bic.w	r1, r1, #4
 800b3f4:	6021      	str	r1, [r4, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d13d      	bne.n	800b476 <_printf_i+0x16a>
 800b3fa:	2d00      	cmp	r5, #0
 800b3fc:	f040 808e 	bne.w	800b51c <_printf_i+0x210>
 800b400:	4665      	mov	r5, ip
 800b402:	2a08      	cmp	r2, #8
 800b404:	d10b      	bne.n	800b41e <_printf_i+0x112>
 800b406:	6823      	ldr	r3, [r4, #0]
 800b408:	07db      	lsls	r3, r3, #31
 800b40a:	d508      	bpl.n	800b41e <_printf_i+0x112>
 800b40c:	6923      	ldr	r3, [r4, #16]
 800b40e:	6862      	ldr	r2, [r4, #4]
 800b410:	429a      	cmp	r2, r3
 800b412:	bfde      	ittt	le
 800b414:	2330      	movle	r3, #48	; 0x30
 800b416:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b41a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b41e:	ebac 0305 	sub.w	r3, ip, r5
 800b422:	6123      	str	r3, [r4, #16]
 800b424:	f8cd 8000 	str.w	r8, [sp]
 800b428:	463b      	mov	r3, r7
 800b42a:	aa03      	add	r2, sp, #12
 800b42c:	4621      	mov	r1, r4
 800b42e:	4630      	mov	r0, r6
 800b430:	f7ff fef6 	bl	800b220 <_printf_common>
 800b434:	3001      	adds	r0, #1
 800b436:	d14d      	bne.n	800b4d4 <_printf_i+0x1c8>
 800b438:	f04f 30ff 	mov.w	r0, #4294967295
 800b43c:	b005      	add	sp, #20
 800b43e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b442:	4839      	ldr	r0, [pc, #228]	; (800b528 <_printf_i+0x21c>)
 800b444:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b448:	6813      	ldr	r3, [r2, #0]
 800b44a:	6821      	ldr	r1, [r4, #0]
 800b44c:	1d1d      	adds	r5, r3, #4
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	6015      	str	r5, [r2, #0]
 800b452:	060a      	lsls	r2, r1, #24
 800b454:	d50b      	bpl.n	800b46e <_printf_i+0x162>
 800b456:	07ca      	lsls	r2, r1, #31
 800b458:	bf44      	itt	mi
 800b45a:	f041 0120 	orrmi.w	r1, r1, #32
 800b45e:	6021      	strmi	r1, [r4, #0]
 800b460:	b91b      	cbnz	r3, 800b46a <_printf_i+0x15e>
 800b462:	6822      	ldr	r2, [r4, #0]
 800b464:	f022 0220 	bic.w	r2, r2, #32
 800b468:	6022      	str	r2, [r4, #0]
 800b46a:	2210      	movs	r2, #16
 800b46c:	e7b7      	b.n	800b3de <_printf_i+0xd2>
 800b46e:	064d      	lsls	r5, r1, #25
 800b470:	bf48      	it	mi
 800b472:	b29b      	uxthmi	r3, r3
 800b474:	e7ef      	b.n	800b456 <_printf_i+0x14a>
 800b476:	4665      	mov	r5, ip
 800b478:	fbb3 f1f2 	udiv	r1, r3, r2
 800b47c:	fb02 3311 	mls	r3, r2, r1, r3
 800b480:	5cc3      	ldrb	r3, [r0, r3]
 800b482:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b486:	460b      	mov	r3, r1
 800b488:	2900      	cmp	r1, #0
 800b48a:	d1f5      	bne.n	800b478 <_printf_i+0x16c>
 800b48c:	e7b9      	b.n	800b402 <_printf_i+0xf6>
 800b48e:	6813      	ldr	r3, [r2, #0]
 800b490:	6825      	ldr	r5, [r4, #0]
 800b492:	6961      	ldr	r1, [r4, #20]
 800b494:	1d18      	adds	r0, r3, #4
 800b496:	6010      	str	r0, [r2, #0]
 800b498:	0628      	lsls	r0, r5, #24
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	d501      	bpl.n	800b4a2 <_printf_i+0x196>
 800b49e:	6019      	str	r1, [r3, #0]
 800b4a0:	e002      	b.n	800b4a8 <_printf_i+0x19c>
 800b4a2:	066a      	lsls	r2, r5, #25
 800b4a4:	d5fb      	bpl.n	800b49e <_printf_i+0x192>
 800b4a6:	8019      	strh	r1, [r3, #0]
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	6123      	str	r3, [r4, #16]
 800b4ac:	4665      	mov	r5, ip
 800b4ae:	e7b9      	b.n	800b424 <_printf_i+0x118>
 800b4b0:	6813      	ldr	r3, [r2, #0]
 800b4b2:	1d19      	adds	r1, r3, #4
 800b4b4:	6011      	str	r1, [r2, #0]
 800b4b6:	681d      	ldr	r5, [r3, #0]
 800b4b8:	6862      	ldr	r2, [r4, #4]
 800b4ba:	2100      	movs	r1, #0
 800b4bc:	4628      	mov	r0, r5
 800b4be:	f7f4 fe8f 	bl	80001e0 <memchr>
 800b4c2:	b108      	cbz	r0, 800b4c8 <_printf_i+0x1bc>
 800b4c4:	1b40      	subs	r0, r0, r5
 800b4c6:	6060      	str	r0, [r4, #4]
 800b4c8:	6863      	ldr	r3, [r4, #4]
 800b4ca:	6123      	str	r3, [r4, #16]
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4d2:	e7a7      	b.n	800b424 <_printf_i+0x118>
 800b4d4:	6923      	ldr	r3, [r4, #16]
 800b4d6:	462a      	mov	r2, r5
 800b4d8:	4639      	mov	r1, r7
 800b4da:	4630      	mov	r0, r6
 800b4dc:	47c0      	blx	r8
 800b4de:	3001      	adds	r0, #1
 800b4e0:	d0aa      	beq.n	800b438 <_printf_i+0x12c>
 800b4e2:	6823      	ldr	r3, [r4, #0]
 800b4e4:	079b      	lsls	r3, r3, #30
 800b4e6:	d413      	bmi.n	800b510 <_printf_i+0x204>
 800b4e8:	68e0      	ldr	r0, [r4, #12]
 800b4ea:	9b03      	ldr	r3, [sp, #12]
 800b4ec:	4298      	cmp	r0, r3
 800b4ee:	bfb8      	it	lt
 800b4f0:	4618      	movlt	r0, r3
 800b4f2:	e7a3      	b.n	800b43c <_printf_i+0x130>
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	464a      	mov	r2, r9
 800b4f8:	4639      	mov	r1, r7
 800b4fa:	4630      	mov	r0, r6
 800b4fc:	47c0      	blx	r8
 800b4fe:	3001      	adds	r0, #1
 800b500:	d09a      	beq.n	800b438 <_printf_i+0x12c>
 800b502:	3501      	adds	r5, #1
 800b504:	68e3      	ldr	r3, [r4, #12]
 800b506:	9a03      	ldr	r2, [sp, #12]
 800b508:	1a9b      	subs	r3, r3, r2
 800b50a:	42ab      	cmp	r3, r5
 800b50c:	dcf2      	bgt.n	800b4f4 <_printf_i+0x1e8>
 800b50e:	e7eb      	b.n	800b4e8 <_printf_i+0x1dc>
 800b510:	2500      	movs	r5, #0
 800b512:	f104 0919 	add.w	r9, r4, #25
 800b516:	e7f5      	b.n	800b504 <_printf_i+0x1f8>
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d1ac      	bne.n	800b476 <_printf_i+0x16a>
 800b51c:	7803      	ldrb	r3, [r0, #0]
 800b51e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b522:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b526:	e76c      	b.n	800b402 <_printf_i+0xf6>
 800b528:	0800d646 	.word	0x0800d646
 800b52c:	0800d657 	.word	0x0800d657

0800b530 <iprintf>:
 800b530:	b40f      	push	{r0, r1, r2, r3}
 800b532:	4b0a      	ldr	r3, [pc, #40]	; (800b55c <iprintf+0x2c>)
 800b534:	b513      	push	{r0, r1, r4, lr}
 800b536:	681c      	ldr	r4, [r3, #0]
 800b538:	b124      	cbz	r4, 800b544 <iprintf+0x14>
 800b53a:	69a3      	ldr	r3, [r4, #24]
 800b53c:	b913      	cbnz	r3, 800b544 <iprintf+0x14>
 800b53e:	4620      	mov	r0, r4
 800b540:	f000 feda 	bl	800c2f8 <__sinit>
 800b544:	ab05      	add	r3, sp, #20
 800b546:	9a04      	ldr	r2, [sp, #16]
 800b548:	68a1      	ldr	r1, [r4, #8]
 800b54a:	9301      	str	r3, [sp, #4]
 800b54c:	4620      	mov	r0, r4
 800b54e:	f001 fbdd 	bl	800cd0c <_vfiprintf_r>
 800b552:	b002      	add	sp, #8
 800b554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b558:	b004      	add	sp, #16
 800b55a:	4770      	bx	lr
 800b55c:	20000018 	.word	0x20000018

0800b560 <_sbrk_r>:
 800b560:	b538      	push	{r3, r4, r5, lr}
 800b562:	4c06      	ldr	r4, [pc, #24]	; (800b57c <_sbrk_r+0x1c>)
 800b564:	2300      	movs	r3, #0
 800b566:	4605      	mov	r5, r0
 800b568:	4608      	mov	r0, r1
 800b56a:	6023      	str	r3, [r4, #0]
 800b56c:	f7f9 fa2e 	bl	80049cc <_sbrk>
 800b570:	1c43      	adds	r3, r0, #1
 800b572:	d102      	bne.n	800b57a <_sbrk_r+0x1a>
 800b574:	6823      	ldr	r3, [r4, #0]
 800b576:	b103      	cbz	r3, 800b57a <_sbrk_r+0x1a>
 800b578:	602b      	str	r3, [r5, #0]
 800b57a:	bd38      	pop	{r3, r4, r5, pc}
 800b57c:	200137cc 	.word	0x200137cc

0800b580 <siprintf>:
 800b580:	b40e      	push	{r1, r2, r3}
 800b582:	b500      	push	{lr}
 800b584:	b09c      	sub	sp, #112	; 0x70
 800b586:	ab1d      	add	r3, sp, #116	; 0x74
 800b588:	9002      	str	r0, [sp, #8]
 800b58a:	9006      	str	r0, [sp, #24]
 800b58c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b590:	4809      	ldr	r0, [pc, #36]	; (800b5b8 <siprintf+0x38>)
 800b592:	9107      	str	r1, [sp, #28]
 800b594:	9104      	str	r1, [sp, #16]
 800b596:	4909      	ldr	r1, [pc, #36]	; (800b5bc <siprintf+0x3c>)
 800b598:	f853 2b04 	ldr.w	r2, [r3], #4
 800b59c:	9105      	str	r1, [sp, #20]
 800b59e:	6800      	ldr	r0, [r0, #0]
 800b5a0:	9301      	str	r3, [sp, #4]
 800b5a2:	a902      	add	r1, sp, #8
 800b5a4:	f001 fa90 	bl	800cac8 <_svfiprintf_r>
 800b5a8:	9b02      	ldr	r3, [sp, #8]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	701a      	strb	r2, [r3, #0]
 800b5ae:	b01c      	add	sp, #112	; 0x70
 800b5b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5b4:	b003      	add	sp, #12
 800b5b6:	4770      	bx	lr
 800b5b8:	20000018 	.word	0x20000018
 800b5bc:	ffff0208 	.word	0xffff0208

0800b5c0 <strcat>:
 800b5c0:	b510      	push	{r4, lr}
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	781a      	ldrb	r2, [r3, #0]
 800b5c6:	1c5c      	adds	r4, r3, #1
 800b5c8:	b93a      	cbnz	r2, 800b5da <strcat+0x1a>
 800b5ca:	3b01      	subs	r3, #1
 800b5cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5d0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b5d4:	2a00      	cmp	r2, #0
 800b5d6:	d1f9      	bne.n	800b5cc <strcat+0xc>
 800b5d8:	bd10      	pop	{r4, pc}
 800b5da:	4623      	mov	r3, r4
 800b5dc:	e7f2      	b.n	800b5c4 <strcat+0x4>

0800b5de <strcpy>:
 800b5de:	4603      	mov	r3, r0
 800b5e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5e4:	f803 2b01 	strb.w	r2, [r3], #1
 800b5e8:	2a00      	cmp	r2, #0
 800b5ea:	d1f9      	bne.n	800b5e0 <strcpy+0x2>
 800b5ec:	4770      	bx	lr

0800b5ee <quorem>:
 800b5ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f2:	6903      	ldr	r3, [r0, #16]
 800b5f4:	690c      	ldr	r4, [r1, #16]
 800b5f6:	42a3      	cmp	r3, r4
 800b5f8:	4680      	mov	r8, r0
 800b5fa:	f2c0 8082 	blt.w	800b702 <quorem+0x114>
 800b5fe:	3c01      	subs	r4, #1
 800b600:	f101 0714 	add.w	r7, r1, #20
 800b604:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b608:	f100 0614 	add.w	r6, r0, #20
 800b60c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b610:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b614:	eb06 030c 	add.w	r3, r6, ip
 800b618:	3501      	adds	r5, #1
 800b61a:	eb07 090c 	add.w	r9, r7, ip
 800b61e:	9301      	str	r3, [sp, #4]
 800b620:	fbb0 f5f5 	udiv	r5, r0, r5
 800b624:	b395      	cbz	r5, 800b68c <quorem+0x9e>
 800b626:	f04f 0a00 	mov.w	sl, #0
 800b62a:	4638      	mov	r0, r7
 800b62c:	46b6      	mov	lr, r6
 800b62e:	46d3      	mov	fp, sl
 800b630:	f850 2b04 	ldr.w	r2, [r0], #4
 800b634:	b293      	uxth	r3, r2
 800b636:	fb05 a303 	mla	r3, r5, r3, sl
 800b63a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b63e:	b29b      	uxth	r3, r3
 800b640:	ebab 0303 	sub.w	r3, fp, r3
 800b644:	0c12      	lsrs	r2, r2, #16
 800b646:	f8de b000 	ldr.w	fp, [lr]
 800b64a:	fb05 a202 	mla	r2, r5, r2, sl
 800b64e:	fa13 f38b 	uxtah	r3, r3, fp
 800b652:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b656:	fa1f fb82 	uxth.w	fp, r2
 800b65a:	f8de 2000 	ldr.w	r2, [lr]
 800b65e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b662:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b666:	b29b      	uxth	r3, r3
 800b668:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b66c:	4581      	cmp	r9, r0
 800b66e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b672:	f84e 3b04 	str.w	r3, [lr], #4
 800b676:	d2db      	bcs.n	800b630 <quorem+0x42>
 800b678:	f856 300c 	ldr.w	r3, [r6, ip]
 800b67c:	b933      	cbnz	r3, 800b68c <quorem+0x9e>
 800b67e:	9b01      	ldr	r3, [sp, #4]
 800b680:	3b04      	subs	r3, #4
 800b682:	429e      	cmp	r6, r3
 800b684:	461a      	mov	r2, r3
 800b686:	d330      	bcc.n	800b6ea <quorem+0xfc>
 800b688:	f8c8 4010 	str.w	r4, [r8, #16]
 800b68c:	4640      	mov	r0, r8
 800b68e:	f001 f8ed 	bl	800c86c <__mcmp>
 800b692:	2800      	cmp	r0, #0
 800b694:	db25      	blt.n	800b6e2 <quorem+0xf4>
 800b696:	3501      	adds	r5, #1
 800b698:	4630      	mov	r0, r6
 800b69a:	f04f 0c00 	mov.w	ip, #0
 800b69e:	f857 2b04 	ldr.w	r2, [r7], #4
 800b6a2:	f8d0 e000 	ldr.w	lr, [r0]
 800b6a6:	b293      	uxth	r3, r2
 800b6a8:	ebac 0303 	sub.w	r3, ip, r3
 800b6ac:	0c12      	lsrs	r2, r2, #16
 800b6ae:	fa13 f38e 	uxtah	r3, r3, lr
 800b6b2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b6b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6c0:	45b9      	cmp	r9, r7
 800b6c2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b6c6:	f840 3b04 	str.w	r3, [r0], #4
 800b6ca:	d2e8      	bcs.n	800b69e <quorem+0xb0>
 800b6cc:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b6d0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b6d4:	b92a      	cbnz	r2, 800b6e2 <quorem+0xf4>
 800b6d6:	3b04      	subs	r3, #4
 800b6d8:	429e      	cmp	r6, r3
 800b6da:	461a      	mov	r2, r3
 800b6dc:	d30b      	bcc.n	800b6f6 <quorem+0x108>
 800b6de:	f8c8 4010 	str.w	r4, [r8, #16]
 800b6e2:	4628      	mov	r0, r5
 800b6e4:	b003      	add	sp, #12
 800b6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ea:	6812      	ldr	r2, [r2, #0]
 800b6ec:	3b04      	subs	r3, #4
 800b6ee:	2a00      	cmp	r2, #0
 800b6f0:	d1ca      	bne.n	800b688 <quorem+0x9a>
 800b6f2:	3c01      	subs	r4, #1
 800b6f4:	e7c5      	b.n	800b682 <quorem+0x94>
 800b6f6:	6812      	ldr	r2, [r2, #0]
 800b6f8:	3b04      	subs	r3, #4
 800b6fa:	2a00      	cmp	r2, #0
 800b6fc:	d1ef      	bne.n	800b6de <quorem+0xf0>
 800b6fe:	3c01      	subs	r4, #1
 800b700:	e7ea      	b.n	800b6d8 <quorem+0xea>
 800b702:	2000      	movs	r0, #0
 800b704:	e7ee      	b.n	800b6e4 <quorem+0xf6>
	...

0800b708 <_dtoa_r>:
 800b708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b70c:	ec57 6b10 	vmov	r6, r7, d0
 800b710:	b097      	sub	sp, #92	; 0x5c
 800b712:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b714:	9106      	str	r1, [sp, #24]
 800b716:	4604      	mov	r4, r0
 800b718:	920b      	str	r2, [sp, #44]	; 0x2c
 800b71a:	9312      	str	r3, [sp, #72]	; 0x48
 800b71c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b720:	e9cd 6700 	strd	r6, r7, [sp]
 800b724:	b93d      	cbnz	r5, 800b736 <_dtoa_r+0x2e>
 800b726:	2010      	movs	r0, #16
 800b728:	f7ff f9ee 	bl	800ab08 <malloc>
 800b72c:	6260      	str	r0, [r4, #36]	; 0x24
 800b72e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b732:	6005      	str	r5, [r0, #0]
 800b734:	60c5      	str	r5, [r0, #12]
 800b736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b738:	6819      	ldr	r1, [r3, #0]
 800b73a:	b151      	cbz	r1, 800b752 <_dtoa_r+0x4a>
 800b73c:	685a      	ldr	r2, [r3, #4]
 800b73e:	604a      	str	r2, [r1, #4]
 800b740:	2301      	movs	r3, #1
 800b742:	4093      	lsls	r3, r2
 800b744:	608b      	str	r3, [r1, #8]
 800b746:	4620      	mov	r0, r4
 800b748:	f000 feaf 	bl	800c4aa <_Bfree>
 800b74c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b74e:	2200      	movs	r2, #0
 800b750:	601a      	str	r2, [r3, #0]
 800b752:	1e3b      	subs	r3, r7, #0
 800b754:	bfbb      	ittet	lt
 800b756:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b75a:	9301      	strlt	r3, [sp, #4]
 800b75c:	2300      	movge	r3, #0
 800b75e:	2201      	movlt	r2, #1
 800b760:	bfac      	ite	ge
 800b762:	f8c8 3000 	strge.w	r3, [r8]
 800b766:	f8c8 2000 	strlt.w	r2, [r8]
 800b76a:	4baf      	ldr	r3, [pc, #700]	; (800ba28 <_dtoa_r+0x320>)
 800b76c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b770:	ea33 0308 	bics.w	r3, r3, r8
 800b774:	d114      	bne.n	800b7a0 <_dtoa_r+0x98>
 800b776:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b778:	f242 730f 	movw	r3, #9999	; 0x270f
 800b77c:	6013      	str	r3, [r2, #0]
 800b77e:	9b00      	ldr	r3, [sp, #0]
 800b780:	b923      	cbnz	r3, 800b78c <_dtoa_r+0x84>
 800b782:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b786:	2800      	cmp	r0, #0
 800b788:	f000 8542 	beq.w	800c210 <_dtoa_r+0xb08>
 800b78c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b78e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800ba3c <_dtoa_r+0x334>
 800b792:	2b00      	cmp	r3, #0
 800b794:	f000 8544 	beq.w	800c220 <_dtoa_r+0xb18>
 800b798:	f10b 0303 	add.w	r3, fp, #3
 800b79c:	f000 bd3e 	b.w	800c21c <_dtoa_r+0xb14>
 800b7a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	4630      	mov	r0, r6
 800b7aa:	4639      	mov	r1, r7
 800b7ac:	f7f5 f98c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7b0:	4681      	mov	r9, r0
 800b7b2:	b168      	cbz	r0, 800b7d0 <_dtoa_r+0xc8>
 800b7b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	6013      	str	r3, [r2, #0]
 800b7ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	f000 8524 	beq.w	800c20a <_dtoa_r+0xb02>
 800b7c2:	4b9a      	ldr	r3, [pc, #616]	; (800ba2c <_dtoa_r+0x324>)
 800b7c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b7c6:	f103 3bff 	add.w	fp, r3, #4294967295
 800b7ca:	6013      	str	r3, [r2, #0]
 800b7cc:	f000 bd28 	b.w	800c220 <_dtoa_r+0xb18>
 800b7d0:	aa14      	add	r2, sp, #80	; 0x50
 800b7d2:	a915      	add	r1, sp, #84	; 0x54
 800b7d4:	ec47 6b10 	vmov	d0, r6, r7
 800b7d8:	4620      	mov	r0, r4
 800b7da:	f001 f8be 	bl	800c95a <__d2b>
 800b7de:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b7e2:	9004      	str	r0, [sp, #16]
 800b7e4:	2d00      	cmp	r5, #0
 800b7e6:	d07c      	beq.n	800b8e2 <_dtoa_r+0x1da>
 800b7e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b7ec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800b7f0:	46b2      	mov	sl, r6
 800b7f2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800b7f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b7fa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800b7fe:	2200      	movs	r2, #0
 800b800:	4b8b      	ldr	r3, [pc, #556]	; (800ba30 <_dtoa_r+0x328>)
 800b802:	4650      	mov	r0, sl
 800b804:	4659      	mov	r1, fp
 800b806:	f7f4 fd3f 	bl	8000288 <__aeabi_dsub>
 800b80a:	a381      	add	r3, pc, #516	; (adr r3, 800ba10 <_dtoa_r+0x308>)
 800b80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b810:	f7f4 fef2 	bl	80005f8 <__aeabi_dmul>
 800b814:	a380      	add	r3, pc, #512	; (adr r3, 800ba18 <_dtoa_r+0x310>)
 800b816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81a:	f7f4 fd37 	bl	800028c <__adddf3>
 800b81e:	4606      	mov	r6, r0
 800b820:	4628      	mov	r0, r5
 800b822:	460f      	mov	r7, r1
 800b824:	f7f4 fe7e 	bl	8000524 <__aeabi_i2d>
 800b828:	a37d      	add	r3, pc, #500	; (adr r3, 800ba20 <_dtoa_r+0x318>)
 800b82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82e:	f7f4 fee3 	bl	80005f8 <__aeabi_dmul>
 800b832:	4602      	mov	r2, r0
 800b834:	460b      	mov	r3, r1
 800b836:	4630      	mov	r0, r6
 800b838:	4639      	mov	r1, r7
 800b83a:	f7f4 fd27 	bl	800028c <__adddf3>
 800b83e:	4606      	mov	r6, r0
 800b840:	460f      	mov	r7, r1
 800b842:	f7f5 f989 	bl	8000b58 <__aeabi_d2iz>
 800b846:	2200      	movs	r2, #0
 800b848:	4682      	mov	sl, r0
 800b84a:	2300      	movs	r3, #0
 800b84c:	4630      	mov	r0, r6
 800b84e:	4639      	mov	r1, r7
 800b850:	f7f5 f944 	bl	8000adc <__aeabi_dcmplt>
 800b854:	b148      	cbz	r0, 800b86a <_dtoa_r+0x162>
 800b856:	4650      	mov	r0, sl
 800b858:	f7f4 fe64 	bl	8000524 <__aeabi_i2d>
 800b85c:	4632      	mov	r2, r6
 800b85e:	463b      	mov	r3, r7
 800b860:	f7f5 f932 	bl	8000ac8 <__aeabi_dcmpeq>
 800b864:	b908      	cbnz	r0, 800b86a <_dtoa_r+0x162>
 800b866:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b86a:	f1ba 0f16 	cmp.w	sl, #22
 800b86e:	d859      	bhi.n	800b924 <_dtoa_r+0x21c>
 800b870:	4970      	ldr	r1, [pc, #448]	; (800ba34 <_dtoa_r+0x32c>)
 800b872:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b876:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b87a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b87e:	f7f5 f94b 	bl	8000b18 <__aeabi_dcmpgt>
 800b882:	2800      	cmp	r0, #0
 800b884:	d050      	beq.n	800b928 <_dtoa_r+0x220>
 800b886:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b88a:	2300      	movs	r3, #0
 800b88c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b88e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b890:	1b5d      	subs	r5, r3, r5
 800b892:	f1b5 0801 	subs.w	r8, r5, #1
 800b896:	bf49      	itett	mi
 800b898:	f1c5 0301 	rsbmi	r3, r5, #1
 800b89c:	2300      	movpl	r3, #0
 800b89e:	9305      	strmi	r3, [sp, #20]
 800b8a0:	f04f 0800 	movmi.w	r8, #0
 800b8a4:	bf58      	it	pl
 800b8a6:	9305      	strpl	r3, [sp, #20]
 800b8a8:	f1ba 0f00 	cmp.w	sl, #0
 800b8ac:	db3e      	blt.n	800b92c <_dtoa_r+0x224>
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	44d0      	add	r8, sl
 800b8b2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b8b6:	9307      	str	r3, [sp, #28]
 800b8b8:	9b06      	ldr	r3, [sp, #24]
 800b8ba:	2b09      	cmp	r3, #9
 800b8bc:	f200 8090 	bhi.w	800b9e0 <_dtoa_r+0x2d8>
 800b8c0:	2b05      	cmp	r3, #5
 800b8c2:	bfc4      	itt	gt
 800b8c4:	3b04      	subgt	r3, #4
 800b8c6:	9306      	strgt	r3, [sp, #24]
 800b8c8:	9b06      	ldr	r3, [sp, #24]
 800b8ca:	f1a3 0302 	sub.w	r3, r3, #2
 800b8ce:	bfcc      	ite	gt
 800b8d0:	2500      	movgt	r5, #0
 800b8d2:	2501      	movle	r5, #1
 800b8d4:	2b03      	cmp	r3, #3
 800b8d6:	f200 808f 	bhi.w	800b9f8 <_dtoa_r+0x2f0>
 800b8da:	e8df f003 	tbb	[pc, r3]
 800b8de:	7f7d      	.short	0x7f7d
 800b8e0:	7131      	.short	0x7131
 800b8e2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800b8e6:	441d      	add	r5, r3
 800b8e8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b8ec:	2820      	cmp	r0, #32
 800b8ee:	dd13      	ble.n	800b918 <_dtoa_r+0x210>
 800b8f0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b8f4:	9b00      	ldr	r3, [sp, #0]
 800b8f6:	fa08 f800 	lsl.w	r8, r8, r0
 800b8fa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b8fe:	fa23 f000 	lsr.w	r0, r3, r0
 800b902:	ea48 0000 	orr.w	r0, r8, r0
 800b906:	f7f4 fdfd 	bl	8000504 <__aeabi_ui2d>
 800b90a:	2301      	movs	r3, #1
 800b90c:	4682      	mov	sl, r0
 800b90e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800b912:	3d01      	subs	r5, #1
 800b914:	9313      	str	r3, [sp, #76]	; 0x4c
 800b916:	e772      	b.n	800b7fe <_dtoa_r+0xf6>
 800b918:	9b00      	ldr	r3, [sp, #0]
 800b91a:	f1c0 0020 	rsb	r0, r0, #32
 800b91e:	fa03 f000 	lsl.w	r0, r3, r0
 800b922:	e7f0      	b.n	800b906 <_dtoa_r+0x1fe>
 800b924:	2301      	movs	r3, #1
 800b926:	e7b1      	b.n	800b88c <_dtoa_r+0x184>
 800b928:	900f      	str	r0, [sp, #60]	; 0x3c
 800b92a:	e7b0      	b.n	800b88e <_dtoa_r+0x186>
 800b92c:	9b05      	ldr	r3, [sp, #20]
 800b92e:	eba3 030a 	sub.w	r3, r3, sl
 800b932:	9305      	str	r3, [sp, #20]
 800b934:	f1ca 0300 	rsb	r3, sl, #0
 800b938:	9307      	str	r3, [sp, #28]
 800b93a:	2300      	movs	r3, #0
 800b93c:	930e      	str	r3, [sp, #56]	; 0x38
 800b93e:	e7bb      	b.n	800b8b8 <_dtoa_r+0x1b0>
 800b940:	2301      	movs	r3, #1
 800b942:	930a      	str	r3, [sp, #40]	; 0x28
 800b944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b946:	2b00      	cmp	r3, #0
 800b948:	dd59      	ble.n	800b9fe <_dtoa_r+0x2f6>
 800b94a:	9302      	str	r3, [sp, #8]
 800b94c:	4699      	mov	r9, r3
 800b94e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b950:	2200      	movs	r2, #0
 800b952:	6072      	str	r2, [r6, #4]
 800b954:	2204      	movs	r2, #4
 800b956:	f102 0014 	add.w	r0, r2, #20
 800b95a:	4298      	cmp	r0, r3
 800b95c:	6871      	ldr	r1, [r6, #4]
 800b95e:	d953      	bls.n	800ba08 <_dtoa_r+0x300>
 800b960:	4620      	mov	r0, r4
 800b962:	f000 fd6e 	bl	800c442 <_Balloc>
 800b966:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b968:	6030      	str	r0, [r6, #0]
 800b96a:	f1b9 0f0e 	cmp.w	r9, #14
 800b96e:	f8d3 b000 	ldr.w	fp, [r3]
 800b972:	f200 80e6 	bhi.w	800bb42 <_dtoa_r+0x43a>
 800b976:	2d00      	cmp	r5, #0
 800b978:	f000 80e3 	beq.w	800bb42 <_dtoa_r+0x43a>
 800b97c:	ed9d 7b00 	vldr	d7, [sp]
 800b980:	f1ba 0f00 	cmp.w	sl, #0
 800b984:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800b988:	dd74      	ble.n	800ba74 <_dtoa_r+0x36c>
 800b98a:	4a2a      	ldr	r2, [pc, #168]	; (800ba34 <_dtoa_r+0x32c>)
 800b98c:	f00a 030f 	and.w	r3, sl, #15
 800b990:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b994:	ed93 7b00 	vldr	d7, [r3]
 800b998:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b99c:	06f0      	lsls	r0, r6, #27
 800b99e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b9a2:	d565      	bpl.n	800ba70 <_dtoa_r+0x368>
 800b9a4:	4b24      	ldr	r3, [pc, #144]	; (800ba38 <_dtoa_r+0x330>)
 800b9a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b9aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b9ae:	f7f4 ff4d 	bl	800084c <__aeabi_ddiv>
 800b9b2:	e9cd 0100 	strd	r0, r1, [sp]
 800b9b6:	f006 060f 	and.w	r6, r6, #15
 800b9ba:	2503      	movs	r5, #3
 800b9bc:	4f1e      	ldr	r7, [pc, #120]	; (800ba38 <_dtoa_r+0x330>)
 800b9be:	e04c      	b.n	800ba5a <_dtoa_r+0x352>
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	930a      	str	r3, [sp, #40]	; 0x28
 800b9c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9c6:	4453      	add	r3, sl
 800b9c8:	f103 0901 	add.w	r9, r3, #1
 800b9cc:	9302      	str	r3, [sp, #8]
 800b9ce:	464b      	mov	r3, r9
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	bfb8      	it	lt
 800b9d4:	2301      	movlt	r3, #1
 800b9d6:	e7ba      	b.n	800b94e <_dtoa_r+0x246>
 800b9d8:	2300      	movs	r3, #0
 800b9da:	e7b2      	b.n	800b942 <_dtoa_r+0x23a>
 800b9dc:	2300      	movs	r3, #0
 800b9de:	e7f0      	b.n	800b9c2 <_dtoa_r+0x2ba>
 800b9e0:	2501      	movs	r5, #1
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	9306      	str	r3, [sp, #24]
 800b9e6:	950a      	str	r5, [sp, #40]	; 0x28
 800b9e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b9ec:	9302      	str	r3, [sp, #8]
 800b9ee:	4699      	mov	r9, r3
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	2312      	movs	r3, #18
 800b9f4:	920b      	str	r2, [sp, #44]	; 0x2c
 800b9f6:	e7aa      	b.n	800b94e <_dtoa_r+0x246>
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	930a      	str	r3, [sp, #40]	; 0x28
 800b9fc:	e7f4      	b.n	800b9e8 <_dtoa_r+0x2e0>
 800b9fe:	2301      	movs	r3, #1
 800ba00:	9302      	str	r3, [sp, #8]
 800ba02:	4699      	mov	r9, r3
 800ba04:	461a      	mov	r2, r3
 800ba06:	e7f5      	b.n	800b9f4 <_dtoa_r+0x2ec>
 800ba08:	3101      	adds	r1, #1
 800ba0a:	6071      	str	r1, [r6, #4]
 800ba0c:	0052      	lsls	r2, r2, #1
 800ba0e:	e7a2      	b.n	800b956 <_dtoa_r+0x24e>
 800ba10:	636f4361 	.word	0x636f4361
 800ba14:	3fd287a7 	.word	0x3fd287a7
 800ba18:	8b60c8b3 	.word	0x8b60c8b3
 800ba1c:	3fc68a28 	.word	0x3fc68a28
 800ba20:	509f79fb 	.word	0x509f79fb
 800ba24:	3fd34413 	.word	0x3fd34413
 800ba28:	7ff00000 	.word	0x7ff00000
 800ba2c:	0800d645 	.word	0x0800d645
 800ba30:	3ff80000 	.word	0x3ff80000
 800ba34:	0800d700 	.word	0x0800d700
 800ba38:	0800d6d8 	.word	0x0800d6d8
 800ba3c:	0800d671 	.word	0x0800d671
 800ba40:	07f1      	lsls	r1, r6, #31
 800ba42:	d508      	bpl.n	800ba56 <_dtoa_r+0x34e>
 800ba44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ba48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba4c:	f7f4 fdd4 	bl	80005f8 <__aeabi_dmul>
 800ba50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ba54:	3501      	adds	r5, #1
 800ba56:	1076      	asrs	r6, r6, #1
 800ba58:	3708      	adds	r7, #8
 800ba5a:	2e00      	cmp	r6, #0
 800ba5c:	d1f0      	bne.n	800ba40 <_dtoa_r+0x338>
 800ba5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ba62:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba66:	f7f4 fef1 	bl	800084c <__aeabi_ddiv>
 800ba6a:	e9cd 0100 	strd	r0, r1, [sp]
 800ba6e:	e01a      	b.n	800baa6 <_dtoa_r+0x39e>
 800ba70:	2502      	movs	r5, #2
 800ba72:	e7a3      	b.n	800b9bc <_dtoa_r+0x2b4>
 800ba74:	f000 80a0 	beq.w	800bbb8 <_dtoa_r+0x4b0>
 800ba78:	f1ca 0600 	rsb	r6, sl, #0
 800ba7c:	4b9f      	ldr	r3, [pc, #636]	; (800bcfc <_dtoa_r+0x5f4>)
 800ba7e:	4fa0      	ldr	r7, [pc, #640]	; (800bd00 <_dtoa_r+0x5f8>)
 800ba80:	f006 020f 	and.w	r2, r6, #15
 800ba84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ba90:	f7f4 fdb2 	bl	80005f8 <__aeabi_dmul>
 800ba94:	e9cd 0100 	strd	r0, r1, [sp]
 800ba98:	1136      	asrs	r6, r6, #4
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	2502      	movs	r5, #2
 800ba9e:	2e00      	cmp	r6, #0
 800baa0:	d17f      	bne.n	800bba2 <_dtoa_r+0x49a>
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d1e1      	bne.n	800ba6a <_dtoa_r+0x362>
 800baa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	f000 8087 	beq.w	800bbbc <_dtoa_r+0x4b4>
 800baae:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bab2:	2200      	movs	r2, #0
 800bab4:	4b93      	ldr	r3, [pc, #588]	; (800bd04 <_dtoa_r+0x5fc>)
 800bab6:	4630      	mov	r0, r6
 800bab8:	4639      	mov	r1, r7
 800baba:	f7f5 f80f 	bl	8000adc <__aeabi_dcmplt>
 800babe:	2800      	cmp	r0, #0
 800bac0:	d07c      	beq.n	800bbbc <_dtoa_r+0x4b4>
 800bac2:	f1b9 0f00 	cmp.w	r9, #0
 800bac6:	d079      	beq.n	800bbbc <_dtoa_r+0x4b4>
 800bac8:	9b02      	ldr	r3, [sp, #8]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	dd35      	ble.n	800bb3a <_dtoa_r+0x432>
 800bace:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bad2:	9308      	str	r3, [sp, #32]
 800bad4:	4639      	mov	r1, r7
 800bad6:	2200      	movs	r2, #0
 800bad8:	4b8b      	ldr	r3, [pc, #556]	; (800bd08 <_dtoa_r+0x600>)
 800bada:	4630      	mov	r0, r6
 800badc:	f7f4 fd8c 	bl	80005f8 <__aeabi_dmul>
 800bae0:	e9cd 0100 	strd	r0, r1, [sp]
 800bae4:	9f02      	ldr	r7, [sp, #8]
 800bae6:	3501      	adds	r5, #1
 800bae8:	4628      	mov	r0, r5
 800baea:	f7f4 fd1b 	bl	8000524 <__aeabi_i2d>
 800baee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800baf2:	f7f4 fd81 	bl	80005f8 <__aeabi_dmul>
 800baf6:	2200      	movs	r2, #0
 800baf8:	4b84      	ldr	r3, [pc, #528]	; (800bd0c <_dtoa_r+0x604>)
 800bafa:	f7f4 fbc7 	bl	800028c <__adddf3>
 800bafe:	4605      	mov	r5, r0
 800bb00:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bb04:	2f00      	cmp	r7, #0
 800bb06:	d15d      	bne.n	800bbc4 <_dtoa_r+0x4bc>
 800bb08:	2200      	movs	r2, #0
 800bb0a:	4b81      	ldr	r3, [pc, #516]	; (800bd10 <_dtoa_r+0x608>)
 800bb0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb10:	f7f4 fbba 	bl	8000288 <__aeabi_dsub>
 800bb14:	462a      	mov	r2, r5
 800bb16:	4633      	mov	r3, r6
 800bb18:	e9cd 0100 	strd	r0, r1, [sp]
 800bb1c:	f7f4 fffc 	bl	8000b18 <__aeabi_dcmpgt>
 800bb20:	2800      	cmp	r0, #0
 800bb22:	f040 8288 	bne.w	800c036 <_dtoa_r+0x92e>
 800bb26:	462a      	mov	r2, r5
 800bb28:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bb2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb30:	f7f4 ffd4 	bl	8000adc <__aeabi_dcmplt>
 800bb34:	2800      	cmp	r0, #0
 800bb36:	f040 827c 	bne.w	800c032 <_dtoa_r+0x92a>
 800bb3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bb3e:	e9cd 2300 	strd	r2, r3, [sp]
 800bb42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	f2c0 8150 	blt.w	800bdea <_dtoa_r+0x6e2>
 800bb4a:	f1ba 0f0e 	cmp.w	sl, #14
 800bb4e:	f300 814c 	bgt.w	800bdea <_dtoa_r+0x6e2>
 800bb52:	4b6a      	ldr	r3, [pc, #424]	; (800bcfc <_dtoa_r+0x5f4>)
 800bb54:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bb58:	ed93 7b00 	vldr	d7, [r3]
 800bb5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bb64:	f280 80d8 	bge.w	800bd18 <_dtoa_r+0x610>
 800bb68:	f1b9 0f00 	cmp.w	r9, #0
 800bb6c:	f300 80d4 	bgt.w	800bd18 <_dtoa_r+0x610>
 800bb70:	f040 825e 	bne.w	800c030 <_dtoa_r+0x928>
 800bb74:	2200      	movs	r2, #0
 800bb76:	4b66      	ldr	r3, [pc, #408]	; (800bd10 <_dtoa_r+0x608>)
 800bb78:	ec51 0b17 	vmov	r0, r1, d7
 800bb7c:	f7f4 fd3c 	bl	80005f8 <__aeabi_dmul>
 800bb80:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb84:	f7f4 ffbe 	bl	8000b04 <__aeabi_dcmpge>
 800bb88:	464f      	mov	r7, r9
 800bb8a:	464e      	mov	r6, r9
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	f040 8234 	bne.w	800bffa <_dtoa_r+0x8f2>
 800bb92:	2331      	movs	r3, #49	; 0x31
 800bb94:	f10b 0501 	add.w	r5, fp, #1
 800bb98:	f88b 3000 	strb.w	r3, [fp]
 800bb9c:	f10a 0a01 	add.w	sl, sl, #1
 800bba0:	e22f      	b.n	800c002 <_dtoa_r+0x8fa>
 800bba2:	07f2      	lsls	r2, r6, #31
 800bba4:	d505      	bpl.n	800bbb2 <_dtoa_r+0x4aa>
 800bba6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbaa:	f7f4 fd25 	bl	80005f8 <__aeabi_dmul>
 800bbae:	3501      	adds	r5, #1
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	1076      	asrs	r6, r6, #1
 800bbb4:	3708      	adds	r7, #8
 800bbb6:	e772      	b.n	800ba9e <_dtoa_r+0x396>
 800bbb8:	2502      	movs	r5, #2
 800bbba:	e774      	b.n	800baa6 <_dtoa_r+0x39e>
 800bbbc:	f8cd a020 	str.w	sl, [sp, #32]
 800bbc0:	464f      	mov	r7, r9
 800bbc2:	e791      	b.n	800bae8 <_dtoa_r+0x3e0>
 800bbc4:	4b4d      	ldr	r3, [pc, #308]	; (800bcfc <_dtoa_r+0x5f4>)
 800bbc6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bbca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800bbce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d047      	beq.n	800bc64 <_dtoa_r+0x55c>
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	460b      	mov	r3, r1
 800bbd8:	2000      	movs	r0, #0
 800bbda:	494e      	ldr	r1, [pc, #312]	; (800bd14 <_dtoa_r+0x60c>)
 800bbdc:	f7f4 fe36 	bl	800084c <__aeabi_ddiv>
 800bbe0:	462a      	mov	r2, r5
 800bbe2:	4633      	mov	r3, r6
 800bbe4:	f7f4 fb50 	bl	8000288 <__aeabi_dsub>
 800bbe8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bbec:	465d      	mov	r5, fp
 800bbee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbf2:	f7f4 ffb1 	bl	8000b58 <__aeabi_d2iz>
 800bbf6:	4606      	mov	r6, r0
 800bbf8:	f7f4 fc94 	bl	8000524 <__aeabi_i2d>
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	460b      	mov	r3, r1
 800bc00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc04:	f7f4 fb40 	bl	8000288 <__aeabi_dsub>
 800bc08:	3630      	adds	r6, #48	; 0x30
 800bc0a:	f805 6b01 	strb.w	r6, [r5], #1
 800bc0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bc12:	e9cd 0100 	strd	r0, r1, [sp]
 800bc16:	f7f4 ff61 	bl	8000adc <__aeabi_dcmplt>
 800bc1a:	2800      	cmp	r0, #0
 800bc1c:	d163      	bne.n	800bce6 <_dtoa_r+0x5de>
 800bc1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc22:	2000      	movs	r0, #0
 800bc24:	4937      	ldr	r1, [pc, #220]	; (800bd04 <_dtoa_r+0x5fc>)
 800bc26:	f7f4 fb2f 	bl	8000288 <__aeabi_dsub>
 800bc2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bc2e:	f7f4 ff55 	bl	8000adc <__aeabi_dcmplt>
 800bc32:	2800      	cmp	r0, #0
 800bc34:	f040 80b7 	bne.w	800bda6 <_dtoa_r+0x69e>
 800bc38:	eba5 030b 	sub.w	r3, r5, fp
 800bc3c:	429f      	cmp	r7, r3
 800bc3e:	f77f af7c 	ble.w	800bb3a <_dtoa_r+0x432>
 800bc42:	2200      	movs	r2, #0
 800bc44:	4b30      	ldr	r3, [pc, #192]	; (800bd08 <_dtoa_r+0x600>)
 800bc46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bc4a:	f7f4 fcd5 	bl	80005f8 <__aeabi_dmul>
 800bc4e:	2200      	movs	r2, #0
 800bc50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bc54:	4b2c      	ldr	r3, [pc, #176]	; (800bd08 <_dtoa_r+0x600>)
 800bc56:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc5a:	f7f4 fccd 	bl	80005f8 <__aeabi_dmul>
 800bc5e:	e9cd 0100 	strd	r0, r1, [sp]
 800bc62:	e7c4      	b.n	800bbee <_dtoa_r+0x4e6>
 800bc64:	462a      	mov	r2, r5
 800bc66:	4633      	mov	r3, r6
 800bc68:	f7f4 fcc6 	bl	80005f8 <__aeabi_dmul>
 800bc6c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bc70:	eb0b 0507 	add.w	r5, fp, r7
 800bc74:	465e      	mov	r6, fp
 800bc76:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc7a:	f7f4 ff6d 	bl	8000b58 <__aeabi_d2iz>
 800bc7e:	4607      	mov	r7, r0
 800bc80:	f7f4 fc50 	bl	8000524 <__aeabi_i2d>
 800bc84:	3730      	adds	r7, #48	; 0x30
 800bc86:	4602      	mov	r2, r0
 800bc88:	460b      	mov	r3, r1
 800bc8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc8e:	f7f4 fafb 	bl	8000288 <__aeabi_dsub>
 800bc92:	f806 7b01 	strb.w	r7, [r6], #1
 800bc96:	42ae      	cmp	r6, r5
 800bc98:	e9cd 0100 	strd	r0, r1, [sp]
 800bc9c:	f04f 0200 	mov.w	r2, #0
 800bca0:	d126      	bne.n	800bcf0 <_dtoa_r+0x5e8>
 800bca2:	4b1c      	ldr	r3, [pc, #112]	; (800bd14 <_dtoa_r+0x60c>)
 800bca4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bca8:	f7f4 faf0 	bl	800028c <__adddf3>
 800bcac:	4602      	mov	r2, r0
 800bcae:	460b      	mov	r3, r1
 800bcb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcb4:	f7f4 ff30 	bl	8000b18 <__aeabi_dcmpgt>
 800bcb8:	2800      	cmp	r0, #0
 800bcba:	d174      	bne.n	800bda6 <_dtoa_r+0x69e>
 800bcbc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bcc0:	2000      	movs	r0, #0
 800bcc2:	4914      	ldr	r1, [pc, #80]	; (800bd14 <_dtoa_r+0x60c>)
 800bcc4:	f7f4 fae0 	bl	8000288 <__aeabi_dsub>
 800bcc8:	4602      	mov	r2, r0
 800bcca:	460b      	mov	r3, r1
 800bccc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcd0:	f7f4 ff04 	bl	8000adc <__aeabi_dcmplt>
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	f43f af30 	beq.w	800bb3a <_dtoa_r+0x432>
 800bcda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bcde:	2b30      	cmp	r3, #48	; 0x30
 800bce0:	f105 32ff 	add.w	r2, r5, #4294967295
 800bce4:	d002      	beq.n	800bcec <_dtoa_r+0x5e4>
 800bce6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bcea:	e04a      	b.n	800bd82 <_dtoa_r+0x67a>
 800bcec:	4615      	mov	r5, r2
 800bcee:	e7f4      	b.n	800bcda <_dtoa_r+0x5d2>
 800bcf0:	4b05      	ldr	r3, [pc, #20]	; (800bd08 <_dtoa_r+0x600>)
 800bcf2:	f7f4 fc81 	bl	80005f8 <__aeabi_dmul>
 800bcf6:	e9cd 0100 	strd	r0, r1, [sp]
 800bcfa:	e7bc      	b.n	800bc76 <_dtoa_r+0x56e>
 800bcfc:	0800d700 	.word	0x0800d700
 800bd00:	0800d6d8 	.word	0x0800d6d8
 800bd04:	3ff00000 	.word	0x3ff00000
 800bd08:	40240000 	.word	0x40240000
 800bd0c:	401c0000 	.word	0x401c0000
 800bd10:	40140000 	.word	0x40140000
 800bd14:	3fe00000 	.word	0x3fe00000
 800bd18:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bd1c:	465d      	mov	r5, fp
 800bd1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd22:	4630      	mov	r0, r6
 800bd24:	4639      	mov	r1, r7
 800bd26:	f7f4 fd91 	bl	800084c <__aeabi_ddiv>
 800bd2a:	f7f4 ff15 	bl	8000b58 <__aeabi_d2iz>
 800bd2e:	4680      	mov	r8, r0
 800bd30:	f7f4 fbf8 	bl	8000524 <__aeabi_i2d>
 800bd34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd38:	f7f4 fc5e 	bl	80005f8 <__aeabi_dmul>
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	460b      	mov	r3, r1
 800bd40:	4630      	mov	r0, r6
 800bd42:	4639      	mov	r1, r7
 800bd44:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800bd48:	f7f4 fa9e 	bl	8000288 <__aeabi_dsub>
 800bd4c:	f805 6b01 	strb.w	r6, [r5], #1
 800bd50:	eba5 060b 	sub.w	r6, r5, fp
 800bd54:	45b1      	cmp	r9, r6
 800bd56:	4602      	mov	r2, r0
 800bd58:	460b      	mov	r3, r1
 800bd5a:	d139      	bne.n	800bdd0 <_dtoa_r+0x6c8>
 800bd5c:	f7f4 fa96 	bl	800028c <__adddf3>
 800bd60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd64:	4606      	mov	r6, r0
 800bd66:	460f      	mov	r7, r1
 800bd68:	f7f4 fed6 	bl	8000b18 <__aeabi_dcmpgt>
 800bd6c:	b9c8      	cbnz	r0, 800bda2 <_dtoa_r+0x69a>
 800bd6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd72:	4630      	mov	r0, r6
 800bd74:	4639      	mov	r1, r7
 800bd76:	f7f4 fea7 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd7a:	b110      	cbz	r0, 800bd82 <_dtoa_r+0x67a>
 800bd7c:	f018 0f01 	tst.w	r8, #1
 800bd80:	d10f      	bne.n	800bda2 <_dtoa_r+0x69a>
 800bd82:	9904      	ldr	r1, [sp, #16]
 800bd84:	4620      	mov	r0, r4
 800bd86:	f000 fb90 	bl	800c4aa <_Bfree>
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd8e:	702b      	strb	r3, [r5, #0]
 800bd90:	f10a 0301 	add.w	r3, sl, #1
 800bd94:	6013      	str	r3, [r2, #0]
 800bd96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	f000 8241 	beq.w	800c220 <_dtoa_r+0xb18>
 800bd9e:	601d      	str	r5, [r3, #0]
 800bda0:	e23e      	b.n	800c220 <_dtoa_r+0xb18>
 800bda2:	f8cd a020 	str.w	sl, [sp, #32]
 800bda6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bdaa:	2a39      	cmp	r2, #57	; 0x39
 800bdac:	f105 33ff 	add.w	r3, r5, #4294967295
 800bdb0:	d108      	bne.n	800bdc4 <_dtoa_r+0x6bc>
 800bdb2:	459b      	cmp	fp, r3
 800bdb4:	d10a      	bne.n	800bdcc <_dtoa_r+0x6c4>
 800bdb6:	9b08      	ldr	r3, [sp, #32]
 800bdb8:	3301      	adds	r3, #1
 800bdba:	9308      	str	r3, [sp, #32]
 800bdbc:	2330      	movs	r3, #48	; 0x30
 800bdbe:	f88b 3000 	strb.w	r3, [fp]
 800bdc2:	465b      	mov	r3, fp
 800bdc4:	781a      	ldrb	r2, [r3, #0]
 800bdc6:	3201      	adds	r2, #1
 800bdc8:	701a      	strb	r2, [r3, #0]
 800bdca:	e78c      	b.n	800bce6 <_dtoa_r+0x5de>
 800bdcc:	461d      	mov	r5, r3
 800bdce:	e7ea      	b.n	800bda6 <_dtoa_r+0x69e>
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	4b9b      	ldr	r3, [pc, #620]	; (800c040 <_dtoa_r+0x938>)
 800bdd4:	f7f4 fc10 	bl	80005f8 <__aeabi_dmul>
 800bdd8:	2200      	movs	r2, #0
 800bdda:	2300      	movs	r3, #0
 800bddc:	4606      	mov	r6, r0
 800bdde:	460f      	mov	r7, r1
 800bde0:	f7f4 fe72 	bl	8000ac8 <__aeabi_dcmpeq>
 800bde4:	2800      	cmp	r0, #0
 800bde6:	d09a      	beq.n	800bd1e <_dtoa_r+0x616>
 800bde8:	e7cb      	b.n	800bd82 <_dtoa_r+0x67a>
 800bdea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bdec:	2a00      	cmp	r2, #0
 800bdee:	f000 808b 	beq.w	800bf08 <_dtoa_r+0x800>
 800bdf2:	9a06      	ldr	r2, [sp, #24]
 800bdf4:	2a01      	cmp	r2, #1
 800bdf6:	dc6e      	bgt.n	800bed6 <_dtoa_r+0x7ce>
 800bdf8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bdfa:	2a00      	cmp	r2, #0
 800bdfc:	d067      	beq.n	800bece <_dtoa_r+0x7c6>
 800bdfe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800be02:	9f07      	ldr	r7, [sp, #28]
 800be04:	9d05      	ldr	r5, [sp, #20]
 800be06:	9a05      	ldr	r2, [sp, #20]
 800be08:	2101      	movs	r1, #1
 800be0a:	441a      	add	r2, r3
 800be0c:	4620      	mov	r0, r4
 800be0e:	9205      	str	r2, [sp, #20]
 800be10:	4498      	add	r8, r3
 800be12:	f000 fbea 	bl	800c5ea <__i2b>
 800be16:	4606      	mov	r6, r0
 800be18:	2d00      	cmp	r5, #0
 800be1a:	dd0c      	ble.n	800be36 <_dtoa_r+0x72e>
 800be1c:	f1b8 0f00 	cmp.w	r8, #0
 800be20:	dd09      	ble.n	800be36 <_dtoa_r+0x72e>
 800be22:	4545      	cmp	r5, r8
 800be24:	9a05      	ldr	r2, [sp, #20]
 800be26:	462b      	mov	r3, r5
 800be28:	bfa8      	it	ge
 800be2a:	4643      	movge	r3, r8
 800be2c:	1ad2      	subs	r2, r2, r3
 800be2e:	9205      	str	r2, [sp, #20]
 800be30:	1aed      	subs	r5, r5, r3
 800be32:	eba8 0803 	sub.w	r8, r8, r3
 800be36:	9b07      	ldr	r3, [sp, #28]
 800be38:	b1eb      	cbz	r3, 800be76 <_dtoa_r+0x76e>
 800be3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d067      	beq.n	800bf10 <_dtoa_r+0x808>
 800be40:	b18f      	cbz	r7, 800be66 <_dtoa_r+0x75e>
 800be42:	4631      	mov	r1, r6
 800be44:	463a      	mov	r2, r7
 800be46:	4620      	mov	r0, r4
 800be48:	f000 fc6e 	bl	800c728 <__pow5mult>
 800be4c:	9a04      	ldr	r2, [sp, #16]
 800be4e:	4601      	mov	r1, r0
 800be50:	4606      	mov	r6, r0
 800be52:	4620      	mov	r0, r4
 800be54:	f000 fbd2 	bl	800c5fc <__multiply>
 800be58:	9904      	ldr	r1, [sp, #16]
 800be5a:	9008      	str	r0, [sp, #32]
 800be5c:	4620      	mov	r0, r4
 800be5e:	f000 fb24 	bl	800c4aa <_Bfree>
 800be62:	9b08      	ldr	r3, [sp, #32]
 800be64:	9304      	str	r3, [sp, #16]
 800be66:	9b07      	ldr	r3, [sp, #28]
 800be68:	1bda      	subs	r2, r3, r7
 800be6a:	d004      	beq.n	800be76 <_dtoa_r+0x76e>
 800be6c:	9904      	ldr	r1, [sp, #16]
 800be6e:	4620      	mov	r0, r4
 800be70:	f000 fc5a 	bl	800c728 <__pow5mult>
 800be74:	9004      	str	r0, [sp, #16]
 800be76:	2101      	movs	r1, #1
 800be78:	4620      	mov	r0, r4
 800be7a:	f000 fbb6 	bl	800c5ea <__i2b>
 800be7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be80:	4607      	mov	r7, r0
 800be82:	2b00      	cmp	r3, #0
 800be84:	f000 81d0 	beq.w	800c228 <_dtoa_r+0xb20>
 800be88:	461a      	mov	r2, r3
 800be8a:	4601      	mov	r1, r0
 800be8c:	4620      	mov	r0, r4
 800be8e:	f000 fc4b 	bl	800c728 <__pow5mult>
 800be92:	9b06      	ldr	r3, [sp, #24]
 800be94:	2b01      	cmp	r3, #1
 800be96:	4607      	mov	r7, r0
 800be98:	dc40      	bgt.n	800bf1c <_dtoa_r+0x814>
 800be9a:	9b00      	ldr	r3, [sp, #0]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d139      	bne.n	800bf14 <_dtoa_r+0x80c>
 800bea0:	9b01      	ldr	r3, [sp, #4]
 800bea2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d136      	bne.n	800bf18 <_dtoa_r+0x810>
 800beaa:	9b01      	ldr	r3, [sp, #4]
 800beac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800beb0:	0d1b      	lsrs	r3, r3, #20
 800beb2:	051b      	lsls	r3, r3, #20
 800beb4:	b12b      	cbz	r3, 800bec2 <_dtoa_r+0x7ba>
 800beb6:	9b05      	ldr	r3, [sp, #20]
 800beb8:	3301      	adds	r3, #1
 800beba:	9305      	str	r3, [sp, #20]
 800bebc:	f108 0801 	add.w	r8, r8, #1
 800bec0:	2301      	movs	r3, #1
 800bec2:	9307      	str	r3, [sp, #28]
 800bec4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d12a      	bne.n	800bf20 <_dtoa_r+0x818>
 800beca:	2001      	movs	r0, #1
 800becc:	e030      	b.n	800bf30 <_dtoa_r+0x828>
 800bece:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bed0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bed4:	e795      	b.n	800be02 <_dtoa_r+0x6fa>
 800bed6:	9b07      	ldr	r3, [sp, #28]
 800bed8:	f109 37ff 	add.w	r7, r9, #4294967295
 800bedc:	42bb      	cmp	r3, r7
 800bede:	bfbf      	itttt	lt
 800bee0:	9b07      	ldrlt	r3, [sp, #28]
 800bee2:	9707      	strlt	r7, [sp, #28]
 800bee4:	1afa      	sublt	r2, r7, r3
 800bee6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800bee8:	bfbb      	ittet	lt
 800beea:	189b      	addlt	r3, r3, r2
 800beec:	930e      	strlt	r3, [sp, #56]	; 0x38
 800beee:	1bdf      	subge	r7, r3, r7
 800bef0:	2700      	movlt	r7, #0
 800bef2:	f1b9 0f00 	cmp.w	r9, #0
 800bef6:	bfb5      	itete	lt
 800bef8:	9b05      	ldrlt	r3, [sp, #20]
 800befa:	9d05      	ldrge	r5, [sp, #20]
 800befc:	eba3 0509 	sublt.w	r5, r3, r9
 800bf00:	464b      	movge	r3, r9
 800bf02:	bfb8      	it	lt
 800bf04:	2300      	movlt	r3, #0
 800bf06:	e77e      	b.n	800be06 <_dtoa_r+0x6fe>
 800bf08:	9f07      	ldr	r7, [sp, #28]
 800bf0a:	9d05      	ldr	r5, [sp, #20]
 800bf0c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800bf0e:	e783      	b.n	800be18 <_dtoa_r+0x710>
 800bf10:	9a07      	ldr	r2, [sp, #28]
 800bf12:	e7ab      	b.n	800be6c <_dtoa_r+0x764>
 800bf14:	2300      	movs	r3, #0
 800bf16:	e7d4      	b.n	800bec2 <_dtoa_r+0x7ba>
 800bf18:	9b00      	ldr	r3, [sp, #0]
 800bf1a:	e7d2      	b.n	800bec2 <_dtoa_r+0x7ba>
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	9307      	str	r3, [sp, #28]
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800bf26:	6918      	ldr	r0, [r3, #16]
 800bf28:	f000 fb11 	bl	800c54e <__hi0bits>
 800bf2c:	f1c0 0020 	rsb	r0, r0, #32
 800bf30:	4440      	add	r0, r8
 800bf32:	f010 001f 	ands.w	r0, r0, #31
 800bf36:	d047      	beq.n	800bfc8 <_dtoa_r+0x8c0>
 800bf38:	f1c0 0320 	rsb	r3, r0, #32
 800bf3c:	2b04      	cmp	r3, #4
 800bf3e:	dd3b      	ble.n	800bfb8 <_dtoa_r+0x8b0>
 800bf40:	9b05      	ldr	r3, [sp, #20]
 800bf42:	f1c0 001c 	rsb	r0, r0, #28
 800bf46:	4403      	add	r3, r0
 800bf48:	9305      	str	r3, [sp, #20]
 800bf4a:	4405      	add	r5, r0
 800bf4c:	4480      	add	r8, r0
 800bf4e:	9b05      	ldr	r3, [sp, #20]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	dd05      	ble.n	800bf60 <_dtoa_r+0x858>
 800bf54:	461a      	mov	r2, r3
 800bf56:	9904      	ldr	r1, [sp, #16]
 800bf58:	4620      	mov	r0, r4
 800bf5a:	f000 fc33 	bl	800c7c4 <__lshift>
 800bf5e:	9004      	str	r0, [sp, #16]
 800bf60:	f1b8 0f00 	cmp.w	r8, #0
 800bf64:	dd05      	ble.n	800bf72 <_dtoa_r+0x86a>
 800bf66:	4639      	mov	r1, r7
 800bf68:	4642      	mov	r2, r8
 800bf6a:	4620      	mov	r0, r4
 800bf6c:	f000 fc2a 	bl	800c7c4 <__lshift>
 800bf70:	4607      	mov	r7, r0
 800bf72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf74:	b353      	cbz	r3, 800bfcc <_dtoa_r+0x8c4>
 800bf76:	4639      	mov	r1, r7
 800bf78:	9804      	ldr	r0, [sp, #16]
 800bf7a:	f000 fc77 	bl	800c86c <__mcmp>
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	da24      	bge.n	800bfcc <_dtoa_r+0x8c4>
 800bf82:	2300      	movs	r3, #0
 800bf84:	220a      	movs	r2, #10
 800bf86:	9904      	ldr	r1, [sp, #16]
 800bf88:	4620      	mov	r0, r4
 800bf8a:	f000 faa5 	bl	800c4d8 <__multadd>
 800bf8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf90:	9004      	str	r0, [sp, #16]
 800bf92:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	f000 814d 	beq.w	800c236 <_dtoa_r+0xb2e>
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	4631      	mov	r1, r6
 800bfa0:	220a      	movs	r2, #10
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	f000 fa98 	bl	800c4d8 <__multadd>
 800bfa8:	9b02      	ldr	r3, [sp, #8]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	4606      	mov	r6, r0
 800bfae:	dc4f      	bgt.n	800c050 <_dtoa_r+0x948>
 800bfb0:	9b06      	ldr	r3, [sp, #24]
 800bfb2:	2b02      	cmp	r3, #2
 800bfb4:	dd4c      	ble.n	800c050 <_dtoa_r+0x948>
 800bfb6:	e011      	b.n	800bfdc <_dtoa_r+0x8d4>
 800bfb8:	d0c9      	beq.n	800bf4e <_dtoa_r+0x846>
 800bfba:	9a05      	ldr	r2, [sp, #20]
 800bfbc:	331c      	adds	r3, #28
 800bfbe:	441a      	add	r2, r3
 800bfc0:	9205      	str	r2, [sp, #20]
 800bfc2:	441d      	add	r5, r3
 800bfc4:	4498      	add	r8, r3
 800bfc6:	e7c2      	b.n	800bf4e <_dtoa_r+0x846>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	e7f6      	b.n	800bfba <_dtoa_r+0x8b2>
 800bfcc:	f1b9 0f00 	cmp.w	r9, #0
 800bfd0:	dc38      	bgt.n	800c044 <_dtoa_r+0x93c>
 800bfd2:	9b06      	ldr	r3, [sp, #24]
 800bfd4:	2b02      	cmp	r3, #2
 800bfd6:	dd35      	ble.n	800c044 <_dtoa_r+0x93c>
 800bfd8:	f8cd 9008 	str.w	r9, [sp, #8]
 800bfdc:	9b02      	ldr	r3, [sp, #8]
 800bfde:	b963      	cbnz	r3, 800bffa <_dtoa_r+0x8f2>
 800bfe0:	4639      	mov	r1, r7
 800bfe2:	2205      	movs	r2, #5
 800bfe4:	4620      	mov	r0, r4
 800bfe6:	f000 fa77 	bl	800c4d8 <__multadd>
 800bfea:	4601      	mov	r1, r0
 800bfec:	4607      	mov	r7, r0
 800bfee:	9804      	ldr	r0, [sp, #16]
 800bff0:	f000 fc3c 	bl	800c86c <__mcmp>
 800bff4:	2800      	cmp	r0, #0
 800bff6:	f73f adcc 	bgt.w	800bb92 <_dtoa_r+0x48a>
 800bffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bffc:	465d      	mov	r5, fp
 800bffe:	ea6f 0a03 	mvn.w	sl, r3
 800c002:	f04f 0900 	mov.w	r9, #0
 800c006:	4639      	mov	r1, r7
 800c008:	4620      	mov	r0, r4
 800c00a:	f000 fa4e 	bl	800c4aa <_Bfree>
 800c00e:	2e00      	cmp	r6, #0
 800c010:	f43f aeb7 	beq.w	800bd82 <_dtoa_r+0x67a>
 800c014:	f1b9 0f00 	cmp.w	r9, #0
 800c018:	d005      	beq.n	800c026 <_dtoa_r+0x91e>
 800c01a:	45b1      	cmp	r9, r6
 800c01c:	d003      	beq.n	800c026 <_dtoa_r+0x91e>
 800c01e:	4649      	mov	r1, r9
 800c020:	4620      	mov	r0, r4
 800c022:	f000 fa42 	bl	800c4aa <_Bfree>
 800c026:	4631      	mov	r1, r6
 800c028:	4620      	mov	r0, r4
 800c02a:	f000 fa3e 	bl	800c4aa <_Bfree>
 800c02e:	e6a8      	b.n	800bd82 <_dtoa_r+0x67a>
 800c030:	2700      	movs	r7, #0
 800c032:	463e      	mov	r6, r7
 800c034:	e7e1      	b.n	800bffa <_dtoa_r+0x8f2>
 800c036:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c03a:	463e      	mov	r6, r7
 800c03c:	e5a9      	b.n	800bb92 <_dtoa_r+0x48a>
 800c03e:	bf00      	nop
 800c040:	40240000 	.word	0x40240000
 800c044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c046:	f8cd 9008 	str.w	r9, [sp, #8]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	f000 80fa 	beq.w	800c244 <_dtoa_r+0xb3c>
 800c050:	2d00      	cmp	r5, #0
 800c052:	dd05      	ble.n	800c060 <_dtoa_r+0x958>
 800c054:	4631      	mov	r1, r6
 800c056:	462a      	mov	r2, r5
 800c058:	4620      	mov	r0, r4
 800c05a:	f000 fbb3 	bl	800c7c4 <__lshift>
 800c05e:	4606      	mov	r6, r0
 800c060:	9b07      	ldr	r3, [sp, #28]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d04c      	beq.n	800c100 <_dtoa_r+0x9f8>
 800c066:	6871      	ldr	r1, [r6, #4]
 800c068:	4620      	mov	r0, r4
 800c06a:	f000 f9ea 	bl	800c442 <_Balloc>
 800c06e:	6932      	ldr	r2, [r6, #16]
 800c070:	3202      	adds	r2, #2
 800c072:	4605      	mov	r5, r0
 800c074:	0092      	lsls	r2, r2, #2
 800c076:	f106 010c 	add.w	r1, r6, #12
 800c07a:	300c      	adds	r0, #12
 800c07c:	f000 f9d4 	bl	800c428 <memcpy>
 800c080:	2201      	movs	r2, #1
 800c082:	4629      	mov	r1, r5
 800c084:	4620      	mov	r0, r4
 800c086:	f000 fb9d 	bl	800c7c4 <__lshift>
 800c08a:	9b00      	ldr	r3, [sp, #0]
 800c08c:	f8cd b014 	str.w	fp, [sp, #20]
 800c090:	f003 0301 	and.w	r3, r3, #1
 800c094:	46b1      	mov	r9, r6
 800c096:	9307      	str	r3, [sp, #28]
 800c098:	4606      	mov	r6, r0
 800c09a:	4639      	mov	r1, r7
 800c09c:	9804      	ldr	r0, [sp, #16]
 800c09e:	f7ff faa6 	bl	800b5ee <quorem>
 800c0a2:	4649      	mov	r1, r9
 800c0a4:	4605      	mov	r5, r0
 800c0a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c0aa:	9804      	ldr	r0, [sp, #16]
 800c0ac:	f000 fbde 	bl	800c86c <__mcmp>
 800c0b0:	4632      	mov	r2, r6
 800c0b2:	9000      	str	r0, [sp, #0]
 800c0b4:	4639      	mov	r1, r7
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	f000 fbf2 	bl	800c8a0 <__mdiff>
 800c0bc:	68c3      	ldr	r3, [r0, #12]
 800c0be:	4602      	mov	r2, r0
 800c0c0:	bb03      	cbnz	r3, 800c104 <_dtoa_r+0x9fc>
 800c0c2:	4601      	mov	r1, r0
 800c0c4:	9008      	str	r0, [sp, #32]
 800c0c6:	9804      	ldr	r0, [sp, #16]
 800c0c8:	f000 fbd0 	bl	800c86c <__mcmp>
 800c0cc:	9a08      	ldr	r2, [sp, #32]
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	4611      	mov	r1, r2
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	9308      	str	r3, [sp, #32]
 800c0d6:	f000 f9e8 	bl	800c4aa <_Bfree>
 800c0da:	9b08      	ldr	r3, [sp, #32]
 800c0dc:	b9a3      	cbnz	r3, 800c108 <_dtoa_r+0xa00>
 800c0de:	9a06      	ldr	r2, [sp, #24]
 800c0e0:	b992      	cbnz	r2, 800c108 <_dtoa_r+0xa00>
 800c0e2:	9a07      	ldr	r2, [sp, #28]
 800c0e4:	b982      	cbnz	r2, 800c108 <_dtoa_r+0xa00>
 800c0e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c0ea:	d029      	beq.n	800c140 <_dtoa_r+0xa38>
 800c0ec:	9b00      	ldr	r3, [sp, #0]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	dd01      	ble.n	800c0f6 <_dtoa_r+0x9ee>
 800c0f2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c0f6:	9b05      	ldr	r3, [sp, #20]
 800c0f8:	1c5d      	adds	r5, r3, #1
 800c0fa:	f883 8000 	strb.w	r8, [r3]
 800c0fe:	e782      	b.n	800c006 <_dtoa_r+0x8fe>
 800c100:	4630      	mov	r0, r6
 800c102:	e7c2      	b.n	800c08a <_dtoa_r+0x982>
 800c104:	2301      	movs	r3, #1
 800c106:	e7e3      	b.n	800c0d0 <_dtoa_r+0x9c8>
 800c108:	9a00      	ldr	r2, [sp, #0]
 800c10a:	2a00      	cmp	r2, #0
 800c10c:	db04      	blt.n	800c118 <_dtoa_r+0xa10>
 800c10e:	d125      	bne.n	800c15c <_dtoa_r+0xa54>
 800c110:	9a06      	ldr	r2, [sp, #24]
 800c112:	bb1a      	cbnz	r2, 800c15c <_dtoa_r+0xa54>
 800c114:	9a07      	ldr	r2, [sp, #28]
 800c116:	bb0a      	cbnz	r2, 800c15c <_dtoa_r+0xa54>
 800c118:	2b00      	cmp	r3, #0
 800c11a:	ddec      	ble.n	800c0f6 <_dtoa_r+0x9ee>
 800c11c:	2201      	movs	r2, #1
 800c11e:	9904      	ldr	r1, [sp, #16]
 800c120:	4620      	mov	r0, r4
 800c122:	f000 fb4f 	bl	800c7c4 <__lshift>
 800c126:	4639      	mov	r1, r7
 800c128:	9004      	str	r0, [sp, #16]
 800c12a:	f000 fb9f 	bl	800c86c <__mcmp>
 800c12e:	2800      	cmp	r0, #0
 800c130:	dc03      	bgt.n	800c13a <_dtoa_r+0xa32>
 800c132:	d1e0      	bne.n	800c0f6 <_dtoa_r+0x9ee>
 800c134:	f018 0f01 	tst.w	r8, #1
 800c138:	d0dd      	beq.n	800c0f6 <_dtoa_r+0x9ee>
 800c13a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c13e:	d1d8      	bne.n	800c0f2 <_dtoa_r+0x9ea>
 800c140:	9b05      	ldr	r3, [sp, #20]
 800c142:	9a05      	ldr	r2, [sp, #20]
 800c144:	1c5d      	adds	r5, r3, #1
 800c146:	2339      	movs	r3, #57	; 0x39
 800c148:	7013      	strb	r3, [r2, #0]
 800c14a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c14e:	2b39      	cmp	r3, #57	; 0x39
 800c150:	f105 32ff 	add.w	r2, r5, #4294967295
 800c154:	d04f      	beq.n	800c1f6 <_dtoa_r+0xaee>
 800c156:	3301      	adds	r3, #1
 800c158:	7013      	strb	r3, [r2, #0]
 800c15a:	e754      	b.n	800c006 <_dtoa_r+0x8fe>
 800c15c:	9a05      	ldr	r2, [sp, #20]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	f102 0501 	add.w	r5, r2, #1
 800c164:	dd06      	ble.n	800c174 <_dtoa_r+0xa6c>
 800c166:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c16a:	d0e9      	beq.n	800c140 <_dtoa_r+0xa38>
 800c16c:	f108 0801 	add.w	r8, r8, #1
 800c170:	9b05      	ldr	r3, [sp, #20]
 800c172:	e7c2      	b.n	800c0fa <_dtoa_r+0x9f2>
 800c174:	9a02      	ldr	r2, [sp, #8]
 800c176:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c17a:	eba5 030b 	sub.w	r3, r5, fp
 800c17e:	4293      	cmp	r3, r2
 800c180:	d021      	beq.n	800c1c6 <_dtoa_r+0xabe>
 800c182:	2300      	movs	r3, #0
 800c184:	220a      	movs	r2, #10
 800c186:	9904      	ldr	r1, [sp, #16]
 800c188:	4620      	mov	r0, r4
 800c18a:	f000 f9a5 	bl	800c4d8 <__multadd>
 800c18e:	45b1      	cmp	r9, r6
 800c190:	9004      	str	r0, [sp, #16]
 800c192:	f04f 0300 	mov.w	r3, #0
 800c196:	f04f 020a 	mov.w	r2, #10
 800c19a:	4649      	mov	r1, r9
 800c19c:	4620      	mov	r0, r4
 800c19e:	d105      	bne.n	800c1ac <_dtoa_r+0xaa4>
 800c1a0:	f000 f99a 	bl	800c4d8 <__multadd>
 800c1a4:	4681      	mov	r9, r0
 800c1a6:	4606      	mov	r6, r0
 800c1a8:	9505      	str	r5, [sp, #20]
 800c1aa:	e776      	b.n	800c09a <_dtoa_r+0x992>
 800c1ac:	f000 f994 	bl	800c4d8 <__multadd>
 800c1b0:	4631      	mov	r1, r6
 800c1b2:	4681      	mov	r9, r0
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	220a      	movs	r2, #10
 800c1b8:	4620      	mov	r0, r4
 800c1ba:	f000 f98d 	bl	800c4d8 <__multadd>
 800c1be:	4606      	mov	r6, r0
 800c1c0:	e7f2      	b.n	800c1a8 <_dtoa_r+0xaa0>
 800c1c2:	f04f 0900 	mov.w	r9, #0
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	9904      	ldr	r1, [sp, #16]
 800c1ca:	4620      	mov	r0, r4
 800c1cc:	f000 fafa 	bl	800c7c4 <__lshift>
 800c1d0:	4639      	mov	r1, r7
 800c1d2:	9004      	str	r0, [sp, #16]
 800c1d4:	f000 fb4a 	bl	800c86c <__mcmp>
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	dcb6      	bgt.n	800c14a <_dtoa_r+0xa42>
 800c1dc:	d102      	bne.n	800c1e4 <_dtoa_r+0xadc>
 800c1de:	f018 0f01 	tst.w	r8, #1
 800c1e2:	d1b2      	bne.n	800c14a <_dtoa_r+0xa42>
 800c1e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c1e8:	2b30      	cmp	r3, #48	; 0x30
 800c1ea:	f105 32ff 	add.w	r2, r5, #4294967295
 800c1ee:	f47f af0a 	bne.w	800c006 <_dtoa_r+0x8fe>
 800c1f2:	4615      	mov	r5, r2
 800c1f4:	e7f6      	b.n	800c1e4 <_dtoa_r+0xadc>
 800c1f6:	4593      	cmp	fp, r2
 800c1f8:	d105      	bne.n	800c206 <_dtoa_r+0xafe>
 800c1fa:	2331      	movs	r3, #49	; 0x31
 800c1fc:	f10a 0a01 	add.w	sl, sl, #1
 800c200:	f88b 3000 	strb.w	r3, [fp]
 800c204:	e6ff      	b.n	800c006 <_dtoa_r+0x8fe>
 800c206:	4615      	mov	r5, r2
 800c208:	e79f      	b.n	800c14a <_dtoa_r+0xa42>
 800c20a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c270 <_dtoa_r+0xb68>
 800c20e:	e007      	b.n	800c220 <_dtoa_r+0xb18>
 800c210:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c212:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c274 <_dtoa_r+0xb6c>
 800c216:	b11b      	cbz	r3, 800c220 <_dtoa_r+0xb18>
 800c218:	f10b 0308 	add.w	r3, fp, #8
 800c21c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c21e:	6013      	str	r3, [r2, #0]
 800c220:	4658      	mov	r0, fp
 800c222:	b017      	add	sp, #92	; 0x5c
 800c224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c228:	9b06      	ldr	r3, [sp, #24]
 800c22a:	2b01      	cmp	r3, #1
 800c22c:	f77f ae35 	ble.w	800be9a <_dtoa_r+0x792>
 800c230:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c232:	9307      	str	r3, [sp, #28]
 800c234:	e649      	b.n	800beca <_dtoa_r+0x7c2>
 800c236:	9b02      	ldr	r3, [sp, #8]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	dc03      	bgt.n	800c244 <_dtoa_r+0xb3c>
 800c23c:	9b06      	ldr	r3, [sp, #24]
 800c23e:	2b02      	cmp	r3, #2
 800c240:	f73f aecc 	bgt.w	800bfdc <_dtoa_r+0x8d4>
 800c244:	465d      	mov	r5, fp
 800c246:	4639      	mov	r1, r7
 800c248:	9804      	ldr	r0, [sp, #16]
 800c24a:	f7ff f9d0 	bl	800b5ee <quorem>
 800c24e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c252:	f805 8b01 	strb.w	r8, [r5], #1
 800c256:	9a02      	ldr	r2, [sp, #8]
 800c258:	eba5 030b 	sub.w	r3, r5, fp
 800c25c:	429a      	cmp	r2, r3
 800c25e:	ddb0      	ble.n	800c1c2 <_dtoa_r+0xaba>
 800c260:	2300      	movs	r3, #0
 800c262:	220a      	movs	r2, #10
 800c264:	9904      	ldr	r1, [sp, #16]
 800c266:	4620      	mov	r0, r4
 800c268:	f000 f936 	bl	800c4d8 <__multadd>
 800c26c:	9004      	str	r0, [sp, #16]
 800c26e:	e7ea      	b.n	800c246 <_dtoa_r+0xb3e>
 800c270:	0800d644 	.word	0x0800d644
 800c274:	0800d668 	.word	0x0800d668

0800c278 <std>:
 800c278:	2300      	movs	r3, #0
 800c27a:	b510      	push	{r4, lr}
 800c27c:	4604      	mov	r4, r0
 800c27e:	e9c0 3300 	strd	r3, r3, [r0]
 800c282:	6083      	str	r3, [r0, #8]
 800c284:	8181      	strh	r1, [r0, #12]
 800c286:	6643      	str	r3, [r0, #100]	; 0x64
 800c288:	81c2      	strh	r2, [r0, #14]
 800c28a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c28e:	6183      	str	r3, [r0, #24]
 800c290:	4619      	mov	r1, r3
 800c292:	2208      	movs	r2, #8
 800c294:	305c      	adds	r0, #92	; 0x5c
 800c296:	f7fe fc3f 	bl	800ab18 <memset>
 800c29a:	4b05      	ldr	r3, [pc, #20]	; (800c2b0 <std+0x38>)
 800c29c:	6263      	str	r3, [r4, #36]	; 0x24
 800c29e:	4b05      	ldr	r3, [pc, #20]	; (800c2b4 <std+0x3c>)
 800c2a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800c2a2:	4b05      	ldr	r3, [pc, #20]	; (800c2b8 <std+0x40>)
 800c2a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c2a6:	4b05      	ldr	r3, [pc, #20]	; (800c2bc <std+0x44>)
 800c2a8:	6224      	str	r4, [r4, #32]
 800c2aa:	6323      	str	r3, [r4, #48]	; 0x30
 800c2ac:	bd10      	pop	{r4, pc}
 800c2ae:	bf00      	nop
 800c2b0:	0800cf39 	.word	0x0800cf39
 800c2b4:	0800cf5b 	.word	0x0800cf5b
 800c2b8:	0800cf93 	.word	0x0800cf93
 800c2bc:	0800cfb7 	.word	0x0800cfb7

0800c2c0 <_cleanup_r>:
 800c2c0:	4901      	ldr	r1, [pc, #4]	; (800c2c8 <_cleanup_r+0x8>)
 800c2c2:	f000 b885 	b.w	800c3d0 <_fwalk_reent>
 800c2c6:	bf00      	nop
 800c2c8:	0800d291 	.word	0x0800d291

0800c2cc <__sfmoreglue>:
 800c2cc:	b570      	push	{r4, r5, r6, lr}
 800c2ce:	1e4a      	subs	r2, r1, #1
 800c2d0:	2568      	movs	r5, #104	; 0x68
 800c2d2:	4355      	muls	r5, r2
 800c2d4:	460e      	mov	r6, r1
 800c2d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c2da:	f7fe fc73 	bl	800abc4 <_malloc_r>
 800c2de:	4604      	mov	r4, r0
 800c2e0:	b140      	cbz	r0, 800c2f4 <__sfmoreglue+0x28>
 800c2e2:	2100      	movs	r1, #0
 800c2e4:	e9c0 1600 	strd	r1, r6, [r0]
 800c2e8:	300c      	adds	r0, #12
 800c2ea:	60a0      	str	r0, [r4, #8]
 800c2ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c2f0:	f7fe fc12 	bl	800ab18 <memset>
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	bd70      	pop	{r4, r5, r6, pc}

0800c2f8 <__sinit>:
 800c2f8:	6983      	ldr	r3, [r0, #24]
 800c2fa:	b510      	push	{r4, lr}
 800c2fc:	4604      	mov	r4, r0
 800c2fe:	bb33      	cbnz	r3, 800c34e <__sinit+0x56>
 800c300:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c304:	6503      	str	r3, [r0, #80]	; 0x50
 800c306:	4b12      	ldr	r3, [pc, #72]	; (800c350 <__sinit+0x58>)
 800c308:	4a12      	ldr	r2, [pc, #72]	; (800c354 <__sinit+0x5c>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	6282      	str	r2, [r0, #40]	; 0x28
 800c30e:	4298      	cmp	r0, r3
 800c310:	bf04      	itt	eq
 800c312:	2301      	moveq	r3, #1
 800c314:	6183      	streq	r3, [r0, #24]
 800c316:	f000 f81f 	bl	800c358 <__sfp>
 800c31a:	6060      	str	r0, [r4, #4]
 800c31c:	4620      	mov	r0, r4
 800c31e:	f000 f81b 	bl	800c358 <__sfp>
 800c322:	60a0      	str	r0, [r4, #8]
 800c324:	4620      	mov	r0, r4
 800c326:	f000 f817 	bl	800c358 <__sfp>
 800c32a:	2200      	movs	r2, #0
 800c32c:	60e0      	str	r0, [r4, #12]
 800c32e:	2104      	movs	r1, #4
 800c330:	6860      	ldr	r0, [r4, #4]
 800c332:	f7ff ffa1 	bl	800c278 <std>
 800c336:	2201      	movs	r2, #1
 800c338:	2109      	movs	r1, #9
 800c33a:	68a0      	ldr	r0, [r4, #8]
 800c33c:	f7ff ff9c 	bl	800c278 <std>
 800c340:	2202      	movs	r2, #2
 800c342:	2112      	movs	r1, #18
 800c344:	68e0      	ldr	r0, [r4, #12]
 800c346:	f7ff ff97 	bl	800c278 <std>
 800c34a:	2301      	movs	r3, #1
 800c34c:	61a3      	str	r3, [r4, #24]
 800c34e:	bd10      	pop	{r4, pc}
 800c350:	0800d630 	.word	0x0800d630
 800c354:	0800c2c1 	.word	0x0800c2c1

0800c358 <__sfp>:
 800c358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c35a:	4b1b      	ldr	r3, [pc, #108]	; (800c3c8 <__sfp+0x70>)
 800c35c:	681e      	ldr	r6, [r3, #0]
 800c35e:	69b3      	ldr	r3, [r6, #24]
 800c360:	4607      	mov	r7, r0
 800c362:	b913      	cbnz	r3, 800c36a <__sfp+0x12>
 800c364:	4630      	mov	r0, r6
 800c366:	f7ff ffc7 	bl	800c2f8 <__sinit>
 800c36a:	3648      	adds	r6, #72	; 0x48
 800c36c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c370:	3b01      	subs	r3, #1
 800c372:	d503      	bpl.n	800c37c <__sfp+0x24>
 800c374:	6833      	ldr	r3, [r6, #0]
 800c376:	b133      	cbz	r3, 800c386 <__sfp+0x2e>
 800c378:	6836      	ldr	r6, [r6, #0]
 800c37a:	e7f7      	b.n	800c36c <__sfp+0x14>
 800c37c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c380:	b16d      	cbz	r5, 800c39e <__sfp+0x46>
 800c382:	3468      	adds	r4, #104	; 0x68
 800c384:	e7f4      	b.n	800c370 <__sfp+0x18>
 800c386:	2104      	movs	r1, #4
 800c388:	4638      	mov	r0, r7
 800c38a:	f7ff ff9f 	bl	800c2cc <__sfmoreglue>
 800c38e:	6030      	str	r0, [r6, #0]
 800c390:	2800      	cmp	r0, #0
 800c392:	d1f1      	bne.n	800c378 <__sfp+0x20>
 800c394:	230c      	movs	r3, #12
 800c396:	603b      	str	r3, [r7, #0]
 800c398:	4604      	mov	r4, r0
 800c39a:	4620      	mov	r0, r4
 800c39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c39e:	4b0b      	ldr	r3, [pc, #44]	; (800c3cc <__sfp+0x74>)
 800c3a0:	6665      	str	r5, [r4, #100]	; 0x64
 800c3a2:	e9c4 5500 	strd	r5, r5, [r4]
 800c3a6:	60a5      	str	r5, [r4, #8]
 800c3a8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c3ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c3b0:	2208      	movs	r2, #8
 800c3b2:	4629      	mov	r1, r5
 800c3b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c3b8:	f7fe fbae 	bl	800ab18 <memset>
 800c3bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c3c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c3c4:	e7e9      	b.n	800c39a <__sfp+0x42>
 800c3c6:	bf00      	nop
 800c3c8:	0800d630 	.word	0x0800d630
 800c3cc:	ffff0001 	.word	0xffff0001

0800c3d0 <_fwalk_reent>:
 800c3d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3d4:	4680      	mov	r8, r0
 800c3d6:	4689      	mov	r9, r1
 800c3d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c3dc:	2600      	movs	r6, #0
 800c3de:	b914      	cbnz	r4, 800c3e6 <_fwalk_reent+0x16>
 800c3e0:	4630      	mov	r0, r6
 800c3e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3e6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c3ea:	3f01      	subs	r7, #1
 800c3ec:	d501      	bpl.n	800c3f2 <_fwalk_reent+0x22>
 800c3ee:	6824      	ldr	r4, [r4, #0]
 800c3f0:	e7f5      	b.n	800c3de <_fwalk_reent+0xe>
 800c3f2:	89ab      	ldrh	r3, [r5, #12]
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d907      	bls.n	800c408 <_fwalk_reent+0x38>
 800c3f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	d003      	beq.n	800c408 <_fwalk_reent+0x38>
 800c400:	4629      	mov	r1, r5
 800c402:	4640      	mov	r0, r8
 800c404:	47c8      	blx	r9
 800c406:	4306      	orrs	r6, r0
 800c408:	3568      	adds	r5, #104	; 0x68
 800c40a:	e7ee      	b.n	800c3ea <_fwalk_reent+0x1a>

0800c40c <_localeconv_r>:
 800c40c:	4b04      	ldr	r3, [pc, #16]	; (800c420 <_localeconv_r+0x14>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	6a18      	ldr	r0, [r3, #32]
 800c412:	4b04      	ldr	r3, [pc, #16]	; (800c424 <_localeconv_r+0x18>)
 800c414:	2800      	cmp	r0, #0
 800c416:	bf08      	it	eq
 800c418:	4618      	moveq	r0, r3
 800c41a:	30f0      	adds	r0, #240	; 0xf0
 800c41c:	4770      	bx	lr
 800c41e:	bf00      	nop
 800c420:	20000018 	.word	0x20000018
 800c424:	2000007c 	.word	0x2000007c

0800c428 <memcpy>:
 800c428:	b510      	push	{r4, lr}
 800c42a:	1e43      	subs	r3, r0, #1
 800c42c:	440a      	add	r2, r1
 800c42e:	4291      	cmp	r1, r2
 800c430:	d100      	bne.n	800c434 <memcpy+0xc>
 800c432:	bd10      	pop	{r4, pc}
 800c434:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c438:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c43c:	e7f7      	b.n	800c42e <memcpy+0x6>

0800c43e <__malloc_lock>:
 800c43e:	4770      	bx	lr

0800c440 <__malloc_unlock>:
 800c440:	4770      	bx	lr

0800c442 <_Balloc>:
 800c442:	b570      	push	{r4, r5, r6, lr}
 800c444:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c446:	4604      	mov	r4, r0
 800c448:	460e      	mov	r6, r1
 800c44a:	b93d      	cbnz	r5, 800c45c <_Balloc+0x1a>
 800c44c:	2010      	movs	r0, #16
 800c44e:	f7fe fb5b 	bl	800ab08 <malloc>
 800c452:	6260      	str	r0, [r4, #36]	; 0x24
 800c454:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c458:	6005      	str	r5, [r0, #0]
 800c45a:	60c5      	str	r5, [r0, #12]
 800c45c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c45e:	68eb      	ldr	r3, [r5, #12]
 800c460:	b183      	cbz	r3, 800c484 <_Balloc+0x42>
 800c462:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c464:	68db      	ldr	r3, [r3, #12]
 800c466:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c46a:	b9b8      	cbnz	r0, 800c49c <_Balloc+0x5a>
 800c46c:	2101      	movs	r1, #1
 800c46e:	fa01 f506 	lsl.w	r5, r1, r6
 800c472:	1d6a      	adds	r2, r5, #5
 800c474:	0092      	lsls	r2, r2, #2
 800c476:	4620      	mov	r0, r4
 800c478:	f000 fabe 	bl	800c9f8 <_calloc_r>
 800c47c:	b160      	cbz	r0, 800c498 <_Balloc+0x56>
 800c47e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c482:	e00e      	b.n	800c4a2 <_Balloc+0x60>
 800c484:	2221      	movs	r2, #33	; 0x21
 800c486:	2104      	movs	r1, #4
 800c488:	4620      	mov	r0, r4
 800c48a:	f000 fab5 	bl	800c9f8 <_calloc_r>
 800c48e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c490:	60e8      	str	r0, [r5, #12]
 800c492:	68db      	ldr	r3, [r3, #12]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d1e4      	bne.n	800c462 <_Balloc+0x20>
 800c498:	2000      	movs	r0, #0
 800c49a:	bd70      	pop	{r4, r5, r6, pc}
 800c49c:	6802      	ldr	r2, [r0, #0]
 800c49e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c4a8:	e7f7      	b.n	800c49a <_Balloc+0x58>

0800c4aa <_Bfree>:
 800c4aa:	b570      	push	{r4, r5, r6, lr}
 800c4ac:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c4ae:	4606      	mov	r6, r0
 800c4b0:	460d      	mov	r5, r1
 800c4b2:	b93c      	cbnz	r4, 800c4c4 <_Bfree+0x1a>
 800c4b4:	2010      	movs	r0, #16
 800c4b6:	f7fe fb27 	bl	800ab08 <malloc>
 800c4ba:	6270      	str	r0, [r6, #36]	; 0x24
 800c4bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c4c0:	6004      	str	r4, [r0, #0]
 800c4c2:	60c4      	str	r4, [r0, #12]
 800c4c4:	b13d      	cbz	r5, 800c4d6 <_Bfree+0x2c>
 800c4c6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c4c8:	686a      	ldr	r2, [r5, #4]
 800c4ca:	68db      	ldr	r3, [r3, #12]
 800c4cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c4d0:	6029      	str	r1, [r5, #0]
 800c4d2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c4d6:	bd70      	pop	{r4, r5, r6, pc}

0800c4d8 <__multadd>:
 800c4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4dc:	690d      	ldr	r5, [r1, #16]
 800c4de:	461f      	mov	r7, r3
 800c4e0:	4606      	mov	r6, r0
 800c4e2:	460c      	mov	r4, r1
 800c4e4:	f101 0c14 	add.w	ip, r1, #20
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	f8dc 0000 	ldr.w	r0, [ip]
 800c4ee:	b281      	uxth	r1, r0
 800c4f0:	fb02 7101 	mla	r1, r2, r1, r7
 800c4f4:	0c0f      	lsrs	r7, r1, #16
 800c4f6:	0c00      	lsrs	r0, r0, #16
 800c4f8:	fb02 7000 	mla	r0, r2, r0, r7
 800c4fc:	b289      	uxth	r1, r1
 800c4fe:	3301      	adds	r3, #1
 800c500:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c504:	429d      	cmp	r5, r3
 800c506:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c50a:	f84c 1b04 	str.w	r1, [ip], #4
 800c50e:	dcec      	bgt.n	800c4ea <__multadd+0x12>
 800c510:	b1d7      	cbz	r7, 800c548 <__multadd+0x70>
 800c512:	68a3      	ldr	r3, [r4, #8]
 800c514:	42ab      	cmp	r3, r5
 800c516:	dc12      	bgt.n	800c53e <__multadd+0x66>
 800c518:	6861      	ldr	r1, [r4, #4]
 800c51a:	4630      	mov	r0, r6
 800c51c:	3101      	adds	r1, #1
 800c51e:	f7ff ff90 	bl	800c442 <_Balloc>
 800c522:	6922      	ldr	r2, [r4, #16]
 800c524:	3202      	adds	r2, #2
 800c526:	f104 010c 	add.w	r1, r4, #12
 800c52a:	4680      	mov	r8, r0
 800c52c:	0092      	lsls	r2, r2, #2
 800c52e:	300c      	adds	r0, #12
 800c530:	f7ff ff7a 	bl	800c428 <memcpy>
 800c534:	4621      	mov	r1, r4
 800c536:	4630      	mov	r0, r6
 800c538:	f7ff ffb7 	bl	800c4aa <_Bfree>
 800c53c:	4644      	mov	r4, r8
 800c53e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c542:	3501      	adds	r5, #1
 800c544:	615f      	str	r7, [r3, #20]
 800c546:	6125      	str	r5, [r4, #16]
 800c548:	4620      	mov	r0, r4
 800c54a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c54e <__hi0bits>:
 800c54e:	0c02      	lsrs	r2, r0, #16
 800c550:	0412      	lsls	r2, r2, #16
 800c552:	4603      	mov	r3, r0
 800c554:	b9b2      	cbnz	r2, 800c584 <__hi0bits+0x36>
 800c556:	0403      	lsls	r3, r0, #16
 800c558:	2010      	movs	r0, #16
 800c55a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c55e:	bf04      	itt	eq
 800c560:	021b      	lsleq	r3, r3, #8
 800c562:	3008      	addeq	r0, #8
 800c564:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c568:	bf04      	itt	eq
 800c56a:	011b      	lsleq	r3, r3, #4
 800c56c:	3004      	addeq	r0, #4
 800c56e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c572:	bf04      	itt	eq
 800c574:	009b      	lsleq	r3, r3, #2
 800c576:	3002      	addeq	r0, #2
 800c578:	2b00      	cmp	r3, #0
 800c57a:	db06      	blt.n	800c58a <__hi0bits+0x3c>
 800c57c:	005b      	lsls	r3, r3, #1
 800c57e:	d503      	bpl.n	800c588 <__hi0bits+0x3a>
 800c580:	3001      	adds	r0, #1
 800c582:	4770      	bx	lr
 800c584:	2000      	movs	r0, #0
 800c586:	e7e8      	b.n	800c55a <__hi0bits+0xc>
 800c588:	2020      	movs	r0, #32
 800c58a:	4770      	bx	lr

0800c58c <__lo0bits>:
 800c58c:	6803      	ldr	r3, [r0, #0]
 800c58e:	f013 0207 	ands.w	r2, r3, #7
 800c592:	4601      	mov	r1, r0
 800c594:	d00b      	beq.n	800c5ae <__lo0bits+0x22>
 800c596:	07da      	lsls	r2, r3, #31
 800c598:	d423      	bmi.n	800c5e2 <__lo0bits+0x56>
 800c59a:	0798      	lsls	r0, r3, #30
 800c59c:	bf49      	itett	mi
 800c59e:	085b      	lsrmi	r3, r3, #1
 800c5a0:	089b      	lsrpl	r3, r3, #2
 800c5a2:	2001      	movmi	r0, #1
 800c5a4:	600b      	strmi	r3, [r1, #0]
 800c5a6:	bf5c      	itt	pl
 800c5a8:	600b      	strpl	r3, [r1, #0]
 800c5aa:	2002      	movpl	r0, #2
 800c5ac:	4770      	bx	lr
 800c5ae:	b298      	uxth	r0, r3
 800c5b0:	b9a8      	cbnz	r0, 800c5de <__lo0bits+0x52>
 800c5b2:	0c1b      	lsrs	r3, r3, #16
 800c5b4:	2010      	movs	r0, #16
 800c5b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c5ba:	bf04      	itt	eq
 800c5bc:	0a1b      	lsreq	r3, r3, #8
 800c5be:	3008      	addeq	r0, #8
 800c5c0:	071a      	lsls	r2, r3, #28
 800c5c2:	bf04      	itt	eq
 800c5c4:	091b      	lsreq	r3, r3, #4
 800c5c6:	3004      	addeq	r0, #4
 800c5c8:	079a      	lsls	r2, r3, #30
 800c5ca:	bf04      	itt	eq
 800c5cc:	089b      	lsreq	r3, r3, #2
 800c5ce:	3002      	addeq	r0, #2
 800c5d0:	07da      	lsls	r2, r3, #31
 800c5d2:	d402      	bmi.n	800c5da <__lo0bits+0x4e>
 800c5d4:	085b      	lsrs	r3, r3, #1
 800c5d6:	d006      	beq.n	800c5e6 <__lo0bits+0x5a>
 800c5d8:	3001      	adds	r0, #1
 800c5da:	600b      	str	r3, [r1, #0]
 800c5dc:	4770      	bx	lr
 800c5de:	4610      	mov	r0, r2
 800c5e0:	e7e9      	b.n	800c5b6 <__lo0bits+0x2a>
 800c5e2:	2000      	movs	r0, #0
 800c5e4:	4770      	bx	lr
 800c5e6:	2020      	movs	r0, #32
 800c5e8:	4770      	bx	lr

0800c5ea <__i2b>:
 800c5ea:	b510      	push	{r4, lr}
 800c5ec:	460c      	mov	r4, r1
 800c5ee:	2101      	movs	r1, #1
 800c5f0:	f7ff ff27 	bl	800c442 <_Balloc>
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	6144      	str	r4, [r0, #20]
 800c5f8:	6102      	str	r2, [r0, #16]
 800c5fa:	bd10      	pop	{r4, pc}

0800c5fc <__multiply>:
 800c5fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c600:	4614      	mov	r4, r2
 800c602:	690a      	ldr	r2, [r1, #16]
 800c604:	6923      	ldr	r3, [r4, #16]
 800c606:	429a      	cmp	r2, r3
 800c608:	bfb8      	it	lt
 800c60a:	460b      	movlt	r3, r1
 800c60c:	4688      	mov	r8, r1
 800c60e:	bfbc      	itt	lt
 800c610:	46a0      	movlt	r8, r4
 800c612:	461c      	movlt	r4, r3
 800c614:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c618:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c61c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c620:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c624:	eb07 0609 	add.w	r6, r7, r9
 800c628:	42b3      	cmp	r3, r6
 800c62a:	bfb8      	it	lt
 800c62c:	3101      	addlt	r1, #1
 800c62e:	f7ff ff08 	bl	800c442 <_Balloc>
 800c632:	f100 0514 	add.w	r5, r0, #20
 800c636:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c63a:	462b      	mov	r3, r5
 800c63c:	2200      	movs	r2, #0
 800c63e:	4573      	cmp	r3, lr
 800c640:	d316      	bcc.n	800c670 <__multiply+0x74>
 800c642:	f104 0214 	add.w	r2, r4, #20
 800c646:	f108 0114 	add.w	r1, r8, #20
 800c64a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c64e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c652:	9300      	str	r3, [sp, #0]
 800c654:	9b00      	ldr	r3, [sp, #0]
 800c656:	9201      	str	r2, [sp, #4]
 800c658:	4293      	cmp	r3, r2
 800c65a:	d80c      	bhi.n	800c676 <__multiply+0x7a>
 800c65c:	2e00      	cmp	r6, #0
 800c65e:	dd03      	ble.n	800c668 <__multiply+0x6c>
 800c660:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c664:	2b00      	cmp	r3, #0
 800c666:	d05d      	beq.n	800c724 <__multiply+0x128>
 800c668:	6106      	str	r6, [r0, #16]
 800c66a:	b003      	add	sp, #12
 800c66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c670:	f843 2b04 	str.w	r2, [r3], #4
 800c674:	e7e3      	b.n	800c63e <__multiply+0x42>
 800c676:	f8b2 b000 	ldrh.w	fp, [r2]
 800c67a:	f1bb 0f00 	cmp.w	fp, #0
 800c67e:	d023      	beq.n	800c6c8 <__multiply+0xcc>
 800c680:	4689      	mov	r9, r1
 800c682:	46ac      	mov	ip, r5
 800c684:	f04f 0800 	mov.w	r8, #0
 800c688:	f859 4b04 	ldr.w	r4, [r9], #4
 800c68c:	f8dc a000 	ldr.w	sl, [ip]
 800c690:	b2a3      	uxth	r3, r4
 800c692:	fa1f fa8a 	uxth.w	sl, sl
 800c696:	fb0b a303 	mla	r3, fp, r3, sl
 800c69a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c69e:	f8dc 4000 	ldr.w	r4, [ip]
 800c6a2:	4443      	add	r3, r8
 800c6a4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c6a8:	fb0b 840a 	mla	r4, fp, sl, r8
 800c6ac:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c6b0:	46e2      	mov	sl, ip
 800c6b2:	b29b      	uxth	r3, r3
 800c6b4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c6b8:	454f      	cmp	r7, r9
 800c6ba:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c6be:	f84a 3b04 	str.w	r3, [sl], #4
 800c6c2:	d82b      	bhi.n	800c71c <__multiply+0x120>
 800c6c4:	f8cc 8004 	str.w	r8, [ip, #4]
 800c6c8:	9b01      	ldr	r3, [sp, #4]
 800c6ca:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c6ce:	3204      	adds	r2, #4
 800c6d0:	f1ba 0f00 	cmp.w	sl, #0
 800c6d4:	d020      	beq.n	800c718 <__multiply+0x11c>
 800c6d6:	682b      	ldr	r3, [r5, #0]
 800c6d8:	4689      	mov	r9, r1
 800c6da:	46a8      	mov	r8, r5
 800c6dc:	f04f 0b00 	mov.w	fp, #0
 800c6e0:	f8b9 c000 	ldrh.w	ip, [r9]
 800c6e4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c6e8:	fb0a 440c 	mla	r4, sl, ip, r4
 800c6ec:	445c      	add	r4, fp
 800c6ee:	46c4      	mov	ip, r8
 800c6f0:	b29b      	uxth	r3, r3
 800c6f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c6f6:	f84c 3b04 	str.w	r3, [ip], #4
 800c6fa:	f859 3b04 	ldr.w	r3, [r9], #4
 800c6fe:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c702:	0c1b      	lsrs	r3, r3, #16
 800c704:	fb0a b303 	mla	r3, sl, r3, fp
 800c708:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c70c:	454f      	cmp	r7, r9
 800c70e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c712:	d805      	bhi.n	800c720 <__multiply+0x124>
 800c714:	f8c8 3004 	str.w	r3, [r8, #4]
 800c718:	3504      	adds	r5, #4
 800c71a:	e79b      	b.n	800c654 <__multiply+0x58>
 800c71c:	46d4      	mov	ip, sl
 800c71e:	e7b3      	b.n	800c688 <__multiply+0x8c>
 800c720:	46e0      	mov	r8, ip
 800c722:	e7dd      	b.n	800c6e0 <__multiply+0xe4>
 800c724:	3e01      	subs	r6, #1
 800c726:	e799      	b.n	800c65c <__multiply+0x60>

0800c728 <__pow5mult>:
 800c728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c72c:	4615      	mov	r5, r2
 800c72e:	f012 0203 	ands.w	r2, r2, #3
 800c732:	4606      	mov	r6, r0
 800c734:	460f      	mov	r7, r1
 800c736:	d007      	beq.n	800c748 <__pow5mult+0x20>
 800c738:	3a01      	subs	r2, #1
 800c73a:	4c21      	ldr	r4, [pc, #132]	; (800c7c0 <__pow5mult+0x98>)
 800c73c:	2300      	movs	r3, #0
 800c73e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c742:	f7ff fec9 	bl	800c4d8 <__multadd>
 800c746:	4607      	mov	r7, r0
 800c748:	10ad      	asrs	r5, r5, #2
 800c74a:	d035      	beq.n	800c7b8 <__pow5mult+0x90>
 800c74c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c74e:	b93c      	cbnz	r4, 800c760 <__pow5mult+0x38>
 800c750:	2010      	movs	r0, #16
 800c752:	f7fe f9d9 	bl	800ab08 <malloc>
 800c756:	6270      	str	r0, [r6, #36]	; 0x24
 800c758:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c75c:	6004      	str	r4, [r0, #0]
 800c75e:	60c4      	str	r4, [r0, #12]
 800c760:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c764:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c768:	b94c      	cbnz	r4, 800c77e <__pow5mult+0x56>
 800c76a:	f240 2171 	movw	r1, #625	; 0x271
 800c76e:	4630      	mov	r0, r6
 800c770:	f7ff ff3b 	bl	800c5ea <__i2b>
 800c774:	2300      	movs	r3, #0
 800c776:	f8c8 0008 	str.w	r0, [r8, #8]
 800c77a:	4604      	mov	r4, r0
 800c77c:	6003      	str	r3, [r0, #0]
 800c77e:	f04f 0800 	mov.w	r8, #0
 800c782:	07eb      	lsls	r3, r5, #31
 800c784:	d50a      	bpl.n	800c79c <__pow5mult+0x74>
 800c786:	4639      	mov	r1, r7
 800c788:	4622      	mov	r2, r4
 800c78a:	4630      	mov	r0, r6
 800c78c:	f7ff ff36 	bl	800c5fc <__multiply>
 800c790:	4639      	mov	r1, r7
 800c792:	4681      	mov	r9, r0
 800c794:	4630      	mov	r0, r6
 800c796:	f7ff fe88 	bl	800c4aa <_Bfree>
 800c79a:	464f      	mov	r7, r9
 800c79c:	106d      	asrs	r5, r5, #1
 800c79e:	d00b      	beq.n	800c7b8 <__pow5mult+0x90>
 800c7a0:	6820      	ldr	r0, [r4, #0]
 800c7a2:	b938      	cbnz	r0, 800c7b4 <__pow5mult+0x8c>
 800c7a4:	4622      	mov	r2, r4
 800c7a6:	4621      	mov	r1, r4
 800c7a8:	4630      	mov	r0, r6
 800c7aa:	f7ff ff27 	bl	800c5fc <__multiply>
 800c7ae:	6020      	str	r0, [r4, #0]
 800c7b0:	f8c0 8000 	str.w	r8, [r0]
 800c7b4:	4604      	mov	r4, r0
 800c7b6:	e7e4      	b.n	800c782 <__pow5mult+0x5a>
 800c7b8:	4638      	mov	r0, r7
 800c7ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7be:	bf00      	nop
 800c7c0:	0800d7c8 	.word	0x0800d7c8

0800c7c4 <__lshift>:
 800c7c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7c8:	460c      	mov	r4, r1
 800c7ca:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c7ce:	6923      	ldr	r3, [r4, #16]
 800c7d0:	6849      	ldr	r1, [r1, #4]
 800c7d2:	eb0a 0903 	add.w	r9, sl, r3
 800c7d6:	68a3      	ldr	r3, [r4, #8]
 800c7d8:	4607      	mov	r7, r0
 800c7da:	4616      	mov	r6, r2
 800c7dc:	f109 0501 	add.w	r5, r9, #1
 800c7e0:	42ab      	cmp	r3, r5
 800c7e2:	db32      	blt.n	800c84a <__lshift+0x86>
 800c7e4:	4638      	mov	r0, r7
 800c7e6:	f7ff fe2c 	bl	800c442 <_Balloc>
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	4680      	mov	r8, r0
 800c7ee:	f100 0114 	add.w	r1, r0, #20
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	4553      	cmp	r3, sl
 800c7f6:	db2b      	blt.n	800c850 <__lshift+0x8c>
 800c7f8:	6920      	ldr	r0, [r4, #16]
 800c7fa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c7fe:	f104 0314 	add.w	r3, r4, #20
 800c802:	f016 021f 	ands.w	r2, r6, #31
 800c806:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c80a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c80e:	d025      	beq.n	800c85c <__lshift+0x98>
 800c810:	f1c2 0e20 	rsb	lr, r2, #32
 800c814:	2000      	movs	r0, #0
 800c816:	681e      	ldr	r6, [r3, #0]
 800c818:	468a      	mov	sl, r1
 800c81a:	4096      	lsls	r6, r2
 800c81c:	4330      	orrs	r0, r6
 800c81e:	f84a 0b04 	str.w	r0, [sl], #4
 800c822:	f853 0b04 	ldr.w	r0, [r3], #4
 800c826:	459c      	cmp	ip, r3
 800c828:	fa20 f00e 	lsr.w	r0, r0, lr
 800c82c:	d814      	bhi.n	800c858 <__lshift+0x94>
 800c82e:	6048      	str	r0, [r1, #4]
 800c830:	b108      	cbz	r0, 800c836 <__lshift+0x72>
 800c832:	f109 0502 	add.w	r5, r9, #2
 800c836:	3d01      	subs	r5, #1
 800c838:	4638      	mov	r0, r7
 800c83a:	f8c8 5010 	str.w	r5, [r8, #16]
 800c83e:	4621      	mov	r1, r4
 800c840:	f7ff fe33 	bl	800c4aa <_Bfree>
 800c844:	4640      	mov	r0, r8
 800c846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c84a:	3101      	adds	r1, #1
 800c84c:	005b      	lsls	r3, r3, #1
 800c84e:	e7c7      	b.n	800c7e0 <__lshift+0x1c>
 800c850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c854:	3301      	adds	r3, #1
 800c856:	e7cd      	b.n	800c7f4 <__lshift+0x30>
 800c858:	4651      	mov	r1, sl
 800c85a:	e7dc      	b.n	800c816 <__lshift+0x52>
 800c85c:	3904      	subs	r1, #4
 800c85e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c862:	f841 2f04 	str.w	r2, [r1, #4]!
 800c866:	459c      	cmp	ip, r3
 800c868:	d8f9      	bhi.n	800c85e <__lshift+0x9a>
 800c86a:	e7e4      	b.n	800c836 <__lshift+0x72>

0800c86c <__mcmp>:
 800c86c:	6903      	ldr	r3, [r0, #16]
 800c86e:	690a      	ldr	r2, [r1, #16]
 800c870:	1a9b      	subs	r3, r3, r2
 800c872:	b530      	push	{r4, r5, lr}
 800c874:	d10c      	bne.n	800c890 <__mcmp+0x24>
 800c876:	0092      	lsls	r2, r2, #2
 800c878:	3014      	adds	r0, #20
 800c87a:	3114      	adds	r1, #20
 800c87c:	1884      	adds	r4, r0, r2
 800c87e:	4411      	add	r1, r2
 800c880:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c884:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c888:	4295      	cmp	r5, r2
 800c88a:	d003      	beq.n	800c894 <__mcmp+0x28>
 800c88c:	d305      	bcc.n	800c89a <__mcmp+0x2e>
 800c88e:	2301      	movs	r3, #1
 800c890:	4618      	mov	r0, r3
 800c892:	bd30      	pop	{r4, r5, pc}
 800c894:	42a0      	cmp	r0, r4
 800c896:	d3f3      	bcc.n	800c880 <__mcmp+0x14>
 800c898:	e7fa      	b.n	800c890 <__mcmp+0x24>
 800c89a:	f04f 33ff 	mov.w	r3, #4294967295
 800c89e:	e7f7      	b.n	800c890 <__mcmp+0x24>

0800c8a0 <__mdiff>:
 800c8a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8a4:	460d      	mov	r5, r1
 800c8a6:	4607      	mov	r7, r0
 800c8a8:	4611      	mov	r1, r2
 800c8aa:	4628      	mov	r0, r5
 800c8ac:	4614      	mov	r4, r2
 800c8ae:	f7ff ffdd 	bl	800c86c <__mcmp>
 800c8b2:	1e06      	subs	r6, r0, #0
 800c8b4:	d108      	bne.n	800c8c8 <__mdiff+0x28>
 800c8b6:	4631      	mov	r1, r6
 800c8b8:	4638      	mov	r0, r7
 800c8ba:	f7ff fdc2 	bl	800c442 <_Balloc>
 800c8be:	2301      	movs	r3, #1
 800c8c0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c8c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8c8:	bfa4      	itt	ge
 800c8ca:	4623      	movge	r3, r4
 800c8cc:	462c      	movge	r4, r5
 800c8ce:	4638      	mov	r0, r7
 800c8d0:	6861      	ldr	r1, [r4, #4]
 800c8d2:	bfa6      	itte	ge
 800c8d4:	461d      	movge	r5, r3
 800c8d6:	2600      	movge	r6, #0
 800c8d8:	2601      	movlt	r6, #1
 800c8da:	f7ff fdb2 	bl	800c442 <_Balloc>
 800c8de:	692b      	ldr	r3, [r5, #16]
 800c8e0:	60c6      	str	r6, [r0, #12]
 800c8e2:	6926      	ldr	r6, [r4, #16]
 800c8e4:	f105 0914 	add.w	r9, r5, #20
 800c8e8:	f104 0214 	add.w	r2, r4, #20
 800c8ec:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c8f0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c8f4:	f100 0514 	add.w	r5, r0, #20
 800c8f8:	f04f 0e00 	mov.w	lr, #0
 800c8fc:	f852 ab04 	ldr.w	sl, [r2], #4
 800c900:	f859 4b04 	ldr.w	r4, [r9], #4
 800c904:	fa1e f18a 	uxtah	r1, lr, sl
 800c908:	b2a3      	uxth	r3, r4
 800c90a:	1ac9      	subs	r1, r1, r3
 800c90c:	0c23      	lsrs	r3, r4, #16
 800c90e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c912:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c916:	b289      	uxth	r1, r1
 800c918:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c91c:	45c8      	cmp	r8, r9
 800c91e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c922:	4694      	mov	ip, r2
 800c924:	f845 3b04 	str.w	r3, [r5], #4
 800c928:	d8e8      	bhi.n	800c8fc <__mdiff+0x5c>
 800c92a:	45bc      	cmp	ip, r7
 800c92c:	d304      	bcc.n	800c938 <__mdiff+0x98>
 800c92e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c932:	b183      	cbz	r3, 800c956 <__mdiff+0xb6>
 800c934:	6106      	str	r6, [r0, #16]
 800c936:	e7c5      	b.n	800c8c4 <__mdiff+0x24>
 800c938:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c93c:	fa1e f381 	uxtah	r3, lr, r1
 800c940:	141a      	asrs	r2, r3, #16
 800c942:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c946:	b29b      	uxth	r3, r3
 800c948:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c94c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c950:	f845 3b04 	str.w	r3, [r5], #4
 800c954:	e7e9      	b.n	800c92a <__mdiff+0x8a>
 800c956:	3e01      	subs	r6, #1
 800c958:	e7e9      	b.n	800c92e <__mdiff+0x8e>

0800c95a <__d2b>:
 800c95a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c95e:	460e      	mov	r6, r1
 800c960:	2101      	movs	r1, #1
 800c962:	ec59 8b10 	vmov	r8, r9, d0
 800c966:	4615      	mov	r5, r2
 800c968:	f7ff fd6b 	bl	800c442 <_Balloc>
 800c96c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c970:	4607      	mov	r7, r0
 800c972:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c976:	bb34      	cbnz	r4, 800c9c6 <__d2b+0x6c>
 800c978:	9301      	str	r3, [sp, #4]
 800c97a:	f1b8 0300 	subs.w	r3, r8, #0
 800c97e:	d027      	beq.n	800c9d0 <__d2b+0x76>
 800c980:	a802      	add	r0, sp, #8
 800c982:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c986:	f7ff fe01 	bl	800c58c <__lo0bits>
 800c98a:	9900      	ldr	r1, [sp, #0]
 800c98c:	b1f0      	cbz	r0, 800c9cc <__d2b+0x72>
 800c98e:	9a01      	ldr	r2, [sp, #4]
 800c990:	f1c0 0320 	rsb	r3, r0, #32
 800c994:	fa02 f303 	lsl.w	r3, r2, r3
 800c998:	430b      	orrs	r3, r1
 800c99a:	40c2      	lsrs	r2, r0
 800c99c:	617b      	str	r3, [r7, #20]
 800c99e:	9201      	str	r2, [sp, #4]
 800c9a0:	9b01      	ldr	r3, [sp, #4]
 800c9a2:	61bb      	str	r3, [r7, #24]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	bf14      	ite	ne
 800c9a8:	2102      	movne	r1, #2
 800c9aa:	2101      	moveq	r1, #1
 800c9ac:	6139      	str	r1, [r7, #16]
 800c9ae:	b1c4      	cbz	r4, 800c9e2 <__d2b+0x88>
 800c9b0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c9b4:	4404      	add	r4, r0
 800c9b6:	6034      	str	r4, [r6, #0]
 800c9b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c9bc:	6028      	str	r0, [r5, #0]
 800c9be:	4638      	mov	r0, r7
 800c9c0:	b003      	add	sp, #12
 800c9c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c9ca:	e7d5      	b.n	800c978 <__d2b+0x1e>
 800c9cc:	6179      	str	r1, [r7, #20]
 800c9ce:	e7e7      	b.n	800c9a0 <__d2b+0x46>
 800c9d0:	a801      	add	r0, sp, #4
 800c9d2:	f7ff fddb 	bl	800c58c <__lo0bits>
 800c9d6:	9b01      	ldr	r3, [sp, #4]
 800c9d8:	617b      	str	r3, [r7, #20]
 800c9da:	2101      	movs	r1, #1
 800c9dc:	6139      	str	r1, [r7, #16]
 800c9de:	3020      	adds	r0, #32
 800c9e0:	e7e5      	b.n	800c9ae <__d2b+0x54>
 800c9e2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c9e6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c9ea:	6030      	str	r0, [r6, #0]
 800c9ec:	6918      	ldr	r0, [r3, #16]
 800c9ee:	f7ff fdae 	bl	800c54e <__hi0bits>
 800c9f2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c9f6:	e7e1      	b.n	800c9bc <__d2b+0x62>

0800c9f8 <_calloc_r>:
 800c9f8:	b538      	push	{r3, r4, r5, lr}
 800c9fa:	fb02 f401 	mul.w	r4, r2, r1
 800c9fe:	4621      	mov	r1, r4
 800ca00:	f7fe f8e0 	bl	800abc4 <_malloc_r>
 800ca04:	4605      	mov	r5, r0
 800ca06:	b118      	cbz	r0, 800ca10 <_calloc_r+0x18>
 800ca08:	4622      	mov	r2, r4
 800ca0a:	2100      	movs	r1, #0
 800ca0c:	f7fe f884 	bl	800ab18 <memset>
 800ca10:	4628      	mov	r0, r5
 800ca12:	bd38      	pop	{r3, r4, r5, pc}

0800ca14 <__ssputs_r>:
 800ca14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca18:	688e      	ldr	r6, [r1, #8]
 800ca1a:	429e      	cmp	r6, r3
 800ca1c:	4682      	mov	sl, r0
 800ca1e:	460c      	mov	r4, r1
 800ca20:	4690      	mov	r8, r2
 800ca22:	4699      	mov	r9, r3
 800ca24:	d837      	bhi.n	800ca96 <__ssputs_r+0x82>
 800ca26:	898a      	ldrh	r2, [r1, #12]
 800ca28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ca2c:	d031      	beq.n	800ca92 <__ssputs_r+0x7e>
 800ca2e:	6825      	ldr	r5, [r4, #0]
 800ca30:	6909      	ldr	r1, [r1, #16]
 800ca32:	1a6f      	subs	r7, r5, r1
 800ca34:	6965      	ldr	r5, [r4, #20]
 800ca36:	2302      	movs	r3, #2
 800ca38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca3c:	fb95 f5f3 	sdiv	r5, r5, r3
 800ca40:	f109 0301 	add.w	r3, r9, #1
 800ca44:	443b      	add	r3, r7
 800ca46:	429d      	cmp	r5, r3
 800ca48:	bf38      	it	cc
 800ca4a:	461d      	movcc	r5, r3
 800ca4c:	0553      	lsls	r3, r2, #21
 800ca4e:	d530      	bpl.n	800cab2 <__ssputs_r+0x9e>
 800ca50:	4629      	mov	r1, r5
 800ca52:	f7fe f8b7 	bl	800abc4 <_malloc_r>
 800ca56:	4606      	mov	r6, r0
 800ca58:	b950      	cbnz	r0, 800ca70 <__ssputs_r+0x5c>
 800ca5a:	230c      	movs	r3, #12
 800ca5c:	f8ca 3000 	str.w	r3, [sl]
 800ca60:	89a3      	ldrh	r3, [r4, #12]
 800ca62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca66:	81a3      	strh	r3, [r4, #12]
 800ca68:	f04f 30ff 	mov.w	r0, #4294967295
 800ca6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca70:	463a      	mov	r2, r7
 800ca72:	6921      	ldr	r1, [r4, #16]
 800ca74:	f7ff fcd8 	bl	800c428 <memcpy>
 800ca78:	89a3      	ldrh	r3, [r4, #12]
 800ca7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ca7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca82:	81a3      	strh	r3, [r4, #12]
 800ca84:	6126      	str	r6, [r4, #16]
 800ca86:	6165      	str	r5, [r4, #20]
 800ca88:	443e      	add	r6, r7
 800ca8a:	1bed      	subs	r5, r5, r7
 800ca8c:	6026      	str	r6, [r4, #0]
 800ca8e:	60a5      	str	r5, [r4, #8]
 800ca90:	464e      	mov	r6, r9
 800ca92:	454e      	cmp	r6, r9
 800ca94:	d900      	bls.n	800ca98 <__ssputs_r+0x84>
 800ca96:	464e      	mov	r6, r9
 800ca98:	4632      	mov	r2, r6
 800ca9a:	4641      	mov	r1, r8
 800ca9c:	6820      	ldr	r0, [r4, #0]
 800ca9e:	f000 fca9 	bl	800d3f4 <memmove>
 800caa2:	68a3      	ldr	r3, [r4, #8]
 800caa4:	1b9b      	subs	r3, r3, r6
 800caa6:	60a3      	str	r3, [r4, #8]
 800caa8:	6823      	ldr	r3, [r4, #0]
 800caaa:	441e      	add	r6, r3
 800caac:	6026      	str	r6, [r4, #0]
 800caae:	2000      	movs	r0, #0
 800cab0:	e7dc      	b.n	800ca6c <__ssputs_r+0x58>
 800cab2:	462a      	mov	r2, r5
 800cab4:	f000 fcb7 	bl	800d426 <_realloc_r>
 800cab8:	4606      	mov	r6, r0
 800caba:	2800      	cmp	r0, #0
 800cabc:	d1e2      	bne.n	800ca84 <__ssputs_r+0x70>
 800cabe:	6921      	ldr	r1, [r4, #16]
 800cac0:	4650      	mov	r0, sl
 800cac2:	f7fe f831 	bl	800ab28 <_free_r>
 800cac6:	e7c8      	b.n	800ca5a <__ssputs_r+0x46>

0800cac8 <_svfiprintf_r>:
 800cac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cacc:	461d      	mov	r5, r3
 800cace:	898b      	ldrh	r3, [r1, #12]
 800cad0:	061f      	lsls	r7, r3, #24
 800cad2:	b09d      	sub	sp, #116	; 0x74
 800cad4:	4680      	mov	r8, r0
 800cad6:	460c      	mov	r4, r1
 800cad8:	4616      	mov	r6, r2
 800cada:	d50f      	bpl.n	800cafc <_svfiprintf_r+0x34>
 800cadc:	690b      	ldr	r3, [r1, #16]
 800cade:	b96b      	cbnz	r3, 800cafc <_svfiprintf_r+0x34>
 800cae0:	2140      	movs	r1, #64	; 0x40
 800cae2:	f7fe f86f 	bl	800abc4 <_malloc_r>
 800cae6:	6020      	str	r0, [r4, #0]
 800cae8:	6120      	str	r0, [r4, #16]
 800caea:	b928      	cbnz	r0, 800caf8 <_svfiprintf_r+0x30>
 800caec:	230c      	movs	r3, #12
 800caee:	f8c8 3000 	str.w	r3, [r8]
 800caf2:	f04f 30ff 	mov.w	r0, #4294967295
 800caf6:	e0c8      	b.n	800cc8a <_svfiprintf_r+0x1c2>
 800caf8:	2340      	movs	r3, #64	; 0x40
 800cafa:	6163      	str	r3, [r4, #20]
 800cafc:	2300      	movs	r3, #0
 800cafe:	9309      	str	r3, [sp, #36]	; 0x24
 800cb00:	2320      	movs	r3, #32
 800cb02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb06:	2330      	movs	r3, #48	; 0x30
 800cb08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb0c:	9503      	str	r5, [sp, #12]
 800cb0e:	f04f 0b01 	mov.w	fp, #1
 800cb12:	4637      	mov	r7, r6
 800cb14:	463d      	mov	r5, r7
 800cb16:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cb1a:	b10b      	cbz	r3, 800cb20 <_svfiprintf_r+0x58>
 800cb1c:	2b25      	cmp	r3, #37	; 0x25
 800cb1e:	d13e      	bne.n	800cb9e <_svfiprintf_r+0xd6>
 800cb20:	ebb7 0a06 	subs.w	sl, r7, r6
 800cb24:	d00b      	beq.n	800cb3e <_svfiprintf_r+0x76>
 800cb26:	4653      	mov	r3, sl
 800cb28:	4632      	mov	r2, r6
 800cb2a:	4621      	mov	r1, r4
 800cb2c:	4640      	mov	r0, r8
 800cb2e:	f7ff ff71 	bl	800ca14 <__ssputs_r>
 800cb32:	3001      	adds	r0, #1
 800cb34:	f000 80a4 	beq.w	800cc80 <_svfiprintf_r+0x1b8>
 800cb38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb3a:	4453      	add	r3, sl
 800cb3c:	9309      	str	r3, [sp, #36]	; 0x24
 800cb3e:	783b      	ldrb	r3, [r7, #0]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	f000 809d 	beq.w	800cc80 <_svfiprintf_r+0x1b8>
 800cb46:	2300      	movs	r3, #0
 800cb48:	f04f 32ff 	mov.w	r2, #4294967295
 800cb4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb50:	9304      	str	r3, [sp, #16]
 800cb52:	9307      	str	r3, [sp, #28]
 800cb54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb58:	931a      	str	r3, [sp, #104]	; 0x68
 800cb5a:	462f      	mov	r7, r5
 800cb5c:	2205      	movs	r2, #5
 800cb5e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800cb62:	4850      	ldr	r0, [pc, #320]	; (800cca4 <_svfiprintf_r+0x1dc>)
 800cb64:	f7f3 fb3c 	bl	80001e0 <memchr>
 800cb68:	9b04      	ldr	r3, [sp, #16]
 800cb6a:	b9d0      	cbnz	r0, 800cba2 <_svfiprintf_r+0xda>
 800cb6c:	06d9      	lsls	r1, r3, #27
 800cb6e:	bf44      	itt	mi
 800cb70:	2220      	movmi	r2, #32
 800cb72:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cb76:	071a      	lsls	r2, r3, #28
 800cb78:	bf44      	itt	mi
 800cb7a:	222b      	movmi	r2, #43	; 0x2b
 800cb7c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cb80:	782a      	ldrb	r2, [r5, #0]
 800cb82:	2a2a      	cmp	r2, #42	; 0x2a
 800cb84:	d015      	beq.n	800cbb2 <_svfiprintf_r+0xea>
 800cb86:	9a07      	ldr	r2, [sp, #28]
 800cb88:	462f      	mov	r7, r5
 800cb8a:	2000      	movs	r0, #0
 800cb8c:	250a      	movs	r5, #10
 800cb8e:	4639      	mov	r1, r7
 800cb90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb94:	3b30      	subs	r3, #48	; 0x30
 800cb96:	2b09      	cmp	r3, #9
 800cb98:	d94d      	bls.n	800cc36 <_svfiprintf_r+0x16e>
 800cb9a:	b1b8      	cbz	r0, 800cbcc <_svfiprintf_r+0x104>
 800cb9c:	e00f      	b.n	800cbbe <_svfiprintf_r+0xf6>
 800cb9e:	462f      	mov	r7, r5
 800cba0:	e7b8      	b.n	800cb14 <_svfiprintf_r+0x4c>
 800cba2:	4a40      	ldr	r2, [pc, #256]	; (800cca4 <_svfiprintf_r+0x1dc>)
 800cba4:	1a80      	subs	r0, r0, r2
 800cba6:	fa0b f000 	lsl.w	r0, fp, r0
 800cbaa:	4318      	orrs	r0, r3
 800cbac:	9004      	str	r0, [sp, #16]
 800cbae:	463d      	mov	r5, r7
 800cbb0:	e7d3      	b.n	800cb5a <_svfiprintf_r+0x92>
 800cbb2:	9a03      	ldr	r2, [sp, #12]
 800cbb4:	1d11      	adds	r1, r2, #4
 800cbb6:	6812      	ldr	r2, [r2, #0]
 800cbb8:	9103      	str	r1, [sp, #12]
 800cbba:	2a00      	cmp	r2, #0
 800cbbc:	db01      	blt.n	800cbc2 <_svfiprintf_r+0xfa>
 800cbbe:	9207      	str	r2, [sp, #28]
 800cbc0:	e004      	b.n	800cbcc <_svfiprintf_r+0x104>
 800cbc2:	4252      	negs	r2, r2
 800cbc4:	f043 0302 	orr.w	r3, r3, #2
 800cbc8:	9207      	str	r2, [sp, #28]
 800cbca:	9304      	str	r3, [sp, #16]
 800cbcc:	783b      	ldrb	r3, [r7, #0]
 800cbce:	2b2e      	cmp	r3, #46	; 0x2e
 800cbd0:	d10c      	bne.n	800cbec <_svfiprintf_r+0x124>
 800cbd2:	787b      	ldrb	r3, [r7, #1]
 800cbd4:	2b2a      	cmp	r3, #42	; 0x2a
 800cbd6:	d133      	bne.n	800cc40 <_svfiprintf_r+0x178>
 800cbd8:	9b03      	ldr	r3, [sp, #12]
 800cbda:	1d1a      	adds	r2, r3, #4
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	9203      	str	r2, [sp, #12]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	bfb8      	it	lt
 800cbe4:	f04f 33ff 	movlt.w	r3, #4294967295
 800cbe8:	3702      	adds	r7, #2
 800cbea:	9305      	str	r3, [sp, #20]
 800cbec:	4d2e      	ldr	r5, [pc, #184]	; (800cca8 <_svfiprintf_r+0x1e0>)
 800cbee:	7839      	ldrb	r1, [r7, #0]
 800cbf0:	2203      	movs	r2, #3
 800cbf2:	4628      	mov	r0, r5
 800cbf4:	f7f3 faf4 	bl	80001e0 <memchr>
 800cbf8:	b138      	cbz	r0, 800cc0a <_svfiprintf_r+0x142>
 800cbfa:	2340      	movs	r3, #64	; 0x40
 800cbfc:	1b40      	subs	r0, r0, r5
 800cbfe:	fa03 f000 	lsl.w	r0, r3, r0
 800cc02:	9b04      	ldr	r3, [sp, #16]
 800cc04:	4303      	orrs	r3, r0
 800cc06:	3701      	adds	r7, #1
 800cc08:	9304      	str	r3, [sp, #16]
 800cc0a:	7839      	ldrb	r1, [r7, #0]
 800cc0c:	4827      	ldr	r0, [pc, #156]	; (800ccac <_svfiprintf_r+0x1e4>)
 800cc0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc12:	2206      	movs	r2, #6
 800cc14:	1c7e      	adds	r6, r7, #1
 800cc16:	f7f3 fae3 	bl	80001e0 <memchr>
 800cc1a:	2800      	cmp	r0, #0
 800cc1c:	d038      	beq.n	800cc90 <_svfiprintf_r+0x1c8>
 800cc1e:	4b24      	ldr	r3, [pc, #144]	; (800ccb0 <_svfiprintf_r+0x1e8>)
 800cc20:	bb13      	cbnz	r3, 800cc68 <_svfiprintf_r+0x1a0>
 800cc22:	9b03      	ldr	r3, [sp, #12]
 800cc24:	3307      	adds	r3, #7
 800cc26:	f023 0307 	bic.w	r3, r3, #7
 800cc2a:	3308      	adds	r3, #8
 800cc2c:	9303      	str	r3, [sp, #12]
 800cc2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc30:	444b      	add	r3, r9
 800cc32:	9309      	str	r3, [sp, #36]	; 0x24
 800cc34:	e76d      	b.n	800cb12 <_svfiprintf_r+0x4a>
 800cc36:	fb05 3202 	mla	r2, r5, r2, r3
 800cc3a:	2001      	movs	r0, #1
 800cc3c:	460f      	mov	r7, r1
 800cc3e:	e7a6      	b.n	800cb8e <_svfiprintf_r+0xc6>
 800cc40:	2300      	movs	r3, #0
 800cc42:	3701      	adds	r7, #1
 800cc44:	9305      	str	r3, [sp, #20]
 800cc46:	4619      	mov	r1, r3
 800cc48:	250a      	movs	r5, #10
 800cc4a:	4638      	mov	r0, r7
 800cc4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc50:	3a30      	subs	r2, #48	; 0x30
 800cc52:	2a09      	cmp	r2, #9
 800cc54:	d903      	bls.n	800cc5e <_svfiprintf_r+0x196>
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d0c8      	beq.n	800cbec <_svfiprintf_r+0x124>
 800cc5a:	9105      	str	r1, [sp, #20]
 800cc5c:	e7c6      	b.n	800cbec <_svfiprintf_r+0x124>
 800cc5e:	fb05 2101 	mla	r1, r5, r1, r2
 800cc62:	2301      	movs	r3, #1
 800cc64:	4607      	mov	r7, r0
 800cc66:	e7f0      	b.n	800cc4a <_svfiprintf_r+0x182>
 800cc68:	ab03      	add	r3, sp, #12
 800cc6a:	9300      	str	r3, [sp, #0]
 800cc6c:	4622      	mov	r2, r4
 800cc6e:	4b11      	ldr	r3, [pc, #68]	; (800ccb4 <_svfiprintf_r+0x1ec>)
 800cc70:	a904      	add	r1, sp, #16
 800cc72:	4640      	mov	r0, r8
 800cc74:	f7fe f894 	bl	800ada0 <_printf_float>
 800cc78:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cc7c:	4681      	mov	r9, r0
 800cc7e:	d1d6      	bne.n	800cc2e <_svfiprintf_r+0x166>
 800cc80:	89a3      	ldrh	r3, [r4, #12]
 800cc82:	065b      	lsls	r3, r3, #25
 800cc84:	f53f af35 	bmi.w	800caf2 <_svfiprintf_r+0x2a>
 800cc88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc8a:	b01d      	add	sp, #116	; 0x74
 800cc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc90:	ab03      	add	r3, sp, #12
 800cc92:	9300      	str	r3, [sp, #0]
 800cc94:	4622      	mov	r2, r4
 800cc96:	4b07      	ldr	r3, [pc, #28]	; (800ccb4 <_svfiprintf_r+0x1ec>)
 800cc98:	a904      	add	r1, sp, #16
 800cc9a:	4640      	mov	r0, r8
 800cc9c:	f7fe fb36 	bl	800b30c <_printf_i>
 800cca0:	e7ea      	b.n	800cc78 <_svfiprintf_r+0x1b0>
 800cca2:	bf00      	nop
 800cca4:	0800d7d4 	.word	0x0800d7d4
 800cca8:	0800d7da 	.word	0x0800d7da
 800ccac:	0800d7de 	.word	0x0800d7de
 800ccb0:	0800ada1 	.word	0x0800ada1
 800ccb4:	0800ca15 	.word	0x0800ca15

0800ccb8 <__sfputc_r>:
 800ccb8:	6893      	ldr	r3, [r2, #8]
 800ccba:	3b01      	subs	r3, #1
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	b410      	push	{r4}
 800ccc0:	6093      	str	r3, [r2, #8]
 800ccc2:	da08      	bge.n	800ccd6 <__sfputc_r+0x1e>
 800ccc4:	6994      	ldr	r4, [r2, #24]
 800ccc6:	42a3      	cmp	r3, r4
 800ccc8:	db01      	blt.n	800ccce <__sfputc_r+0x16>
 800ccca:	290a      	cmp	r1, #10
 800cccc:	d103      	bne.n	800ccd6 <__sfputc_r+0x1e>
 800ccce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccd2:	f000 b975 	b.w	800cfc0 <__swbuf_r>
 800ccd6:	6813      	ldr	r3, [r2, #0]
 800ccd8:	1c58      	adds	r0, r3, #1
 800ccda:	6010      	str	r0, [r2, #0]
 800ccdc:	7019      	strb	r1, [r3, #0]
 800ccde:	4608      	mov	r0, r1
 800cce0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cce4:	4770      	bx	lr

0800cce6 <__sfputs_r>:
 800cce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cce8:	4606      	mov	r6, r0
 800ccea:	460f      	mov	r7, r1
 800ccec:	4614      	mov	r4, r2
 800ccee:	18d5      	adds	r5, r2, r3
 800ccf0:	42ac      	cmp	r4, r5
 800ccf2:	d101      	bne.n	800ccf8 <__sfputs_r+0x12>
 800ccf4:	2000      	movs	r0, #0
 800ccf6:	e007      	b.n	800cd08 <__sfputs_r+0x22>
 800ccf8:	463a      	mov	r2, r7
 800ccfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccfe:	4630      	mov	r0, r6
 800cd00:	f7ff ffda 	bl	800ccb8 <__sfputc_r>
 800cd04:	1c43      	adds	r3, r0, #1
 800cd06:	d1f3      	bne.n	800ccf0 <__sfputs_r+0xa>
 800cd08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cd0c <_vfiprintf_r>:
 800cd0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd10:	460c      	mov	r4, r1
 800cd12:	b09d      	sub	sp, #116	; 0x74
 800cd14:	4617      	mov	r7, r2
 800cd16:	461d      	mov	r5, r3
 800cd18:	4606      	mov	r6, r0
 800cd1a:	b118      	cbz	r0, 800cd24 <_vfiprintf_r+0x18>
 800cd1c:	6983      	ldr	r3, [r0, #24]
 800cd1e:	b90b      	cbnz	r3, 800cd24 <_vfiprintf_r+0x18>
 800cd20:	f7ff faea 	bl	800c2f8 <__sinit>
 800cd24:	4b7c      	ldr	r3, [pc, #496]	; (800cf18 <_vfiprintf_r+0x20c>)
 800cd26:	429c      	cmp	r4, r3
 800cd28:	d158      	bne.n	800cddc <_vfiprintf_r+0xd0>
 800cd2a:	6874      	ldr	r4, [r6, #4]
 800cd2c:	89a3      	ldrh	r3, [r4, #12]
 800cd2e:	0718      	lsls	r0, r3, #28
 800cd30:	d55e      	bpl.n	800cdf0 <_vfiprintf_r+0xe4>
 800cd32:	6923      	ldr	r3, [r4, #16]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d05b      	beq.n	800cdf0 <_vfiprintf_r+0xe4>
 800cd38:	2300      	movs	r3, #0
 800cd3a:	9309      	str	r3, [sp, #36]	; 0x24
 800cd3c:	2320      	movs	r3, #32
 800cd3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd42:	2330      	movs	r3, #48	; 0x30
 800cd44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd48:	9503      	str	r5, [sp, #12]
 800cd4a:	f04f 0b01 	mov.w	fp, #1
 800cd4e:	46b8      	mov	r8, r7
 800cd50:	4645      	mov	r5, r8
 800cd52:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cd56:	b10b      	cbz	r3, 800cd5c <_vfiprintf_r+0x50>
 800cd58:	2b25      	cmp	r3, #37	; 0x25
 800cd5a:	d154      	bne.n	800ce06 <_vfiprintf_r+0xfa>
 800cd5c:	ebb8 0a07 	subs.w	sl, r8, r7
 800cd60:	d00b      	beq.n	800cd7a <_vfiprintf_r+0x6e>
 800cd62:	4653      	mov	r3, sl
 800cd64:	463a      	mov	r2, r7
 800cd66:	4621      	mov	r1, r4
 800cd68:	4630      	mov	r0, r6
 800cd6a:	f7ff ffbc 	bl	800cce6 <__sfputs_r>
 800cd6e:	3001      	adds	r0, #1
 800cd70:	f000 80c2 	beq.w	800cef8 <_vfiprintf_r+0x1ec>
 800cd74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd76:	4453      	add	r3, sl
 800cd78:	9309      	str	r3, [sp, #36]	; 0x24
 800cd7a:	f898 3000 	ldrb.w	r3, [r8]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	f000 80ba 	beq.w	800cef8 <_vfiprintf_r+0x1ec>
 800cd84:	2300      	movs	r3, #0
 800cd86:	f04f 32ff 	mov.w	r2, #4294967295
 800cd8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd8e:	9304      	str	r3, [sp, #16]
 800cd90:	9307      	str	r3, [sp, #28]
 800cd92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd96:	931a      	str	r3, [sp, #104]	; 0x68
 800cd98:	46a8      	mov	r8, r5
 800cd9a:	2205      	movs	r2, #5
 800cd9c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800cda0:	485e      	ldr	r0, [pc, #376]	; (800cf1c <_vfiprintf_r+0x210>)
 800cda2:	f7f3 fa1d 	bl	80001e0 <memchr>
 800cda6:	9b04      	ldr	r3, [sp, #16]
 800cda8:	bb78      	cbnz	r0, 800ce0a <_vfiprintf_r+0xfe>
 800cdaa:	06d9      	lsls	r1, r3, #27
 800cdac:	bf44      	itt	mi
 800cdae:	2220      	movmi	r2, #32
 800cdb0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cdb4:	071a      	lsls	r2, r3, #28
 800cdb6:	bf44      	itt	mi
 800cdb8:	222b      	movmi	r2, #43	; 0x2b
 800cdba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cdbe:	782a      	ldrb	r2, [r5, #0]
 800cdc0:	2a2a      	cmp	r2, #42	; 0x2a
 800cdc2:	d02a      	beq.n	800ce1a <_vfiprintf_r+0x10e>
 800cdc4:	9a07      	ldr	r2, [sp, #28]
 800cdc6:	46a8      	mov	r8, r5
 800cdc8:	2000      	movs	r0, #0
 800cdca:	250a      	movs	r5, #10
 800cdcc:	4641      	mov	r1, r8
 800cdce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdd2:	3b30      	subs	r3, #48	; 0x30
 800cdd4:	2b09      	cmp	r3, #9
 800cdd6:	d969      	bls.n	800ceac <_vfiprintf_r+0x1a0>
 800cdd8:	b360      	cbz	r0, 800ce34 <_vfiprintf_r+0x128>
 800cdda:	e024      	b.n	800ce26 <_vfiprintf_r+0x11a>
 800cddc:	4b50      	ldr	r3, [pc, #320]	; (800cf20 <_vfiprintf_r+0x214>)
 800cdde:	429c      	cmp	r4, r3
 800cde0:	d101      	bne.n	800cde6 <_vfiprintf_r+0xda>
 800cde2:	68b4      	ldr	r4, [r6, #8]
 800cde4:	e7a2      	b.n	800cd2c <_vfiprintf_r+0x20>
 800cde6:	4b4f      	ldr	r3, [pc, #316]	; (800cf24 <_vfiprintf_r+0x218>)
 800cde8:	429c      	cmp	r4, r3
 800cdea:	bf08      	it	eq
 800cdec:	68f4      	ldreq	r4, [r6, #12]
 800cdee:	e79d      	b.n	800cd2c <_vfiprintf_r+0x20>
 800cdf0:	4621      	mov	r1, r4
 800cdf2:	4630      	mov	r0, r6
 800cdf4:	f000 f948 	bl	800d088 <__swsetup_r>
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	d09d      	beq.n	800cd38 <_vfiprintf_r+0x2c>
 800cdfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ce00:	b01d      	add	sp, #116	; 0x74
 800ce02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce06:	46a8      	mov	r8, r5
 800ce08:	e7a2      	b.n	800cd50 <_vfiprintf_r+0x44>
 800ce0a:	4a44      	ldr	r2, [pc, #272]	; (800cf1c <_vfiprintf_r+0x210>)
 800ce0c:	1a80      	subs	r0, r0, r2
 800ce0e:	fa0b f000 	lsl.w	r0, fp, r0
 800ce12:	4318      	orrs	r0, r3
 800ce14:	9004      	str	r0, [sp, #16]
 800ce16:	4645      	mov	r5, r8
 800ce18:	e7be      	b.n	800cd98 <_vfiprintf_r+0x8c>
 800ce1a:	9a03      	ldr	r2, [sp, #12]
 800ce1c:	1d11      	adds	r1, r2, #4
 800ce1e:	6812      	ldr	r2, [r2, #0]
 800ce20:	9103      	str	r1, [sp, #12]
 800ce22:	2a00      	cmp	r2, #0
 800ce24:	db01      	blt.n	800ce2a <_vfiprintf_r+0x11e>
 800ce26:	9207      	str	r2, [sp, #28]
 800ce28:	e004      	b.n	800ce34 <_vfiprintf_r+0x128>
 800ce2a:	4252      	negs	r2, r2
 800ce2c:	f043 0302 	orr.w	r3, r3, #2
 800ce30:	9207      	str	r2, [sp, #28]
 800ce32:	9304      	str	r3, [sp, #16]
 800ce34:	f898 3000 	ldrb.w	r3, [r8]
 800ce38:	2b2e      	cmp	r3, #46	; 0x2e
 800ce3a:	d10e      	bne.n	800ce5a <_vfiprintf_r+0x14e>
 800ce3c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ce40:	2b2a      	cmp	r3, #42	; 0x2a
 800ce42:	d138      	bne.n	800ceb6 <_vfiprintf_r+0x1aa>
 800ce44:	9b03      	ldr	r3, [sp, #12]
 800ce46:	1d1a      	adds	r2, r3, #4
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	9203      	str	r2, [sp, #12]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	bfb8      	it	lt
 800ce50:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce54:	f108 0802 	add.w	r8, r8, #2
 800ce58:	9305      	str	r3, [sp, #20]
 800ce5a:	4d33      	ldr	r5, [pc, #204]	; (800cf28 <_vfiprintf_r+0x21c>)
 800ce5c:	f898 1000 	ldrb.w	r1, [r8]
 800ce60:	2203      	movs	r2, #3
 800ce62:	4628      	mov	r0, r5
 800ce64:	f7f3 f9bc 	bl	80001e0 <memchr>
 800ce68:	b140      	cbz	r0, 800ce7c <_vfiprintf_r+0x170>
 800ce6a:	2340      	movs	r3, #64	; 0x40
 800ce6c:	1b40      	subs	r0, r0, r5
 800ce6e:	fa03 f000 	lsl.w	r0, r3, r0
 800ce72:	9b04      	ldr	r3, [sp, #16]
 800ce74:	4303      	orrs	r3, r0
 800ce76:	f108 0801 	add.w	r8, r8, #1
 800ce7a:	9304      	str	r3, [sp, #16]
 800ce7c:	f898 1000 	ldrb.w	r1, [r8]
 800ce80:	482a      	ldr	r0, [pc, #168]	; (800cf2c <_vfiprintf_r+0x220>)
 800ce82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce86:	2206      	movs	r2, #6
 800ce88:	f108 0701 	add.w	r7, r8, #1
 800ce8c:	f7f3 f9a8 	bl	80001e0 <memchr>
 800ce90:	2800      	cmp	r0, #0
 800ce92:	d037      	beq.n	800cf04 <_vfiprintf_r+0x1f8>
 800ce94:	4b26      	ldr	r3, [pc, #152]	; (800cf30 <_vfiprintf_r+0x224>)
 800ce96:	bb1b      	cbnz	r3, 800cee0 <_vfiprintf_r+0x1d4>
 800ce98:	9b03      	ldr	r3, [sp, #12]
 800ce9a:	3307      	adds	r3, #7
 800ce9c:	f023 0307 	bic.w	r3, r3, #7
 800cea0:	3308      	adds	r3, #8
 800cea2:	9303      	str	r3, [sp, #12]
 800cea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cea6:	444b      	add	r3, r9
 800cea8:	9309      	str	r3, [sp, #36]	; 0x24
 800ceaa:	e750      	b.n	800cd4e <_vfiprintf_r+0x42>
 800ceac:	fb05 3202 	mla	r2, r5, r2, r3
 800ceb0:	2001      	movs	r0, #1
 800ceb2:	4688      	mov	r8, r1
 800ceb4:	e78a      	b.n	800cdcc <_vfiprintf_r+0xc0>
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	f108 0801 	add.w	r8, r8, #1
 800cebc:	9305      	str	r3, [sp, #20]
 800cebe:	4619      	mov	r1, r3
 800cec0:	250a      	movs	r5, #10
 800cec2:	4640      	mov	r0, r8
 800cec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cec8:	3a30      	subs	r2, #48	; 0x30
 800ceca:	2a09      	cmp	r2, #9
 800cecc:	d903      	bls.n	800ced6 <_vfiprintf_r+0x1ca>
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d0c3      	beq.n	800ce5a <_vfiprintf_r+0x14e>
 800ced2:	9105      	str	r1, [sp, #20]
 800ced4:	e7c1      	b.n	800ce5a <_vfiprintf_r+0x14e>
 800ced6:	fb05 2101 	mla	r1, r5, r1, r2
 800ceda:	2301      	movs	r3, #1
 800cedc:	4680      	mov	r8, r0
 800cede:	e7f0      	b.n	800cec2 <_vfiprintf_r+0x1b6>
 800cee0:	ab03      	add	r3, sp, #12
 800cee2:	9300      	str	r3, [sp, #0]
 800cee4:	4622      	mov	r2, r4
 800cee6:	4b13      	ldr	r3, [pc, #76]	; (800cf34 <_vfiprintf_r+0x228>)
 800cee8:	a904      	add	r1, sp, #16
 800ceea:	4630      	mov	r0, r6
 800ceec:	f7fd ff58 	bl	800ada0 <_printf_float>
 800cef0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cef4:	4681      	mov	r9, r0
 800cef6:	d1d5      	bne.n	800cea4 <_vfiprintf_r+0x198>
 800cef8:	89a3      	ldrh	r3, [r4, #12]
 800cefa:	065b      	lsls	r3, r3, #25
 800cefc:	f53f af7e 	bmi.w	800cdfc <_vfiprintf_r+0xf0>
 800cf00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf02:	e77d      	b.n	800ce00 <_vfiprintf_r+0xf4>
 800cf04:	ab03      	add	r3, sp, #12
 800cf06:	9300      	str	r3, [sp, #0]
 800cf08:	4622      	mov	r2, r4
 800cf0a:	4b0a      	ldr	r3, [pc, #40]	; (800cf34 <_vfiprintf_r+0x228>)
 800cf0c:	a904      	add	r1, sp, #16
 800cf0e:	4630      	mov	r0, r6
 800cf10:	f7fe f9fc 	bl	800b30c <_printf_i>
 800cf14:	e7ec      	b.n	800cef0 <_vfiprintf_r+0x1e4>
 800cf16:	bf00      	nop
 800cf18:	0800d698 	.word	0x0800d698
 800cf1c:	0800d7d4 	.word	0x0800d7d4
 800cf20:	0800d6b8 	.word	0x0800d6b8
 800cf24:	0800d678 	.word	0x0800d678
 800cf28:	0800d7da 	.word	0x0800d7da
 800cf2c:	0800d7de 	.word	0x0800d7de
 800cf30:	0800ada1 	.word	0x0800ada1
 800cf34:	0800cce7 	.word	0x0800cce7

0800cf38 <__sread>:
 800cf38:	b510      	push	{r4, lr}
 800cf3a:	460c      	mov	r4, r1
 800cf3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf40:	f000 fa98 	bl	800d474 <_read_r>
 800cf44:	2800      	cmp	r0, #0
 800cf46:	bfab      	itete	ge
 800cf48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cf4a:	89a3      	ldrhlt	r3, [r4, #12]
 800cf4c:	181b      	addge	r3, r3, r0
 800cf4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cf52:	bfac      	ite	ge
 800cf54:	6563      	strge	r3, [r4, #84]	; 0x54
 800cf56:	81a3      	strhlt	r3, [r4, #12]
 800cf58:	bd10      	pop	{r4, pc}

0800cf5a <__swrite>:
 800cf5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf5e:	461f      	mov	r7, r3
 800cf60:	898b      	ldrh	r3, [r1, #12]
 800cf62:	05db      	lsls	r3, r3, #23
 800cf64:	4605      	mov	r5, r0
 800cf66:	460c      	mov	r4, r1
 800cf68:	4616      	mov	r6, r2
 800cf6a:	d505      	bpl.n	800cf78 <__swrite+0x1e>
 800cf6c:	2302      	movs	r3, #2
 800cf6e:	2200      	movs	r2, #0
 800cf70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf74:	f000 f9b6 	bl	800d2e4 <_lseek_r>
 800cf78:	89a3      	ldrh	r3, [r4, #12]
 800cf7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf82:	81a3      	strh	r3, [r4, #12]
 800cf84:	4632      	mov	r2, r6
 800cf86:	463b      	mov	r3, r7
 800cf88:	4628      	mov	r0, r5
 800cf8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf8e:	f000 b869 	b.w	800d064 <_write_r>

0800cf92 <__sseek>:
 800cf92:	b510      	push	{r4, lr}
 800cf94:	460c      	mov	r4, r1
 800cf96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf9a:	f000 f9a3 	bl	800d2e4 <_lseek_r>
 800cf9e:	1c43      	adds	r3, r0, #1
 800cfa0:	89a3      	ldrh	r3, [r4, #12]
 800cfa2:	bf15      	itete	ne
 800cfa4:	6560      	strne	r0, [r4, #84]	; 0x54
 800cfa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cfaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cfae:	81a3      	strheq	r3, [r4, #12]
 800cfb0:	bf18      	it	ne
 800cfb2:	81a3      	strhne	r3, [r4, #12]
 800cfb4:	bd10      	pop	{r4, pc}

0800cfb6 <__sclose>:
 800cfb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfba:	f000 b8d3 	b.w	800d164 <_close_r>
	...

0800cfc0 <__swbuf_r>:
 800cfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfc2:	460e      	mov	r6, r1
 800cfc4:	4614      	mov	r4, r2
 800cfc6:	4605      	mov	r5, r0
 800cfc8:	b118      	cbz	r0, 800cfd2 <__swbuf_r+0x12>
 800cfca:	6983      	ldr	r3, [r0, #24]
 800cfcc:	b90b      	cbnz	r3, 800cfd2 <__swbuf_r+0x12>
 800cfce:	f7ff f993 	bl	800c2f8 <__sinit>
 800cfd2:	4b21      	ldr	r3, [pc, #132]	; (800d058 <__swbuf_r+0x98>)
 800cfd4:	429c      	cmp	r4, r3
 800cfd6:	d12a      	bne.n	800d02e <__swbuf_r+0x6e>
 800cfd8:	686c      	ldr	r4, [r5, #4]
 800cfda:	69a3      	ldr	r3, [r4, #24]
 800cfdc:	60a3      	str	r3, [r4, #8]
 800cfde:	89a3      	ldrh	r3, [r4, #12]
 800cfe0:	071a      	lsls	r2, r3, #28
 800cfe2:	d52e      	bpl.n	800d042 <__swbuf_r+0x82>
 800cfe4:	6923      	ldr	r3, [r4, #16]
 800cfe6:	b363      	cbz	r3, 800d042 <__swbuf_r+0x82>
 800cfe8:	6923      	ldr	r3, [r4, #16]
 800cfea:	6820      	ldr	r0, [r4, #0]
 800cfec:	1ac0      	subs	r0, r0, r3
 800cfee:	6963      	ldr	r3, [r4, #20]
 800cff0:	b2f6      	uxtb	r6, r6
 800cff2:	4283      	cmp	r3, r0
 800cff4:	4637      	mov	r7, r6
 800cff6:	dc04      	bgt.n	800d002 <__swbuf_r+0x42>
 800cff8:	4621      	mov	r1, r4
 800cffa:	4628      	mov	r0, r5
 800cffc:	f000 f948 	bl	800d290 <_fflush_r>
 800d000:	bb28      	cbnz	r0, 800d04e <__swbuf_r+0x8e>
 800d002:	68a3      	ldr	r3, [r4, #8]
 800d004:	3b01      	subs	r3, #1
 800d006:	60a3      	str	r3, [r4, #8]
 800d008:	6823      	ldr	r3, [r4, #0]
 800d00a:	1c5a      	adds	r2, r3, #1
 800d00c:	6022      	str	r2, [r4, #0]
 800d00e:	701e      	strb	r6, [r3, #0]
 800d010:	6963      	ldr	r3, [r4, #20]
 800d012:	3001      	adds	r0, #1
 800d014:	4283      	cmp	r3, r0
 800d016:	d004      	beq.n	800d022 <__swbuf_r+0x62>
 800d018:	89a3      	ldrh	r3, [r4, #12]
 800d01a:	07db      	lsls	r3, r3, #31
 800d01c:	d519      	bpl.n	800d052 <__swbuf_r+0x92>
 800d01e:	2e0a      	cmp	r6, #10
 800d020:	d117      	bne.n	800d052 <__swbuf_r+0x92>
 800d022:	4621      	mov	r1, r4
 800d024:	4628      	mov	r0, r5
 800d026:	f000 f933 	bl	800d290 <_fflush_r>
 800d02a:	b190      	cbz	r0, 800d052 <__swbuf_r+0x92>
 800d02c:	e00f      	b.n	800d04e <__swbuf_r+0x8e>
 800d02e:	4b0b      	ldr	r3, [pc, #44]	; (800d05c <__swbuf_r+0x9c>)
 800d030:	429c      	cmp	r4, r3
 800d032:	d101      	bne.n	800d038 <__swbuf_r+0x78>
 800d034:	68ac      	ldr	r4, [r5, #8]
 800d036:	e7d0      	b.n	800cfda <__swbuf_r+0x1a>
 800d038:	4b09      	ldr	r3, [pc, #36]	; (800d060 <__swbuf_r+0xa0>)
 800d03a:	429c      	cmp	r4, r3
 800d03c:	bf08      	it	eq
 800d03e:	68ec      	ldreq	r4, [r5, #12]
 800d040:	e7cb      	b.n	800cfda <__swbuf_r+0x1a>
 800d042:	4621      	mov	r1, r4
 800d044:	4628      	mov	r0, r5
 800d046:	f000 f81f 	bl	800d088 <__swsetup_r>
 800d04a:	2800      	cmp	r0, #0
 800d04c:	d0cc      	beq.n	800cfe8 <__swbuf_r+0x28>
 800d04e:	f04f 37ff 	mov.w	r7, #4294967295
 800d052:	4638      	mov	r0, r7
 800d054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d056:	bf00      	nop
 800d058:	0800d698 	.word	0x0800d698
 800d05c:	0800d6b8 	.word	0x0800d6b8
 800d060:	0800d678 	.word	0x0800d678

0800d064 <_write_r>:
 800d064:	b538      	push	{r3, r4, r5, lr}
 800d066:	4c07      	ldr	r4, [pc, #28]	; (800d084 <_write_r+0x20>)
 800d068:	4605      	mov	r5, r0
 800d06a:	4608      	mov	r0, r1
 800d06c:	4611      	mov	r1, r2
 800d06e:	2200      	movs	r2, #0
 800d070:	6022      	str	r2, [r4, #0]
 800d072:	461a      	mov	r2, r3
 800d074:	f7f7 fc59 	bl	800492a <_write>
 800d078:	1c43      	adds	r3, r0, #1
 800d07a:	d102      	bne.n	800d082 <_write_r+0x1e>
 800d07c:	6823      	ldr	r3, [r4, #0]
 800d07e:	b103      	cbz	r3, 800d082 <_write_r+0x1e>
 800d080:	602b      	str	r3, [r5, #0]
 800d082:	bd38      	pop	{r3, r4, r5, pc}
 800d084:	200137cc 	.word	0x200137cc

0800d088 <__swsetup_r>:
 800d088:	4b32      	ldr	r3, [pc, #200]	; (800d154 <__swsetup_r+0xcc>)
 800d08a:	b570      	push	{r4, r5, r6, lr}
 800d08c:	681d      	ldr	r5, [r3, #0]
 800d08e:	4606      	mov	r6, r0
 800d090:	460c      	mov	r4, r1
 800d092:	b125      	cbz	r5, 800d09e <__swsetup_r+0x16>
 800d094:	69ab      	ldr	r3, [r5, #24]
 800d096:	b913      	cbnz	r3, 800d09e <__swsetup_r+0x16>
 800d098:	4628      	mov	r0, r5
 800d09a:	f7ff f92d 	bl	800c2f8 <__sinit>
 800d09e:	4b2e      	ldr	r3, [pc, #184]	; (800d158 <__swsetup_r+0xd0>)
 800d0a0:	429c      	cmp	r4, r3
 800d0a2:	d10f      	bne.n	800d0c4 <__swsetup_r+0x3c>
 800d0a4:	686c      	ldr	r4, [r5, #4]
 800d0a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0aa:	b29a      	uxth	r2, r3
 800d0ac:	0715      	lsls	r5, r2, #28
 800d0ae:	d42c      	bmi.n	800d10a <__swsetup_r+0x82>
 800d0b0:	06d0      	lsls	r0, r2, #27
 800d0b2:	d411      	bmi.n	800d0d8 <__swsetup_r+0x50>
 800d0b4:	2209      	movs	r2, #9
 800d0b6:	6032      	str	r2, [r6, #0]
 800d0b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0bc:	81a3      	strh	r3, [r4, #12]
 800d0be:	f04f 30ff 	mov.w	r0, #4294967295
 800d0c2:	e03e      	b.n	800d142 <__swsetup_r+0xba>
 800d0c4:	4b25      	ldr	r3, [pc, #148]	; (800d15c <__swsetup_r+0xd4>)
 800d0c6:	429c      	cmp	r4, r3
 800d0c8:	d101      	bne.n	800d0ce <__swsetup_r+0x46>
 800d0ca:	68ac      	ldr	r4, [r5, #8]
 800d0cc:	e7eb      	b.n	800d0a6 <__swsetup_r+0x1e>
 800d0ce:	4b24      	ldr	r3, [pc, #144]	; (800d160 <__swsetup_r+0xd8>)
 800d0d0:	429c      	cmp	r4, r3
 800d0d2:	bf08      	it	eq
 800d0d4:	68ec      	ldreq	r4, [r5, #12]
 800d0d6:	e7e6      	b.n	800d0a6 <__swsetup_r+0x1e>
 800d0d8:	0751      	lsls	r1, r2, #29
 800d0da:	d512      	bpl.n	800d102 <__swsetup_r+0x7a>
 800d0dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0de:	b141      	cbz	r1, 800d0f2 <__swsetup_r+0x6a>
 800d0e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0e4:	4299      	cmp	r1, r3
 800d0e6:	d002      	beq.n	800d0ee <__swsetup_r+0x66>
 800d0e8:	4630      	mov	r0, r6
 800d0ea:	f7fd fd1d 	bl	800ab28 <_free_r>
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	6363      	str	r3, [r4, #52]	; 0x34
 800d0f2:	89a3      	ldrh	r3, [r4, #12]
 800d0f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d0f8:	81a3      	strh	r3, [r4, #12]
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	6063      	str	r3, [r4, #4]
 800d0fe:	6923      	ldr	r3, [r4, #16]
 800d100:	6023      	str	r3, [r4, #0]
 800d102:	89a3      	ldrh	r3, [r4, #12]
 800d104:	f043 0308 	orr.w	r3, r3, #8
 800d108:	81a3      	strh	r3, [r4, #12]
 800d10a:	6923      	ldr	r3, [r4, #16]
 800d10c:	b94b      	cbnz	r3, 800d122 <__swsetup_r+0x9a>
 800d10e:	89a3      	ldrh	r3, [r4, #12]
 800d110:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d118:	d003      	beq.n	800d122 <__swsetup_r+0x9a>
 800d11a:	4621      	mov	r1, r4
 800d11c:	4630      	mov	r0, r6
 800d11e:	f000 f917 	bl	800d350 <__smakebuf_r>
 800d122:	89a2      	ldrh	r2, [r4, #12]
 800d124:	f012 0301 	ands.w	r3, r2, #1
 800d128:	d00c      	beq.n	800d144 <__swsetup_r+0xbc>
 800d12a:	2300      	movs	r3, #0
 800d12c:	60a3      	str	r3, [r4, #8]
 800d12e:	6963      	ldr	r3, [r4, #20]
 800d130:	425b      	negs	r3, r3
 800d132:	61a3      	str	r3, [r4, #24]
 800d134:	6923      	ldr	r3, [r4, #16]
 800d136:	b953      	cbnz	r3, 800d14e <__swsetup_r+0xc6>
 800d138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d13c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800d140:	d1ba      	bne.n	800d0b8 <__swsetup_r+0x30>
 800d142:	bd70      	pop	{r4, r5, r6, pc}
 800d144:	0792      	lsls	r2, r2, #30
 800d146:	bf58      	it	pl
 800d148:	6963      	ldrpl	r3, [r4, #20]
 800d14a:	60a3      	str	r3, [r4, #8]
 800d14c:	e7f2      	b.n	800d134 <__swsetup_r+0xac>
 800d14e:	2000      	movs	r0, #0
 800d150:	e7f7      	b.n	800d142 <__swsetup_r+0xba>
 800d152:	bf00      	nop
 800d154:	20000018 	.word	0x20000018
 800d158:	0800d698 	.word	0x0800d698
 800d15c:	0800d6b8 	.word	0x0800d6b8
 800d160:	0800d678 	.word	0x0800d678

0800d164 <_close_r>:
 800d164:	b538      	push	{r3, r4, r5, lr}
 800d166:	4c06      	ldr	r4, [pc, #24]	; (800d180 <_close_r+0x1c>)
 800d168:	2300      	movs	r3, #0
 800d16a:	4605      	mov	r5, r0
 800d16c:	4608      	mov	r0, r1
 800d16e:	6023      	str	r3, [r4, #0]
 800d170:	f7f7 fbf7 	bl	8004962 <_close>
 800d174:	1c43      	adds	r3, r0, #1
 800d176:	d102      	bne.n	800d17e <_close_r+0x1a>
 800d178:	6823      	ldr	r3, [r4, #0]
 800d17a:	b103      	cbz	r3, 800d17e <_close_r+0x1a>
 800d17c:	602b      	str	r3, [r5, #0]
 800d17e:	bd38      	pop	{r3, r4, r5, pc}
 800d180:	200137cc 	.word	0x200137cc

0800d184 <__sflush_r>:
 800d184:	898a      	ldrh	r2, [r1, #12]
 800d186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d18a:	4605      	mov	r5, r0
 800d18c:	0710      	lsls	r0, r2, #28
 800d18e:	460c      	mov	r4, r1
 800d190:	d458      	bmi.n	800d244 <__sflush_r+0xc0>
 800d192:	684b      	ldr	r3, [r1, #4]
 800d194:	2b00      	cmp	r3, #0
 800d196:	dc05      	bgt.n	800d1a4 <__sflush_r+0x20>
 800d198:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	dc02      	bgt.n	800d1a4 <__sflush_r+0x20>
 800d19e:	2000      	movs	r0, #0
 800d1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d1a6:	2e00      	cmp	r6, #0
 800d1a8:	d0f9      	beq.n	800d19e <__sflush_r+0x1a>
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d1b0:	682f      	ldr	r7, [r5, #0]
 800d1b2:	6a21      	ldr	r1, [r4, #32]
 800d1b4:	602b      	str	r3, [r5, #0]
 800d1b6:	d032      	beq.n	800d21e <__sflush_r+0x9a>
 800d1b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d1ba:	89a3      	ldrh	r3, [r4, #12]
 800d1bc:	075a      	lsls	r2, r3, #29
 800d1be:	d505      	bpl.n	800d1cc <__sflush_r+0x48>
 800d1c0:	6863      	ldr	r3, [r4, #4]
 800d1c2:	1ac0      	subs	r0, r0, r3
 800d1c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d1c6:	b10b      	cbz	r3, 800d1cc <__sflush_r+0x48>
 800d1c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d1ca:	1ac0      	subs	r0, r0, r3
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	4602      	mov	r2, r0
 800d1d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d1d2:	6a21      	ldr	r1, [r4, #32]
 800d1d4:	4628      	mov	r0, r5
 800d1d6:	47b0      	blx	r6
 800d1d8:	1c43      	adds	r3, r0, #1
 800d1da:	89a3      	ldrh	r3, [r4, #12]
 800d1dc:	d106      	bne.n	800d1ec <__sflush_r+0x68>
 800d1de:	6829      	ldr	r1, [r5, #0]
 800d1e0:	291d      	cmp	r1, #29
 800d1e2:	d848      	bhi.n	800d276 <__sflush_r+0xf2>
 800d1e4:	4a29      	ldr	r2, [pc, #164]	; (800d28c <__sflush_r+0x108>)
 800d1e6:	40ca      	lsrs	r2, r1
 800d1e8:	07d6      	lsls	r6, r2, #31
 800d1ea:	d544      	bpl.n	800d276 <__sflush_r+0xf2>
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	6062      	str	r2, [r4, #4]
 800d1f0:	04d9      	lsls	r1, r3, #19
 800d1f2:	6922      	ldr	r2, [r4, #16]
 800d1f4:	6022      	str	r2, [r4, #0]
 800d1f6:	d504      	bpl.n	800d202 <__sflush_r+0x7e>
 800d1f8:	1c42      	adds	r2, r0, #1
 800d1fa:	d101      	bne.n	800d200 <__sflush_r+0x7c>
 800d1fc:	682b      	ldr	r3, [r5, #0]
 800d1fe:	b903      	cbnz	r3, 800d202 <__sflush_r+0x7e>
 800d200:	6560      	str	r0, [r4, #84]	; 0x54
 800d202:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d204:	602f      	str	r7, [r5, #0]
 800d206:	2900      	cmp	r1, #0
 800d208:	d0c9      	beq.n	800d19e <__sflush_r+0x1a>
 800d20a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d20e:	4299      	cmp	r1, r3
 800d210:	d002      	beq.n	800d218 <__sflush_r+0x94>
 800d212:	4628      	mov	r0, r5
 800d214:	f7fd fc88 	bl	800ab28 <_free_r>
 800d218:	2000      	movs	r0, #0
 800d21a:	6360      	str	r0, [r4, #52]	; 0x34
 800d21c:	e7c0      	b.n	800d1a0 <__sflush_r+0x1c>
 800d21e:	2301      	movs	r3, #1
 800d220:	4628      	mov	r0, r5
 800d222:	47b0      	blx	r6
 800d224:	1c41      	adds	r1, r0, #1
 800d226:	d1c8      	bne.n	800d1ba <__sflush_r+0x36>
 800d228:	682b      	ldr	r3, [r5, #0]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d0c5      	beq.n	800d1ba <__sflush_r+0x36>
 800d22e:	2b1d      	cmp	r3, #29
 800d230:	d001      	beq.n	800d236 <__sflush_r+0xb2>
 800d232:	2b16      	cmp	r3, #22
 800d234:	d101      	bne.n	800d23a <__sflush_r+0xb6>
 800d236:	602f      	str	r7, [r5, #0]
 800d238:	e7b1      	b.n	800d19e <__sflush_r+0x1a>
 800d23a:	89a3      	ldrh	r3, [r4, #12]
 800d23c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d240:	81a3      	strh	r3, [r4, #12]
 800d242:	e7ad      	b.n	800d1a0 <__sflush_r+0x1c>
 800d244:	690f      	ldr	r7, [r1, #16]
 800d246:	2f00      	cmp	r7, #0
 800d248:	d0a9      	beq.n	800d19e <__sflush_r+0x1a>
 800d24a:	0793      	lsls	r3, r2, #30
 800d24c:	680e      	ldr	r6, [r1, #0]
 800d24e:	bf08      	it	eq
 800d250:	694b      	ldreq	r3, [r1, #20]
 800d252:	600f      	str	r7, [r1, #0]
 800d254:	bf18      	it	ne
 800d256:	2300      	movne	r3, #0
 800d258:	eba6 0807 	sub.w	r8, r6, r7
 800d25c:	608b      	str	r3, [r1, #8]
 800d25e:	f1b8 0f00 	cmp.w	r8, #0
 800d262:	dd9c      	ble.n	800d19e <__sflush_r+0x1a>
 800d264:	4643      	mov	r3, r8
 800d266:	463a      	mov	r2, r7
 800d268:	6a21      	ldr	r1, [r4, #32]
 800d26a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d26c:	4628      	mov	r0, r5
 800d26e:	47b0      	blx	r6
 800d270:	2800      	cmp	r0, #0
 800d272:	dc06      	bgt.n	800d282 <__sflush_r+0xfe>
 800d274:	89a3      	ldrh	r3, [r4, #12]
 800d276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d27a:	81a3      	strh	r3, [r4, #12]
 800d27c:	f04f 30ff 	mov.w	r0, #4294967295
 800d280:	e78e      	b.n	800d1a0 <__sflush_r+0x1c>
 800d282:	4407      	add	r7, r0
 800d284:	eba8 0800 	sub.w	r8, r8, r0
 800d288:	e7e9      	b.n	800d25e <__sflush_r+0xda>
 800d28a:	bf00      	nop
 800d28c:	20400001 	.word	0x20400001

0800d290 <_fflush_r>:
 800d290:	b538      	push	{r3, r4, r5, lr}
 800d292:	690b      	ldr	r3, [r1, #16]
 800d294:	4605      	mov	r5, r0
 800d296:	460c      	mov	r4, r1
 800d298:	b1db      	cbz	r3, 800d2d2 <_fflush_r+0x42>
 800d29a:	b118      	cbz	r0, 800d2a4 <_fflush_r+0x14>
 800d29c:	6983      	ldr	r3, [r0, #24]
 800d29e:	b90b      	cbnz	r3, 800d2a4 <_fflush_r+0x14>
 800d2a0:	f7ff f82a 	bl	800c2f8 <__sinit>
 800d2a4:	4b0c      	ldr	r3, [pc, #48]	; (800d2d8 <_fflush_r+0x48>)
 800d2a6:	429c      	cmp	r4, r3
 800d2a8:	d109      	bne.n	800d2be <_fflush_r+0x2e>
 800d2aa:	686c      	ldr	r4, [r5, #4]
 800d2ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2b0:	b17b      	cbz	r3, 800d2d2 <_fflush_r+0x42>
 800d2b2:	4621      	mov	r1, r4
 800d2b4:	4628      	mov	r0, r5
 800d2b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2ba:	f7ff bf63 	b.w	800d184 <__sflush_r>
 800d2be:	4b07      	ldr	r3, [pc, #28]	; (800d2dc <_fflush_r+0x4c>)
 800d2c0:	429c      	cmp	r4, r3
 800d2c2:	d101      	bne.n	800d2c8 <_fflush_r+0x38>
 800d2c4:	68ac      	ldr	r4, [r5, #8]
 800d2c6:	e7f1      	b.n	800d2ac <_fflush_r+0x1c>
 800d2c8:	4b05      	ldr	r3, [pc, #20]	; (800d2e0 <_fflush_r+0x50>)
 800d2ca:	429c      	cmp	r4, r3
 800d2cc:	bf08      	it	eq
 800d2ce:	68ec      	ldreq	r4, [r5, #12]
 800d2d0:	e7ec      	b.n	800d2ac <_fflush_r+0x1c>
 800d2d2:	2000      	movs	r0, #0
 800d2d4:	bd38      	pop	{r3, r4, r5, pc}
 800d2d6:	bf00      	nop
 800d2d8:	0800d698 	.word	0x0800d698
 800d2dc:	0800d6b8 	.word	0x0800d6b8
 800d2e0:	0800d678 	.word	0x0800d678

0800d2e4 <_lseek_r>:
 800d2e4:	b538      	push	{r3, r4, r5, lr}
 800d2e6:	4c07      	ldr	r4, [pc, #28]	; (800d304 <_lseek_r+0x20>)
 800d2e8:	4605      	mov	r5, r0
 800d2ea:	4608      	mov	r0, r1
 800d2ec:	4611      	mov	r1, r2
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	6022      	str	r2, [r4, #0]
 800d2f2:	461a      	mov	r2, r3
 800d2f4:	f7f7 fb5c 	bl	80049b0 <_lseek>
 800d2f8:	1c43      	adds	r3, r0, #1
 800d2fa:	d102      	bne.n	800d302 <_lseek_r+0x1e>
 800d2fc:	6823      	ldr	r3, [r4, #0]
 800d2fe:	b103      	cbz	r3, 800d302 <_lseek_r+0x1e>
 800d300:	602b      	str	r3, [r5, #0]
 800d302:	bd38      	pop	{r3, r4, r5, pc}
 800d304:	200137cc 	.word	0x200137cc

0800d308 <__swhatbuf_r>:
 800d308:	b570      	push	{r4, r5, r6, lr}
 800d30a:	460e      	mov	r6, r1
 800d30c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d310:	2900      	cmp	r1, #0
 800d312:	b096      	sub	sp, #88	; 0x58
 800d314:	4614      	mov	r4, r2
 800d316:	461d      	mov	r5, r3
 800d318:	da07      	bge.n	800d32a <__swhatbuf_r+0x22>
 800d31a:	2300      	movs	r3, #0
 800d31c:	602b      	str	r3, [r5, #0]
 800d31e:	89b3      	ldrh	r3, [r6, #12]
 800d320:	061a      	lsls	r2, r3, #24
 800d322:	d410      	bmi.n	800d346 <__swhatbuf_r+0x3e>
 800d324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d328:	e00e      	b.n	800d348 <__swhatbuf_r+0x40>
 800d32a:	466a      	mov	r2, sp
 800d32c:	f000 f8c2 	bl	800d4b4 <_fstat_r>
 800d330:	2800      	cmp	r0, #0
 800d332:	dbf2      	blt.n	800d31a <__swhatbuf_r+0x12>
 800d334:	9a01      	ldr	r2, [sp, #4]
 800d336:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d33a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d33e:	425a      	negs	r2, r3
 800d340:	415a      	adcs	r2, r3
 800d342:	602a      	str	r2, [r5, #0]
 800d344:	e7ee      	b.n	800d324 <__swhatbuf_r+0x1c>
 800d346:	2340      	movs	r3, #64	; 0x40
 800d348:	2000      	movs	r0, #0
 800d34a:	6023      	str	r3, [r4, #0]
 800d34c:	b016      	add	sp, #88	; 0x58
 800d34e:	bd70      	pop	{r4, r5, r6, pc}

0800d350 <__smakebuf_r>:
 800d350:	898b      	ldrh	r3, [r1, #12]
 800d352:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d354:	079d      	lsls	r5, r3, #30
 800d356:	4606      	mov	r6, r0
 800d358:	460c      	mov	r4, r1
 800d35a:	d507      	bpl.n	800d36c <__smakebuf_r+0x1c>
 800d35c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d360:	6023      	str	r3, [r4, #0]
 800d362:	6123      	str	r3, [r4, #16]
 800d364:	2301      	movs	r3, #1
 800d366:	6163      	str	r3, [r4, #20]
 800d368:	b002      	add	sp, #8
 800d36a:	bd70      	pop	{r4, r5, r6, pc}
 800d36c:	ab01      	add	r3, sp, #4
 800d36e:	466a      	mov	r2, sp
 800d370:	f7ff ffca 	bl	800d308 <__swhatbuf_r>
 800d374:	9900      	ldr	r1, [sp, #0]
 800d376:	4605      	mov	r5, r0
 800d378:	4630      	mov	r0, r6
 800d37a:	f7fd fc23 	bl	800abc4 <_malloc_r>
 800d37e:	b948      	cbnz	r0, 800d394 <__smakebuf_r+0x44>
 800d380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d384:	059a      	lsls	r2, r3, #22
 800d386:	d4ef      	bmi.n	800d368 <__smakebuf_r+0x18>
 800d388:	f023 0303 	bic.w	r3, r3, #3
 800d38c:	f043 0302 	orr.w	r3, r3, #2
 800d390:	81a3      	strh	r3, [r4, #12]
 800d392:	e7e3      	b.n	800d35c <__smakebuf_r+0xc>
 800d394:	4b0d      	ldr	r3, [pc, #52]	; (800d3cc <__smakebuf_r+0x7c>)
 800d396:	62b3      	str	r3, [r6, #40]	; 0x28
 800d398:	89a3      	ldrh	r3, [r4, #12]
 800d39a:	6020      	str	r0, [r4, #0]
 800d39c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3a0:	81a3      	strh	r3, [r4, #12]
 800d3a2:	9b00      	ldr	r3, [sp, #0]
 800d3a4:	6163      	str	r3, [r4, #20]
 800d3a6:	9b01      	ldr	r3, [sp, #4]
 800d3a8:	6120      	str	r0, [r4, #16]
 800d3aa:	b15b      	cbz	r3, 800d3c4 <__smakebuf_r+0x74>
 800d3ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3b0:	4630      	mov	r0, r6
 800d3b2:	f000 f891 	bl	800d4d8 <_isatty_r>
 800d3b6:	b128      	cbz	r0, 800d3c4 <__smakebuf_r+0x74>
 800d3b8:	89a3      	ldrh	r3, [r4, #12]
 800d3ba:	f023 0303 	bic.w	r3, r3, #3
 800d3be:	f043 0301 	orr.w	r3, r3, #1
 800d3c2:	81a3      	strh	r3, [r4, #12]
 800d3c4:	89a3      	ldrh	r3, [r4, #12]
 800d3c6:	431d      	orrs	r5, r3
 800d3c8:	81a5      	strh	r5, [r4, #12]
 800d3ca:	e7cd      	b.n	800d368 <__smakebuf_r+0x18>
 800d3cc:	0800c2c1 	.word	0x0800c2c1

0800d3d0 <__ascii_mbtowc>:
 800d3d0:	b082      	sub	sp, #8
 800d3d2:	b901      	cbnz	r1, 800d3d6 <__ascii_mbtowc+0x6>
 800d3d4:	a901      	add	r1, sp, #4
 800d3d6:	b142      	cbz	r2, 800d3ea <__ascii_mbtowc+0x1a>
 800d3d8:	b14b      	cbz	r3, 800d3ee <__ascii_mbtowc+0x1e>
 800d3da:	7813      	ldrb	r3, [r2, #0]
 800d3dc:	600b      	str	r3, [r1, #0]
 800d3de:	7812      	ldrb	r2, [r2, #0]
 800d3e0:	1c10      	adds	r0, r2, #0
 800d3e2:	bf18      	it	ne
 800d3e4:	2001      	movne	r0, #1
 800d3e6:	b002      	add	sp, #8
 800d3e8:	4770      	bx	lr
 800d3ea:	4610      	mov	r0, r2
 800d3ec:	e7fb      	b.n	800d3e6 <__ascii_mbtowc+0x16>
 800d3ee:	f06f 0001 	mvn.w	r0, #1
 800d3f2:	e7f8      	b.n	800d3e6 <__ascii_mbtowc+0x16>

0800d3f4 <memmove>:
 800d3f4:	4288      	cmp	r0, r1
 800d3f6:	b510      	push	{r4, lr}
 800d3f8:	eb01 0302 	add.w	r3, r1, r2
 800d3fc:	d807      	bhi.n	800d40e <memmove+0x1a>
 800d3fe:	1e42      	subs	r2, r0, #1
 800d400:	4299      	cmp	r1, r3
 800d402:	d00a      	beq.n	800d41a <memmove+0x26>
 800d404:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d408:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d40c:	e7f8      	b.n	800d400 <memmove+0xc>
 800d40e:	4283      	cmp	r3, r0
 800d410:	d9f5      	bls.n	800d3fe <memmove+0xa>
 800d412:	1881      	adds	r1, r0, r2
 800d414:	1ad2      	subs	r2, r2, r3
 800d416:	42d3      	cmn	r3, r2
 800d418:	d100      	bne.n	800d41c <memmove+0x28>
 800d41a:	bd10      	pop	{r4, pc}
 800d41c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d420:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d424:	e7f7      	b.n	800d416 <memmove+0x22>

0800d426 <_realloc_r>:
 800d426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d428:	4607      	mov	r7, r0
 800d42a:	4614      	mov	r4, r2
 800d42c:	460e      	mov	r6, r1
 800d42e:	b921      	cbnz	r1, 800d43a <_realloc_r+0x14>
 800d430:	4611      	mov	r1, r2
 800d432:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d436:	f7fd bbc5 	b.w	800abc4 <_malloc_r>
 800d43a:	b922      	cbnz	r2, 800d446 <_realloc_r+0x20>
 800d43c:	f7fd fb74 	bl	800ab28 <_free_r>
 800d440:	4625      	mov	r5, r4
 800d442:	4628      	mov	r0, r5
 800d444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d446:	f000 f857 	bl	800d4f8 <_malloc_usable_size_r>
 800d44a:	42a0      	cmp	r0, r4
 800d44c:	d20f      	bcs.n	800d46e <_realloc_r+0x48>
 800d44e:	4621      	mov	r1, r4
 800d450:	4638      	mov	r0, r7
 800d452:	f7fd fbb7 	bl	800abc4 <_malloc_r>
 800d456:	4605      	mov	r5, r0
 800d458:	2800      	cmp	r0, #0
 800d45a:	d0f2      	beq.n	800d442 <_realloc_r+0x1c>
 800d45c:	4631      	mov	r1, r6
 800d45e:	4622      	mov	r2, r4
 800d460:	f7fe ffe2 	bl	800c428 <memcpy>
 800d464:	4631      	mov	r1, r6
 800d466:	4638      	mov	r0, r7
 800d468:	f7fd fb5e 	bl	800ab28 <_free_r>
 800d46c:	e7e9      	b.n	800d442 <_realloc_r+0x1c>
 800d46e:	4635      	mov	r5, r6
 800d470:	e7e7      	b.n	800d442 <_realloc_r+0x1c>
	...

0800d474 <_read_r>:
 800d474:	b538      	push	{r3, r4, r5, lr}
 800d476:	4c07      	ldr	r4, [pc, #28]	; (800d494 <_read_r+0x20>)
 800d478:	4605      	mov	r5, r0
 800d47a:	4608      	mov	r0, r1
 800d47c:	4611      	mov	r1, r2
 800d47e:	2200      	movs	r2, #0
 800d480:	6022      	str	r2, [r4, #0]
 800d482:	461a      	mov	r2, r3
 800d484:	f7f7 fa34 	bl	80048f0 <_read>
 800d488:	1c43      	adds	r3, r0, #1
 800d48a:	d102      	bne.n	800d492 <_read_r+0x1e>
 800d48c:	6823      	ldr	r3, [r4, #0]
 800d48e:	b103      	cbz	r3, 800d492 <_read_r+0x1e>
 800d490:	602b      	str	r3, [r5, #0]
 800d492:	bd38      	pop	{r3, r4, r5, pc}
 800d494:	200137cc 	.word	0x200137cc

0800d498 <__ascii_wctomb>:
 800d498:	b149      	cbz	r1, 800d4ae <__ascii_wctomb+0x16>
 800d49a:	2aff      	cmp	r2, #255	; 0xff
 800d49c:	bf85      	ittet	hi
 800d49e:	238a      	movhi	r3, #138	; 0x8a
 800d4a0:	6003      	strhi	r3, [r0, #0]
 800d4a2:	700a      	strbls	r2, [r1, #0]
 800d4a4:	f04f 30ff 	movhi.w	r0, #4294967295
 800d4a8:	bf98      	it	ls
 800d4aa:	2001      	movls	r0, #1
 800d4ac:	4770      	bx	lr
 800d4ae:	4608      	mov	r0, r1
 800d4b0:	4770      	bx	lr
	...

0800d4b4 <_fstat_r>:
 800d4b4:	b538      	push	{r3, r4, r5, lr}
 800d4b6:	4c07      	ldr	r4, [pc, #28]	; (800d4d4 <_fstat_r+0x20>)
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	4605      	mov	r5, r0
 800d4bc:	4608      	mov	r0, r1
 800d4be:	4611      	mov	r1, r2
 800d4c0:	6023      	str	r3, [r4, #0]
 800d4c2:	f7f7 fa5a 	bl	800497a <_fstat>
 800d4c6:	1c43      	adds	r3, r0, #1
 800d4c8:	d102      	bne.n	800d4d0 <_fstat_r+0x1c>
 800d4ca:	6823      	ldr	r3, [r4, #0]
 800d4cc:	b103      	cbz	r3, 800d4d0 <_fstat_r+0x1c>
 800d4ce:	602b      	str	r3, [r5, #0]
 800d4d0:	bd38      	pop	{r3, r4, r5, pc}
 800d4d2:	bf00      	nop
 800d4d4:	200137cc 	.word	0x200137cc

0800d4d8 <_isatty_r>:
 800d4d8:	b538      	push	{r3, r4, r5, lr}
 800d4da:	4c06      	ldr	r4, [pc, #24]	; (800d4f4 <_isatty_r+0x1c>)
 800d4dc:	2300      	movs	r3, #0
 800d4de:	4605      	mov	r5, r0
 800d4e0:	4608      	mov	r0, r1
 800d4e2:	6023      	str	r3, [r4, #0]
 800d4e4:	f7f7 fa59 	bl	800499a <_isatty>
 800d4e8:	1c43      	adds	r3, r0, #1
 800d4ea:	d102      	bne.n	800d4f2 <_isatty_r+0x1a>
 800d4ec:	6823      	ldr	r3, [r4, #0]
 800d4ee:	b103      	cbz	r3, 800d4f2 <_isatty_r+0x1a>
 800d4f0:	602b      	str	r3, [r5, #0]
 800d4f2:	bd38      	pop	{r3, r4, r5, pc}
 800d4f4:	200137cc 	.word	0x200137cc

0800d4f8 <_malloc_usable_size_r>:
 800d4f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4fc:	1f18      	subs	r0, r3, #4
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	bfbc      	itt	lt
 800d502:	580b      	ldrlt	r3, [r1, r0]
 800d504:	18c0      	addlt	r0, r0, r3
 800d506:	4770      	bx	lr

0800d508 <_init>:
 800d508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d50a:	bf00      	nop
 800d50c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d50e:	bc08      	pop	{r3}
 800d510:	469e      	mov	lr, r3
 800d512:	4770      	bx	lr

0800d514 <_fini>:
 800d514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d516:	bf00      	nop
 800d518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d51a:	bc08      	pop	{r3}
 800d51c:	469e      	mov	lr, r3
 800d51e:	4770      	bx	lr
